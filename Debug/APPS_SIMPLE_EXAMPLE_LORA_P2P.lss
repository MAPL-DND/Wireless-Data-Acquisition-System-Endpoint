
APPS_SIMPLE_EXAMPLE_LORA_P2P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00016fe0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00016fe0  00016fe0  00026fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000080  20000000  00016fe8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00030080  2**0
                  CONTENTS
  4 .bss          00003dc0  20000080  00017068  00030080  2**3
                  ALLOC
  5 .stack        00002000  20003e40  0001ae28  00030080  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
  8 .debug_info   00088949  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c543  00000000  00000000  000b8a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001aaed  00000000  00000000  000c4fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000017a8  00000000  00000000  000dfaad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002208  00000000  00000000  000e1255  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00019659  00000000  00000000  000e345d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00030cfb  00000000  00000000  000fcab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b50ed  00000000  00000000  0012d7b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004cd8  00000000  00000000  001e28a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 5e 00 20 b9 67 00 00 b5 67 00 00 b5 67 00 00     @^. .g...g...g..
	...
      2c:	b5 67 00 00 00 00 00 00 00 00 00 00 b5 67 00 00     .g...........g..
      3c:	b5 67 00 00 b5 67 00 00 b5 67 00 00 f5 53 00 00     .g...g...g...S..
      4c:	55 4d 00 00 b5 67 00 00 b5 67 00 00 b5 67 00 00     UM...g...g...g..
      5c:	b5 67 00 00 c1 56 00 00 d1 56 00 00 e1 56 00 00     .g...V...V...V..
      6c:	f1 56 00 00 01 57 00 00 11 57 00 00 b5 67 00 00     .V...W...W...g..
      7c:	b5 67 00 00 b5 67 00 00 89 63 00 00 99 63 00 00     .g...g...c...c..
      8c:	b5 67 00 00 b5 67 00 00 a9 63 00 00 05 4a 00 00     .g...g...c...J..
      9c:	b5 67 00 00 b5 67 00 00 b5 67 00 00 cd 4c 00 00     .g...g...g...L..
      ac:	b5 67 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .g..............
	...

00000400 <__d_nv_mem_start>:
     400:	ffffffff 	.word	0xffffffff
     404:	ffffffff 	.word	0xffffffff
     408:	ffffffff 	.word	0xffffffff
     40c:	ffffffff 	.word	0xffffffff
     410:	ffffffff 	.word	0xffffffff
     414:	ffffffff 	.word	0xffffffff
     418:	ffffffff 	.word	0xffffffff
     41c:	ffffffff 	.word	0xffffffff
     420:	ffffffff 	.word	0xffffffff
     424:	ffffffff 	.word	0xffffffff
     428:	ffffffff 	.word	0xffffffff
     42c:	ffffffff 	.word	0xffffffff
     430:	ffffffff 	.word	0xffffffff
     434:	ffffffff 	.word	0xffffffff
     438:	ffffffff 	.word	0xffffffff
     43c:	ffffffff 	.word	0xffffffff
     440:	ffffffff 	.word	0xffffffff
     444:	ffffffff 	.word	0xffffffff
     448:	ffffffff 	.word	0xffffffff
     44c:	ffffffff 	.word	0xffffffff
     450:	ffffffff 	.word	0xffffffff
     454:	ffffffff 	.word	0xffffffff
     458:	ffffffff 	.word	0xffffffff
     45c:	ffffffff 	.word	0xffffffff
     460:	ffffffff 	.word	0xffffffff
     464:	ffffffff 	.word	0xffffffff
     468:	ffffffff 	.word	0xffffffff
     46c:	ffffffff 	.word	0xffffffff
     470:	ffffffff 	.word	0xffffffff
     474:	ffffffff 	.word	0xffffffff
     478:	ffffffff 	.word	0xffffffff
     47c:	ffffffff 	.word	0xffffffff
     480:	ffffffff 	.word	0xffffffff
     484:	ffffffff 	.word	0xffffffff
     488:	ffffffff 	.word	0xffffffff
     48c:	ffffffff 	.word	0xffffffff
     490:	ffffffff 	.word	0xffffffff
     494:	ffffffff 	.word	0xffffffff
     498:	ffffffff 	.word	0xffffffff
     49c:	ffffffff 	.word	0xffffffff
     4a0:	ffffffff 	.word	0xffffffff
     4a4:	ffffffff 	.word	0xffffffff
     4a8:	ffffffff 	.word	0xffffffff
     4ac:	ffffffff 	.word	0xffffffff
     4b0:	ffffffff 	.word	0xffffffff
     4b4:	ffffffff 	.word	0xffffffff
     4b8:	ffffffff 	.word	0xffffffff
     4bc:	ffffffff 	.word	0xffffffff
     4c0:	ffffffff 	.word	0xffffffff
     4c4:	ffffffff 	.word	0xffffffff
     4c8:	ffffffff 	.word	0xffffffff
     4cc:	ffffffff 	.word	0xffffffff
     4d0:	ffffffff 	.word	0xffffffff
     4d4:	ffffffff 	.word	0xffffffff
     4d8:	ffffffff 	.word	0xffffffff
     4dc:	ffffffff 	.word	0xffffffff
     4e0:	ffffffff 	.word	0xffffffff
     4e4:	ffffffff 	.word	0xffffffff
     4e8:	ffffffff 	.word	0xffffffff
     4ec:	ffffffff 	.word	0xffffffff
     4f0:	ffffffff 	.word	0xffffffff
     4f4:	ffffffff 	.word	0xffffffff
     4f8:	ffffffff 	.word	0xffffffff
     4fc:	ffffffff 	.word	0xffffffff
     500:	ffffffff 	.word	0xffffffff
     504:	ffffffff 	.word	0xffffffff
     508:	ffffffff 	.word	0xffffffff
     50c:	ffffffff 	.word	0xffffffff
     510:	ffffffff 	.word	0xffffffff
     514:	ffffffff 	.word	0xffffffff
     518:	ffffffff 	.word	0xffffffff
     51c:	ffffffff 	.word	0xffffffff
     520:	ffffffff 	.word	0xffffffff
     524:	ffffffff 	.word	0xffffffff
     528:	ffffffff 	.word	0xffffffff
     52c:	ffffffff 	.word	0xffffffff
     530:	ffffffff 	.word	0xffffffff
     534:	ffffffff 	.word	0xffffffff
     538:	ffffffff 	.word	0xffffffff
     53c:	ffffffff 	.word	0xffffffff
     540:	ffffffff 	.word	0xffffffff
     544:	ffffffff 	.word	0xffffffff
     548:	ffffffff 	.word	0xffffffff
     54c:	ffffffff 	.word	0xffffffff
     550:	ffffffff 	.word	0xffffffff
     554:	ffffffff 	.word	0xffffffff
     558:	ffffffff 	.word	0xffffffff
     55c:	ffffffff 	.word	0xffffffff
     560:	ffffffff 	.word	0xffffffff
     564:	ffffffff 	.word	0xffffffff
     568:	ffffffff 	.word	0xffffffff
     56c:	ffffffff 	.word	0xffffffff
     570:	ffffffff 	.word	0xffffffff
     574:	ffffffff 	.word	0xffffffff
     578:	ffffffff 	.word	0xffffffff
     57c:	ffffffff 	.word	0xffffffff
     580:	ffffffff 	.word	0xffffffff
     584:	ffffffff 	.word	0xffffffff
     588:	ffffffff 	.word	0xffffffff
     58c:	ffffffff 	.word	0xffffffff
     590:	ffffffff 	.word	0xffffffff
     594:	ffffffff 	.word	0xffffffff
     598:	ffffffff 	.word	0xffffffff
     59c:	ffffffff 	.word	0xffffffff
     5a0:	ffffffff 	.word	0xffffffff
     5a4:	ffffffff 	.word	0xffffffff
     5a8:	ffffffff 	.word	0xffffffff
     5ac:	ffffffff 	.word	0xffffffff
     5b0:	ffffffff 	.word	0xffffffff
     5b4:	ffffffff 	.word	0xffffffff
     5b8:	ffffffff 	.word	0xffffffff
     5bc:	ffffffff 	.word	0xffffffff
     5c0:	ffffffff 	.word	0xffffffff
     5c4:	ffffffff 	.word	0xffffffff
     5c8:	ffffffff 	.word	0xffffffff
     5cc:	ffffffff 	.word	0xffffffff
     5d0:	ffffffff 	.word	0xffffffff
     5d4:	ffffffff 	.word	0xffffffff
     5d8:	ffffffff 	.word	0xffffffff
     5dc:	ffffffff 	.word	0xffffffff
     5e0:	ffffffff 	.word	0xffffffff
     5e4:	ffffffff 	.word	0xffffffff
     5e8:	ffffffff 	.word	0xffffffff
     5ec:	ffffffff 	.word	0xffffffff
     5f0:	ffffffff 	.word	0xffffffff
     5f4:	ffffffff 	.word	0xffffffff
     5f8:	ffffffff 	.word	0xffffffff
     5fc:	ffffffff 	.word	0xffffffff
     600:	ffffffff 	.word	0xffffffff
     604:	ffffffff 	.word	0xffffffff
     608:	ffffffff 	.word	0xffffffff
     60c:	ffffffff 	.word	0xffffffff
     610:	ffffffff 	.word	0xffffffff
     614:	ffffffff 	.word	0xffffffff
     618:	ffffffff 	.word	0xffffffff
     61c:	ffffffff 	.word	0xffffffff
     620:	ffffffff 	.word	0xffffffff
     624:	ffffffff 	.word	0xffffffff
     628:	ffffffff 	.word	0xffffffff
     62c:	ffffffff 	.word	0xffffffff
     630:	ffffffff 	.word	0xffffffff
     634:	ffffffff 	.word	0xffffffff
     638:	ffffffff 	.word	0xffffffff
     63c:	ffffffff 	.word	0xffffffff
     640:	ffffffff 	.word	0xffffffff
     644:	ffffffff 	.word	0xffffffff
     648:	ffffffff 	.word	0xffffffff
     64c:	ffffffff 	.word	0xffffffff
     650:	ffffffff 	.word	0xffffffff
     654:	ffffffff 	.word	0xffffffff
     658:	ffffffff 	.word	0xffffffff
     65c:	ffffffff 	.word	0xffffffff
     660:	ffffffff 	.word	0xffffffff
     664:	ffffffff 	.word	0xffffffff
     668:	ffffffff 	.word	0xffffffff
     66c:	ffffffff 	.word	0xffffffff
     670:	ffffffff 	.word	0xffffffff
     674:	ffffffff 	.word	0xffffffff
     678:	ffffffff 	.word	0xffffffff
     67c:	ffffffff 	.word	0xffffffff
     680:	ffffffff 	.word	0xffffffff
     684:	ffffffff 	.word	0xffffffff
     688:	ffffffff 	.word	0xffffffff
     68c:	ffffffff 	.word	0xffffffff
     690:	ffffffff 	.word	0xffffffff
     694:	ffffffff 	.word	0xffffffff
     698:	ffffffff 	.word	0xffffffff
     69c:	ffffffff 	.word	0xffffffff
     6a0:	ffffffff 	.word	0xffffffff
     6a4:	ffffffff 	.word	0xffffffff
     6a8:	ffffffff 	.word	0xffffffff
     6ac:	ffffffff 	.word	0xffffffff
     6b0:	ffffffff 	.word	0xffffffff
     6b4:	ffffffff 	.word	0xffffffff
     6b8:	ffffffff 	.word	0xffffffff
     6bc:	ffffffff 	.word	0xffffffff
     6c0:	ffffffff 	.word	0xffffffff
     6c4:	ffffffff 	.word	0xffffffff
     6c8:	ffffffff 	.word	0xffffffff
     6cc:	ffffffff 	.word	0xffffffff
     6d0:	ffffffff 	.word	0xffffffff
     6d4:	ffffffff 	.word	0xffffffff
     6d8:	ffffffff 	.word	0xffffffff
     6dc:	ffffffff 	.word	0xffffffff
     6e0:	ffffffff 	.word	0xffffffff
     6e4:	ffffffff 	.word	0xffffffff
     6e8:	ffffffff 	.word	0xffffffff
     6ec:	ffffffff 	.word	0xffffffff
     6f0:	ffffffff 	.word	0xffffffff
     6f4:	ffffffff 	.word	0xffffffff
     6f8:	ffffffff 	.word	0xffffffff
     6fc:	ffffffff 	.word	0xffffffff
     700:	ffffffff 	.word	0xffffffff
     704:	ffffffff 	.word	0xffffffff
     708:	ffffffff 	.word	0xffffffff
     70c:	ffffffff 	.word	0xffffffff
     710:	ffffffff 	.word	0xffffffff
     714:	ffffffff 	.word	0xffffffff
     718:	ffffffff 	.word	0xffffffff
     71c:	ffffffff 	.word	0xffffffff
     720:	ffffffff 	.word	0xffffffff
     724:	ffffffff 	.word	0xffffffff
     728:	ffffffff 	.word	0xffffffff
     72c:	ffffffff 	.word	0xffffffff
     730:	ffffffff 	.word	0xffffffff
     734:	ffffffff 	.word	0xffffffff
     738:	ffffffff 	.word	0xffffffff
     73c:	ffffffff 	.word	0xffffffff
     740:	ffffffff 	.word	0xffffffff
     744:	ffffffff 	.word	0xffffffff
     748:	ffffffff 	.word	0xffffffff
     74c:	ffffffff 	.word	0xffffffff
     750:	ffffffff 	.word	0xffffffff
     754:	ffffffff 	.word	0xffffffff
     758:	ffffffff 	.word	0xffffffff
     75c:	ffffffff 	.word	0xffffffff
     760:	ffffffff 	.word	0xffffffff
     764:	ffffffff 	.word	0xffffffff
     768:	ffffffff 	.word	0xffffffff
     76c:	ffffffff 	.word	0xffffffff
     770:	ffffffff 	.word	0xffffffff
     774:	ffffffff 	.word	0xffffffff
     778:	ffffffff 	.word	0xffffffff
     77c:	ffffffff 	.word	0xffffffff
     780:	ffffffff 	.word	0xffffffff
     784:	ffffffff 	.word	0xffffffff
     788:	ffffffff 	.word	0xffffffff
     78c:	ffffffff 	.word	0xffffffff
     790:	ffffffff 	.word	0xffffffff
     794:	ffffffff 	.word	0xffffffff
     798:	ffffffff 	.word	0xffffffff
     79c:	ffffffff 	.word	0xffffffff
     7a0:	ffffffff 	.word	0xffffffff
     7a4:	ffffffff 	.word	0xffffffff
     7a8:	ffffffff 	.word	0xffffffff
     7ac:	ffffffff 	.word	0xffffffff
     7b0:	ffffffff 	.word	0xffffffff
     7b4:	ffffffff 	.word	0xffffffff
     7b8:	ffffffff 	.word	0xffffffff
     7bc:	ffffffff 	.word	0xffffffff
     7c0:	ffffffff 	.word	0xffffffff
     7c4:	ffffffff 	.word	0xffffffff
     7c8:	ffffffff 	.word	0xffffffff
     7cc:	ffffffff 	.word	0xffffffff
     7d0:	ffffffff 	.word	0xffffffff
     7d4:	ffffffff 	.word	0xffffffff
     7d8:	ffffffff 	.word	0xffffffff
     7dc:	ffffffff 	.word	0xffffffff
     7e0:	ffffffff 	.word	0xffffffff
     7e4:	ffffffff 	.word	0xffffffff
     7e8:	ffffffff 	.word	0xffffffff
     7ec:	ffffffff 	.word	0xffffffff
     7f0:	ffffffff 	.word	0xffffffff
     7f4:	ffffffff 	.word	0xffffffff
     7f8:	ffffffff 	.word	0xffffffff
     7fc:	ffffffff 	.word	0xffffffff
     800:	ffffffff 	.word	0xffffffff
     804:	ffffffff 	.word	0xffffffff
     808:	ffffffff 	.word	0xffffffff
     80c:	ffffffff 	.word	0xffffffff
     810:	ffffffff 	.word	0xffffffff
     814:	ffffffff 	.word	0xffffffff
     818:	ffffffff 	.word	0xffffffff
     81c:	ffffffff 	.word	0xffffffff
     820:	ffffffff 	.word	0xffffffff
     824:	ffffffff 	.word	0xffffffff
     828:	ffffffff 	.word	0xffffffff
     82c:	ffffffff 	.word	0xffffffff
     830:	ffffffff 	.word	0xffffffff
     834:	ffffffff 	.word	0xffffffff
     838:	ffffffff 	.word	0xffffffff
     83c:	ffffffff 	.word	0xffffffff
     840:	ffffffff 	.word	0xffffffff
     844:	ffffffff 	.word	0xffffffff
     848:	ffffffff 	.word	0xffffffff
     84c:	ffffffff 	.word	0xffffffff
     850:	ffffffff 	.word	0xffffffff
     854:	ffffffff 	.word	0xffffffff
     858:	ffffffff 	.word	0xffffffff
     85c:	ffffffff 	.word	0xffffffff
     860:	ffffffff 	.word	0xffffffff
     864:	ffffffff 	.word	0xffffffff
     868:	ffffffff 	.word	0xffffffff
     86c:	ffffffff 	.word	0xffffffff
     870:	ffffffff 	.word	0xffffffff
     874:	ffffffff 	.word	0xffffffff
     878:	ffffffff 	.word	0xffffffff
     87c:	ffffffff 	.word	0xffffffff
     880:	ffffffff 	.word	0xffffffff
     884:	ffffffff 	.word	0xffffffff
     888:	ffffffff 	.word	0xffffffff
     88c:	ffffffff 	.word	0xffffffff
     890:	ffffffff 	.word	0xffffffff
     894:	ffffffff 	.word	0xffffffff
     898:	ffffffff 	.word	0xffffffff
     89c:	ffffffff 	.word	0xffffffff
     8a0:	ffffffff 	.word	0xffffffff
     8a4:	ffffffff 	.word	0xffffffff
     8a8:	ffffffff 	.word	0xffffffff
     8ac:	ffffffff 	.word	0xffffffff
     8b0:	ffffffff 	.word	0xffffffff
     8b4:	ffffffff 	.word	0xffffffff
     8b8:	ffffffff 	.word	0xffffffff
     8bc:	ffffffff 	.word	0xffffffff
     8c0:	ffffffff 	.word	0xffffffff
     8c4:	ffffffff 	.word	0xffffffff
     8c8:	ffffffff 	.word	0xffffffff
     8cc:	ffffffff 	.word	0xffffffff
     8d0:	ffffffff 	.word	0xffffffff
     8d4:	ffffffff 	.word	0xffffffff
     8d8:	ffffffff 	.word	0xffffffff
     8dc:	ffffffff 	.word	0xffffffff
     8e0:	ffffffff 	.word	0xffffffff
     8e4:	ffffffff 	.word	0xffffffff
     8e8:	ffffffff 	.word	0xffffffff
     8ec:	ffffffff 	.word	0xffffffff
     8f0:	ffffffff 	.word	0xffffffff
     8f4:	ffffffff 	.word	0xffffffff
     8f8:	ffffffff 	.word	0xffffffff
     8fc:	ffffffff 	.word	0xffffffff
     900:	ffffffff 	.word	0xffffffff
     904:	ffffffff 	.word	0xffffffff
     908:	ffffffff 	.word	0xffffffff
     90c:	ffffffff 	.word	0xffffffff
     910:	ffffffff 	.word	0xffffffff
     914:	ffffffff 	.word	0xffffffff
     918:	ffffffff 	.word	0xffffffff
     91c:	ffffffff 	.word	0xffffffff
     920:	ffffffff 	.word	0xffffffff
     924:	ffffffff 	.word	0xffffffff
     928:	ffffffff 	.word	0xffffffff
     92c:	ffffffff 	.word	0xffffffff
     930:	ffffffff 	.word	0xffffffff
     934:	ffffffff 	.word	0xffffffff
     938:	ffffffff 	.word	0xffffffff
     93c:	ffffffff 	.word	0xffffffff
     940:	ffffffff 	.word	0xffffffff
     944:	ffffffff 	.word	0xffffffff
     948:	ffffffff 	.word	0xffffffff
     94c:	ffffffff 	.word	0xffffffff
     950:	ffffffff 	.word	0xffffffff
     954:	ffffffff 	.word	0xffffffff
     958:	ffffffff 	.word	0xffffffff
     95c:	ffffffff 	.word	0xffffffff
     960:	ffffffff 	.word	0xffffffff
     964:	ffffffff 	.word	0xffffffff
     968:	ffffffff 	.word	0xffffffff
     96c:	ffffffff 	.word	0xffffffff
     970:	ffffffff 	.word	0xffffffff
     974:	ffffffff 	.word	0xffffffff
     978:	ffffffff 	.word	0xffffffff
     97c:	ffffffff 	.word	0xffffffff
     980:	ffffffff 	.word	0xffffffff
     984:	ffffffff 	.word	0xffffffff
     988:	ffffffff 	.word	0xffffffff
     98c:	ffffffff 	.word	0xffffffff
     990:	ffffffff 	.word	0xffffffff
     994:	ffffffff 	.word	0xffffffff
     998:	ffffffff 	.word	0xffffffff
     99c:	ffffffff 	.word	0xffffffff
     9a0:	ffffffff 	.word	0xffffffff
     9a4:	ffffffff 	.word	0xffffffff
     9a8:	ffffffff 	.word	0xffffffff
     9ac:	ffffffff 	.word	0xffffffff
     9b0:	ffffffff 	.word	0xffffffff
     9b4:	ffffffff 	.word	0xffffffff
     9b8:	ffffffff 	.word	0xffffffff
     9bc:	ffffffff 	.word	0xffffffff
     9c0:	ffffffff 	.word	0xffffffff
     9c4:	ffffffff 	.word	0xffffffff
     9c8:	ffffffff 	.word	0xffffffff
     9cc:	ffffffff 	.word	0xffffffff
     9d0:	ffffffff 	.word	0xffffffff
     9d4:	ffffffff 	.word	0xffffffff
     9d8:	ffffffff 	.word	0xffffffff
     9dc:	ffffffff 	.word	0xffffffff
     9e0:	ffffffff 	.word	0xffffffff
     9e4:	ffffffff 	.word	0xffffffff
     9e8:	ffffffff 	.word	0xffffffff
     9ec:	ffffffff 	.word	0xffffffff
     9f0:	ffffffff 	.word	0xffffffff
     9f4:	ffffffff 	.word	0xffffffff
     9f8:	ffffffff 	.word	0xffffffff
     9fc:	ffffffff 	.word	0xffffffff
     a00:	ffffffff 	.word	0xffffffff
     a04:	ffffffff 	.word	0xffffffff
     a08:	ffffffff 	.word	0xffffffff
     a0c:	ffffffff 	.word	0xffffffff
     a10:	ffffffff 	.word	0xffffffff
     a14:	ffffffff 	.word	0xffffffff
     a18:	ffffffff 	.word	0xffffffff
     a1c:	ffffffff 	.word	0xffffffff
     a20:	ffffffff 	.word	0xffffffff
     a24:	ffffffff 	.word	0xffffffff
     a28:	ffffffff 	.word	0xffffffff
     a2c:	ffffffff 	.word	0xffffffff
     a30:	ffffffff 	.word	0xffffffff
     a34:	ffffffff 	.word	0xffffffff
     a38:	ffffffff 	.word	0xffffffff
     a3c:	ffffffff 	.word	0xffffffff
     a40:	ffffffff 	.word	0xffffffff
     a44:	ffffffff 	.word	0xffffffff
     a48:	ffffffff 	.word	0xffffffff
     a4c:	ffffffff 	.word	0xffffffff
     a50:	ffffffff 	.word	0xffffffff
     a54:	ffffffff 	.word	0xffffffff
     a58:	ffffffff 	.word	0xffffffff
     a5c:	ffffffff 	.word	0xffffffff
     a60:	ffffffff 	.word	0xffffffff
     a64:	ffffffff 	.word	0xffffffff
     a68:	ffffffff 	.word	0xffffffff
     a6c:	ffffffff 	.word	0xffffffff
     a70:	ffffffff 	.word	0xffffffff
     a74:	ffffffff 	.word	0xffffffff
     a78:	ffffffff 	.word	0xffffffff
     a7c:	ffffffff 	.word	0xffffffff
     a80:	ffffffff 	.word	0xffffffff
     a84:	ffffffff 	.word	0xffffffff
     a88:	ffffffff 	.word	0xffffffff
     a8c:	ffffffff 	.word	0xffffffff
     a90:	ffffffff 	.word	0xffffffff
     a94:	ffffffff 	.word	0xffffffff
     a98:	ffffffff 	.word	0xffffffff
     a9c:	ffffffff 	.word	0xffffffff
     aa0:	ffffffff 	.word	0xffffffff
     aa4:	ffffffff 	.word	0xffffffff
     aa8:	ffffffff 	.word	0xffffffff
     aac:	ffffffff 	.word	0xffffffff
     ab0:	ffffffff 	.word	0xffffffff
     ab4:	ffffffff 	.word	0xffffffff
     ab8:	ffffffff 	.word	0xffffffff
     abc:	ffffffff 	.word	0xffffffff
     ac0:	ffffffff 	.word	0xffffffff
     ac4:	ffffffff 	.word	0xffffffff
     ac8:	ffffffff 	.word	0xffffffff
     acc:	ffffffff 	.word	0xffffffff
     ad0:	ffffffff 	.word	0xffffffff
     ad4:	ffffffff 	.word	0xffffffff
     ad8:	ffffffff 	.word	0xffffffff
     adc:	ffffffff 	.word	0xffffffff
     ae0:	ffffffff 	.word	0xffffffff
     ae4:	ffffffff 	.word	0xffffffff
     ae8:	ffffffff 	.word	0xffffffff
     aec:	ffffffff 	.word	0xffffffff
     af0:	ffffffff 	.word	0xffffffff
     af4:	ffffffff 	.word	0xffffffff
     af8:	ffffffff 	.word	0xffffffff
     afc:	ffffffff 	.word	0xffffffff
     b00:	ffffffff 	.word	0xffffffff
     b04:	ffffffff 	.word	0xffffffff
     b08:	ffffffff 	.word	0xffffffff
     b0c:	ffffffff 	.word	0xffffffff
     b10:	ffffffff 	.word	0xffffffff
     b14:	ffffffff 	.word	0xffffffff
     b18:	ffffffff 	.word	0xffffffff
     b1c:	ffffffff 	.word	0xffffffff
     b20:	ffffffff 	.word	0xffffffff
     b24:	ffffffff 	.word	0xffffffff
     b28:	ffffffff 	.word	0xffffffff
     b2c:	ffffffff 	.word	0xffffffff
     b30:	ffffffff 	.word	0xffffffff
     b34:	ffffffff 	.word	0xffffffff
     b38:	ffffffff 	.word	0xffffffff
     b3c:	ffffffff 	.word	0xffffffff
     b40:	ffffffff 	.word	0xffffffff
     b44:	ffffffff 	.word	0xffffffff
     b48:	ffffffff 	.word	0xffffffff
     b4c:	ffffffff 	.word	0xffffffff
     b50:	ffffffff 	.word	0xffffffff
     b54:	ffffffff 	.word	0xffffffff
     b58:	ffffffff 	.word	0xffffffff
     b5c:	ffffffff 	.word	0xffffffff
     b60:	ffffffff 	.word	0xffffffff
     b64:	ffffffff 	.word	0xffffffff
     b68:	ffffffff 	.word	0xffffffff
     b6c:	ffffffff 	.word	0xffffffff
     b70:	ffffffff 	.word	0xffffffff
     b74:	ffffffff 	.word	0xffffffff
     b78:	ffffffff 	.word	0xffffffff
     b7c:	ffffffff 	.word	0xffffffff
     b80:	ffffffff 	.word	0xffffffff
     b84:	ffffffff 	.word	0xffffffff
     b88:	ffffffff 	.word	0xffffffff
     b8c:	ffffffff 	.word	0xffffffff
     b90:	ffffffff 	.word	0xffffffff
     b94:	ffffffff 	.word	0xffffffff
     b98:	ffffffff 	.word	0xffffffff
     b9c:	ffffffff 	.word	0xffffffff
     ba0:	ffffffff 	.word	0xffffffff
     ba4:	ffffffff 	.word	0xffffffff
     ba8:	ffffffff 	.word	0xffffffff
     bac:	ffffffff 	.word	0xffffffff
     bb0:	ffffffff 	.word	0xffffffff
     bb4:	ffffffff 	.word	0xffffffff
     bb8:	ffffffff 	.word	0xffffffff
     bbc:	ffffffff 	.word	0xffffffff
     bc0:	ffffffff 	.word	0xffffffff
     bc4:	ffffffff 	.word	0xffffffff
     bc8:	ffffffff 	.word	0xffffffff
     bcc:	ffffffff 	.word	0xffffffff
     bd0:	ffffffff 	.word	0xffffffff
     bd4:	ffffffff 	.word	0xffffffff
     bd8:	ffffffff 	.word	0xffffffff
     bdc:	ffffffff 	.word	0xffffffff
     be0:	ffffffff 	.word	0xffffffff
     be4:	ffffffff 	.word	0xffffffff
     be8:	ffffffff 	.word	0xffffffff
     bec:	ffffffff 	.word	0xffffffff
     bf0:	ffffffff 	.word	0xffffffff
     bf4:	ffffffff 	.word	0xffffffff
     bf8:	ffffffff 	.word	0xffffffff
     bfc:	ffffffff 	.word	0xffffffff
     c00:	ffffffff 	.word	0xffffffff
     c04:	ffffffff 	.word	0xffffffff
     c08:	ffffffff 	.word	0xffffffff
     c0c:	ffffffff 	.word	0xffffffff
     c10:	ffffffff 	.word	0xffffffff
     c14:	ffffffff 	.word	0xffffffff
     c18:	ffffffff 	.word	0xffffffff
     c1c:	ffffffff 	.word	0xffffffff
     c20:	ffffffff 	.word	0xffffffff
     c24:	ffffffff 	.word	0xffffffff
     c28:	ffffffff 	.word	0xffffffff
     c2c:	ffffffff 	.word	0xffffffff
     c30:	ffffffff 	.word	0xffffffff
     c34:	ffffffff 	.word	0xffffffff
     c38:	ffffffff 	.word	0xffffffff
     c3c:	ffffffff 	.word	0xffffffff
     c40:	ffffffff 	.word	0xffffffff
     c44:	ffffffff 	.word	0xffffffff
     c48:	ffffffff 	.word	0xffffffff
     c4c:	ffffffff 	.word	0xffffffff
     c50:	ffffffff 	.word	0xffffffff
     c54:	ffffffff 	.word	0xffffffff
     c58:	ffffffff 	.word	0xffffffff
     c5c:	ffffffff 	.word	0xffffffff
     c60:	ffffffff 	.word	0xffffffff
     c64:	ffffffff 	.word	0xffffffff
     c68:	ffffffff 	.word	0xffffffff
     c6c:	ffffffff 	.word	0xffffffff
     c70:	ffffffff 	.word	0xffffffff
     c74:	ffffffff 	.word	0xffffffff
     c78:	ffffffff 	.word	0xffffffff
     c7c:	ffffffff 	.word	0xffffffff
     c80:	ffffffff 	.word	0xffffffff
     c84:	ffffffff 	.word	0xffffffff
     c88:	ffffffff 	.word	0xffffffff
     c8c:	ffffffff 	.word	0xffffffff
     c90:	ffffffff 	.word	0xffffffff
     c94:	ffffffff 	.word	0xffffffff
     c98:	ffffffff 	.word	0xffffffff
     c9c:	ffffffff 	.word	0xffffffff
     ca0:	ffffffff 	.word	0xffffffff
     ca4:	ffffffff 	.word	0xffffffff
     ca8:	ffffffff 	.word	0xffffffff
     cac:	ffffffff 	.word	0xffffffff
     cb0:	ffffffff 	.word	0xffffffff
     cb4:	ffffffff 	.word	0xffffffff
     cb8:	ffffffff 	.word	0xffffffff
     cbc:	ffffffff 	.word	0xffffffff
     cc0:	ffffffff 	.word	0xffffffff
     cc4:	ffffffff 	.word	0xffffffff
     cc8:	ffffffff 	.word	0xffffffff
     ccc:	ffffffff 	.word	0xffffffff
     cd0:	ffffffff 	.word	0xffffffff
     cd4:	ffffffff 	.word	0xffffffff
     cd8:	ffffffff 	.word	0xffffffff
     cdc:	ffffffff 	.word	0xffffffff
     ce0:	ffffffff 	.word	0xffffffff
     ce4:	ffffffff 	.word	0xffffffff
     ce8:	ffffffff 	.word	0xffffffff
     cec:	ffffffff 	.word	0xffffffff
     cf0:	ffffffff 	.word	0xffffffff
     cf4:	ffffffff 	.word	0xffffffff
     cf8:	ffffffff 	.word	0xffffffff
     cfc:	ffffffff 	.word	0xffffffff
     d00:	ffffffff 	.word	0xffffffff
     d04:	ffffffff 	.word	0xffffffff
     d08:	ffffffff 	.word	0xffffffff
     d0c:	ffffffff 	.word	0xffffffff
     d10:	ffffffff 	.word	0xffffffff
     d14:	ffffffff 	.word	0xffffffff
     d18:	ffffffff 	.word	0xffffffff
     d1c:	ffffffff 	.word	0xffffffff
     d20:	ffffffff 	.word	0xffffffff
     d24:	ffffffff 	.word	0xffffffff
     d28:	ffffffff 	.word	0xffffffff
     d2c:	ffffffff 	.word	0xffffffff
     d30:	ffffffff 	.word	0xffffffff
     d34:	ffffffff 	.word	0xffffffff
     d38:	ffffffff 	.word	0xffffffff
     d3c:	ffffffff 	.word	0xffffffff
     d40:	ffffffff 	.word	0xffffffff
     d44:	ffffffff 	.word	0xffffffff
     d48:	ffffffff 	.word	0xffffffff
     d4c:	ffffffff 	.word	0xffffffff
     d50:	ffffffff 	.word	0xffffffff
     d54:	ffffffff 	.word	0xffffffff
     d58:	ffffffff 	.word	0xffffffff
     d5c:	ffffffff 	.word	0xffffffff
     d60:	ffffffff 	.word	0xffffffff
     d64:	ffffffff 	.word	0xffffffff
     d68:	ffffffff 	.word	0xffffffff
     d6c:	ffffffff 	.word	0xffffffff
     d70:	ffffffff 	.word	0xffffffff
     d74:	ffffffff 	.word	0xffffffff
     d78:	ffffffff 	.word	0xffffffff
     d7c:	ffffffff 	.word	0xffffffff
     d80:	ffffffff 	.word	0xffffffff
     d84:	ffffffff 	.word	0xffffffff
     d88:	ffffffff 	.word	0xffffffff
     d8c:	ffffffff 	.word	0xffffffff
     d90:	ffffffff 	.word	0xffffffff
     d94:	ffffffff 	.word	0xffffffff
     d98:	ffffffff 	.word	0xffffffff
     d9c:	ffffffff 	.word	0xffffffff
     da0:	ffffffff 	.word	0xffffffff
     da4:	ffffffff 	.word	0xffffffff
     da8:	ffffffff 	.word	0xffffffff
     dac:	ffffffff 	.word	0xffffffff
     db0:	ffffffff 	.word	0xffffffff
     db4:	ffffffff 	.word	0xffffffff
     db8:	ffffffff 	.word	0xffffffff
     dbc:	ffffffff 	.word	0xffffffff
     dc0:	ffffffff 	.word	0xffffffff
     dc4:	ffffffff 	.word	0xffffffff
     dc8:	ffffffff 	.word	0xffffffff
     dcc:	ffffffff 	.word	0xffffffff
     dd0:	ffffffff 	.word	0xffffffff
     dd4:	ffffffff 	.word	0xffffffff
     dd8:	ffffffff 	.word	0xffffffff
     ddc:	ffffffff 	.word	0xffffffff
     de0:	ffffffff 	.word	0xffffffff
     de4:	ffffffff 	.word	0xffffffff
     de8:	ffffffff 	.word	0xffffffff
     dec:	ffffffff 	.word	0xffffffff
     df0:	ffffffff 	.word	0xffffffff
     df4:	ffffffff 	.word	0xffffffff
     df8:	ffffffff 	.word	0xffffffff
     dfc:	ffffffff 	.word	0xffffffff
     e00:	ffffffff 	.word	0xffffffff
     e04:	ffffffff 	.word	0xffffffff
     e08:	ffffffff 	.word	0xffffffff
     e0c:	ffffffff 	.word	0xffffffff
     e10:	ffffffff 	.word	0xffffffff
     e14:	ffffffff 	.word	0xffffffff
     e18:	ffffffff 	.word	0xffffffff
     e1c:	ffffffff 	.word	0xffffffff
     e20:	ffffffff 	.word	0xffffffff
     e24:	ffffffff 	.word	0xffffffff
     e28:	ffffffff 	.word	0xffffffff
     e2c:	ffffffff 	.word	0xffffffff
     e30:	ffffffff 	.word	0xffffffff
     e34:	ffffffff 	.word	0xffffffff
     e38:	ffffffff 	.word	0xffffffff
     e3c:	ffffffff 	.word	0xffffffff
     e40:	ffffffff 	.word	0xffffffff
     e44:	ffffffff 	.word	0xffffffff
     e48:	ffffffff 	.word	0xffffffff
     e4c:	ffffffff 	.word	0xffffffff
     e50:	ffffffff 	.word	0xffffffff
     e54:	ffffffff 	.word	0xffffffff
     e58:	ffffffff 	.word	0xffffffff
     e5c:	ffffffff 	.word	0xffffffff
     e60:	ffffffff 	.word	0xffffffff
     e64:	ffffffff 	.word	0xffffffff
     e68:	ffffffff 	.word	0xffffffff
     e6c:	ffffffff 	.word	0xffffffff
     e70:	ffffffff 	.word	0xffffffff
     e74:	ffffffff 	.word	0xffffffff
     e78:	ffffffff 	.word	0xffffffff
     e7c:	ffffffff 	.word	0xffffffff
     e80:	ffffffff 	.word	0xffffffff
     e84:	ffffffff 	.word	0xffffffff
     e88:	ffffffff 	.word	0xffffffff
     e8c:	ffffffff 	.word	0xffffffff
     e90:	ffffffff 	.word	0xffffffff
     e94:	ffffffff 	.word	0xffffffff
     e98:	ffffffff 	.word	0xffffffff
     e9c:	ffffffff 	.word	0xffffffff
     ea0:	ffffffff 	.word	0xffffffff
     ea4:	ffffffff 	.word	0xffffffff
     ea8:	ffffffff 	.word	0xffffffff
     eac:	ffffffff 	.word	0xffffffff
     eb0:	ffffffff 	.word	0xffffffff
     eb4:	ffffffff 	.word	0xffffffff
     eb8:	ffffffff 	.word	0xffffffff
     ebc:	ffffffff 	.word	0xffffffff
     ec0:	ffffffff 	.word	0xffffffff
     ec4:	ffffffff 	.word	0xffffffff
     ec8:	ffffffff 	.word	0xffffffff
     ecc:	ffffffff 	.word	0xffffffff
     ed0:	ffffffff 	.word	0xffffffff
     ed4:	ffffffff 	.word	0xffffffff
     ed8:	ffffffff 	.word	0xffffffff
     edc:	ffffffff 	.word	0xffffffff
     ee0:	ffffffff 	.word	0xffffffff
     ee4:	ffffffff 	.word	0xffffffff
     ee8:	ffffffff 	.word	0xffffffff
     eec:	ffffffff 	.word	0xffffffff
     ef0:	ffffffff 	.word	0xffffffff
     ef4:	ffffffff 	.word	0xffffffff
     ef8:	ffffffff 	.word	0xffffffff
     efc:	ffffffff 	.word	0xffffffff
     f00:	ffffffff 	.word	0xffffffff
     f04:	ffffffff 	.word	0xffffffff
     f08:	ffffffff 	.word	0xffffffff
     f0c:	ffffffff 	.word	0xffffffff
     f10:	ffffffff 	.word	0xffffffff
     f14:	ffffffff 	.word	0xffffffff
     f18:	ffffffff 	.word	0xffffffff
     f1c:	ffffffff 	.word	0xffffffff
     f20:	ffffffff 	.word	0xffffffff
     f24:	ffffffff 	.word	0xffffffff
     f28:	ffffffff 	.word	0xffffffff
     f2c:	ffffffff 	.word	0xffffffff
     f30:	ffffffff 	.word	0xffffffff
     f34:	ffffffff 	.word	0xffffffff
     f38:	ffffffff 	.word	0xffffffff
     f3c:	ffffffff 	.word	0xffffffff
     f40:	ffffffff 	.word	0xffffffff
     f44:	ffffffff 	.word	0xffffffff
     f48:	ffffffff 	.word	0xffffffff
     f4c:	ffffffff 	.word	0xffffffff
     f50:	ffffffff 	.word	0xffffffff
     f54:	ffffffff 	.word	0xffffffff
     f58:	ffffffff 	.word	0xffffffff
     f5c:	ffffffff 	.word	0xffffffff
     f60:	ffffffff 	.word	0xffffffff
     f64:	ffffffff 	.word	0xffffffff
     f68:	ffffffff 	.word	0xffffffff
     f6c:	ffffffff 	.word	0xffffffff
     f70:	ffffffff 	.word	0xffffffff
     f74:	ffffffff 	.word	0xffffffff
     f78:	ffffffff 	.word	0xffffffff
     f7c:	ffffffff 	.word	0xffffffff
     f80:	ffffffff 	.word	0xffffffff
     f84:	ffffffff 	.word	0xffffffff
     f88:	ffffffff 	.word	0xffffffff
     f8c:	ffffffff 	.word	0xffffffff
     f90:	ffffffff 	.word	0xffffffff
     f94:	ffffffff 	.word	0xffffffff
     f98:	ffffffff 	.word	0xffffffff
     f9c:	ffffffff 	.word	0xffffffff
     fa0:	ffffffff 	.word	0xffffffff
     fa4:	ffffffff 	.word	0xffffffff
     fa8:	ffffffff 	.word	0xffffffff
     fac:	ffffffff 	.word	0xffffffff
     fb0:	ffffffff 	.word	0xffffffff
     fb4:	ffffffff 	.word	0xffffffff
     fb8:	ffffffff 	.word	0xffffffff
     fbc:	ffffffff 	.word	0xffffffff
     fc0:	ffffffff 	.word	0xffffffff
     fc4:	ffffffff 	.word	0xffffffff
     fc8:	ffffffff 	.word	0xffffffff
     fcc:	ffffffff 	.word	0xffffffff
     fd0:	ffffffff 	.word	0xffffffff
     fd4:	ffffffff 	.word	0xffffffff
     fd8:	ffffffff 	.word	0xffffffff
     fdc:	ffffffff 	.word	0xffffffff
     fe0:	ffffffff 	.word	0xffffffff
     fe4:	ffffffff 	.word	0xffffffff
     fe8:	ffffffff 	.word	0xffffffff
     fec:	ffffffff 	.word	0xffffffff
     ff0:	ffffffff 	.word	0xffffffff
     ff4:	ffffffff 	.word	0xffffffff
     ff8:	ffffffff 	.word	0xffffffff
     ffc:	ffffffff 	.word	0xffffffff
    1000:	ffffffff 	.word	0xffffffff
    1004:	ffffffff 	.word	0xffffffff
    1008:	ffffffff 	.word	0xffffffff
    100c:	ffffffff 	.word	0xffffffff
    1010:	ffffffff 	.word	0xffffffff
    1014:	ffffffff 	.word	0xffffffff
    1018:	ffffffff 	.word	0xffffffff
    101c:	ffffffff 	.word	0xffffffff
    1020:	ffffffff 	.word	0xffffffff
    1024:	ffffffff 	.word	0xffffffff
    1028:	ffffffff 	.word	0xffffffff
    102c:	ffffffff 	.word	0xffffffff
    1030:	ffffffff 	.word	0xffffffff
    1034:	ffffffff 	.word	0xffffffff
    1038:	ffffffff 	.word	0xffffffff
    103c:	ffffffff 	.word	0xffffffff
    1040:	ffffffff 	.word	0xffffffff
    1044:	ffffffff 	.word	0xffffffff
    1048:	ffffffff 	.word	0xffffffff
    104c:	ffffffff 	.word	0xffffffff
    1050:	ffffffff 	.word	0xffffffff
    1054:	ffffffff 	.word	0xffffffff
    1058:	ffffffff 	.word	0xffffffff
    105c:	ffffffff 	.word	0xffffffff
    1060:	ffffffff 	.word	0xffffffff
    1064:	ffffffff 	.word	0xffffffff
    1068:	ffffffff 	.word	0xffffffff
    106c:	ffffffff 	.word	0xffffffff
    1070:	ffffffff 	.word	0xffffffff
    1074:	ffffffff 	.word	0xffffffff
    1078:	ffffffff 	.word	0xffffffff
    107c:	ffffffff 	.word	0xffffffff
    1080:	ffffffff 	.word	0xffffffff
    1084:	ffffffff 	.word	0xffffffff
    1088:	ffffffff 	.word	0xffffffff
    108c:	ffffffff 	.word	0xffffffff
    1090:	ffffffff 	.word	0xffffffff
    1094:	ffffffff 	.word	0xffffffff
    1098:	ffffffff 	.word	0xffffffff
    109c:	ffffffff 	.word	0xffffffff
    10a0:	ffffffff 	.word	0xffffffff
    10a4:	ffffffff 	.word	0xffffffff
    10a8:	ffffffff 	.word	0xffffffff
    10ac:	ffffffff 	.word	0xffffffff
    10b0:	ffffffff 	.word	0xffffffff
    10b4:	ffffffff 	.word	0xffffffff
    10b8:	ffffffff 	.word	0xffffffff
    10bc:	ffffffff 	.word	0xffffffff
    10c0:	ffffffff 	.word	0xffffffff
    10c4:	ffffffff 	.word	0xffffffff
    10c8:	ffffffff 	.word	0xffffffff
    10cc:	ffffffff 	.word	0xffffffff
    10d0:	ffffffff 	.word	0xffffffff
    10d4:	ffffffff 	.word	0xffffffff
    10d8:	ffffffff 	.word	0xffffffff
    10dc:	ffffffff 	.word	0xffffffff
    10e0:	ffffffff 	.word	0xffffffff
    10e4:	ffffffff 	.word	0xffffffff
    10e8:	ffffffff 	.word	0xffffffff
    10ec:	ffffffff 	.word	0xffffffff
    10f0:	ffffffff 	.word	0xffffffff
    10f4:	ffffffff 	.word	0xffffffff
    10f8:	ffffffff 	.word	0xffffffff
    10fc:	ffffffff 	.word	0xffffffff
    1100:	ffffffff 	.word	0xffffffff
    1104:	ffffffff 	.word	0xffffffff
    1108:	ffffffff 	.word	0xffffffff
    110c:	ffffffff 	.word	0xffffffff
    1110:	ffffffff 	.word	0xffffffff
    1114:	ffffffff 	.word	0xffffffff
    1118:	ffffffff 	.word	0xffffffff
    111c:	ffffffff 	.word	0xffffffff
    1120:	ffffffff 	.word	0xffffffff
    1124:	ffffffff 	.word	0xffffffff
    1128:	ffffffff 	.word	0xffffffff
    112c:	ffffffff 	.word	0xffffffff
    1130:	ffffffff 	.word	0xffffffff
    1134:	ffffffff 	.word	0xffffffff
    1138:	ffffffff 	.word	0xffffffff
    113c:	ffffffff 	.word	0xffffffff
    1140:	ffffffff 	.word	0xffffffff
    1144:	ffffffff 	.word	0xffffffff
    1148:	ffffffff 	.word	0xffffffff
    114c:	ffffffff 	.word	0xffffffff
    1150:	ffffffff 	.word	0xffffffff
    1154:	ffffffff 	.word	0xffffffff
    1158:	ffffffff 	.word	0xffffffff
    115c:	ffffffff 	.word	0xffffffff
    1160:	ffffffff 	.word	0xffffffff
    1164:	ffffffff 	.word	0xffffffff
    1168:	ffffffff 	.word	0xffffffff
    116c:	ffffffff 	.word	0xffffffff
    1170:	ffffffff 	.word	0xffffffff
    1174:	ffffffff 	.word	0xffffffff
    1178:	ffffffff 	.word	0xffffffff
    117c:	ffffffff 	.word	0xffffffff
    1180:	ffffffff 	.word	0xffffffff
    1184:	ffffffff 	.word	0xffffffff
    1188:	ffffffff 	.word	0xffffffff
    118c:	ffffffff 	.word	0xffffffff
    1190:	ffffffff 	.word	0xffffffff
    1194:	ffffffff 	.word	0xffffffff
    1198:	ffffffff 	.word	0xffffffff
    119c:	ffffffff 	.word	0xffffffff
    11a0:	ffffffff 	.word	0xffffffff
    11a4:	ffffffff 	.word	0xffffffff
    11a8:	ffffffff 	.word	0xffffffff
    11ac:	ffffffff 	.word	0xffffffff
    11b0:	ffffffff 	.word	0xffffffff
    11b4:	ffffffff 	.word	0xffffffff
    11b8:	ffffffff 	.word	0xffffffff
    11bc:	ffffffff 	.word	0xffffffff
    11c0:	ffffffff 	.word	0xffffffff
    11c4:	ffffffff 	.word	0xffffffff
    11c8:	ffffffff 	.word	0xffffffff
    11cc:	ffffffff 	.word	0xffffffff
    11d0:	ffffffff 	.word	0xffffffff
    11d4:	ffffffff 	.word	0xffffffff
    11d8:	ffffffff 	.word	0xffffffff
    11dc:	ffffffff 	.word	0xffffffff
    11e0:	ffffffff 	.word	0xffffffff
    11e4:	ffffffff 	.word	0xffffffff
    11e8:	ffffffff 	.word	0xffffffff
    11ec:	ffffffff 	.word	0xffffffff
    11f0:	ffffffff 	.word	0xffffffff
    11f4:	ffffffff 	.word	0xffffffff
    11f8:	ffffffff 	.word	0xffffffff
    11fc:	ffffffff 	.word	0xffffffff
    1200:	ffffffff 	.word	0xffffffff
    1204:	ffffffff 	.word	0xffffffff
    1208:	ffffffff 	.word	0xffffffff
    120c:	ffffffff 	.word	0xffffffff
    1210:	ffffffff 	.word	0xffffffff
    1214:	ffffffff 	.word	0xffffffff
    1218:	ffffffff 	.word	0xffffffff
    121c:	ffffffff 	.word	0xffffffff
    1220:	ffffffff 	.word	0xffffffff
    1224:	ffffffff 	.word	0xffffffff
    1228:	ffffffff 	.word	0xffffffff
    122c:	ffffffff 	.word	0xffffffff
    1230:	ffffffff 	.word	0xffffffff
    1234:	ffffffff 	.word	0xffffffff
    1238:	ffffffff 	.word	0xffffffff
    123c:	ffffffff 	.word	0xffffffff
    1240:	ffffffff 	.word	0xffffffff
    1244:	ffffffff 	.word	0xffffffff
    1248:	ffffffff 	.word	0xffffffff
    124c:	ffffffff 	.word	0xffffffff
    1250:	ffffffff 	.word	0xffffffff
    1254:	ffffffff 	.word	0xffffffff
    1258:	ffffffff 	.word	0xffffffff
    125c:	ffffffff 	.word	0xffffffff
    1260:	ffffffff 	.word	0xffffffff
    1264:	ffffffff 	.word	0xffffffff
    1268:	ffffffff 	.word	0xffffffff
    126c:	ffffffff 	.word	0xffffffff
    1270:	ffffffff 	.word	0xffffffff
    1274:	ffffffff 	.word	0xffffffff
    1278:	ffffffff 	.word	0xffffffff
    127c:	ffffffff 	.word	0xffffffff
    1280:	ffffffff 	.word	0xffffffff
    1284:	ffffffff 	.word	0xffffffff
    1288:	ffffffff 	.word	0xffffffff
    128c:	ffffffff 	.word	0xffffffff
    1290:	ffffffff 	.word	0xffffffff
    1294:	ffffffff 	.word	0xffffffff
    1298:	ffffffff 	.word	0xffffffff
    129c:	ffffffff 	.word	0xffffffff
    12a0:	ffffffff 	.word	0xffffffff
    12a4:	ffffffff 	.word	0xffffffff
    12a8:	ffffffff 	.word	0xffffffff
    12ac:	ffffffff 	.word	0xffffffff
    12b0:	ffffffff 	.word	0xffffffff
    12b4:	ffffffff 	.word	0xffffffff
    12b8:	ffffffff 	.word	0xffffffff
    12bc:	ffffffff 	.word	0xffffffff
    12c0:	ffffffff 	.word	0xffffffff
    12c4:	ffffffff 	.word	0xffffffff
    12c8:	ffffffff 	.word	0xffffffff
    12cc:	ffffffff 	.word	0xffffffff
    12d0:	ffffffff 	.word	0xffffffff
    12d4:	ffffffff 	.word	0xffffffff
    12d8:	ffffffff 	.word	0xffffffff
    12dc:	ffffffff 	.word	0xffffffff
    12e0:	ffffffff 	.word	0xffffffff
    12e4:	ffffffff 	.word	0xffffffff
    12e8:	ffffffff 	.word	0xffffffff
    12ec:	ffffffff 	.word	0xffffffff
    12f0:	ffffffff 	.word	0xffffffff
    12f4:	ffffffff 	.word	0xffffffff
    12f8:	ffffffff 	.word	0xffffffff
    12fc:	ffffffff 	.word	0xffffffff
    1300:	ffffffff 	.word	0xffffffff
    1304:	ffffffff 	.word	0xffffffff
    1308:	ffffffff 	.word	0xffffffff
    130c:	ffffffff 	.word	0xffffffff
    1310:	ffffffff 	.word	0xffffffff
    1314:	ffffffff 	.word	0xffffffff
    1318:	ffffffff 	.word	0xffffffff
    131c:	ffffffff 	.word	0xffffffff
    1320:	ffffffff 	.word	0xffffffff
    1324:	ffffffff 	.word	0xffffffff
    1328:	ffffffff 	.word	0xffffffff
    132c:	ffffffff 	.word	0xffffffff
    1330:	ffffffff 	.word	0xffffffff
    1334:	ffffffff 	.word	0xffffffff
    1338:	ffffffff 	.word	0xffffffff
    133c:	ffffffff 	.word	0xffffffff
    1340:	ffffffff 	.word	0xffffffff
    1344:	ffffffff 	.word	0xffffffff
    1348:	ffffffff 	.word	0xffffffff
    134c:	ffffffff 	.word	0xffffffff
    1350:	ffffffff 	.word	0xffffffff
    1354:	ffffffff 	.word	0xffffffff
    1358:	ffffffff 	.word	0xffffffff
    135c:	ffffffff 	.word	0xffffffff
    1360:	ffffffff 	.word	0xffffffff
    1364:	ffffffff 	.word	0xffffffff
    1368:	ffffffff 	.word	0xffffffff
    136c:	ffffffff 	.word	0xffffffff
    1370:	ffffffff 	.word	0xffffffff
    1374:	ffffffff 	.word	0xffffffff
    1378:	ffffffff 	.word	0xffffffff
    137c:	ffffffff 	.word	0xffffffff
    1380:	ffffffff 	.word	0xffffffff
    1384:	ffffffff 	.word	0xffffffff
    1388:	ffffffff 	.word	0xffffffff
    138c:	ffffffff 	.word	0xffffffff
    1390:	ffffffff 	.word	0xffffffff
    1394:	ffffffff 	.word	0xffffffff
    1398:	ffffffff 	.word	0xffffffff
    139c:	ffffffff 	.word	0xffffffff
    13a0:	ffffffff 	.word	0xffffffff
    13a4:	ffffffff 	.word	0xffffffff
    13a8:	ffffffff 	.word	0xffffffff
    13ac:	ffffffff 	.word	0xffffffff
    13b0:	ffffffff 	.word	0xffffffff
    13b4:	ffffffff 	.word	0xffffffff
    13b8:	ffffffff 	.word	0xffffffff
    13bc:	ffffffff 	.word	0xffffffff
    13c0:	ffffffff 	.word	0xffffffff
    13c4:	ffffffff 	.word	0xffffffff
    13c8:	ffffffff 	.word	0xffffffff
    13cc:	ffffffff 	.word	0xffffffff
    13d0:	ffffffff 	.word	0xffffffff
    13d4:	ffffffff 	.word	0xffffffff
    13d8:	ffffffff 	.word	0xffffffff
    13dc:	ffffffff 	.word	0xffffffff
    13e0:	ffffffff 	.word	0xffffffff
    13e4:	ffffffff 	.word	0xffffffff
    13e8:	ffffffff 	.word	0xffffffff
    13ec:	ffffffff 	.word	0xffffffff
    13f0:	ffffffff 	.word	0xffffffff
    13f4:	ffffffff 	.word	0xffffffff
    13f8:	ffffffff 	.word	0xffffffff
    13fc:	ffffffff 	.word	0xffffffff
    1400:	ffffffff 	.word	0xffffffff
    1404:	ffffffff 	.word	0xffffffff
    1408:	ffffffff 	.word	0xffffffff
    140c:	ffffffff 	.word	0xffffffff
    1410:	ffffffff 	.word	0xffffffff
    1414:	ffffffff 	.word	0xffffffff
    1418:	ffffffff 	.word	0xffffffff
    141c:	ffffffff 	.word	0xffffffff
    1420:	ffffffff 	.word	0xffffffff
    1424:	ffffffff 	.word	0xffffffff
    1428:	ffffffff 	.word	0xffffffff
    142c:	ffffffff 	.word	0xffffffff
    1430:	ffffffff 	.word	0xffffffff
    1434:	ffffffff 	.word	0xffffffff
    1438:	ffffffff 	.word	0xffffffff
    143c:	ffffffff 	.word	0xffffffff
    1440:	ffffffff 	.word	0xffffffff
    1444:	ffffffff 	.word	0xffffffff
    1448:	ffffffff 	.word	0xffffffff
    144c:	ffffffff 	.word	0xffffffff
    1450:	ffffffff 	.word	0xffffffff
    1454:	ffffffff 	.word	0xffffffff
    1458:	ffffffff 	.word	0xffffffff
    145c:	ffffffff 	.word	0xffffffff
    1460:	ffffffff 	.word	0xffffffff
    1464:	ffffffff 	.word	0xffffffff
    1468:	ffffffff 	.word	0xffffffff
    146c:	ffffffff 	.word	0xffffffff
    1470:	ffffffff 	.word	0xffffffff
    1474:	ffffffff 	.word	0xffffffff
    1478:	ffffffff 	.word	0xffffffff
    147c:	ffffffff 	.word	0xffffffff
    1480:	ffffffff 	.word	0xffffffff
    1484:	ffffffff 	.word	0xffffffff
    1488:	ffffffff 	.word	0xffffffff
    148c:	ffffffff 	.word	0xffffffff
    1490:	ffffffff 	.word	0xffffffff
    1494:	ffffffff 	.word	0xffffffff
    1498:	ffffffff 	.word	0xffffffff
    149c:	ffffffff 	.word	0xffffffff
    14a0:	ffffffff 	.word	0xffffffff
    14a4:	ffffffff 	.word	0xffffffff
    14a8:	ffffffff 	.word	0xffffffff
    14ac:	ffffffff 	.word	0xffffffff
    14b0:	ffffffff 	.word	0xffffffff
    14b4:	ffffffff 	.word	0xffffffff
    14b8:	ffffffff 	.word	0xffffffff
    14bc:	ffffffff 	.word	0xffffffff
    14c0:	ffffffff 	.word	0xffffffff
    14c4:	ffffffff 	.word	0xffffffff
    14c8:	ffffffff 	.word	0xffffffff
    14cc:	ffffffff 	.word	0xffffffff
    14d0:	ffffffff 	.word	0xffffffff
    14d4:	ffffffff 	.word	0xffffffff
    14d8:	ffffffff 	.word	0xffffffff
    14dc:	ffffffff 	.word	0xffffffff
    14e0:	ffffffff 	.word	0xffffffff
    14e4:	ffffffff 	.word	0xffffffff
    14e8:	ffffffff 	.word	0xffffffff
    14ec:	ffffffff 	.word	0xffffffff
    14f0:	ffffffff 	.word	0xffffffff
    14f4:	ffffffff 	.word	0xffffffff
    14f8:	ffffffff 	.word	0xffffffff
    14fc:	ffffffff 	.word	0xffffffff
    1500:	ffffffff 	.word	0xffffffff
    1504:	ffffffff 	.word	0xffffffff
    1508:	ffffffff 	.word	0xffffffff
    150c:	ffffffff 	.word	0xffffffff
    1510:	ffffffff 	.word	0xffffffff
    1514:	ffffffff 	.word	0xffffffff
    1518:	ffffffff 	.word	0xffffffff
    151c:	ffffffff 	.word	0xffffffff
    1520:	ffffffff 	.word	0xffffffff
    1524:	ffffffff 	.word	0xffffffff
    1528:	ffffffff 	.word	0xffffffff
    152c:	ffffffff 	.word	0xffffffff
    1530:	ffffffff 	.word	0xffffffff
    1534:	ffffffff 	.word	0xffffffff
    1538:	ffffffff 	.word	0xffffffff
    153c:	ffffffff 	.word	0xffffffff
    1540:	ffffffff 	.word	0xffffffff
    1544:	ffffffff 	.word	0xffffffff
    1548:	ffffffff 	.word	0xffffffff
    154c:	ffffffff 	.word	0xffffffff
    1550:	ffffffff 	.word	0xffffffff
    1554:	ffffffff 	.word	0xffffffff
    1558:	ffffffff 	.word	0xffffffff
    155c:	ffffffff 	.word	0xffffffff
    1560:	ffffffff 	.word	0xffffffff
    1564:	ffffffff 	.word	0xffffffff
    1568:	ffffffff 	.word	0xffffffff
    156c:	ffffffff 	.word	0xffffffff
    1570:	ffffffff 	.word	0xffffffff
    1574:	ffffffff 	.word	0xffffffff
    1578:	ffffffff 	.word	0xffffffff
    157c:	ffffffff 	.word	0xffffffff
    1580:	ffffffff 	.word	0xffffffff
    1584:	ffffffff 	.word	0xffffffff
    1588:	ffffffff 	.word	0xffffffff
    158c:	ffffffff 	.word	0xffffffff
    1590:	ffffffff 	.word	0xffffffff
    1594:	ffffffff 	.word	0xffffffff
    1598:	ffffffff 	.word	0xffffffff
    159c:	ffffffff 	.word	0xffffffff
    15a0:	ffffffff 	.word	0xffffffff
    15a4:	ffffffff 	.word	0xffffffff
    15a8:	ffffffff 	.word	0xffffffff
    15ac:	ffffffff 	.word	0xffffffff
    15b0:	ffffffff 	.word	0xffffffff
    15b4:	ffffffff 	.word	0xffffffff
    15b8:	ffffffff 	.word	0xffffffff
    15bc:	ffffffff 	.word	0xffffffff
    15c0:	ffffffff 	.word	0xffffffff
    15c4:	ffffffff 	.word	0xffffffff
    15c8:	ffffffff 	.word	0xffffffff
    15cc:	ffffffff 	.word	0xffffffff
    15d0:	ffffffff 	.word	0xffffffff
    15d4:	ffffffff 	.word	0xffffffff
    15d8:	ffffffff 	.word	0xffffffff
    15dc:	ffffffff 	.word	0xffffffff
    15e0:	ffffffff 	.word	0xffffffff
    15e4:	ffffffff 	.word	0xffffffff
    15e8:	ffffffff 	.word	0xffffffff
    15ec:	ffffffff 	.word	0xffffffff
    15f0:	ffffffff 	.word	0xffffffff
    15f4:	ffffffff 	.word	0xffffffff
    15f8:	ffffffff 	.word	0xffffffff
    15fc:	ffffffff 	.word	0xffffffff
    1600:	ffffffff 	.word	0xffffffff
    1604:	ffffffff 	.word	0xffffffff
    1608:	ffffffff 	.word	0xffffffff
    160c:	ffffffff 	.word	0xffffffff
    1610:	ffffffff 	.word	0xffffffff
    1614:	ffffffff 	.word	0xffffffff
    1618:	ffffffff 	.word	0xffffffff
    161c:	ffffffff 	.word	0xffffffff
    1620:	ffffffff 	.word	0xffffffff
    1624:	ffffffff 	.word	0xffffffff
    1628:	ffffffff 	.word	0xffffffff
    162c:	ffffffff 	.word	0xffffffff
    1630:	ffffffff 	.word	0xffffffff
    1634:	ffffffff 	.word	0xffffffff
    1638:	ffffffff 	.word	0xffffffff
    163c:	ffffffff 	.word	0xffffffff
    1640:	ffffffff 	.word	0xffffffff
    1644:	ffffffff 	.word	0xffffffff
    1648:	ffffffff 	.word	0xffffffff
    164c:	ffffffff 	.word	0xffffffff
    1650:	ffffffff 	.word	0xffffffff
    1654:	ffffffff 	.word	0xffffffff
    1658:	ffffffff 	.word	0xffffffff
    165c:	ffffffff 	.word	0xffffffff
    1660:	ffffffff 	.word	0xffffffff
    1664:	ffffffff 	.word	0xffffffff
    1668:	ffffffff 	.word	0xffffffff
    166c:	ffffffff 	.word	0xffffffff
    1670:	ffffffff 	.word	0xffffffff
    1674:	ffffffff 	.word	0xffffffff
    1678:	ffffffff 	.word	0xffffffff
    167c:	ffffffff 	.word	0xffffffff
    1680:	ffffffff 	.word	0xffffffff
    1684:	ffffffff 	.word	0xffffffff
    1688:	ffffffff 	.word	0xffffffff
    168c:	ffffffff 	.word	0xffffffff
    1690:	ffffffff 	.word	0xffffffff
    1694:	ffffffff 	.word	0xffffffff
    1698:	ffffffff 	.word	0xffffffff
    169c:	ffffffff 	.word	0xffffffff
    16a0:	ffffffff 	.word	0xffffffff
    16a4:	ffffffff 	.word	0xffffffff
    16a8:	ffffffff 	.word	0xffffffff
    16ac:	ffffffff 	.word	0xffffffff
    16b0:	ffffffff 	.word	0xffffffff
    16b4:	ffffffff 	.word	0xffffffff
    16b8:	ffffffff 	.word	0xffffffff
    16bc:	ffffffff 	.word	0xffffffff
    16c0:	ffffffff 	.word	0xffffffff
    16c4:	ffffffff 	.word	0xffffffff
    16c8:	ffffffff 	.word	0xffffffff
    16cc:	ffffffff 	.word	0xffffffff
    16d0:	ffffffff 	.word	0xffffffff
    16d4:	ffffffff 	.word	0xffffffff
    16d8:	ffffffff 	.word	0xffffffff
    16dc:	ffffffff 	.word	0xffffffff
    16e0:	ffffffff 	.word	0xffffffff
    16e4:	ffffffff 	.word	0xffffffff
    16e8:	ffffffff 	.word	0xffffffff
    16ec:	ffffffff 	.word	0xffffffff
    16f0:	ffffffff 	.word	0xffffffff
    16f4:	ffffffff 	.word	0xffffffff
    16f8:	ffffffff 	.word	0xffffffff
    16fc:	ffffffff 	.word	0xffffffff
    1700:	ffffffff 	.word	0xffffffff
    1704:	ffffffff 	.word	0xffffffff
    1708:	ffffffff 	.word	0xffffffff
    170c:	ffffffff 	.word	0xffffffff
    1710:	ffffffff 	.word	0xffffffff
    1714:	ffffffff 	.word	0xffffffff
    1718:	ffffffff 	.word	0xffffffff
    171c:	ffffffff 	.word	0xffffffff
    1720:	ffffffff 	.word	0xffffffff
    1724:	ffffffff 	.word	0xffffffff
    1728:	ffffffff 	.word	0xffffffff
    172c:	ffffffff 	.word	0xffffffff
    1730:	ffffffff 	.word	0xffffffff
    1734:	ffffffff 	.word	0xffffffff
    1738:	ffffffff 	.word	0xffffffff
    173c:	ffffffff 	.word	0xffffffff
    1740:	ffffffff 	.word	0xffffffff
    1744:	ffffffff 	.word	0xffffffff
    1748:	ffffffff 	.word	0xffffffff
    174c:	ffffffff 	.word	0xffffffff
    1750:	ffffffff 	.word	0xffffffff
    1754:	ffffffff 	.word	0xffffffff
    1758:	ffffffff 	.word	0xffffffff
    175c:	ffffffff 	.word	0xffffffff
    1760:	ffffffff 	.word	0xffffffff
    1764:	ffffffff 	.word	0xffffffff
    1768:	ffffffff 	.word	0xffffffff
    176c:	ffffffff 	.word	0xffffffff
    1770:	ffffffff 	.word	0xffffffff
    1774:	ffffffff 	.word	0xffffffff
    1778:	ffffffff 	.word	0xffffffff
    177c:	ffffffff 	.word	0xffffffff
    1780:	ffffffff 	.word	0xffffffff
    1784:	ffffffff 	.word	0xffffffff
    1788:	ffffffff 	.word	0xffffffff
    178c:	ffffffff 	.word	0xffffffff
    1790:	ffffffff 	.word	0xffffffff
    1794:	ffffffff 	.word	0xffffffff
    1798:	ffffffff 	.word	0xffffffff
    179c:	ffffffff 	.word	0xffffffff
    17a0:	ffffffff 	.word	0xffffffff
    17a4:	ffffffff 	.word	0xffffffff
    17a8:	ffffffff 	.word	0xffffffff
    17ac:	ffffffff 	.word	0xffffffff
    17b0:	ffffffff 	.word	0xffffffff
    17b4:	ffffffff 	.word	0xffffffff
    17b8:	ffffffff 	.word	0xffffffff
    17bc:	ffffffff 	.word	0xffffffff
    17c0:	ffffffff 	.word	0xffffffff
    17c4:	ffffffff 	.word	0xffffffff
    17c8:	ffffffff 	.word	0xffffffff
    17cc:	ffffffff 	.word	0xffffffff
    17d0:	ffffffff 	.word	0xffffffff
    17d4:	ffffffff 	.word	0xffffffff
    17d8:	ffffffff 	.word	0xffffffff
    17dc:	ffffffff 	.word	0xffffffff
    17e0:	ffffffff 	.word	0xffffffff
    17e4:	ffffffff 	.word	0xffffffff
    17e8:	ffffffff 	.word	0xffffffff
    17ec:	ffffffff 	.word	0xffffffff
    17f0:	ffffffff 	.word	0xffffffff
    17f4:	ffffffff 	.word	0xffffffff
    17f8:	ffffffff 	.word	0xffffffff
    17fc:	ffffffff 	.word	0xffffffff
    1800:	ffffffff 	.word	0xffffffff
    1804:	ffffffff 	.word	0xffffffff
    1808:	ffffffff 	.word	0xffffffff
    180c:	ffffffff 	.word	0xffffffff
    1810:	ffffffff 	.word	0xffffffff
    1814:	ffffffff 	.word	0xffffffff
    1818:	ffffffff 	.word	0xffffffff
    181c:	ffffffff 	.word	0xffffffff
    1820:	ffffffff 	.word	0xffffffff
    1824:	ffffffff 	.word	0xffffffff
    1828:	ffffffff 	.word	0xffffffff
    182c:	ffffffff 	.word	0xffffffff
    1830:	ffffffff 	.word	0xffffffff
    1834:	ffffffff 	.word	0xffffffff
    1838:	ffffffff 	.word	0xffffffff
    183c:	ffffffff 	.word	0xffffffff
    1840:	ffffffff 	.word	0xffffffff
    1844:	ffffffff 	.word	0xffffffff
    1848:	ffffffff 	.word	0xffffffff
    184c:	ffffffff 	.word	0xffffffff
    1850:	ffffffff 	.word	0xffffffff
    1854:	ffffffff 	.word	0xffffffff
    1858:	ffffffff 	.word	0xffffffff
    185c:	ffffffff 	.word	0xffffffff
    1860:	ffffffff 	.word	0xffffffff
    1864:	ffffffff 	.word	0xffffffff
    1868:	ffffffff 	.word	0xffffffff
    186c:	ffffffff 	.word	0xffffffff
    1870:	ffffffff 	.word	0xffffffff
    1874:	ffffffff 	.word	0xffffffff
    1878:	ffffffff 	.word	0xffffffff
    187c:	ffffffff 	.word	0xffffffff
    1880:	ffffffff 	.word	0xffffffff
    1884:	ffffffff 	.word	0xffffffff
    1888:	ffffffff 	.word	0xffffffff
    188c:	ffffffff 	.word	0xffffffff
    1890:	ffffffff 	.word	0xffffffff
    1894:	ffffffff 	.word	0xffffffff
    1898:	ffffffff 	.word	0xffffffff
    189c:	ffffffff 	.word	0xffffffff
    18a0:	ffffffff 	.word	0xffffffff
    18a4:	ffffffff 	.word	0xffffffff
    18a8:	ffffffff 	.word	0xffffffff
    18ac:	ffffffff 	.word	0xffffffff
    18b0:	ffffffff 	.word	0xffffffff
    18b4:	ffffffff 	.word	0xffffffff
    18b8:	ffffffff 	.word	0xffffffff
    18bc:	ffffffff 	.word	0xffffffff
    18c0:	ffffffff 	.word	0xffffffff
    18c4:	ffffffff 	.word	0xffffffff
    18c8:	ffffffff 	.word	0xffffffff
    18cc:	ffffffff 	.word	0xffffffff
    18d0:	ffffffff 	.word	0xffffffff
    18d4:	ffffffff 	.word	0xffffffff
    18d8:	ffffffff 	.word	0xffffffff
    18dc:	ffffffff 	.word	0xffffffff
    18e0:	ffffffff 	.word	0xffffffff
    18e4:	ffffffff 	.word	0xffffffff
    18e8:	ffffffff 	.word	0xffffffff
    18ec:	ffffffff 	.word	0xffffffff
    18f0:	ffffffff 	.word	0xffffffff
    18f4:	ffffffff 	.word	0xffffffff
    18f8:	ffffffff 	.word	0xffffffff
    18fc:	ffffffff 	.word	0xffffffff
    1900:	ffffffff 	.word	0xffffffff
    1904:	ffffffff 	.word	0xffffffff
    1908:	ffffffff 	.word	0xffffffff
    190c:	ffffffff 	.word	0xffffffff
    1910:	ffffffff 	.word	0xffffffff
    1914:	ffffffff 	.word	0xffffffff
    1918:	ffffffff 	.word	0xffffffff
    191c:	ffffffff 	.word	0xffffffff
    1920:	ffffffff 	.word	0xffffffff
    1924:	ffffffff 	.word	0xffffffff
    1928:	ffffffff 	.word	0xffffffff
    192c:	ffffffff 	.word	0xffffffff
    1930:	ffffffff 	.word	0xffffffff
    1934:	ffffffff 	.word	0xffffffff
    1938:	ffffffff 	.word	0xffffffff
    193c:	ffffffff 	.word	0xffffffff
    1940:	ffffffff 	.word	0xffffffff
    1944:	ffffffff 	.word	0xffffffff
    1948:	ffffffff 	.word	0xffffffff
    194c:	ffffffff 	.word	0xffffffff
    1950:	ffffffff 	.word	0xffffffff
    1954:	ffffffff 	.word	0xffffffff
    1958:	ffffffff 	.word	0xffffffff
    195c:	ffffffff 	.word	0xffffffff
    1960:	ffffffff 	.word	0xffffffff
    1964:	ffffffff 	.word	0xffffffff
    1968:	ffffffff 	.word	0xffffffff
    196c:	ffffffff 	.word	0xffffffff
    1970:	ffffffff 	.word	0xffffffff
    1974:	ffffffff 	.word	0xffffffff
    1978:	ffffffff 	.word	0xffffffff
    197c:	ffffffff 	.word	0xffffffff
    1980:	ffffffff 	.word	0xffffffff
    1984:	ffffffff 	.word	0xffffffff
    1988:	ffffffff 	.word	0xffffffff
    198c:	ffffffff 	.word	0xffffffff
    1990:	ffffffff 	.word	0xffffffff
    1994:	ffffffff 	.word	0xffffffff
    1998:	ffffffff 	.word	0xffffffff
    199c:	ffffffff 	.word	0xffffffff
    19a0:	ffffffff 	.word	0xffffffff
    19a4:	ffffffff 	.word	0xffffffff
    19a8:	ffffffff 	.word	0xffffffff
    19ac:	ffffffff 	.word	0xffffffff
    19b0:	ffffffff 	.word	0xffffffff
    19b4:	ffffffff 	.word	0xffffffff
    19b8:	ffffffff 	.word	0xffffffff
    19bc:	ffffffff 	.word	0xffffffff
    19c0:	ffffffff 	.word	0xffffffff
    19c4:	ffffffff 	.word	0xffffffff
    19c8:	ffffffff 	.word	0xffffffff
    19cc:	ffffffff 	.word	0xffffffff
    19d0:	ffffffff 	.word	0xffffffff
    19d4:	ffffffff 	.word	0xffffffff
    19d8:	ffffffff 	.word	0xffffffff
    19dc:	ffffffff 	.word	0xffffffff
    19e0:	ffffffff 	.word	0xffffffff
    19e4:	ffffffff 	.word	0xffffffff
    19e8:	ffffffff 	.word	0xffffffff
    19ec:	ffffffff 	.word	0xffffffff
    19f0:	ffffffff 	.word	0xffffffff
    19f4:	ffffffff 	.word	0xffffffff
    19f8:	ffffffff 	.word	0xffffffff
    19fc:	ffffffff 	.word	0xffffffff
    1a00:	ffffffff 	.word	0xffffffff
    1a04:	ffffffff 	.word	0xffffffff
    1a08:	ffffffff 	.word	0xffffffff
    1a0c:	ffffffff 	.word	0xffffffff
    1a10:	ffffffff 	.word	0xffffffff
    1a14:	ffffffff 	.word	0xffffffff
    1a18:	ffffffff 	.word	0xffffffff
    1a1c:	ffffffff 	.word	0xffffffff
    1a20:	ffffffff 	.word	0xffffffff
    1a24:	ffffffff 	.word	0xffffffff
    1a28:	ffffffff 	.word	0xffffffff
    1a2c:	ffffffff 	.word	0xffffffff
    1a30:	ffffffff 	.word	0xffffffff
    1a34:	ffffffff 	.word	0xffffffff
    1a38:	ffffffff 	.word	0xffffffff
    1a3c:	ffffffff 	.word	0xffffffff
    1a40:	ffffffff 	.word	0xffffffff
    1a44:	ffffffff 	.word	0xffffffff
    1a48:	ffffffff 	.word	0xffffffff
    1a4c:	ffffffff 	.word	0xffffffff
    1a50:	ffffffff 	.word	0xffffffff
    1a54:	ffffffff 	.word	0xffffffff
    1a58:	ffffffff 	.word	0xffffffff
    1a5c:	ffffffff 	.word	0xffffffff
    1a60:	ffffffff 	.word	0xffffffff
    1a64:	ffffffff 	.word	0xffffffff
    1a68:	ffffffff 	.word	0xffffffff
    1a6c:	ffffffff 	.word	0xffffffff
    1a70:	ffffffff 	.word	0xffffffff
    1a74:	ffffffff 	.word	0xffffffff
    1a78:	ffffffff 	.word	0xffffffff
    1a7c:	ffffffff 	.word	0xffffffff
    1a80:	ffffffff 	.word	0xffffffff
    1a84:	ffffffff 	.word	0xffffffff
    1a88:	ffffffff 	.word	0xffffffff
    1a8c:	ffffffff 	.word	0xffffffff
    1a90:	ffffffff 	.word	0xffffffff
    1a94:	ffffffff 	.word	0xffffffff
    1a98:	ffffffff 	.word	0xffffffff
    1a9c:	ffffffff 	.word	0xffffffff
    1aa0:	ffffffff 	.word	0xffffffff
    1aa4:	ffffffff 	.word	0xffffffff
    1aa8:	ffffffff 	.word	0xffffffff
    1aac:	ffffffff 	.word	0xffffffff
    1ab0:	ffffffff 	.word	0xffffffff
    1ab4:	ffffffff 	.word	0xffffffff
    1ab8:	ffffffff 	.word	0xffffffff
    1abc:	ffffffff 	.word	0xffffffff
    1ac0:	ffffffff 	.word	0xffffffff
    1ac4:	ffffffff 	.word	0xffffffff
    1ac8:	ffffffff 	.word	0xffffffff
    1acc:	ffffffff 	.word	0xffffffff
    1ad0:	ffffffff 	.word	0xffffffff
    1ad4:	ffffffff 	.word	0xffffffff
    1ad8:	ffffffff 	.word	0xffffffff
    1adc:	ffffffff 	.word	0xffffffff
    1ae0:	ffffffff 	.word	0xffffffff
    1ae4:	ffffffff 	.word	0xffffffff
    1ae8:	ffffffff 	.word	0xffffffff
    1aec:	ffffffff 	.word	0xffffffff
    1af0:	ffffffff 	.word	0xffffffff
    1af4:	ffffffff 	.word	0xffffffff
    1af8:	ffffffff 	.word	0xffffffff
    1afc:	ffffffff 	.word	0xffffffff
    1b00:	ffffffff 	.word	0xffffffff
    1b04:	ffffffff 	.word	0xffffffff
    1b08:	ffffffff 	.word	0xffffffff
    1b0c:	ffffffff 	.word	0xffffffff
    1b10:	ffffffff 	.word	0xffffffff
    1b14:	ffffffff 	.word	0xffffffff
    1b18:	ffffffff 	.word	0xffffffff
    1b1c:	ffffffff 	.word	0xffffffff
    1b20:	ffffffff 	.word	0xffffffff
    1b24:	ffffffff 	.word	0xffffffff
    1b28:	ffffffff 	.word	0xffffffff
    1b2c:	ffffffff 	.word	0xffffffff
    1b30:	ffffffff 	.word	0xffffffff
    1b34:	ffffffff 	.word	0xffffffff
    1b38:	ffffffff 	.word	0xffffffff
    1b3c:	ffffffff 	.word	0xffffffff
    1b40:	ffffffff 	.word	0xffffffff
    1b44:	ffffffff 	.word	0xffffffff
    1b48:	ffffffff 	.word	0xffffffff
    1b4c:	ffffffff 	.word	0xffffffff
    1b50:	ffffffff 	.word	0xffffffff
    1b54:	ffffffff 	.word	0xffffffff
    1b58:	ffffffff 	.word	0xffffffff
    1b5c:	ffffffff 	.word	0xffffffff
    1b60:	ffffffff 	.word	0xffffffff
    1b64:	ffffffff 	.word	0xffffffff
    1b68:	ffffffff 	.word	0xffffffff
    1b6c:	ffffffff 	.word	0xffffffff
    1b70:	ffffffff 	.word	0xffffffff
    1b74:	ffffffff 	.word	0xffffffff
    1b78:	ffffffff 	.word	0xffffffff
    1b7c:	ffffffff 	.word	0xffffffff
    1b80:	ffffffff 	.word	0xffffffff
    1b84:	ffffffff 	.word	0xffffffff
    1b88:	ffffffff 	.word	0xffffffff
    1b8c:	ffffffff 	.word	0xffffffff
    1b90:	ffffffff 	.word	0xffffffff
    1b94:	ffffffff 	.word	0xffffffff
    1b98:	ffffffff 	.word	0xffffffff
    1b9c:	ffffffff 	.word	0xffffffff
    1ba0:	ffffffff 	.word	0xffffffff
    1ba4:	ffffffff 	.word	0xffffffff
    1ba8:	ffffffff 	.word	0xffffffff
    1bac:	ffffffff 	.word	0xffffffff
    1bb0:	ffffffff 	.word	0xffffffff
    1bb4:	ffffffff 	.word	0xffffffff
    1bb8:	ffffffff 	.word	0xffffffff
    1bbc:	ffffffff 	.word	0xffffffff
    1bc0:	ffffffff 	.word	0xffffffff
    1bc4:	ffffffff 	.word	0xffffffff
    1bc8:	ffffffff 	.word	0xffffffff
    1bcc:	ffffffff 	.word	0xffffffff
    1bd0:	ffffffff 	.word	0xffffffff
    1bd4:	ffffffff 	.word	0xffffffff
    1bd8:	ffffffff 	.word	0xffffffff
    1bdc:	ffffffff 	.word	0xffffffff
    1be0:	ffffffff 	.word	0xffffffff
    1be4:	ffffffff 	.word	0xffffffff
    1be8:	ffffffff 	.word	0xffffffff
    1bec:	ffffffff 	.word	0xffffffff
    1bf0:	ffffffff 	.word	0xffffffff
    1bf4:	ffffffff 	.word	0xffffffff
    1bf8:	ffffffff 	.word	0xffffffff
    1bfc:	ffffffff 	.word	0xffffffff
    1c00:	ffffffff 	.word	0xffffffff
    1c04:	ffffffff 	.word	0xffffffff
    1c08:	ffffffff 	.word	0xffffffff
    1c0c:	ffffffff 	.word	0xffffffff
    1c10:	ffffffff 	.word	0xffffffff
    1c14:	ffffffff 	.word	0xffffffff
    1c18:	ffffffff 	.word	0xffffffff
    1c1c:	ffffffff 	.word	0xffffffff
    1c20:	ffffffff 	.word	0xffffffff
    1c24:	ffffffff 	.word	0xffffffff
    1c28:	ffffffff 	.word	0xffffffff
    1c2c:	ffffffff 	.word	0xffffffff
    1c30:	ffffffff 	.word	0xffffffff
    1c34:	ffffffff 	.word	0xffffffff
    1c38:	ffffffff 	.word	0xffffffff
    1c3c:	ffffffff 	.word	0xffffffff
    1c40:	ffffffff 	.word	0xffffffff
    1c44:	ffffffff 	.word	0xffffffff
    1c48:	ffffffff 	.word	0xffffffff
    1c4c:	ffffffff 	.word	0xffffffff
    1c50:	ffffffff 	.word	0xffffffff
    1c54:	ffffffff 	.word	0xffffffff
    1c58:	ffffffff 	.word	0xffffffff
    1c5c:	ffffffff 	.word	0xffffffff
    1c60:	ffffffff 	.word	0xffffffff
    1c64:	ffffffff 	.word	0xffffffff
    1c68:	ffffffff 	.word	0xffffffff
    1c6c:	ffffffff 	.word	0xffffffff
    1c70:	ffffffff 	.word	0xffffffff
    1c74:	ffffffff 	.word	0xffffffff
    1c78:	ffffffff 	.word	0xffffffff
    1c7c:	ffffffff 	.word	0xffffffff
    1c80:	ffffffff 	.word	0xffffffff
    1c84:	ffffffff 	.word	0xffffffff
    1c88:	ffffffff 	.word	0xffffffff
    1c8c:	ffffffff 	.word	0xffffffff
    1c90:	ffffffff 	.word	0xffffffff
    1c94:	ffffffff 	.word	0xffffffff
    1c98:	ffffffff 	.word	0xffffffff
    1c9c:	ffffffff 	.word	0xffffffff
    1ca0:	ffffffff 	.word	0xffffffff
    1ca4:	ffffffff 	.word	0xffffffff
    1ca8:	ffffffff 	.word	0xffffffff
    1cac:	ffffffff 	.word	0xffffffff
    1cb0:	ffffffff 	.word	0xffffffff
    1cb4:	ffffffff 	.word	0xffffffff
    1cb8:	ffffffff 	.word	0xffffffff
    1cbc:	ffffffff 	.word	0xffffffff
    1cc0:	ffffffff 	.word	0xffffffff
    1cc4:	ffffffff 	.word	0xffffffff
    1cc8:	ffffffff 	.word	0xffffffff
    1ccc:	ffffffff 	.word	0xffffffff
    1cd0:	ffffffff 	.word	0xffffffff
    1cd4:	ffffffff 	.word	0xffffffff
    1cd8:	ffffffff 	.word	0xffffffff
    1cdc:	ffffffff 	.word	0xffffffff
    1ce0:	ffffffff 	.word	0xffffffff
    1ce4:	ffffffff 	.word	0xffffffff
    1ce8:	ffffffff 	.word	0xffffffff
    1cec:	ffffffff 	.word	0xffffffff
    1cf0:	ffffffff 	.word	0xffffffff
    1cf4:	ffffffff 	.word	0xffffffff
    1cf8:	ffffffff 	.word	0xffffffff
    1cfc:	ffffffff 	.word	0xffffffff
    1d00:	ffffffff 	.word	0xffffffff
    1d04:	ffffffff 	.word	0xffffffff
    1d08:	ffffffff 	.word	0xffffffff
    1d0c:	ffffffff 	.word	0xffffffff
    1d10:	ffffffff 	.word	0xffffffff
    1d14:	ffffffff 	.word	0xffffffff
    1d18:	ffffffff 	.word	0xffffffff
    1d1c:	ffffffff 	.word	0xffffffff
    1d20:	ffffffff 	.word	0xffffffff
    1d24:	ffffffff 	.word	0xffffffff
    1d28:	ffffffff 	.word	0xffffffff
    1d2c:	ffffffff 	.word	0xffffffff
    1d30:	ffffffff 	.word	0xffffffff
    1d34:	ffffffff 	.word	0xffffffff
    1d38:	ffffffff 	.word	0xffffffff
    1d3c:	ffffffff 	.word	0xffffffff
    1d40:	ffffffff 	.word	0xffffffff
    1d44:	ffffffff 	.word	0xffffffff
    1d48:	ffffffff 	.word	0xffffffff
    1d4c:	ffffffff 	.word	0xffffffff
    1d50:	ffffffff 	.word	0xffffffff
    1d54:	ffffffff 	.word	0xffffffff
    1d58:	ffffffff 	.word	0xffffffff
    1d5c:	ffffffff 	.word	0xffffffff
    1d60:	ffffffff 	.word	0xffffffff
    1d64:	ffffffff 	.word	0xffffffff
    1d68:	ffffffff 	.word	0xffffffff
    1d6c:	ffffffff 	.word	0xffffffff
    1d70:	ffffffff 	.word	0xffffffff
    1d74:	ffffffff 	.word	0xffffffff
    1d78:	ffffffff 	.word	0xffffffff
    1d7c:	ffffffff 	.word	0xffffffff
    1d80:	ffffffff 	.word	0xffffffff
    1d84:	ffffffff 	.word	0xffffffff
    1d88:	ffffffff 	.word	0xffffffff
    1d8c:	ffffffff 	.word	0xffffffff
    1d90:	ffffffff 	.word	0xffffffff
    1d94:	ffffffff 	.word	0xffffffff
    1d98:	ffffffff 	.word	0xffffffff
    1d9c:	ffffffff 	.word	0xffffffff
    1da0:	ffffffff 	.word	0xffffffff
    1da4:	ffffffff 	.word	0xffffffff
    1da8:	ffffffff 	.word	0xffffffff
    1dac:	ffffffff 	.word	0xffffffff
    1db0:	ffffffff 	.word	0xffffffff
    1db4:	ffffffff 	.word	0xffffffff
    1db8:	ffffffff 	.word	0xffffffff
    1dbc:	ffffffff 	.word	0xffffffff
    1dc0:	ffffffff 	.word	0xffffffff
    1dc4:	ffffffff 	.word	0xffffffff
    1dc8:	ffffffff 	.word	0xffffffff
    1dcc:	ffffffff 	.word	0xffffffff
    1dd0:	ffffffff 	.word	0xffffffff
    1dd4:	ffffffff 	.word	0xffffffff
    1dd8:	ffffffff 	.word	0xffffffff
    1ddc:	ffffffff 	.word	0xffffffff
    1de0:	ffffffff 	.word	0xffffffff
    1de4:	ffffffff 	.word	0xffffffff
    1de8:	ffffffff 	.word	0xffffffff
    1dec:	ffffffff 	.word	0xffffffff
    1df0:	ffffffff 	.word	0xffffffff
    1df4:	ffffffff 	.word	0xffffffff
    1df8:	ffffffff 	.word	0xffffffff
    1dfc:	ffffffff 	.word	0xffffffff
    1e00:	ffffffff 	.word	0xffffffff
    1e04:	ffffffff 	.word	0xffffffff
    1e08:	ffffffff 	.word	0xffffffff
    1e0c:	ffffffff 	.word	0xffffffff
    1e10:	ffffffff 	.word	0xffffffff
    1e14:	ffffffff 	.word	0xffffffff
    1e18:	ffffffff 	.word	0xffffffff
    1e1c:	ffffffff 	.word	0xffffffff
    1e20:	ffffffff 	.word	0xffffffff
    1e24:	ffffffff 	.word	0xffffffff
    1e28:	ffffffff 	.word	0xffffffff
    1e2c:	ffffffff 	.word	0xffffffff
    1e30:	ffffffff 	.word	0xffffffff
    1e34:	ffffffff 	.word	0xffffffff
    1e38:	ffffffff 	.word	0xffffffff
    1e3c:	ffffffff 	.word	0xffffffff
    1e40:	ffffffff 	.word	0xffffffff
    1e44:	ffffffff 	.word	0xffffffff
    1e48:	ffffffff 	.word	0xffffffff
    1e4c:	ffffffff 	.word	0xffffffff
    1e50:	ffffffff 	.word	0xffffffff
    1e54:	ffffffff 	.word	0xffffffff
    1e58:	ffffffff 	.word	0xffffffff
    1e5c:	ffffffff 	.word	0xffffffff
    1e60:	ffffffff 	.word	0xffffffff
    1e64:	ffffffff 	.word	0xffffffff
    1e68:	ffffffff 	.word	0xffffffff
    1e6c:	ffffffff 	.word	0xffffffff
    1e70:	ffffffff 	.word	0xffffffff
    1e74:	ffffffff 	.word	0xffffffff
    1e78:	ffffffff 	.word	0xffffffff
    1e7c:	ffffffff 	.word	0xffffffff
    1e80:	ffffffff 	.word	0xffffffff
    1e84:	ffffffff 	.word	0xffffffff
    1e88:	ffffffff 	.word	0xffffffff
    1e8c:	ffffffff 	.word	0xffffffff
    1e90:	ffffffff 	.word	0xffffffff
    1e94:	ffffffff 	.word	0xffffffff
    1e98:	ffffffff 	.word	0xffffffff
    1e9c:	ffffffff 	.word	0xffffffff
    1ea0:	ffffffff 	.word	0xffffffff
    1ea4:	ffffffff 	.word	0xffffffff
    1ea8:	ffffffff 	.word	0xffffffff
    1eac:	ffffffff 	.word	0xffffffff
    1eb0:	ffffffff 	.word	0xffffffff
    1eb4:	ffffffff 	.word	0xffffffff
    1eb8:	ffffffff 	.word	0xffffffff
    1ebc:	ffffffff 	.word	0xffffffff
    1ec0:	ffffffff 	.word	0xffffffff
    1ec4:	ffffffff 	.word	0xffffffff
    1ec8:	ffffffff 	.word	0xffffffff
    1ecc:	ffffffff 	.word	0xffffffff
    1ed0:	ffffffff 	.word	0xffffffff
    1ed4:	ffffffff 	.word	0xffffffff
    1ed8:	ffffffff 	.word	0xffffffff
    1edc:	ffffffff 	.word	0xffffffff
    1ee0:	ffffffff 	.word	0xffffffff
    1ee4:	ffffffff 	.word	0xffffffff
    1ee8:	ffffffff 	.word	0xffffffff
    1eec:	ffffffff 	.word	0xffffffff
    1ef0:	ffffffff 	.word	0xffffffff
    1ef4:	ffffffff 	.word	0xffffffff
    1ef8:	ffffffff 	.word	0xffffffff
    1efc:	ffffffff 	.word	0xffffffff
    1f00:	ffffffff 	.word	0xffffffff
    1f04:	ffffffff 	.word	0xffffffff
    1f08:	ffffffff 	.word	0xffffffff
    1f0c:	ffffffff 	.word	0xffffffff
    1f10:	ffffffff 	.word	0xffffffff
    1f14:	ffffffff 	.word	0xffffffff
    1f18:	ffffffff 	.word	0xffffffff
    1f1c:	ffffffff 	.word	0xffffffff
    1f20:	ffffffff 	.word	0xffffffff
    1f24:	ffffffff 	.word	0xffffffff
    1f28:	ffffffff 	.word	0xffffffff
    1f2c:	ffffffff 	.word	0xffffffff
    1f30:	ffffffff 	.word	0xffffffff
    1f34:	ffffffff 	.word	0xffffffff
    1f38:	ffffffff 	.word	0xffffffff
    1f3c:	ffffffff 	.word	0xffffffff
    1f40:	ffffffff 	.word	0xffffffff
    1f44:	ffffffff 	.word	0xffffffff
    1f48:	ffffffff 	.word	0xffffffff
    1f4c:	ffffffff 	.word	0xffffffff
    1f50:	ffffffff 	.word	0xffffffff
    1f54:	ffffffff 	.word	0xffffffff
    1f58:	ffffffff 	.word	0xffffffff
    1f5c:	ffffffff 	.word	0xffffffff
    1f60:	ffffffff 	.word	0xffffffff
    1f64:	ffffffff 	.word	0xffffffff
    1f68:	ffffffff 	.word	0xffffffff
    1f6c:	ffffffff 	.word	0xffffffff
    1f70:	ffffffff 	.word	0xffffffff
    1f74:	ffffffff 	.word	0xffffffff
    1f78:	ffffffff 	.word	0xffffffff
    1f7c:	ffffffff 	.word	0xffffffff
    1f80:	ffffffff 	.word	0xffffffff
    1f84:	ffffffff 	.word	0xffffffff
    1f88:	ffffffff 	.word	0xffffffff
    1f8c:	ffffffff 	.word	0xffffffff
    1f90:	ffffffff 	.word	0xffffffff
    1f94:	ffffffff 	.word	0xffffffff
    1f98:	ffffffff 	.word	0xffffffff
    1f9c:	ffffffff 	.word	0xffffffff
    1fa0:	ffffffff 	.word	0xffffffff
    1fa4:	ffffffff 	.word	0xffffffff
    1fa8:	ffffffff 	.word	0xffffffff
    1fac:	ffffffff 	.word	0xffffffff
    1fb0:	ffffffff 	.word	0xffffffff
    1fb4:	ffffffff 	.word	0xffffffff
    1fb8:	ffffffff 	.word	0xffffffff
    1fbc:	ffffffff 	.word	0xffffffff
    1fc0:	ffffffff 	.word	0xffffffff
    1fc4:	ffffffff 	.word	0xffffffff
    1fc8:	ffffffff 	.word	0xffffffff
    1fcc:	ffffffff 	.word	0xffffffff
    1fd0:	ffffffff 	.word	0xffffffff
    1fd4:	ffffffff 	.word	0xffffffff
    1fd8:	ffffffff 	.word	0xffffffff
    1fdc:	ffffffff 	.word	0xffffffff
    1fe0:	ffffffff 	.word	0xffffffff
    1fe4:	ffffffff 	.word	0xffffffff
    1fe8:	ffffffff 	.word	0xffffffff
    1fec:	ffffffff 	.word	0xffffffff
    1ff0:	ffffffff 	.word	0xffffffff
    1ff4:	ffffffff 	.word	0xffffffff
    1ff8:	ffffffff 	.word	0xffffffff
    1ffc:	ffffffff 	.word	0xffffffff
    2000:	ffffffff 	.word	0xffffffff
    2004:	ffffffff 	.word	0xffffffff
    2008:	ffffffff 	.word	0xffffffff
    200c:	ffffffff 	.word	0xffffffff
    2010:	ffffffff 	.word	0xffffffff
    2014:	ffffffff 	.word	0xffffffff
    2018:	ffffffff 	.word	0xffffffff
    201c:	ffffffff 	.word	0xffffffff
    2020:	ffffffff 	.word	0xffffffff
    2024:	ffffffff 	.word	0xffffffff
    2028:	ffffffff 	.word	0xffffffff
    202c:	ffffffff 	.word	0xffffffff
    2030:	ffffffff 	.word	0xffffffff
    2034:	ffffffff 	.word	0xffffffff
    2038:	ffffffff 	.word	0xffffffff
    203c:	ffffffff 	.word	0xffffffff
    2040:	ffffffff 	.word	0xffffffff
    2044:	ffffffff 	.word	0xffffffff
    2048:	ffffffff 	.word	0xffffffff
    204c:	ffffffff 	.word	0xffffffff
    2050:	ffffffff 	.word	0xffffffff
    2054:	ffffffff 	.word	0xffffffff
    2058:	ffffffff 	.word	0xffffffff
    205c:	ffffffff 	.word	0xffffffff
    2060:	ffffffff 	.word	0xffffffff
    2064:	ffffffff 	.word	0xffffffff
    2068:	ffffffff 	.word	0xffffffff
    206c:	ffffffff 	.word	0xffffffff
    2070:	ffffffff 	.word	0xffffffff
    2074:	ffffffff 	.word	0xffffffff
    2078:	ffffffff 	.word	0xffffffff
    207c:	ffffffff 	.word	0xffffffff
    2080:	ffffffff 	.word	0xffffffff
    2084:	ffffffff 	.word	0xffffffff
    2088:	ffffffff 	.word	0xffffffff
    208c:	ffffffff 	.word	0xffffffff
    2090:	ffffffff 	.word	0xffffffff
    2094:	ffffffff 	.word	0xffffffff
    2098:	ffffffff 	.word	0xffffffff
    209c:	ffffffff 	.word	0xffffffff
    20a0:	ffffffff 	.word	0xffffffff
    20a4:	ffffffff 	.word	0xffffffff
    20a8:	ffffffff 	.word	0xffffffff
    20ac:	ffffffff 	.word	0xffffffff
    20b0:	ffffffff 	.word	0xffffffff
    20b4:	ffffffff 	.word	0xffffffff
    20b8:	ffffffff 	.word	0xffffffff
    20bc:	ffffffff 	.word	0xffffffff
    20c0:	ffffffff 	.word	0xffffffff
    20c4:	ffffffff 	.word	0xffffffff
    20c8:	ffffffff 	.word	0xffffffff
    20cc:	ffffffff 	.word	0xffffffff
    20d0:	ffffffff 	.word	0xffffffff
    20d4:	ffffffff 	.word	0xffffffff
    20d8:	ffffffff 	.word	0xffffffff
    20dc:	ffffffff 	.word	0xffffffff
    20e0:	ffffffff 	.word	0xffffffff
    20e4:	ffffffff 	.word	0xffffffff
    20e8:	ffffffff 	.word	0xffffffff
    20ec:	ffffffff 	.word	0xffffffff
    20f0:	ffffffff 	.word	0xffffffff
    20f4:	ffffffff 	.word	0xffffffff
    20f8:	ffffffff 	.word	0xffffffff
    20fc:	ffffffff 	.word	0xffffffff
    2100:	ffffffff 	.word	0xffffffff
    2104:	ffffffff 	.word	0xffffffff
    2108:	ffffffff 	.word	0xffffffff
    210c:	ffffffff 	.word	0xffffffff
    2110:	ffffffff 	.word	0xffffffff
    2114:	ffffffff 	.word	0xffffffff
    2118:	ffffffff 	.word	0xffffffff
    211c:	ffffffff 	.word	0xffffffff
    2120:	ffffffff 	.word	0xffffffff
    2124:	ffffffff 	.word	0xffffffff
    2128:	ffffffff 	.word	0xffffffff
    212c:	ffffffff 	.word	0xffffffff
    2130:	ffffffff 	.word	0xffffffff
    2134:	ffffffff 	.word	0xffffffff
    2138:	ffffffff 	.word	0xffffffff
    213c:	ffffffff 	.word	0xffffffff
    2140:	ffffffff 	.word	0xffffffff
    2144:	ffffffff 	.word	0xffffffff
    2148:	ffffffff 	.word	0xffffffff
    214c:	ffffffff 	.word	0xffffffff
    2150:	ffffffff 	.word	0xffffffff
    2154:	ffffffff 	.word	0xffffffff
    2158:	ffffffff 	.word	0xffffffff
    215c:	ffffffff 	.word	0xffffffff
    2160:	ffffffff 	.word	0xffffffff
    2164:	ffffffff 	.word	0xffffffff
    2168:	ffffffff 	.word	0xffffffff
    216c:	ffffffff 	.word	0xffffffff
    2170:	ffffffff 	.word	0xffffffff
    2174:	ffffffff 	.word	0xffffffff
    2178:	ffffffff 	.word	0xffffffff
    217c:	ffffffff 	.word	0xffffffff
    2180:	ffffffff 	.word	0xffffffff
    2184:	ffffffff 	.word	0xffffffff
    2188:	ffffffff 	.word	0xffffffff
    218c:	ffffffff 	.word	0xffffffff
    2190:	ffffffff 	.word	0xffffffff
    2194:	ffffffff 	.word	0xffffffff
    2198:	ffffffff 	.word	0xffffffff
    219c:	ffffffff 	.word	0xffffffff
    21a0:	ffffffff 	.word	0xffffffff
    21a4:	ffffffff 	.word	0xffffffff
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	ffffffff 	.word	0xffffffff
    21b0:	ffffffff 	.word	0xffffffff
    21b4:	ffffffff 	.word	0xffffffff
    21b8:	ffffffff 	.word	0xffffffff
    21bc:	ffffffff 	.word	0xffffffff
    21c0:	ffffffff 	.word	0xffffffff
    21c4:	ffffffff 	.word	0xffffffff
    21c8:	ffffffff 	.word	0xffffffff
    21cc:	ffffffff 	.word	0xffffffff
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	ffffffff 	.word	0xffffffff
    21d8:	ffffffff 	.word	0xffffffff
    21dc:	ffffffff 	.word	0xffffffff
    21e0:	ffffffff 	.word	0xffffffff
    21e4:	ffffffff 	.word	0xffffffff
    21e8:	ffffffff 	.word	0xffffffff
    21ec:	ffffffff 	.word	0xffffffff
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	ffffffff 	.word	0xffffffff
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	ffffffff 	.word	0xffffffff
    2200:	ffffffff 	.word	0xffffffff
    2204:	ffffffff 	.word	0xffffffff
    2208:	ffffffff 	.word	0xffffffff
    220c:	ffffffff 	.word	0xffffffff
    2210:	ffffffff 	.word	0xffffffff
    2214:	ffffffff 	.word	0xffffffff
    2218:	ffffffff 	.word	0xffffffff
    221c:	ffffffff 	.word	0xffffffff
    2220:	ffffffff 	.word	0xffffffff
    2224:	ffffffff 	.word	0xffffffff
    2228:	ffffffff 	.word	0xffffffff
    222c:	ffffffff 	.word	0xffffffff
    2230:	ffffffff 	.word	0xffffffff
    2234:	ffffffff 	.word	0xffffffff
    2238:	ffffffff 	.word	0xffffffff
    223c:	ffffffff 	.word	0xffffffff
    2240:	ffffffff 	.word	0xffffffff
    2244:	ffffffff 	.word	0xffffffff
    2248:	ffffffff 	.word	0xffffffff
    224c:	ffffffff 	.word	0xffffffff
    2250:	ffffffff 	.word	0xffffffff
    2254:	ffffffff 	.word	0xffffffff
    2258:	ffffffff 	.word	0xffffffff
    225c:	ffffffff 	.word	0xffffffff
    2260:	ffffffff 	.word	0xffffffff
    2264:	ffffffff 	.word	0xffffffff
    2268:	ffffffff 	.word	0xffffffff
    226c:	ffffffff 	.word	0xffffffff
    2270:	ffffffff 	.word	0xffffffff
    2274:	ffffffff 	.word	0xffffffff
    2278:	ffffffff 	.word	0xffffffff
    227c:	ffffffff 	.word	0xffffffff
    2280:	ffffffff 	.word	0xffffffff
    2284:	ffffffff 	.word	0xffffffff
    2288:	ffffffff 	.word	0xffffffff
    228c:	ffffffff 	.word	0xffffffff
    2290:	ffffffff 	.word	0xffffffff
    2294:	ffffffff 	.word	0xffffffff
    2298:	ffffffff 	.word	0xffffffff
    229c:	ffffffff 	.word	0xffffffff
    22a0:	ffffffff 	.word	0xffffffff
    22a4:	ffffffff 	.word	0xffffffff
    22a8:	ffffffff 	.word	0xffffffff
    22ac:	ffffffff 	.word	0xffffffff
    22b0:	ffffffff 	.word	0xffffffff
    22b4:	ffffffff 	.word	0xffffffff
    22b8:	ffffffff 	.word	0xffffffff
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	ffffffff 	.word	0xffffffff
    22c4:	ffffffff 	.word	0xffffffff
    22c8:	ffffffff 	.word	0xffffffff
    22cc:	ffffffff 	.word	0xffffffff
    22d0:	ffffffff 	.word	0xffffffff
    22d4:	ffffffff 	.word	0xffffffff
    22d8:	ffffffff 	.word	0xffffffff
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	ffffffff 	.word	0xffffffff
    22e4:	ffffffff 	.word	0xffffffff
    22e8:	ffffffff 	.word	0xffffffff
    22ec:	ffffffff 	.word	0xffffffff
    22f0:	ffffffff 	.word	0xffffffff
    22f4:	ffffffff 	.word	0xffffffff
    22f8:	ffffffff 	.word	0xffffffff
    22fc:	ffffffff 	.word	0xffffffff
    2300:	ffffffff 	.word	0xffffffff
    2304:	ffffffff 	.word	0xffffffff
    2308:	ffffffff 	.word	0xffffffff
    230c:	ffffffff 	.word	0xffffffff
    2310:	ffffffff 	.word	0xffffffff
    2314:	ffffffff 	.word	0xffffffff
    2318:	ffffffff 	.word	0xffffffff
    231c:	ffffffff 	.word	0xffffffff
    2320:	ffffffff 	.word	0xffffffff
    2324:	ffffffff 	.word	0xffffffff
    2328:	ffffffff 	.word	0xffffffff
    232c:	ffffffff 	.word	0xffffffff
    2330:	ffffffff 	.word	0xffffffff
    2334:	ffffffff 	.word	0xffffffff
    2338:	ffffffff 	.word	0xffffffff
    233c:	ffffffff 	.word	0xffffffff
    2340:	ffffffff 	.word	0xffffffff
    2344:	ffffffff 	.word	0xffffffff
    2348:	ffffffff 	.word	0xffffffff
    234c:	ffffffff 	.word	0xffffffff
    2350:	ffffffff 	.word	0xffffffff
    2354:	ffffffff 	.word	0xffffffff
    2358:	ffffffff 	.word	0xffffffff
    235c:	ffffffff 	.word	0xffffffff
    2360:	ffffffff 	.word	0xffffffff
    2364:	ffffffff 	.word	0xffffffff
    2368:	ffffffff 	.word	0xffffffff
    236c:	ffffffff 	.word	0xffffffff
    2370:	ffffffff 	.word	0xffffffff
    2374:	ffffffff 	.word	0xffffffff
    2378:	ffffffff 	.word	0xffffffff
    237c:	ffffffff 	.word	0xffffffff
    2380:	ffffffff 	.word	0xffffffff
    2384:	ffffffff 	.word	0xffffffff
    2388:	ffffffff 	.word	0xffffffff
    238c:	ffffffff 	.word	0xffffffff
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff
    2400:	ffffffff 	.word	0xffffffff
    2404:	ffffffff 	.word	0xffffffff
    2408:	ffffffff 	.word	0xffffffff
    240c:	ffffffff 	.word	0xffffffff
    2410:	ffffffff 	.word	0xffffffff
    2414:	ffffffff 	.word	0xffffffff
    2418:	ffffffff 	.word	0xffffffff
    241c:	ffffffff 	.word	0xffffffff
    2420:	ffffffff 	.word	0xffffffff
    2424:	ffffffff 	.word	0xffffffff
    2428:	ffffffff 	.word	0xffffffff
    242c:	ffffffff 	.word	0xffffffff
    2430:	ffffffff 	.word	0xffffffff
    2434:	ffffffff 	.word	0xffffffff
    2438:	ffffffff 	.word	0xffffffff
    243c:	ffffffff 	.word	0xffffffff
    2440:	ffffffff 	.word	0xffffffff
    2444:	ffffffff 	.word	0xffffffff
    2448:	ffffffff 	.word	0xffffffff
    244c:	ffffffff 	.word	0xffffffff
    2450:	ffffffff 	.word	0xffffffff
    2454:	ffffffff 	.word	0xffffffff
    2458:	ffffffff 	.word	0xffffffff
    245c:	ffffffff 	.word	0xffffffff
    2460:	ffffffff 	.word	0xffffffff
    2464:	ffffffff 	.word	0xffffffff
    2468:	ffffffff 	.word	0xffffffff
    246c:	ffffffff 	.word	0xffffffff
    2470:	ffffffff 	.word	0xffffffff
    2474:	ffffffff 	.word	0xffffffff
    2478:	ffffffff 	.word	0xffffffff
    247c:	ffffffff 	.word	0xffffffff
    2480:	ffffffff 	.word	0xffffffff
    2484:	ffffffff 	.word	0xffffffff
    2488:	ffffffff 	.word	0xffffffff
    248c:	ffffffff 	.word	0xffffffff
    2490:	ffffffff 	.word	0xffffffff
    2494:	ffffffff 	.word	0xffffffff
    2498:	ffffffff 	.word	0xffffffff
    249c:	ffffffff 	.word	0xffffffff
    24a0:	ffffffff 	.word	0xffffffff
    24a4:	ffffffff 	.word	0xffffffff
    24a8:	ffffffff 	.word	0xffffffff
    24ac:	ffffffff 	.word	0xffffffff
    24b0:	ffffffff 	.word	0xffffffff
    24b4:	ffffffff 	.word	0xffffffff
    24b8:	ffffffff 	.word	0xffffffff
    24bc:	ffffffff 	.word	0xffffffff
    24c0:	ffffffff 	.word	0xffffffff
    24c4:	ffffffff 	.word	0xffffffff
    24c8:	ffffffff 	.word	0xffffffff
    24cc:	ffffffff 	.word	0xffffffff
    24d0:	ffffffff 	.word	0xffffffff
    24d4:	ffffffff 	.word	0xffffffff
    24d8:	ffffffff 	.word	0xffffffff
    24dc:	ffffffff 	.word	0xffffffff
    24e0:	ffffffff 	.word	0xffffffff
    24e4:	ffffffff 	.word	0xffffffff
    24e8:	ffffffff 	.word	0xffffffff
    24ec:	ffffffff 	.word	0xffffffff
    24f0:	ffffffff 	.word	0xffffffff
    24f4:	ffffffff 	.word	0xffffffff
    24f8:	ffffffff 	.word	0xffffffff
    24fc:	ffffffff 	.word	0xffffffff
    2500:	ffffffff 	.word	0xffffffff
    2504:	ffffffff 	.word	0xffffffff
    2508:	ffffffff 	.word	0xffffffff
    250c:	ffffffff 	.word	0xffffffff
    2510:	ffffffff 	.word	0xffffffff
    2514:	ffffffff 	.word	0xffffffff
    2518:	ffffffff 	.word	0xffffffff
    251c:	ffffffff 	.word	0xffffffff
    2520:	ffffffff 	.word	0xffffffff
    2524:	ffffffff 	.word	0xffffffff
    2528:	ffffffff 	.word	0xffffffff
    252c:	ffffffff 	.word	0xffffffff
    2530:	ffffffff 	.word	0xffffffff
    2534:	ffffffff 	.word	0xffffffff
    2538:	ffffffff 	.word	0xffffffff
    253c:	ffffffff 	.word	0xffffffff
    2540:	ffffffff 	.word	0xffffffff
    2544:	ffffffff 	.word	0xffffffff
    2548:	ffffffff 	.word	0xffffffff
    254c:	ffffffff 	.word	0xffffffff
    2550:	ffffffff 	.word	0xffffffff
    2554:	ffffffff 	.word	0xffffffff
    2558:	ffffffff 	.word	0xffffffff
    255c:	ffffffff 	.word	0xffffffff
    2560:	ffffffff 	.word	0xffffffff
    2564:	ffffffff 	.word	0xffffffff
    2568:	ffffffff 	.word	0xffffffff
    256c:	ffffffff 	.word	0xffffffff
    2570:	ffffffff 	.word	0xffffffff
    2574:	ffffffff 	.word	0xffffffff
    2578:	ffffffff 	.word	0xffffffff
    257c:	ffffffff 	.word	0xffffffff
    2580:	ffffffff 	.word	0xffffffff
    2584:	ffffffff 	.word	0xffffffff
    2588:	ffffffff 	.word	0xffffffff
    258c:	ffffffff 	.word	0xffffffff
    2590:	ffffffff 	.word	0xffffffff
    2594:	ffffffff 	.word	0xffffffff
    2598:	ffffffff 	.word	0xffffffff
    259c:	ffffffff 	.word	0xffffffff
    25a0:	ffffffff 	.word	0xffffffff
    25a4:	ffffffff 	.word	0xffffffff
    25a8:	ffffffff 	.word	0xffffffff
    25ac:	ffffffff 	.word	0xffffffff
    25b0:	ffffffff 	.word	0xffffffff
    25b4:	ffffffff 	.word	0xffffffff
    25b8:	ffffffff 	.word	0xffffffff
    25bc:	ffffffff 	.word	0xffffffff
    25c0:	ffffffff 	.word	0xffffffff
    25c4:	ffffffff 	.word	0xffffffff
    25c8:	ffffffff 	.word	0xffffffff
    25cc:	ffffffff 	.word	0xffffffff
    25d0:	ffffffff 	.word	0xffffffff
    25d4:	ffffffff 	.word	0xffffffff
    25d8:	ffffffff 	.word	0xffffffff
    25dc:	ffffffff 	.word	0xffffffff
    25e0:	ffffffff 	.word	0xffffffff
    25e4:	ffffffff 	.word	0xffffffff
    25e8:	ffffffff 	.word	0xffffffff
    25ec:	ffffffff 	.word	0xffffffff
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	ffffffff 	.word	0xffffffff
    25f8:	ffffffff 	.word	0xffffffff
    25fc:	ffffffff 	.word	0xffffffff
    2600:	ffffffff 	.word	0xffffffff
    2604:	ffffffff 	.word	0xffffffff
    2608:	ffffffff 	.word	0xffffffff
    260c:	ffffffff 	.word	0xffffffff
    2610:	ffffffff 	.word	0xffffffff
    2614:	ffffffff 	.word	0xffffffff
    2618:	ffffffff 	.word	0xffffffff
    261c:	ffffffff 	.word	0xffffffff
    2620:	ffffffff 	.word	0xffffffff
    2624:	ffffffff 	.word	0xffffffff
    2628:	ffffffff 	.word	0xffffffff
    262c:	ffffffff 	.word	0xffffffff
    2630:	ffffffff 	.word	0xffffffff
    2634:	ffffffff 	.word	0xffffffff
    2638:	ffffffff 	.word	0xffffffff
    263c:	ffffffff 	.word	0xffffffff
    2640:	ffffffff 	.word	0xffffffff
    2644:	ffffffff 	.word	0xffffffff
    2648:	ffffffff 	.word	0xffffffff
    264c:	ffffffff 	.word	0xffffffff
    2650:	ffffffff 	.word	0xffffffff
    2654:	ffffffff 	.word	0xffffffff
    2658:	ffffffff 	.word	0xffffffff
    265c:	ffffffff 	.word	0xffffffff
    2660:	ffffffff 	.word	0xffffffff
    2664:	ffffffff 	.word	0xffffffff
    2668:	ffffffff 	.word	0xffffffff
    266c:	ffffffff 	.word	0xffffffff
    2670:	ffffffff 	.word	0xffffffff
    2674:	ffffffff 	.word	0xffffffff
    2678:	ffffffff 	.word	0xffffffff
    267c:	ffffffff 	.word	0xffffffff
    2680:	ffffffff 	.word	0xffffffff
    2684:	ffffffff 	.word	0xffffffff
    2688:	ffffffff 	.word	0xffffffff
    268c:	ffffffff 	.word	0xffffffff
    2690:	ffffffff 	.word	0xffffffff
    2694:	ffffffff 	.word	0xffffffff
    2698:	ffffffff 	.word	0xffffffff
    269c:	ffffffff 	.word	0xffffffff
    26a0:	ffffffff 	.word	0xffffffff
    26a4:	ffffffff 	.word	0xffffffff
    26a8:	ffffffff 	.word	0xffffffff
    26ac:	ffffffff 	.word	0xffffffff
    26b0:	ffffffff 	.word	0xffffffff
    26b4:	ffffffff 	.word	0xffffffff
    26b8:	ffffffff 	.word	0xffffffff
    26bc:	ffffffff 	.word	0xffffffff
    26c0:	ffffffff 	.word	0xffffffff
    26c4:	ffffffff 	.word	0xffffffff
    26c8:	ffffffff 	.word	0xffffffff
    26cc:	ffffffff 	.word	0xffffffff
    26d0:	ffffffff 	.word	0xffffffff
    26d4:	ffffffff 	.word	0xffffffff
    26d8:	ffffffff 	.word	0xffffffff
    26dc:	ffffffff 	.word	0xffffffff
    26e0:	ffffffff 	.word	0xffffffff
    26e4:	ffffffff 	.word	0xffffffff
    26e8:	ffffffff 	.word	0xffffffff
    26ec:	ffffffff 	.word	0xffffffff
    26f0:	ffffffff 	.word	0xffffffff
    26f4:	ffffffff 	.word	0xffffffff
    26f8:	ffffffff 	.word	0xffffffff
    26fc:	ffffffff 	.word	0xffffffff
    2700:	ffffffff 	.word	0xffffffff
    2704:	ffffffff 	.word	0xffffffff
    2708:	ffffffff 	.word	0xffffffff
    270c:	ffffffff 	.word	0xffffffff
    2710:	ffffffff 	.word	0xffffffff
    2714:	ffffffff 	.word	0xffffffff
    2718:	ffffffff 	.word	0xffffffff
    271c:	ffffffff 	.word	0xffffffff
    2720:	ffffffff 	.word	0xffffffff
    2724:	ffffffff 	.word	0xffffffff
    2728:	ffffffff 	.word	0xffffffff
    272c:	ffffffff 	.word	0xffffffff
    2730:	ffffffff 	.word	0xffffffff
    2734:	ffffffff 	.word	0xffffffff
    2738:	ffffffff 	.word	0xffffffff
    273c:	ffffffff 	.word	0xffffffff
    2740:	ffffffff 	.word	0xffffffff
    2744:	ffffffff 	.word	0xffffffff
    2748:	ffffffff 	.word	0xffffffff
    274c:	ffffffff 	.word	0xffffffff
    2750:	ffffffff 	.word	0xffffffff
    2754:	ffffffff 	.word	0xffffffff
    2758:	ffffffff 	.word	0xffffffff
    275c:	ffffffff 	.word	0xffffffff
    2760:	ffffffff 	.word	0xffffffff
    2764:	ffffffff 	.word	0xffffffff
    2768:	ffffffff 	.word	0xffffffff
    276c:	ffffffff 	.word	0xffffffff
    2770:	ffffffff 	.word	0xffffffff
    2774:	ffffffff 	.word	0xffffffff
    2778:	ffffffff 	.word	0xffffffff
    277c:	ffffffff 	.word	0xffffffff
    2780:	ffffffff 	.word	0xffffffff
    2784:	ffffffff 	.word	0xffffffff
    2788:	ffffffff 	.word	0xffffffff
    278c:	ffffffff 	.word	0xffffffff
    2790:	ffffffff 	.word	0xffffffff
    2794:	ffffffff 	.word	0xffffffff
    2798:	ffffffff 	.word	0xffffffff
    279c:	ffffffff 	.word	0xffffffff
    27a0:	ffffffff 	.word	0xffffffff
    27a4:	ffffffff 	.word	0xffffffff
    27a8:	ffffffff 	.word	0xffffffff
    27ac:	ffffffff 	.word	0xffffffff
    27b0:	ffffffff 	.word	0xffffffff
    27b4:	ffffffff 	.word	0xffffffff
    27b8:	ffffffff 	.word	0xffffffff
    27bc:	ffffffff 	.word	0xffffffff
    27c0:	ffffffff 	.word	0xffffffff
    27c4:	ffffffff 	.word	0xffffffff
    27c8:	ffffffff 	.word	0xffffffff
    27cc:	ffffffff 	.word	0xffffffff
    27d0:	ffffffff 	.word	0xffffffff
    27d4:	ffffffff 	.word	0xffffffff
    27d8:	ffffffff 	.word	0xffffffff
    27dc:	ffffffff 	.word	0xffffffff
    27e0:	ffffffff 	.word	0xffffffff
    27e4:	ffffffff 	.word	0xffffffff
    27e8:	ffffffff 	.word	0xffffffff
    27ec:	ffffffff 	.word	0xffffffff
    27f0:	ffffffff 	.word	0xffffffff
    27f4:	ffffffff 	.word	0xffffffff
    27f8:	ffffffff 	.word	0xffffffff
    27fc:	ffffffff 	.word	0xffffffff
    2800:	ffffffff 	.word	0xffffffff
    2804:	ffffffff 	.word	0xffffffff
    2808:	ffffffff 	.word	0xffffffff
    280c:	ffffffff 	.word	0xffffffff
    2810:	ffffffff 	.word	0xffffffff
    2814:	ffffffff 	.word	0xffffffff
    2818:	ffffffff 	.word	0xffffffff
    281c:	ffffffff 	.word	0xffffffff
    2820:	ffffffff 	.word	0xffffffff
    2824:	ffffffff 	.word	0xffffffff
    2828:	ffffffff 	.word	0xffffffff
    282c:	ffffffff 	.word	0xffffffff
    2830:	ffffffff 	.word	0xffffffff
    2834:	ffffffff 	.word	0xffffffff
    2838:	ffffffff 	.word	0xffffffff
    283c:	ffffffff 	.word	0xffffffff
    2840:	ffffffff 	.word	0xffffffff
    2844:	ffffffff 	.word	0xffffffff
    2848:	ffffffff 	.word	0xffffffff
    284c:	ffffffff 	.word	0xffffffff
    2850:	ffffffff 	.word	0xffffffff
    2854:	ffffffff 	.word	0xffffffff
    2858:	ffffffff 	.word	0xffffffff
    285c:	ffffffff 	.word	0xffffffff
    2860:	ffffffff 	.word	0xffffffff
    2864:	ffffffff 	.word	0xffffffff
    2868:	ffffffff 	.word	0xffffffff
    286c:	ffffffff 	.word	0xffffffff
    2870:	ffffffff 	.word	0xffffffff
    2874:	ffffffff 	.word	0xffffffff
    2878:	ffffffff 	.word	0xffffffff
    287c:	ffffffff 	.word	0xffffffff
    2880:	ffffffff 	.word	0xffffffff
    2884:	ffffffff 	.word	0xffffffff
    2888:	ffffffff 	.word	0xffffffff
    288c:	ffffffff 	.word	0xffffffff
    2890:	ffffffff 	.word	0xffffffff
    2894:	ffffffff 	.word	0xffffffff
    2898:	ffffffff 	.word	0xffffffff
    289c:	ffffffff 	.word	0xffffffff
    28a0:	ffffffff 	.word	0xffffffff
    28a4:	ffffffff 	.word	0xffffffff
    28a8:	ffffffff 	.word	0xffffffff
    28ac:	ffffffff 	.word	0xffffffff
    28b0:	ffffffff 	.word	0xffffffff
    28b4:	ffffffff 	.word	0xffffffff
    28b8:	ffffffff 	.word	0xffffffff
    28bc:	ffffffff 	.word	0xffffffff
    28c0:	ffffffff 	.word	0xffffffff
    28c4:	ffffffff 	.word	0xffffffff
    28c8:	ffffffff 	.word	0xffffffff
    28cc:	ffffffff 	.word	0xffffffff
    28d0:	ffffffff 	.word	0xffffffff
    28d4:	ffffffff 	.word	0xffffffff
    28d8:	ffffffff 	.word	0xffffffff
    28dc:	ffffffff 	.word	0xffffffff
    28e0:	ffffffff 	.word	0xffffffff
    28e4:	ffffffff 	.word	0xffffffff
    28e8:	ffffffff 	.word	0xffffffff
    28ec:	ffffffff 	.word	0xffffffff
    28f0:	ffffffff 	.word	0xffffffff
    28f4:	ffffffff 	.word	0xffffffff
    28f8:	ffffffff 	.word	0xffffffff
    28fc:	ffffffff 	.word	0xffffffff
    2900:	ffffffff 	.word	0xffffffff
    2904:	ffffffff 	.word	0xffffffff
    2908:	ffffffff 	.word	0xffffffff
    290c:	ffffffff 	.word	0xffffffff
    2910:	ffffffff 	.word	0xffffffff
    2914:	ffffffff 	.word	0xffffffff
    2918:	ffffffff 	.word	0xffffffff
    291c:	ffffffff 	.word	0xffffffff
    2920:	ffffffff 	.word	0xffffffff
    2924:	ffffffff 	.word	0xffffffff
    2928:	ffffffff 	.word	0xffffffff
    292c:	ffffffff 	.word	0xffffffff
    2930:	ffffffff 	.word	0xffffffff
    2934:	ffffffff 	.word	0xffffffff
    2938:	ffffffff 	.word	0xffffffff
    293c:	ffffffff 	.word	0xffffffff
    2940:	ffffffff 	.word	0xffffffff
    2944:	ffffffff 	.word	0xffffffff
    2948:	ffffffff 	.word	0xffffffff
    294c:	ffffffff 	.word	0xffffffff
    2950:	ffffffff 	.word	0xffffffff
    2954:	ffffffff 	.word	0xffffffff
    2958:	ffffffff 	.word	0xffffffff
    295c:	ffffffff 	.word	0xffffffff
    2960:	ffffffff 	.word	0xffffffff
    2964:	ffffffff 	.word	0xffffffff
    2968:	ffffffff 	.word	0xffffffff
    296c:	ffffffff 	.word	0xffffffff
    2970:	ffffffff 	.word	0xffffffff
    2974:	ffffffff 	.word	0xffffffff
    2978:	ffffffff 	.word	0xffffffff
    297c:	ffffffff 	.word	0xffffffff
    2980:	ffffffff 	.word	0xffffffff
    2984:	ffffffff 	.word	0xffffffff
    2988:	ffffffff 	.word	0xffffffff
    298c:	ffffffff 	.word	0xffffffff
    2990:	ffffffff 	.word	0xffffffff
    2994:	ffffffff 	.word	0xffffffff
    2998:	ffffffff 	.word	0xffffffff
    299c:	ffffffff 	.word	0xffffffff
    29a0:	ffffffff 	.word	0xffffffff
    29a4:	ffffffff 	.word	0xffffffff
    29a8:	ffffffff 	.word	0xffffffff
    29ac:	ffffffff 	.word	0xffffffff
    29b0:	ffffffff 	.word	0xffffffff
    29b4:	ffffffff 	.word	0xffffffff
    29b8:	ffffffff 	.word	0xffffffff
    29bc:	ffffffff 	.word	0xffffffff
    29c0:	ffffffff 	.word	0xffffffff
    29c4:	ffffffff 	.word	0xffffffff
    29c8:	ffffffff 	.word	0xffffffff
    29cc:	ffffffff 	.word	0xffffffff
    29d0:	ffffffff 	.word	0xffffffff
    29d4:	ffffffff 	.word	0xffffffff
    29d8:	ffffffff 	.word	0xffffffff
    29dc:	ffffffff 	.word	0xffffffff
    29e0:	ffffffff 	.word	0xffffffff
    29e4:	ffffffff 	.word	0xffffffff
    29e8:	ffffffff 	.word	0xffffffff
    29ec:	ffffffff 	.word	0xffffffff
    29f0:	ffffffff 	.word	0xffffffff
    29f4:	ffffffff 	.word	0xffffffff
    29f8:	ffffffff 	.word	0xffffffff
    29fc:	ffffffff 	.word	0xffffffff
    2a00:	ffffffff 	.word	0xffffffff
    2a04:	ffffffff 	.word	0xffffffff
    2a08:	ffffffff 	.word	0xffffffff
    2a0c:	ffffffff 	.word	0xffffffff
    2a10:	ffffffff 	.word	0xffffffff
    2a14:	ffffffff 	.word	0xffffffff
    2a18:	ffffffff 	.word	0xffffffff
    2a1c:	ffffffff 	.word	0xffffffff
    2a20:	ffffffff 	.word	0xffffffff
    2a24:	ffffffff 	.word	0xffffffff
    2a28:	ffffffff 	.word	0xffffffff
    2a2c:	ffffffff 	.word	0xffffffff
    2a30:	ffffffff 	.word	0xffffffff
    2a34:	ffffffff 	.word	0xffffffff
    2a38:	ffffffff 	.word	0xffffffff
    2a3c:	ffffffff 	.word	0xffffffff
    2a40:	ffffffff 	.word	0xffffffff
    2a44:	ffffffff 	.word	0xffffffff
    2a48:	ffffffff 	.word	0xffffffff
    2a4c:	ffffffff 	.word	0xffffffff
    2a50:	ffffffff 	.word	0xffffffff
    2a54:	ffffffff 	.word	0xffffffff
    2a58:	ffffffff 	.word	0xffffffff
    2a5c:	ffffffff 	.word	0xffffffff
    2a60:	ffffffff 	.word	0xffffffff
    2a64:	ffffffff 	.word	0xffffffff
    2a68:	ffffffff 	.word	0xffffffff
    2a6c:	ffffffff 	.word	0xffffffff
    2a70:	ffffffff 	.word	0xffffffff
    2a74:	ffffffff 	.word	0xffffffff
    2a78:	ffffffff 	.word	0xffffffff
    2a7c:	ffffffff 	.word	0xffffffff
    2a80:	ffffffff 	.word	0xffffffff
    2a84:	ffffffff 	.word	0xffffffff
    2a88:	ffffffff 	.word	0xffffffff
    2a8c:	ffffffff 	.word	0xffffffff
    2a90:	ffffffff 	.word	0xffffffff
    2a94:	ffffffff 	.word	0xffffffff
    2a98:	ffffffff 	.word	0xffffffff
    2a9c:	ffffffff 	.word	0xffffffff
    2aa0:	ffffffff 	.word	0xffffffff
    2aa4:	ffffffff 	.word	0xffffffff
    2aa8:	ffffffff 	.word	0xffffffff
    2aac:	ffffffff 	.word	0xffffffff
    2ab0:	ffffffff 	.word	0xffffffff
    2ab4:	ffffffff 	.word	0xffffffff
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	ffffffff 	.word	0xffffffff
    2ac0:	ffffffff 	.word	0xffffffff
    2ac4:	ffffffff 	.word	0xffffffff
    2ac8:	ffffffff 	.word	0xffffffff
    2acc:	ffffffff 	.word	0xffffffff
    2ad0:	ffffffff 	.word	0xffffffff
    2ad4:	ffffffff 	.word	0xffffffff
    2ad8:	ffffffff 	.word	0xffffffff
    2adc:	ffffffff 	.word	0xffffffff
    2ae0:	ffffffff 	.word	0xffffffff
    2ae4:	ffffffff 	.word	0xffffffff
    2ae8:	ffffffff 	.word	0xffffffff
    2aec:	ffffffff 	.word	0xffffffff
    2af0:	ffffffff 	.word	0xffffffff
    2af4:	ffffffff 	.word	0xffffffff
    2af8:	ffffffff 	.word	0xffffffff
    2afc:	ffffffff 	.word	0xffffffff
    2b00:	ffffffff 	.word	0xffffffff
    2b04:	ffffffff 	.word	0xffffffff
    2b08:	ffffffff 	.word	0xffffffff
    2b0c:	ffffffff 	.word	0xffffffff
    2b10:	ffffffff 	.word	0xffffffff
    2b14:	ffffffff 	.word	0xffffffff
    2b18:	ffffffff 	.word	0xffffffff
    2b1c:	ffffffff 	.word	0xffffffff
    2b20:	ffffffff 	.word	0xffffffff
    2b24:	ffffffff 	.word	0xffffffff
    2b28:	ffffffff 	.word	0xffffffff
    2b2c:	ffffffff 	.word	0xffffffff
    2b30:	ffffffff 	.word	0xffffffff
    2b34:	ffffffff 	.word	0xffffffff
    2b38:	ffffffff 	.word	0xffffffff
    2b3c:	ffffffff 	.word	0xffffffff
    2b40:	ffffffff 	.word	0xffffffff
    2b44:	ffffffff 	.word	0xffffffff
    2b48:	ffffffff 	.word	0xffffffff
    2b4c:	ffffffff 	.word	0xffffffff
    2b50:	ffffffff 	.word	0xffffffff
    2b54:	ffffffff 	.word	0xffffffff
    2b58:	ffffffff 	.word	0xffffffff
    2b5c:	ffffffff 	.word	0xffffffff
    2b60:	ffffffff 	.word	0xffffffff
    2b64:	ffffffff 	.word	0xffffffff
    2b68:	ffffffff 	.word	0xffffffff
    2b6c:	ffffffff 	.word	0xffffffff
    2b70:	ffffffff 	.word	0xffffffff
    2b74:	ffffffff 	.word	0xffffffff
    2b78:	ffffffff 	.word	0xffffffff
    2b7c:	ffffffff 	.word	0xffffffff
    2b80:	ffffffff 	.word	0xffffffff
    2b84:	ffffffff 	.word	0xffffffff
    2b88:	ffffffff 	.word	0xffffffff
    2b8c:	ffffffff 	.word	0xffffffff
    2b90:	ffffffff 	.word	0xffffffff
    2b94:	ffffffff 	.word	0xffffffff
    2b98:	ffffffff 	.word	0xffffffff
    2b9c:	ffffffff 	.word	0xffffffff
    2ba0:	ffffffff 	.word	0xffffffff
    2ba4:	ffffffff 	.word	0xffffffff
    2ba8:	ffffffff 	.word	0xffffffff
    2bac:	ffffffff 	.word	0xffffffff
    2bb0:	ffffffff 	.word	0xffffffff
    2bb4:	ffffffff 	.word	0xffffffff
    2bb8:	ffffffff 	.word	0xffffffff
    2bbc:	ffffffff 	.word	0xffffffff
    2bc0:	ffffffff 	.word	0xffffffff
    2bc4:	ffffffff 	.word	0xffffffff
    2bc8:	ffffffff 	.word	0xffffffff
    2bcc:	ffffffff 	.word	0xffffffff
    2bd0:	ffffffff 	.word	0xffffffff
    2bd4:	ffffffff 	.word	0xffffffff
    2bd8:	ffffffff 	.word	0xffffffff
    2bdc:	ffffffff 	.word	0xffffffff
    2be0:	ffffffff 	.word	0xffffffff
    2be4:	ffffffff 	.word	0xffffffff
    2be8:	ffffffff 	.word	0xffffffff
    2bec:	ffffffff 	.word	0xffffffff
    2bf0:	ffffffff 	.word	0xffffffff
    2bf4:	ffffffff 	.word	0xffffffff
    2bf8:	ffffffff 	.word	0xffffffff
    2bfc:	ffffffff 	.word	0xffffffff
    2c00:	ffffffff 	.word	0xffffffff
    2c04:	ffffffff 	.word	0xffffffff
    2c08:	ffffffff 	.word	0xffffffff
    2c0c:	ffffffff 	.word	0xffffffff
    2c10:	ffffffff 	.word	0xffffffff
    2c14:	ffffffff 	.word	0xffffffff
    2c18:	ffffffff 	.word	0xffffffff
    2c1c:	ffffffff 	.word	0xffffffff
    2c20:	ffffffff 	.word	0xffffffff
    2c24:	ffffffff 	.word	0xffffffff
    2c28:	ffffffff 	.word	0xffffffff
    2c2c:	ffffffff 	.word	0xffffffff
    2c30:	ffffffff 	.word	0xffffffff
    2c34:	ffffffff 	.word	0xffffffff
    2c38:	ffffffff 	.word	0xffffffff
    2c3c:	ffffffff 	.word	0xffffffff
    2c40:	ffffffff 	.word	0xffffffff
    2c44:	ffffffff 	.word	0xffffffff
    2c48:	ffffffff 	.word	0xffffffff
    2c4c:	ffffffff 	.word	0xffffffff
    2c50:	ffffffff 	.word	0xffffffff
    2c54:	ffffffff 	.word	0xffffffff
    2c58:	ffffffff 	.word	0xffffffff
    2c5c:	ffffffff 	.word	0xffffffff
    2c60:	ffffffff 	.word	0xffffffff
    2c64:	ffffffff 	.word	0xffffffff
    2c68:	ffffffff 	.word	0xffffffff
    2c6c:	ffffffff 	.word	0xffffffff
    2c70:	ffffffff 	.word	0xffffffff
    2c74:	ffffffff 	.word	0xffffffff
    2c78:	ffffffff 	.word	0xffffffff
    2c7c:	ffffffff 	.word	0xffffffff
    2c80:	ffffffff 	.word	0xffffffff
    2c84:	ffffffff 	.word	0xffffffff
    2c88:	ffffffff 	.word	0xffffffff
    2c8c:	ffffffff 	.word	0xffffffff
    2c90:	ffffffff 	.word	0xffffffff
    2c94:	ffffffff 	.word	0xffffffff
    2c98:	ffffffff 	.word	0xffffffff
    2c9c:	ffffffff 	.word	0xffffffff
    2ca0:	ffffffff 	.word	0xffffffff
    2ca4:	ffffffff 	.word	0xffffffff
    2ca8:	ffffffff 	.word	0xffffffff
    2cac:	ffffffff 	.word	0xffffffff
    2cb0:	ffffffff 	.word	0xffffffff
    2cb4:	ffffffff 	.word	0xffffffff
    2cb8:	ffffffff 	.word	0xffffffff
    2cbc:	ffffffff 	.word	0xffffffff
    2cc0:	ffffffff 	.word	0xffffffff
    2cc4:	ffffffff 	.word	0xffffffff
    2cc8:	ffffffff 	.word	0xffffffff
    2ccc:	ffffffff 	.word	0xffffffff
    2cd0:	ffffffff 	.word	0xffffffff
    2cd4:	ffffffff 	.word	0xffffffff
    2cd8:	ffffffff 	.word	0xffffffff
    2cdc:	ffffffff 	.word	0xffffffff
    2ce0:	ffffffff 	.word	0xffffffff
    2ce4:	ffffffff 	.word	0xffffffff
    2ce8:	ffffffff 	.word	0xffffffff
    2cec:	ffffffff 	.word	0xffffffff
    2cf0:	ffffffff 	.word	0xffffffff
    2cf4:	ffffffff 	.word	0xffffffff
    2cf8:	ffffffff 	.word	0xffffffff
    2cfc:	ffffffff 	.word	0xffffffff
    2d00:	ffffffff 	.word	0xffffffff
    2d04:	ffffffff 	.word	0xffffffff
    2d08:	ffffffff 	.word	0xffffffff
    2d0c:	ffffffff 	.word	0xffffffff
    2d10:	ffffffff 	.word	0xffffffff
    2d14:	ffffffff 	.word	0xffffffff
    2d18:	ffffffff 	.word	0xffffffff
    2d1c:	ffffffff 	.word	0xffffffff
    2d20:	ffffffff 	.word	0xffffffff
    2d24:	ffffffff 	.word	0xffffffff
    2d28:	ffffffff 	.word	0xffffffff
    2d2c:	ffffffff 	.word	0xffffffff
    2d30:	ffffffff 	.word	0xffffffff
    2d34:	ffffffff 	.word	0xffffffff
    2d38:	ffffffff 	.word	0xffffffff
    2d3c:	ffffffff 	.word	0xffffffff
    2d40:	ffffffff 	.word	0xffffffff
    2d44:	ffffffff 	.word	0xffffffff
    2d48:	ffffffff 	.word	0xffffffff
    2d4c:	ffffffff 	.word	0xffffffff
    2d50:	ffffffff 	.word	0xffffffff
    2d54:	ffffffff 	.word	0xffffffff
    2d58:	ffffffff 	.word	0xffffffff
    2d5c:	ffffffff 	.word	0xffffffff
    2d60:	ffffffff 	.word	0xffffffff
    2d64:	ffffffff 	.word	0xffffffff
    2d68:	ffffffff 	.word	0xffffffff
    2d6c:	ffffffff 	.word	0xffffffff
    2d70:	ffffffff 	.word	0xffffffff
    2d74:	ffffffff 	.word	0xffffffff
    2d78:	ffffffff 	.word	0xffffffff
    2d7c:	ffffffff 	.word	0xffffffff
    2d80:	ffffffff 	.word	0xffffffff
    2d84:	ffffffff 	.word	0xffffffff
    2d88:	ffffffff 	.word	0xffffffff
    2d8c:	ffffffff 	.word	0xffffffff
    2d90:	ffffffff 	.word	0xffffffff
    2d94:	ffffffff 	.word	0xffffffff
    2d98:	ffffffff 	.word	0xffffffff
    2d9c:	ffffffff 	.word	0xffffffff
    2da0:	ffffffff 	.word	0xffffffff
    2da4:	ffffffff 	.word	0xffffffff
    2da8:	ffffffff 	.word	0xffffffff
    2dac:	ffffffff 	.word	0xffffffff
    2db0:	ffffffff 	.word	0xffffffff
    2db4:	ffffffff 	.word	0xffffffff
    2db8:	ffffffff 	.word	0xffffffff
    2dbc:	ffffffff 	.word	0xffffffff
    2dc0:	ffffffff 	.word	0xffffffff
    2dc4:	ffffffff 	.word	0xffffffff
    2dc8:	ffffffff 	.word	0xffffffff
    2dcc:	ffffffff 	.word	0xffffffff
    2dd0:	ffffffff 	.word	0xffffffff
    2dd4:	ffffffff 	.word	0xffffffff
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	ffffffff 	.word	0xffffffff
    2de0:	ffffffff 	.word	0xffffffff
    2de4:	ffffffff 	.word	0xffffffff
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	ffffffff 	.word	0xffffffff
    2df0:	ffffffff 	.word	0xffffffff
    2df4:	ffffffff 	.word	0xffffffff
    2df8:	ffffffff 	.word	0xffffffff
    2dfc:	ffffffff 	.word	0xffffffff
    2e00:	ffffffff 	.word	0xffffffff
    2e04:	ffffffff 	.word	0xffffffff
    2e08:	ffffffff 	.word	0xffffffff
    2e0c:	ffffffff 	.word	0xffffffff
    2e10:	ffffffff 	.word	0xffffffff
    2e14:	ffffffff 	.word	0xffffffff
    2e18:	ffffffff 	.word	0xffffffff
    2e1c:	ffffffff 	.word	0xffffffff
    2e20:	ffffffff 	.word	0xffffffff
    2e24:	ffffffff 	.word	0xffffffff
    2e28:	ffffffff 	.word	0xffffffff
    2e2c:	ffffffff 	.word	0xffffffff
    2e30:	ffffffff 	.word	0xffffffff
    2e34:	ffffffff 	.word	0xffffffff
    2e38:	ffffffff 	.word	0xffffffff
    2e3c:	ffffffff 	.word	0xffffffff
    2e40:	ffffffff 	.word	0xffffffff
    2e44:	ffffffff 	.word	0xffffffff
    2e48:	ffffffff 	.word	0xffffffff
    2e4c:	ffffffff 	.word	0xffffffff
    2e50:	ffffffff 	.word	0xffffffff
    2e54:	ffffffff 	.word	0xffffffff
    2e58:	ffffffff 	.word	0xffffffff
    2e5c:	ffffffff 	.word	0xffffffff
    2e60:	ffffffff 	.word	0xffffffff
    2e64:	ffffffff 	.word	0xffffffff
    2e68:	ffffffff 	.word	0xffffffff
    2e6c:	ffffffff 	.word	0xffffffff
    2e70:	ffffffff 	.word	0xffffffff
    2e74:	ffffffff 	.word	0xffffffff
    2e78:	ffffffff 	.word	0xffffffff
    2e7c:	ffffffff 	.word	0xffffffff
    2e80:	ffffffff 	.word	0xffffffff
    2e84:	ffffffff 	.word	0xffffffff
    2e88:	ffffffff 	.word	0xffffffff
    2e8c:	ffffffff 	.word	0xffffffff
    2e90:	ffffffff 	.word	0xffffffff
    2e94:	ffffffff 	.word	0xffffffff
    2e98:	ffffffff 	.word	0xffffffff
    2e9c:	ffffffff 	.word	0xffffffff
    2ea0:	ffffffff 	.word	0xffffffff
    2ea4:	ffffffff 	.word	0xffffffff
    2ea8:	ffffffff 	.word	0xffffffff
    2eac:	ffffffff 	.word	0xffffffff
    2eb0:	ffffffff 	.word	0xffffffff
    2eb4:	ffffffff 	.word	0xffffffff
    2eb8:	ffffffff 	.word	0xffffffff
    2ebc:	ffffffff 	.word	0xffffffff
    2ec0:	ffffffff 	.word	0xffffffff
    2ec4:	ffffffff 	.word	0xffffffff
    2ec8:	ffffffff 	.word	0xffffffff
    2ecc:	ffffffff 	.word	0xffffffff
    2ed0:	ffffffff 	.word	0xffffffff
    2ed4:	ffffffff 	.word	0xffffffff
    2ed8:	ffffffff 	.word	0xffffffff
    2edc:	ffffffff 	.word	0xffffffff
    2ee0:	ffffffff 	.word	0xffffffff
    2ee4:	ffffffff 	.word	0xffffffff
    2ee8:	ffffffff 	.word	0xffffffff
    2eec:	ffffffff 	.word	0xffffffff
    2ef0:	ffffffff 	.word	0xffffffff
    2ef4:	ffffffff 	.word	0xffffffff
    2ef8:	ffffffff 	.word	0xffffffff
    2efc:	ffffffff 	.word	0xffffffff
    2f00:	ffffffff 	.word	0xffffffff
    2f04:	ffffffff 	.word	0xffffffff
    2f08:	ffffffff 	.word	0xffffffff
    2f0c:	ffffffff 	.word	0xffffffff
    2f10:	ffffffff 	.word	0xffffffff
    2f14:	ffffffff 	.word	0xffffffff
    2f18:	ffffffff 	.word	0xffffffff
    2f1c:	ffffffff 	.word	0xffffffff
    2f20:	ffffffff 	.word	0xffffffff
    2f24:	ffffffff 	.word	0xffffffff
    2f28:	ffffffff 	.word	0xffffffff
    2f2c:	ffffffff 	.word	0xffffffff
    2f30:	ffffffff 	.word	0xffffffff
    2f34:	ffffffff 	.word	0xffffffff
    2f38:	ffffffff 	.word	0xffffffff
    2f3c:	ffffffff 	.word	0xffffffff
    2f40:	ffffffff 	.word	0xffffffff
    2f44:	ffffffff 	.word	0xffffffff
    2f48:	ffffffff 	.word	0xffffffff
    2f4c:	ffffffff 	.word	0xffffffff
    2f50:	ffffffff 	.word	0xffffffff
    2f54:	ffffffff 	.word	0xffffffff
    2f58:	ffffffff 	.word	0xffffffff
    2f5c:	ffffffff 	.word	0xffffffff
    2f60:	ffffffff 	.word	0xffffffff
    2f64:	ffffffff 	.word	0xffffffff
    2f68:	ffffffff 	.word	0xffffffff
    2f6c:	ffffffff 	.word	0xffffffff
    2f70:	ffffffff 	.word	0xffffffff
    2f74:	ffffffff 	.word	0xffffffff
    2f78:	ffffffff 	.word	0xffffffff
    2f7c:	ffffffff 	.word	0xffffffff
    2f80:	ffffffff 	.word	0xffffffff
    2f84:	ffffffff 	.word	0xffffffff
    2f88:	ffffffff 	.word	0xffffffff
    2f8c:	ffffffff 	.word	0xffffffff
    2f90:	ffffffff 	.word	0xffffffff
    2f94:	ffffffff 	.word	0xffffffff
    2f98:	ffffffff 	.word	0xffffffff
    2f9c:	ffffffff 	.word	0xffffffff
    2fa0:	ffffffff 	.word	0xffffffff
    2fa4:	ffffffff 	.word	0xffffffff
    2fa8:	ffffffff 	.word	0xffffffff
    2fac:	ffffffff 	.word	0xffffffff
    2fb0:	ffffffff 	.word	0xffffffff
    2fb4:	ffffffff 	.word	0xffffffff
    2fb8:	ffffffff 	.word	0xffffffff
    2fbc:	ffffffff 	.word	0xffffffff
    2fc0:	ffffffff 	.word	0xffffffff
    2fc4:	ffffffff 	.word	0xffffffff
    2fc8:	ffffffff 	.word	0xffffffff
    2fcc:	ffffffff 	.word	0xffffffff
    2fd0:	ffffffff 	.word	0xffffffff
    2fd4:	ffffffff 	.word	0xffffffff
    2fd8:	ffffffff 	.word	0xffffffff
    2fdc:	ffffffff 	.word	0xffffffff
    2fe0:	ffffffff 	.word	0xffffffff
    2fe4:	ffffffff 	.word	0xffffffff
    2fe8:	ffffffff 	.word	0xffffffff
    2fec:	ffffffff 	.word	0xffffffff
    2ff0:	ffffffff 	.word	0xffffffff
    2ff4:	ffffffff 	.word	0xffffffff
    2ff8:	ffffffff 	.word	0xffffffff
    2ffc:	ffffffff 	.word	0xffffffff
    3000:	ffffffff 	.word	0xffffffff
    3004:	ffffffff 	.word	0xffffffff
    3008:	ffffffff 	.word	0xffffffff
    300c:	ffffffff 	.word	0xffffffff
    3010:	ffffffff 	.word	0xffffffff
    3014:	ffffffff 	.word	0xffffffff
    3018:	ffffffff 	.word	0xffffffff
    301c:	ffffffff 	.word	0xffffffff
    3020:	ffffffff 	.word	0xffffffff
    3024:	ffffffff 	.word	0xffffffff
    3028:	ffffffff 	.word	0xffffffff
    302c:	ffffffff 	.word	0xffffffff
    3030:	ffffffff 	.word	0xffffffff
    3034:	ffffffff 	.word	0xffffffff
    3038:	ffffffff 	.word	0xffffffff
    303c:	ffffffff 	.word	0xffffffff
    3040:	ffffffff 	.word	0xffffffff
    3044:	ffffffff 	.word	0xffffffff
    3048:	ffffffff 	.word	0xffffffff
    304c:	ffffffff 	.word	0xffffffff
    3050:	ffffffff 	.word	0xffffffff
    3054:	ffffffff 	.word	0xffffffff
    3058:	ffffffff 	.word	0xffffffff
    305c:	ffffffff 	.word	0xffffffff
    3060:	ffffffff 	.word	0xffffffff
    3064:	ffffffff 	.word	0xffffffff
    3068:	ffffffff 	.word	0xffffffff
    306c:	ffffffff 	.word	0xffffffff
    3070:	ffffffff 	.word	0xffffffff
    3074:	ffffffff 	.word	0xffffffff
    3078:	ffffffff 	.word	0xffffffff
    307c:	ffffffff 	.word	0xffffffff
    3080:	ffffffff 	.word	0xffffffff
    3084:	ffffffff 	.word	0xffffffff
    3088:	ffffffff 	.word	0xffffffff
    308c:	ffffffff 	.word	0xffffffff
    3090:	ffffffff 	.word	0xffffffff
    3094:	ffffffff 	.word	0xffffffff
    3098:	ffffffff 	.word	0xffffffff
    309c:	ffffffff 	.word	0xffffffff
    30a0:	ffffffff 	.word	0xffffffff
    30a4:	ffffffff 	.word	0xffffffff
    30a8:	ffffffff 	.word	0xffffffff
    30ac:	ffffffff 	.word	0xffffffff
    30b0:	ffffffff 	.word	0xffffffff
    30b4:	ffffffff 	.word	0xffffffff
    30b8:	ffffffff 	.word	0xffffffff
    30bc:	ffffffff 	.word	0xffffffff
    30c0:	ffffffff 	.word	0xffffffff
    30c4:	ffffffff 	.word	0xffffffff
    30c8:	ffffffff 	.word	0xffffffff
    30cc:	ffffffff 	.word	0xffffffff
    30d0:	ffffffff 	.word	0xffffffff
    30d4:	ffffffff 	.word	0xffffffff
    30d8:	ffffffff 	.word	0xffffffff
    30dc:	ffffffff 	.word	0xffffffff
    30e0:	ffffffff 	.word	0xffffffff
    30e4:	ffffffff 	.word	0xffffffff
    30e8:	ffffffff 	.word	0xffffffff
    30ec:	ffffffff 	.word	0xffffffff
    30f0:	ffffffff 	.word	0xffffffff
    30f4:	ffffffff 	.word	0xffffffff
    30f8:	ffffffff 	.word	0xffffffff
    30fc:	ffffffff 	.word	0xffffffff
    3100:	ffffffff 	.word	0xffffffff
    3104:	ffffffff 	.word	0xffffffff
    3108:	ffffffff 	.word	0xffffffff
    310c:	ffffffff 	.word	0xffffffff
    3110:	ffffffff 	.word	0xffffffff
    3114:	ffffffff 	.word	0xffffffff
    3118:	ffffffff 	.word	0xffffffff
    311c:	ffffffff 	.word	0xffffffff
    3120:	ffffffff 	.word	0xffffffff
    3124:	ffffffff 	.word	0xffffffff
    3128:	ffffffff 	.word	0xffffffff
    312c:	ffffffff 	.word	0xffffffff
    3130:	ffffffff 	.word	0xffffffff
    3134:	ffffffff 	.word	0xffffffff
    3138:	ffffffff 	.word	0xffffffff
    313c:	ffffffff 	.word	0xffffffff
    3140:	ffffffff 	.word	0xffffffff
    3144:	ffffffff 	.word	0xffffffff
    3148:	ffffffff 	.word	0xffffffff
    314c:	ffffffff 	.word	0xffffffff
    3150:	ffffffff 	.word	0xffffffff
    3154:	ffffffff 	.word	0xffffffff
    3158:	ffffffff 	.word	0xffffffff
    315c:	ffffffff 	.word	0xffffffff
    3160:	ffffffff 	.word	0xffffffff
    3164:	ffffffff 	.word	0xffffffff
    3168:	ffffffff 	.word	0xffffffff
    316c:	ffffffff 	.word	0xffffffff
    3170:	ffffffff 	.word	0xffffffff
    3174:	ffffffff 	.word	0xffffffff
    3178:	ffffffff 	.word	0xffffffff
    317c:	ffffffff 	.word	0xffffffff
    3180:	ffffffff 	.word	0xffffffff
    3184:	ffffffff 	.word	0xffffffff
    3188:	ffffffff 	.word	0xffffffff
    318c:	ffffffff 	.word	0xffffffff
    3190:	ffffffff 	.word	0xffffffff
    3194:	ffffffff 	.word	0xffffffff
    3198:	ffffffff 	.word	0xffffffff
    319c:	ffffffff 	.word	0xffffffff
    31a0:	ffffffff 	.word	0xffffffff
    31a4:	ffffffff 	.word	0xffffffff
    31a8:	ffffffff 	.word	0xffffffff
    31ac:	ffffffff 	.word	0xffffffff
    31b0:	ffffffff 	.word	0xffffffff
    31b4:	ffffffff 	.word	0xffffffff
    31b8:	ffffffff 	.word	0xffffffff
    31bc:	ffffffff 	.word	0xffffffff
    31c0:	ffffffff 	.word	0xffffffff
    31c4:	ffffffff 	.word	0xffffffff
    31c8:	ffffffff 	.word	0xffffffff
    31cc:	ffffffff 	.word	0xffffffff
    31d0:	ffffffff 	.word	0xffffffff
    31d4:	ffffffff 	.word	0xffffffff
    31d8:	ffffffff 	.word	0xffffffff
    31dc:	ffffffff 	.word	0xffffffff
    31e0:	ffffffff 	.word	0xffffffff
    31e4:	ffffffff 	.word	0xffffffff
    31e8:	ffffffff 	.word	0xffffffff
    31ec:	ffffffff 	.word	0xffffffff
    31f0:	ffffffff 	.word	0xffffffff
    31f4:	ffffffff 	.word	0xffffffff
    31f8:	ffffffff 	.word	0xffffffff
    31fc:	ffffffff 	.word	0xffffffff
    3200:	ffffffff 	.word	0xffffffff
    3204:	ffffffff 	.word	0xffffffff
    3208:	ffffffff 	.word	0xffffffff
    320c:	ffffffff 	.word	0xffffffff
    3210:	ffffffff 	.word	0xffffffff
    3214:	ffffffff 	.word	0xffffffff
    3218:	ffffffff 	.word	0xffffffff
    321c:	ffffffff 	.word	0xffffffff
    3220:	ffffffff 	.word	0xffffffff
    3224:	ffffffff 	.word	0xffffffff
    3228:	ffffffff 	.word	0xffffffff
    322c:	ffffffff 	.word	0xffffffff
    3230:	ffffffff 	.word	0xffffffff
    3234:	ffffffff 	.word	0xffffffff
    3238:	ffffffff 	.word	0xffffffff
    323c:	ffffffff 	.word	0xffffffff
    3240:	ffffffff 	.word	0xffffffff
    3244:	ffffffff 	.word	0xffffffff
    3248:	ffffffff 	.word	0xffffffff
    324c:	ffffffff 	.word	0xffffffff
    3250:	ffffffff 	.word	0xffffffff
    3254:	ffffffff 	.word	0xffffffff
    3258:	ffffffff 	.word	0xffffffff
    325c:	ffffffff 	.word	0xffffffff
    3260:	ffffffff 	.word	0xffffffff
    3264:	ffffffff 	.word	0xffffffff
    3268:	ffffffff 	.word	0xffffffff
    326c:	ffffffff 	.word	0xffffffff
    3270:	ffffffff 	.word	0xffffffff
    3274:	ffffffff 	.word	0xffffffff
    3278:	ffffffff 	.word	0xffffffff
    327c:	ffffffff 	.word	0xffffffff
    3280:	ffffffff 	.word	0xffffffff
    3284:	ffffffff 	.word	0xffffffff
    3288:	ffffffff 	.word	0xffffffff
    328c:	ffffffff 	.word	0xffffffff
    3290:	ffffffff 	.word	0xffffffff
    3294:	ffffffff 	.word	0xffffffff
    3298:	ffffffff 	.word	0xffffffff
    329c:	ffffffff 	.word	0xffffffff
    32a0:	ffffffff 	.word	0xffffffff
    32a4:	ffffffff 	.word	0xffffffff
    32a8:	ffffffff 	.word	0xffffffff
    32ac:	ffffffff 	.word	0xffffffff
    32b0:	ffffffff 	.word	0xffffffff
    32b4:	ffffffff 	.word	0xffffffff
    32b8:	ffffffff 	.word	0xffffffff
    32bc:	ffffffff 	.word	0xffffffff
    32c0:	ffffffff 	.word	0xffffffff
    32c4:	ffffffff 	.word	0xffffffff
    32c8:	ffffffff 	.word	0xffffffff
    32cc:	ffffffff 	.word	0xffffffff
    32d0:	ffffffff 	.word	0xffffffff
    32d4:	ffffffff 	.word	0xffffffff
    32d8:	ffffffff 	.word	0xffffffff
    32dc:	ffffffff 	.word	0xffffffff
    32e0:	ffffffff 	.word	0xffffffff
    32e4:	ffffffff 	.word	0xffffffff
    32e8:	ffffffff 	.word	0xffffffff
    32ec:	ffffffff 	.word	0xffffffff
    32f0:	ffffffff 	.word	0xffffffff
    32f4:	ffffffff 	.word	0xffffffff
    32f8:	ffffffff 	.word	0xffffffff
    32fc:	ffffffff 	.word	0xffffffff
    3300:	ffffffff 	.word	0xffffffff
    3304:	ffffffff 	.word	0xffffffff
    3308:	ffffffff 	.word	0xffffffff
    330c:	ffffffff 	.word	0xffffffff
    3310:	ffffffff 	.word	0xffffffff
    3314:	ffffffff 	.word	0xffffffff
    3318:	ffffffff 	.word	0xffffffff
    331c:	ffffffff 	.word	0xffffffff
    3320:	ffffffff 	.word	0xffffffff
    3324:	ffffffff 	.word	0xffffffff
    3328:	ffffffff 	.word	0xffffffff
    332c:	ffffffff 	.word	0xffffffff
    3330:	ffffffff 	.word	0xffffffff
    3334:	ffffffff 	.word	0xffffffff
    3338:	ffffffff 	.word	0xffffffff
    333c:	ffffffff 	.word	0xffffffff
    3340:	ffffffff 	.word	0xffffffff
    3344:	ffffffff 	.word	0xffffffff
    3348:	ffffffff 	.word	0xffffffff
    334c:	ffffffff 	.word	0xffffffff
    3350:	ffffffff 	.word	0xffffffff
    3354:	ffffffff 	.word	0xffffffff
    3358:	ffffffff 	.word	0xffffffff
    335c:	ffffffff 	.word	0xffffffff
    3360:	ffffffff 	.word	0xffffffff
    3364:	ffffffff 	.word	0xffffffff
    3368:	ffffffff 	.word	0xffffffff
    336c:	ffffffff 	.word	0xffffffff
    3370:	ffffffff 	.word	0xffffffff
    3374:	ffffffff 	.word	0xffffffff
    3378:	ffffffff 	.word	0xffffffff
    337c:	ffffffff 	.word	0xffffffff
    3380:	ffffffff 	.word	0xffffffff
    3384:	ffffffff 	.word	0xffffffff
    3388:	ffffffff 	.word	0xffffffff
    338c:	ffffffff 	.word	0xffffffff
    3390:	ffffffff 	.word	0xffffffff
    3394:	ffffffff 	.word	0xffffffff
    3398:	ffffffff 	.word	0xffffffff
    339c:	ffffffff 	.word	0xffffffff
    33a0:	ffffffff 	.word	0xffffffff
    33a4:	ffffffff 	.word	0xffffffff
    33a8:	ffffffff 	.word	0xffffffff
    33ac:	ffffffff 	.word	0xffffffff
    33b0:	ffffffff 	.word	0xffffffff
    33b4:	ffffffff 	.word	0xffffffff
    33b8:	ffffffff 	.word	0xffffffff
    33bc:	ffffffff 	.word	0xffffffff
    33c0:	ffffffff 	.word	0xffffffff
    33c4:	ffffffff 	.word	0xffffffff
    33c8:	ffffffff 	.word	0xffffffff
    33cc:	ffffffff 	.word	0xffffffff
    33d0:	ffffffff 	.word	0xffffffff
    33d4:	ffffffff 	.word	0xffffffff
    33d8:	ffffffff 	.word	0xffffffff
    33dc:	ffffffff 	.word	0xffffffff
    33e0:	ffffffff 	.word	0xffffffff
    33e4:	ffffffff 	.word	0xffffffff
    33e8:	ffffffff 	.word	0xffffffff
    33ec:	ffffffff 	.word	0xffffffff
    33f0:	ffffffff 	.word	0xffffffff
    33f4:	ffffffff 	.word	0xffffffff
    33f8:	ffffffff 	.word	0xffffffff
    33fc:	ffffffff 	.word	0xffffffff
    3400:	ffffffff 	.word	0xffffffff
    3404:	ffffffff 	.word	0xffffffff
    3408:	ffffffff 	.word	0xffffffff
    340c:	ffffffff 	.word	0xffffffff
    3410:	ffffffff 	.word	0xffffffff
    3414:	ffffffff 	.word	0xffffffff
    3418:	ffffffff 	.word	0xffffffff
    341c:	ffffffff 	.word	0xffffffff
    3420:	ffffffff 	.word	0xffffffff
    3424:	ffffffff 	.word	0xffffffff
    3428:	ffffffff 	.word	0xffffffff
    342c:	ffffffff 	.word	0xffffffff
    3430:	ffffffff 	.word	0xffffffff
    3434:	ffffffff 	.word	0xffffffff
    3438:	ffffffff 	.word	0xffffffff
    343c:	ffffffff 	.word	0xffffffff
    3440:	ffffffff 	.word	0xffffffff
    3444:	ffffffff 	.word	0xffffffff
    3448:	ffffffff 	.word	0xffffffff
    344c:	ffffffff 	.word	0xffffffff
    3450:	ffffffff 	.word	0xffffffff
    3454:	ffffffff 	.word	0xffffffff
    3458:	ffffffff 	.word	0xffffffff
    345c:	ffffffff 	.word	0xffffffff
    3460:	ffffffff 	.word	0xffffffff
    3464:	ffffffff 	.word	0xffffffff
    3468:	ffffffff 	.word	0xffffffff
    346c:	ffffffff 	.word	0xffffffff
    3470:	ffffffff 	.word	0xffffffff
    3474:	ffffffff 	.word	0xffffffff
    3478:	ffffffff 	.word	0xffffffff
    347c:	ffffffff 	.word	0xffffffff
    3480:	ffffffff 	.word	0xffffffff
    3484:	ffffffff 	.word	0xffffffff
    3488:	ffffffff 	.word	0xffffffff
    348c:	ffffffff 	.word	0xffffffff
    3490:	ffffffff 	.word	0xffffffff
    3494:	ffffffff 	.word	0xffffffff
    3498:	ffffffff 	.word	0xffffffff
    349c:	ffffffff 	.word	0xffffffff
    34a0:	ffffffff 	.word	0xffffffff
    34a4:	ffffffff 	.word	0xffffffff
    34a8:	ffffffff 	.word	0xffffffff
    34ac:	ffffffff 	.word	0xffffffff
    34b0:	ffffffff 	.word	0xffffffff
    34b4:	ffffffff 	.word	0xffffffff
    34b8:	ffffffff 	.word	0xffffffff
    34bc:	ffffffff 	.word	0xffffffff
    34c0:	ffffffff 	.word	0xffffffff
    34c4:	ffffffff 	.word	0xffffffff
    34c8:	ffffffff 	.word	0xffffffff
    34cc:	ffffffff 	.word	0xffffffff
    34d0:	ffffffff 	.word	0xffffffff
    34d4:	ffffffff 	.word	0xffffffff
    34d8:	ffffffff 	.word	0xffffffff
    34dc:	ffffffff 	.word	0xffffffff
    34e0:	ffffffff 	.word	0xffffffff
    34e4:	ffffffff 	.word	0xffffffff
    34e8:	ffffffff 	.word	0xffffffff
    34ec:	ffffffff 	.word	0xffffffff
    34f0:	ffffffff 	.word	0xffffffff
    34f4:	ffffffff 	.word	0xffffffff
    34f8:	ffffffff 	.word	0xffffffff
    34fc:	ffffffff 	.word	0xffffffff
    3500:	ffffffff 	.word	0xffffffff
    3504:	ffffffff 	.word	0xffffffff
    3508:	ffffffff 	.word	0xffffffff
    350c:	ffffffff 	.word	0xffffffff
    3510:	ffffffff 	.word	0xffffffff
    3514:	ffffffff 	.word	0xffffffff
    3518:	ffffffff 	.word	0xffffffff
    351c:	ffffffff 	.word	0xffffffff
    3520:	ffffffff 	.word	0xffffffff
    3524:	ffffffff 	.word	0xffffffff
    3528:	ffffffff 	.word	0xffffffff
    352c:	ffffffff 	.word	0xffffffff
    3530:	ffffffff 	.word	0xffffffff
    3534:	ffffffff 	.word	0xffffffff
    3538:	ffffffff 	.word	0xffffffff
    353c:	ffffffff 	.word	0xffffffff
    3540:	ffffffff 	.word	0xffffffff
    3544:	ffffffff 	.word	0xffffffff
    3548:	ffffffff 	.word	0xffffffff
    354c:	ffffffff 	.word	0xffffffff
    3550:	ffffffff 	.word	0xffffffff
    3554:	ffffffff 	.word	0xffffffff
    3558:	ffffffff 	.word	0xffffffff
    355c:	ffffffff 	.word	0xffffffff
    3560:	ffffffff 	.word	0xffffffff
    3564:	ffffffff 	.word	0xffffffff
    3568:	ffffffff 	.word	0xffffffff
    356c:	ffffffff 	.word	0xffffffff
    3570:	ffffffff 	.word	0xffffffff
    3574:	ffffffff 	.word	0xffffffff
    3578:	ffffffff 	.word	0xffffffff
    357c:	ffffffff 	.word	0xffffffff
    3580:	ffffffff 	.word	0xffffffff
    3584:	ffffffff 	.word	0xffffffff
    3588:	ffffffff 	.word	0xffffffff
    358c:	ffffffff 	.word	0xffffffff
    3590:	ffffffff 	.word	0xffffffff
    3594:	ffffffff 	.word	0xffffffff
    3598:	ffffffff 	.word	0xffffffff
    359c:	ffffffff 	.word	0xffffffff
    35a0:	ffffffff 	.word	0xffffffff
    35a4:	ffffffff 	.word	0xffffffff
    35a8:	ffffffff 	.word	0xffffffff
    35ac:	ffffffff 	.word	0xffffffff
    35b0:	ffffffff 	.word	0xffffffff
    35b4:	ffffffff 	.word	0xffffffff
    35b8:	ffffffff 	.word	0xffffffff
    35bc:	ffffffff 	.word	0xffffffff
    35c0:	ffffffff 	.word	0xffffffff
    35c4:	ffffffff 	.word	0xffffffff
    35c8:	ffffffff 	.word	0xffffffff
    35cc:	ffffffff 	.word	0xffffffff
    35d0:	ffffffff 	.word	0xffffffff
    35d4:	ffffffff 	.word	0xffffffff
    35d8:	ffffffff 	.word	0xffffffff
    35dc:	ffffffff 	.word	0xffffffff
    35e0:	ffffffff 	.word	0xffffffff
    35e4:	ffffffff 	.word	0xffffffff
    35e8:	ffffffff 	.word	0xffffffff
    35ec:	ffffffff 	.word	0xffffffff
    35f0:	ffffffff 	.word	0xffffffff
    35f4:	ffffffff 	.word	0xffffffff
    35f8:	ffffffff 	.word	0xffffffff
    35fc:	ffffffff 	.word	0xffffffff
    3600:	ffffffff 	.word	0xffffffff
    3604:	ffffffff 	.word	0xffffffff
    3608:	ffffffff 	.word	0xffffffff
    360c:	ffffffff 	.word	0xffffffff
    3610:	ffffffff 	.word	0xffffffff
    3614:	ffffffff 	.word	0xffffffff
    3618:	ffffffff 	.word	0xffffffff
    361c:	ffffffff 	.word	0xffffffff
    3620:	ffffffff 	.word	0xffffffff
    3624:	ffffffff 	.word	0xffffffff
    3628:	ffffffff 	.word	0xffffffff
    362c:	ffffffff 	.word	0xffffffff
    3630:	ffffffff 	.word	0xffffffff
    3634:	ffffffff 	.word	0xffffffff
    3638:	ffffffff 	.word	0xffffffff
    363c:	ffffffff 	.word	0xffffffff
    3640:	ffffffff 	.word	0xffffffff
    3644:	ffffffff 	.word	0xffffffff
    3648:	ffffffff 	.word	0xffffffff
    364c:	ffffffff 	.word	0xffffffff
    3650:	ffffffff 	.word	0xffffffff
    3654:	ffffffff 	.word	0xffffffff
    3658:	ffffffff 	.word	0xffffffff
    365c:	ffffffff 	.word	0xffffffff
    3660:	ffffffff 	.word	0xffffffff
    3664:	ffffffff 	.word	0xffffffff
    3668:	ffffffff 	.word	0xffffffff
    366c:	ffffffff 	.word	0xffffffff
    3670:	ffffffff 	.word	0xffffffff
    3674:	ffffffff 	.word	0xffffffff
    3678:	ffffffff 	.word	0xffffffff
    367c:	ffffffff 	.word	0xffffffff
    3680:	ffffffff 	.word	0xffffffff
    3684:	ffffffff 	.word	0xffffffff
    3688:	ffffffff 	.word	0xffffffff
    368c:	ffffffff 	.word	0xffffffff
    3690:	ffffffff 	.word	0xffffffff
    3694:	ffffffff 	.word	0xffffffff
    3698:	ffffffff 	.word	0xffffffff
    369c:	ffffffff 	.word	0xffffffff
    36a0:	ffffffff 	.word	0xffffffff
    36a4:	ffffffff 	.word	0xffffffff
    36a8:	ffffffff 	.word	0xffffffff
    36ac:	ffffffff 	.word	0xffffffff
    36b0:	ffffffff 	.word	0xffffffff
    36b4:	ffffffff 	.word	0xffffffff
    36b8:	ffffffff 	.word	0xffffffff
    36bc:	ffffffff 	.word	0xffffffff
    36c0:	ffffffff 	.word	0xffffffff
    36c4:	ffffffff 	.word	0xffffffff
    36c8:	ffffffff 	.word	0xffffffff
    36cc:	ffffffff 	.word	0xffffffff
    36d0:	ffffffff 	.word	0xffffffff
    36d4:	ffffffff 	.word	0xffffffff
    36d8:	ffffffff 	.word	0xffffffff
    36dc:	ffffffff 	.word	0xffffffff
    36e0:	ffffffff 	.word	0xffffffff
    36e4:	ffffffff 	.word	0xffffffff
    36e8:	ffffffff 	.word	0xffffffff
    36ec:	ffffffff 	.word	0xffffffff
    36f0:	ffffffff 	.word	0xffffffff
    36f4:	ffffffff 	.word	0xffffffff
    36f8:	ffffffff 	.word	0xffffffff
    36fc:	ffffffff 	.word	0xffffffff
    3700:	ffffffff 	.word	0xffffffff
    3704:	ffffffff 	.word	0xffffffff
    3708:	ffffffff 	.word	0xffffffff
    370c:	ffffffff 	.word	0xffffffff
    3710:	ffffffff 	.word	0xffffffff
    3714:	ffffffff 	.word	0xffffffff
    3718:	ffffffff 	.word	0xffffffff
    371c:	ffffffff 	.word	0xffffffff
    3720:	ffffffff 	.word	0xffffffff
    3724:	ffffffff 	.word	0xffffffff
    3728:	ffffffff 	.word	0xffffffff
    372c:	ffffffff 	.word	0xffffffff
    3730:	ffffffff 	.word	0xffffffff
    3734:	ffffffff 	.word	0xffffffff
    3738:	ffffffff 	.word	0xffffffff
    373c:	ffffffff 	.word	0xffffffff
    3740:	ffffffff 	.word	0xffffffff
    3744:	ffffffff 	.word	0xffffffff
    3748:	ffffffff 	.word	0xffffffff
    374c:	ffffffff 	.word	0xffffffff
    3750:	ffffffff 	.word	0xffffffff
    3754:	ffffffff 	.word	0xffffffff
    3758:	ffffffff 	.word	0xffffffff
    375c:	ffffffff 	.word	0xffffffff
    3760:	ffffffff 	.word	0xffffffff
    3764:	ffffffff 	.word	0xffffffff
    3768:	ffffffff 	.word	0xffffffff
    376c:	ffffffff 	.word	0xffffffff
    3770:	ffffffff 	.word	0xffffffff
    3774:	ffffffff 	.word	0xffffffff
    3778:	ffffffff 	.word	0xffffffff
    377c:	ffffffff 	.word	0xffffffff
    3780:	ffffffff 	.word	0xffffffff
    3784:	ffffffff 	.word	0xffffffff
    3788:	ffffffff 	.word	0xffffffff
    378c:	ffffffff 	.word	0xffffffff
    3790:	ffffffff 	.word	0xffffffff
    3794:	ffffffff 	.word	0xffffffff
    3798:	ffffffff 	.word	0xffffffff
    379c:	ffffffff 	.word	0xffffffff
    37a0:	ffffffff 	.word	0xffffffff
    37a4:	ffffffff 	.word	0xffffffff
    37a8:	ffffffff 	.word	0xffffffff
    37ac:	ffffffff 	.word	0xffffffff
    37b0:	ffffffff 	.word	0xffffffff
    37b4:	ffffffff 	.word	0xffffffff
    37b8:	ffffffff 	.word	0xffffffff
    37bc:	ffffffff 	.word	0xffffffff
    37c0:	ffffffff 	.word	0xffffffff
    37c4:	ffffffff 	.word	0xffffffff
    37c8:	ffffffff 	.word	0xffffffff
    37cc:	ffffffff 	.word	0xffffffff
    37d0:	ffffffff 	.word	0xffffffff
    37d4:	ffffffff 	.word	0xffffffff
    37d8:	ffffffff 	.word	0xffffffff
    37dc:	ffffffff 	.word	0xffffffff
    37e0:	ffffffff 	.word	0xffffffff
    37e4:	ffffffff 	.word	0xffffffff
    37e8:	ffffffff 	.word	0xffffffff
    37ec:	ffffffff 	.word	0xffffffff
    37f0:	ffffffff 	.word	0xffffffff
    37f4:	ffffffff 	.word	0xffffffff
    37f8:	ffffffff 	.word	0xffffffff
    37fc:	ffffffff 	.word	0xffffffff
    3800:	ffffffff 	.word	0xffffffff
    3804:	ffffffff 	.word	0xffffffff
    3808:	ffffffff 	.word	0xffffffff
    380c:	ffffffff 	.word	0xffffffff
    3810:	ffffffff 	.word	0xffffffff
    3814:	ffffffff 	.word	0xffffffff
    3818:	ffffffff 	.word	0xffffffff
    381c:	ffffffff 	.word	0xffffffff
    3820:	ffffffff 	.word	0xffffffff
    3824:	ffffffff 	.word	0xffffffff
    3828:	ffffffff 	.word	0xffffffff
    382c:	ffffffff 	.word	0xffffffff
    3830:	ffffffff 	.word	0xffffffff
    3834:	ffffffff 	.word	0xffffffff
    3838:	ffffffff 	.word	0xffffffff
    383c:	ffffffff 	.word	0xffffffff
    3840:	ffffffff 	.word	0xffffffff
    3844:	ffffffff 	.word	0xffffffff
    3848:	ffffffff 	.word	0xffffffff
    384c:	ffffffff 	.word	0xffffffff
    3850:	ffffffff 	.word	0xffffffff
    3854:	ffffffff 	.word	0xffffffff
    3858:	ffffffff 	.word	0xffffffff
    385c:	ffffffff 	.word	0xffffffff
    3860:	ffffffff 	.word	0xffffffff
    3864:	ffffffff 	.word	0xffffffff
    3868:	ffffffff 	.word	0xffffffff
    386c:	ffffffff 	.word	0xffffffff
    3870:	ffffffff 	.word	0xffffffff
    3874:	ffffffff 	.word	0xffffffff
    3878:	ffffffff 	.word	0xffffffff
    387c:	ffffffff 	.word	0xffffffff
    3880:	ffffffff 	.word	0xffffffff
    3884:	ffffffff 	.word	0xffffffff
    3888:	ffffffff 	.word	0xffffffff
    388c:	ffffffff 	.word	0xffffffff
    3890:	ffffffff 	.word	0xffffffff
    3894:	ffffffff 	.word	0xffffffff
    3898:	ffffffff 	.word	0xffffffff
    389c:	ffffffff 	.word	0xffffffff
    38a0:	ffffffff 	.word	0xffffffff
    38a4:	ffffffff 	.word	0xffffffff
    38a8:	ffffffff 	.word	0xffffffff
    38ac:	ffffffff 	.word	0xffffffff
    38b0:	ffffffff 	.word	0xffffffff
    38b4:	ffffffff 	.word	0xffffffff
    38b8:	ffffffff 	.word	0xffffffff
    38bc:	ffffffff 	.word	0xffffffff
    38c0:	ffffffff 	.word	0xffffffff
    38c4:	ffffffff 	.word	0xffffffff
    38c8:	ffffffff 	.word	0xffffffff
    38cc:	ffffffff 	.word	0xffffffff
    38d0:	ffffffff 	.word	0xffffffff
    38d4:	ffffffff 	.word	0xffffffff
    38d8:	ffffffff 	.word	0xffffffff
    38dc:	ffffffff 	.word	0xffffffff
    38e0:	ffffffff 	.word	0xffffffff
    38e4:	ffffffff 	.word	0xffffffff
    38e8:	ffffffff 	.word	0xffffffff
    38ec:	ffffffff 	.word	0xffffffff
    38f0:	ffffffff 	.word	0xffffffff
    38f4:	ffffffff 	.word	0xffffffff
    38f8:	ffffffff 	.word	0xffffffff
    38fc:	ffffffff 	.word	0xffffffff
    3900:	ffffffff 	.word	0xffffffff
    3904:	ffffffff 	.word	0xffffffff
    3908:	ffffffff 	.word	0xffffffff
    390c:	ffffffff 	.word	0xffffffff
    3910:	ffffffff 	.word	0xffffffff
    3914:	ffffffff 	.word	0xffffffff
    3918:	ffffffff 	.word	0xffffffff
    391c:	ffffffff 	.word	0xffffffff
    3920:	ffffffff 	.word	0xffffffff
    3924:	ffffffff 	.word	0xffffffff
    3928:	ffffffff 	.word	0xffffffff
    392c:	ffffffff 	.word	0xffffffff
    3930:	ffffffff 	.word	0xffffffff
    3934:	ffffffff 	.word	0xffffffff
    3938:	ffffffff 	.word	0xffffffff
    393c:	ffffffff 	.word	0xffffffff
    3940:	ffffffff 	.word	0xffffffff
    3944:	ffffffff 	.word	0xffffffff
    3948:	ffffffff 	.word	0xffffffff
    394c:	ffffffff 	.word	0xffffffff
    3950:	ffffffff 	.word	0xffffffff
    3954:	ffffffff 	.word	0xffffffff
    3958:	ffffffff 	.word	0xffffffff
    395c:	ffffffff 	.word	0xffffffff
    3960:	ffffffff 	.word	0xffffffff
    3964:	ffffffff 	.word	0xffffffff
    3968:	ffffffff 	.word	0xffffffff
    396c:	ffffffff 	.word	0xffffffff
    3970:	ffffffff 	.word	0xffffffff
    3974:	ffffffff 	.word	0xffffffff
    3978:	ffffffff 	.word	0xffffffff
    397c:	ffffffff 	.word	0xffffffff
    3980:	ffffffff 	.word	0xffffffff
    3984:	ffffffff 	.word	0xffffffff
    3988:	ffffffff 	.word	0xffffffff
    398c:	ffffffff 	.word	0xffffffff
    3990:	ffffffff 	.word	0xffffffff
    3994:	ffffffff 	.word	0xffffffff
    3998:	ffffffff 	.word	0xffffffff
    399c:	ffffffff 	.word	0xffffffff
    39a0:	ffffffff 	.word	0xffffffff
    39a4:	ffffffff 	.word	0xffffffff
    39a8:	ffffffff 	.word	0xffffffff
    39ac:	ffffffff 	.word	0xffffffff
    39b0:	ffffffff 	.word	0xffffffff
    39b4:	ffffffff 	.word	0xffffffff
    39b8:	ffffffff 	.word	0xffffffff
    39bc:	ffffffff 	.word	0xffffffff
    39c0:	ffffffff 	.word	0xffffffff
    39c4:	ffffffff 	.word	0xffffffff
    39c8:	ffffffff 	.word	0xffffffff
    39cc:	ffffffff 	.word	0xffffffff
    39d0:	ffffffff 	.word	0xffffffff
    39d4:	ffffffff 	.word	0xffffffff
    39d8:	ffffffff 	.word	0xffffffff
    39dc:	ffffffff 	.word	0xffffffff
    39e0:	ffffffff 	.word	0xffffffff
    39e4:	ffffffff 	.word	0xffffffff
    39e8:	ffffffff 	.word	0xffffffff
    39ec:	ffffffff 	.word	0xffffffff
    39f0:	ffffffff 	.word	0xffffffff
    39f4:	ffffffff 	.word	0xffffffff
    39f8:	ffffffff 	.word	0xffffffff
    39fc:	ffffffff 	.word	0xffffffff
    3a00:	ffffffff 	.word	0xffffffff
    3a04:	ffffffff 	.word	0xffffffff
    3a08:	ffffffff 	.word	0xffffffff
    3a0c:	ffffffff 	.word	0xffffffff
    3a10:	ffffffff 	.word	0xffffffff
    3a14:	ffffffff 	.word	0xffffffff
    3a18:	ffffffff 	.word	0xffffffff
    3a1c:	ffffffff 	.word	0xffffffff
    3a20:	ffffffff 	.word	0xffffffff
    3a24:	ffffffff 	.word	0xffffffff
    3a28:	ffffffff 	.word	0xffffffff
    3a2c:	ffffffff 	.word	0xffffffff
    3a30:	ffffffff 	.word	0xffffffff
    3a34:	ffffffff 	.word	0xffffffff
    3a38:	ffffffff 	.word	0xffffffff
    3a3c:	ffffffff 	.word	0xffffffff
    3a40:	ffffffff 	.word	0xffffffff
    3a44:	ffffffff 	.word	0xffffffff
    3a48:	ffffffff 	.word	0xffffffff
    3a4c:	ffffffff 	.word	0xffffffff
    3a50:	ffffffff 	.word	0xffffffff
    3a54:	ffffffff 	.word	0xffffffff
    3a58:	ffffffff 	.word	0xffffffff
    3a5c:	ffffffff 	.word	0xffffffff
    3a60:	ffffffff 	.word	0xffffffff
    3a64:	ffffffff 	.word	0xffffffff
    3a68:	ffffffff 	.word	0xffffffff
    3a6c:	ffffffff 	.word	0xffffffff
    3a70:	ffffffff 	.word	0xffffffff
    3a74:	ffffffff 	.word	0xffffffff
    3a78:	ffffffff 	.word	0xffffffff
    3a7c:	ffffffff 	.word	0xffffffff
    3a80:	ffffffff 	.word	0xffffffff
    3a84:	ffffffff 	.word	0xffffffff
    3a88:	ffffffff 	.word	0xffffffff
    3a8c:	ffffffff 	.word	0xffffffff
    3a90:	ffffffff 	.word	0xffffffff
    3a94:	ffffffff 	.word	0xffffffff
    3a98:	ffffffff 	.word	0xffffffff
    3a9c:	ffffffff 	.word	0xffffffff
    3aa0:	ffffffff 	.word	0xffffffff
    3aa4:	ffffffff 	.word	0xffffffff
    3aa8:	ffffffff 	.word	0xffffffff
    3aac:	ffffffff 	.word	0xffffffff
    3ab0:	ffffffff 	.word	0xffffffff
    3ab4:	ffffffff 	.word	0xffffffff
    3ab8:	ffffffff 	.word	0xffffffff
    3abc:	ffffffff 	.word	0xffffffff
    3ac0:	ffffffff 	.word	0xffffffff
    3ac4:	ffffffff 	.word	0xffffffff
    3ac8:	ffffffff 	.word	0xffffffff
    3acc:	ffffffff 	.word	0xffffffff
    3ad0:	ffffffff 	.word	0xffffffff
    3ad4:	ffffffff 	.word	0xffffffff
    3ad8:	ffffffff 	.word	0xffffffff
    3adc:	ffffffff 	.word	0xffffffff
    3ae0:	ffffffff 	.word	0xffffffff
    3ae4:	ffffffff 	.word	0xffffffff
    3ae8:	ffffffff 	.word	0xffffffff
    3aec:	ffffffff 	.word	0xffffffff
    3af0:	ffffffff 	.word	0xffffffff
    3af4:	ffffffff 	.word	0xffffffff
    3af8:	ffffffff 	.word	0xffffffff
    3afc:	ffffffff 	.word	0xffffffff
    3b00:	ffffffff 	.word	0xffffffff
    3b04:	ffffffff 	.word	0xffffffff
    3b08:	ffffffff 	.word	0xffffffff
    3b0c:	ffffffff 	.word	0xffffffff
    3b10:	ffffffff 	.word	0xffffffff
    3b14:	ffffffff 	.word	0xffffffff
    3b18:	ffffffff 	.word	0xffffffff
    3b1c:	ffffffff 	.word	0xffffffff
    3b20:	ffffffff 	.word	0xffffffff
    3b24:	ffffffff 	.word	0xffffffff
    3b28:	ffffffff 	.word	0xffffffff
    3b2c:	ffffffff 	.word	0xffffffff
    3b30:	ffffffff 	.word	0xffffffff
    3b34:	ffffffff 	.word	0xffffffff
    3b38:	ffffffff 	.word	0xffffffff
    3b3c:	ffffffff 	.word	0xffffffff
    3b40:	ffffffff 	.word	0xffffffff
    3b44:	ffffffff 	.word	0xffffffff
    3b48:	ffffffff 	.word	0xffffffff
    3b4c:	ffffffff 	.word	0xffffffff
    3b50:	ffffffff 	.word	0xffffffff
    3b54:	ffffffff 	.word	0xffffffff
    3b58:	ffffffff 	.word	0xffffffff
    3b5c:	ffffffff 	.word	0xffffffff
    3b60:	ffffffff 	.word	0xffffffff
    3b64:	ffffffff 	.word	0xffffffff
    3b68:	ffffffff 	.word	0xffffffff
    3b6c:	ffffffff 	.word	0xffffffff
    3b70:	ffffffff 	.word	0xffffffff
    3b74:	ffffffff 	.word	0xffffffff
    3b78:	ffffffff 	.word	0xffffffff
    3b7c:	ffffffff 	.word	0xffffffff
    3b80:	ffffffff 	.word	0xffffffff
    3b84:	ffffffff 	.word	0xffffffff
    3b88:	ffffffff 	.word	0xffffffff
    3b8c:	ffffffff 	.word	0xffffffff
    3b90:	ffffffff 	.word	0xffffffff
    3b94:	ffffffff 	.word	0xffffffff
    3b98:	ffffffff 	.word	0xffffffff
    3b9c:	ffffffff 	.word	0xffffffff
    3ba0:	ffffffff 	.word	0xffffffff
    3ba4:	ffffffff 	.word	0xffffffff
    3ba8:	ffffffff 	.word	0xffffffff
    3bac:	ffffffff 	.word	0xffffffff
    3bb0:	ffffffff 	.word	0xffffffff
    3bb4:	ffffffff 	.word	0xffffffff
    3bb8:	ffffffff 	.word	0xffffffff
    3bbc:	ffffffff 	.word	0xffffffff
    3bc0:	ffffffff 	.word	0xffffffff
    3bc4:	ffffffff 	.word	0xffffffff
    3bc8:	ffffffff 	.word	0xffffffff
    3bcc:	ffffffff 	.word	0xffffffff
    3bd0:	ffffffff 	.word	0xffffffff
    3bd4:	ffffffff 	.word	0xffffffff
    3bd8:	ffffffff 	.word	0xffffffff
    3bdc:	ffffffff 	.word	0xffffffff
    3be0:	ffffffff 	.word	0xffffffff
    3be4:	ffffffff 	.word	0xffffffff
    3be8:	ffffffff 	.word	0xffffffff
    3bec:	ffffffff 	.word	0xffffffff
    3bf0:	ffffffff 	.word	0xffffffff
    3bf4:	ffffffff 	.word	0xffffffff
    3bf8:	ffffffff 	.word	0xffffffff
    3bfc:	ffffffff 	.word	0xffffffff
    3c00:	ffffffff 	.word	0xffffffff
    3c04:	ffffffff 	.word	0xffffffff
    3c08:	ffffffff 	.word	0xffffffff
    3c0c:	ffffffff 	.word	0xffffffff
    3c10:	ffffffff 	.word	0xffffffff
    3c14:	ffffffff 	.word	0xffffffff
    3c18:	ffffffff 	.word	0xffffffff
    3c1c:	ffffffff 	.word	0xffffffff
    3c20:	ffffffff 	.word	0xffffffff
    3c24:	ffffffff 	.word	0xffffffff
    3c28:	ffffffff 	.word	0xffffffff
    3c2c:	ffffffff 	.word	0xffffffff
    3c30:	ffffffff 	.word	0xffffffff
    3c34:	ffffffff 	.word	0xffffffff
    3c38:	ffffffff 	.word	0xffffffff
    3c3c:	ffffffff 	.word	0xffffffff
    3c40:	ffffffff 	.word	0xffffffff
    3c44:	ffffffff 	.word	0xffffffff
    3c48:	ffffffff 	.word	0xffffffff
    3c4c:	ffffffff 	.word	0xffffffff
    3c50:	ffffffff 	.word	0xffffffff
    3c54:	ffffffff 	.word	0xffffffff
    3c58:	ffffffff 	.word	0xffffffff
    3c5c:	ffffffff 	.word	0xffffffff
    3c60:	ffffffff 	.word	0xffffffff
    3c64:	ffffffff 	.word	0xffffffff
    3c68:	ffffffff 	.word	0xffffffff
    3c6c:	ffffffff 	.word	0xffffffff
    3c70:	ffffffff 	.word	0xffffffff
    3c74:	ffffffff 	.word	0xffffffff
    3c78:	ffffffff 	.word	0xffffffff
    3c7c:	ffffffff 	.word	0xffffffff
    3c80:	ffffffff 	.word	0xffffffff
    3c84:	ffffffff 	.word	0xffffffff
    3c88:	ffffffff 	.word	0xffffffff
    3c8c:	ffffffff 	.word	0xffffffff
    3c90:	ffffffff 	.word	0xffffffff
    3c94:	ffffffff 	.word	0xffffffff
    3c98:	ffffffff 	.word	0xffffffff
    3c9c:	ffffffff 	.word	0xffffffff
    3ca0:	ffffffff 	.word	0xffffffff
    3ca4:	ffffffff 	.word	0xffffffff
    3ca8:	ffffffff 	.word	0xffffffff
    3cac:	ffffffff 	.word	0xffffffff
    3cb0:	ffffffff 	.word	0xffffffff
    3cb4:	ffffffff 	.word	0xffffffff
    3cb8:	ffffffff 	.word	0xffffffff
    3cbc:	ffffffff 	.word	0xffffffff
    3cc0:	ffffffff 	.word	0xffffffff
    3cc4:	ffffffff 	.word	0xffffffff
    3cc8:	ffffffff 	.word	0xffffffff
    3ccc:	ffffffff 	.word	0xffffffff
    3cd0:	ffffffff 	.word	0xffffffff
    3cd4:	ffffffff 	.word	0xffffffff
    3cd8:	ffffffff 	.word	0xffffffff
    3cdc:	ffffffff 	.word	0xffffffff
    3ce0:	ffffffff 	.word	0xffffffff
    3ce4:	ffffffff 	.word	0xffffffff
    3ce8:	ffffffff 	.word	0xffffffff
    3cec:	ffffffff 	.word	0xffffffff
    3cf0:	ffffffff 	.word	0xffffffff
    3cf4:	ffffffff 	.word	0xffffffff
    3cf8:	ffffffff 	.word	0xffffffff
    3cfc:	ffffffff 	.word	0xffffffff
    3d00:	ffffffff 	.word	0xffffffff
    3d04:	ffffffff 	.word	0xffffffff
    3d08:	ffffffff 	.word	0xffffffff
    3d0c:	ffffffff 	.word	0xffffffff
    3d10:	ffffffff 	.word	0xffffffff
    3d14:	ffffffff 	.word	0xffffffff
    3d18:	ffffffff 	.word	0xffffffff
    3d1c:	ffffffff 	.word	0xffffffff
    3d20:	ffffffff 	.word	0xffffffff
    3d24:	ffffffff 	.word	0xffffffff
    3d28:	ffffffff 	.word	0xffffffff
    3d2c:	ffffffff 	.word	0xffffffff
    3d30:	ffffffff 	.word	0xffffffff
    3d34:	ffffffff 	.word	0xffffffff
    3d38:	ffffffff 	.word	0xffffffff
    3d3c:	ffffffff 	.word	0xffffffff
    3d40:	ffffffff 	.word	0xffffffff
    3d44:	ffffffff 	.word	0xffffffff
    3d48:	ffffffff 	.word	0xffffffff
    3d4c:	ffffffff 	.word	0xffffffff
    3d50:	ffffffff 	.word	0xffffffff
    3d54:	ffffffff 	.word	0xffffffff
    3d58:	ffffffff 	.word	0xffffffff
    3d5c:	ffffffff 	.word	0xffffffff
    3d60:	ffffffff 	.word	0xffffffff
    3d64:	ffffffff 	.word	0xffffffff
    3d68:	ffffffff 	.word	0xffffffff
    3d6c:	ffffffff 	.word	0xffffffff
    3d70:	ffffffff 	.word	0xffffffff
    3d74:	ffffffff 	.word	0xffffffff
    3d78:	ffffffff 	.word	0xffffffff
    3d7c:	ffffffff 	.word	0xffffffff
    3d80:	ffffffff 	.word	0xffffffff
    3d84:	ffffffff 	.word	0xffffffff
    3d88:	ffffffff 	.word	0xffffffff
    3d8c:	ffffffff 	.word	0xffffffff
    3d90:	ffffffff 	.word	0xffffffff
    3d94:	ffffffff 	.word	0xffffffff
    3d98:	ffffffff 	.word	0xffffffff
    3d9c:	ffffffff 	.word	0xffffffff
    3da0:	ffffffff 	.word	0xffffffff
    3da4:	ffffffff 	.word	0xffffffff
    3da8:	ffffffff 	.word	0xffffffff
    3dac:	ffffffff 	.word	0xffffffff
    3db0:	ffffffff 	.word	0xffffffff
    3db4:	ffffffff 	.word	0xffffffff
    3db8:	ffffffff 	.word	0xffffffff
    3dbc:	ffffffff 	.word	0xffffffff
    3dc0:	ffffffff 	.word	0xffffffff
    3dc4:	ffffffff 	.word	0xffffffff
    3dc8:	ffffffff 	.word	0xffffffff
    3dcc:	ffffffff 	.word	0xffffffff
    3dd0:	ffffffff 	.word	0xffffffff
    3dd4:	ffffffff 	.word	0xffffffff
    3dd8:	ffffffff 	.word	0xffffffff
    3ddc:	ffffffff 	.word	0xffffffff
    3de0:	ffffffff 	.word	0xffffffff
    3de4:	ffffffff 	.word	0xffffffff
    3de8:	ffffffff 	.word	0xffffffff
    3dec:	ffffffff 	.word	0xffffffff
    3df0:	ffffffff 	.word	0xffffffff
    3df4:	ffffffff 	.word	0xffffffff
    3df8:	ffffffff 	.word	0xffffffff
    3dfc:	ffffffff 	.word	0xffffffff
    3e00:	ffffffff 	.word	0xffffffff
    3e04:	ffffffff 	.word	0xffffffff
    3e08:	ffffffff 	.word	0xffffffff
    3e0c:	ffffffff 	.word	0xffffffff
    3e10:	ffffffff 	.word	0xffffffff
    3e14:	ffffffff 	.word	0xffffffff
    3e18:	ffffffff 	.word	0xffffffff
    3e1c:	ffffffff 	.word	0xffffffff
    3e20:	ffffffff 	.word	0xffffffff
    3e24:	ffffffff 	.word	0xffffffff
    3e28:	ffffffff 	.word	0xffffffff
    3e2c:	ffffffff 	.word	0xffffffff
    3e30:	ffffffff 	.word	0xffffffff
    3e34:	ffffffff 	.word	0xffffffff
    3e38:	ffffffff 	.word	0xffffffff
    3e3c:	ffffffff 	.word	0xffffffff
    3e40:	ffffffff 	.word	0xffffffff
    3e44:	ffffffff 	.word	0xffffffff
    3e48:	ffffffff 	.word	0xffffffff
    3e4c:	ffffffff 	.word	0xffffffff
    3e50:	ffffffff 	.word	0xffffffff
    3e54:	ffffffff 	.word	0xffffffff
    3e58:	ffffffff 	.word	0xffffffff
    3e5c:	ffffffff 	.word	0xffffffff
    3e60:	ffffffff 	.word	0xffffffff
    3e64:	ffffffff 	.word	0xffffffff
    3e68:	ffffffff 	.word	0xffffffff
    3e6c:	ffffffff 	.word	0xffffffff
    3e70:	ffffffff 	.word	0xffffffff
    3e74:	ffffffff 	.word	0xffffffff
    3e78:	ffffffff 	.word	0xffffffff
    3e7c:	ffffffff 	.word	0xffffffff
    3e80:	ffffffff 	.word	0xffffffff
    3e84:	ffffffff 	.word	0xffffffff
    3e88:	ffffffff 	.word	0xffffffff
    3e8c:	ffffffff 	.word	0xffffffff
    3e90:	ffffffff 	.word	0xffffffff
    3e94:	ffffffff 	.word	0xffffffff
    3e98:	ffffffff 	.word	0xffffffff
    3e9c:	ffffffff 	.word	0xffffffff
    3ea0:	ffffffff 	.word	0xffffffff
    3ea4:	ffffffff 	.word	0xffffffff
    3ea8:	ffffffff 	.word	0xffffffff
    3eac:	ffffffff 	.word	0xffffffff
    3eb0:	ffffffff 	.word	0xffffffff
    3eb4:	ffffffff 	.word	0xffffffff
    3eb8:	ffffffff 	.word	0xffffffff
    3ebc:	ffffffff 	.word	0xffffffff
    3ec0:	ffffffff 	.word	0xffffffff
    3ec4:	ffffffff 	.word	0xffffffff
    3ec8:	ffffffff 	.word	0xffffffff
    3ecc:	ffffffff 	.word	0xffffffff
    3ed0:	ffffffff 	.word	0xffffffff
    3ed4:	ffffffff 	.word	0xffffffff
    3ed8:	ffffffff 	.word	0xffffffff
    3edc:	ffffffff 	.word	0xffffffff
    3ee0:	ffffffff 	.word	0xffffffff
    3ee4:	ffffffff 	.word	0xffffffff
    3ee8:	ffffffff 	.word	0xffffffff
    3eec:	ffffffff 	.word	0xffffffff
    3ef0:	ffffffff 	.word	0xffffffff
    3ef4:	ffffffff 	.word	0xffffffff
    3ef8:	ffffffff 	.word	0xffffffff
    3efc:	ffffffff 	.word	0xffffffff
    3f00:	ffffffff 	.word	0xffffffff
    3f04:	ffffffff 	.word	0xffffffff
    3f08:	ffffffff 	.word	0xffffffff
    3f0c:	ffffffff 	.word	0xffffffff
    3f10:	ffffffff 	.word	0xffffffff
    3f14:	ffffffff 	.word	0xffffffff
    3f18:	ffffffff 	.word	0xffffffff
    3f1c:	ffffffff 	.word	0xffffffff
    3f20:	ffffffff 	.word	0xffffffff
    3f24:	ffffffff 	.word	0xffffffff
    3f28:	ffffffff 	.word	0xffffffff
    3f2c:	ffffffff 	.word	0xffffffff
    3f30:	ffffffff 	.word	0xffffffff
    3f34:	ffffffff 	.word	0xffffffff
    3f38:	ffffffff 	.word	0xffffffff
    3f3c:	ffffffff 	.word	0xffffffff
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	ffffffff 	.word	0xffffffff
    3f48:	ffffffff 	.word	0xffffffff
    3f4c:	ffffffff 	.word	0xffffffff
    3f50:	ffffffff 	.word	0xffffffff
    3f54:	ffffffff 	.word	0xffffffff
    3f58:	ffffffff 	.word	0xffffffff
    3f5c:	ffffffff 	.word	0xffffffff
    3f60:	ffffffff 	.word	0xffffffff
    3f64:	ffffffff 	.word	0xffffffff
    3f68:	ffffffff 	.word	0xffffffff
    3f6c:	ffffffff 	.word	0xffffffff
    3f70:	ffffffff 	.word	0xffffffff
    3f74:	ffffffff 	.word	0xffffffff
    3f78:	ffffffff 	.word	0xffffffff
    3f7c:	ffffffff 	.word	0xffffffff
    3f80:	ffffffff 	.word	0xffffffff
    3f84:	ffffffff 	.word	0xffffffff
    3f88:	ffffffff 	.word	0xffffffff
    3f8c:	ffffffff 	.word	0xffffffff
    3f90:	ffffffff 	.word	0xffffffff
    3f94:	ffffffff 	.word	0xffffffff
    3f98:	ffffffff 	.word	0xffffffff
    3f9c:	ffffffff 	.word	0xffffffff
    3fa0:	ffffffff 	.word	0xffffffff
    3fa4:	ffffffff 	.word	0xffffffff
    3fa8:	ffffffff 	.word	0xffffffff
    3fac:	ffffffff 	.word	0xffffffff
    3fb0:	ffffffff 	.word	0xffffffff
    3fb4:	ffffffff 	.word	0xffffffff
    3fb8:	ffffffff 	.word	0xffffffff
    3fbc:	ffffffff 	.word	0xffffffff
    3fc0:	ffffffff 	.word	0xffffffff
    3fc4:	ffffffff 	.word	0xffffffff
    3fc8:	ffffffff 	.word	0xffffffff
    3fcc:	ffffffff 	.word	0xffffffff
    3fd0:	ffffffff 	.word	0xffffffff
    3fd4:	ffffffff 	.word	0xffffffff
    3fd8:	ffffffff 	.word	0xffffffff
    3fdc:	ffffffff 	.word	0xffffffff
    3fe0:	ffffffff 	.word	0xffffffff
    3fe4:	ffffffff 	.word	0xffffffff
    3fe8:	ffffffff 	.word	0xffffffff
    3fec:	ffffffff 	.word	0xffffffff
    3ff0:	ffffffff 	.word	0xffffffff
    3ff4:	ffffffff 	.word	0xffffffff
    3ff8:	ffffffff 	.word	0xffffffff
    3ffc:	ffffffff 	.word	0xffffffff
    4000:	ffffffff 	.word	0xffffffff
    4004:	ffffffff 	.word	0xffffffff
    4008:	ffffffff 	.word	0xffffffff
    400c:	ffffffff 	.word	0xffffffff
    4010:	ffffffff 	.word	0xffffffff
    4014:	ffffffff 	.word	0xffffffff
    4018:	ffffffff 	.word	0xffffffff
    401c:	ffffffff 	.word	0xffffffff
    4020:	ffffffff 	.word	0xffffffff
    4024:	ffffffff 	.word	0xffffffff
    4028:	ffffffff 	.word	0xffffffff
    402c:	ffffffff 	.word	0xffffffff
    4030:	ffffffff 	.word	0xffffffff
    4034:	ffffffff 	.word	0xffffffff
    4038:	ffffffff 	.word	0xffffffff
    403c:	ffffffff 	.word	0xffffffff
    4040:	ffffffff 	.word	0xffffffff
    4044:	ffffffff 	.word	0xffffffff
    4048:	ffffffff 	.word	0xffffffff
    404c:	ffffffff 	.word	0xffffffff
    4050:	ffffffff 	.word	0xffffffff
    4054:	ffffffff 	.word	0xffffffff
    4058:	ffffffff 	.word	0xffffffff
    405c:	ffffffff 	.word	0xffffffff
    4060:	ffffffff 	.word	0xffffffff
    4064:	ffffffff 	.word	0xffffffff
    4068:	ffffffff 	.word	0xffffffff
    406c:	ffffffff 	.word	0xffffffff
    4070:	ffffffff 	.word	0xffffffff
    4074:	ffffffff 	.word	0xffffffff
    4078:	ffffffff 	.word	0xffffffff
    407c:	ffffffff 	.word	0xffffffff
    4080:	ffffffff 	.word	0xffffffff
    4084:	ffffffff 	.word	0xffffffff
    4088:	ffffffff 	.word	0xffffffff
    408c:	ffffffff 	.word	0xffffffff
    4090:	ffffffff 	.word	0xffffffff
    4094:	ffffffff 	.word	0xffffffff
    4098:	ffffffff 	.word	0xffffffff
    409c:	ffffffff 	.word	0xffffffff
    40a0:	ffffffff 	.word	0xffffffff
    40a4:	ffffffff 	.word	0xffffffff
    40a8:	ffffffff 	.word	0xffffffff
    40ac:	ffffffff 	.word	0xffffffff
    40b0:	ffffffff 	.word	0xffffffff
    40b4:	ffffffff 	.word	0xffffffff
    40b8:	ffffffff 	.word	0xffffffff
    40bc:	ffffffff 	.word	0xffffffff
    40c0:	ffffffff 	.word	0xffffffff
    40c4:	ffffffff 	.word	0xffffffff
    40c8:	ffffffff 	.word	0xffffffff
    40cc:	ffffffff 	.word	0xffffffff
    40d0:	ffffffff 	.word	0xffffffff
    40d4:	ffffffff 	.word	0xffffffff
    40d8:	ffffffff 	.word	0xffffffff
    40dc:	ffffffff 	.word	0xffffffff
    40e0:	ffffffff 	.word	0xffffffff
    40e4:	ffffffff 	.word	0xffffffff
    40e8:	ffffffff 	.word	0xffffffff
    40ec:	ffffffff 	.word	0xffffffff
    40f0:	ffffffff 	.word	0xffffffff
    40f4:	ffffffff 	.word	0xffffffff
    40f8:	ffffffff 	.word	0xffffffff
    40fc:	ffffffff 	.word	0xffffffff
    4100:	ffffffff 	.word	0xffffffff
    4104:	ffffffff 	.word	0xffffffff
    4108:	ffffffff 	.word	0xffffffff
    410c:	ffffffff 	.word	0xffffffff
    4110:	ffffffff 	.word	0xffffffff
    4114:	ffffffff 	.word	0xffffffff
    4118:	ffffffff 	.word	0xffffffff
    411c:	ffffffff 	.word	0xffffffff
    4120:	ffffffff 	.word	0xffffffff
    4124:	ffffffff 	.word	0xffffffff
    4128:	ffffffff 	.word	0xffffffff
    412c:	ffffffff 	.word	0xffffffff
    4130:	ffffffff 	.word	0xffffffff
    4134:	ffffffff 	.word	0xffffffff
    4138:	ffffffff 	.word	0xffffffff
    413c:	ffffffff 	.word	0xffffffff
    4140:	ffffffff 	.word	0xffffffff
    4144:	ffffffff 	.word	0xffffffff
    4148:	ffffffff 	.word	0xffffffff
    414c:	ffffffff 	.word	0xffffffff
    4150:	ffffffff 	.word	0xffffffff
    4154:	ffffffff 	.word	0xffffffff
    4158:	ffffffff 	.word	0xffffffff
    415c:	ffffffff 	.word	0xffffffff
    4160:	ffffffff 	.word	0xffffffff
    4164:	ffffffff 	.word	0xffffffff
    4168:	ffffffff 	.word	0xffffffff
    416c:	ffffffff 	.word	0xffffffff
    4170:	ffffffff 	.word	0xffffffff
    4174:	ffffffff 	.word	0xffffffff
    4178:	ffffffff 	.word	0xffffffff
    417c:	ffffffff 	.word	0xffffffff
    4180:	ffffffff 	.word	0xffffffff
    4184:	ffffffff 	.word	0xffffffff
    4188:	ffffffff 	.word	0xffffffff
    418c:	ffffffff 	.word	0xffffffff
    4190:	ffffffff 	.word	0xffffffff
    4194:	ffffffff 	.word	0xffffffff
    4198:	ffffffff 	.word	0xffffffff
    419c:	ffffffff 	.word	0xffffffff
    41a0:	ffffffff 	.word	0xffffffff
    41a4:	ffffffff 	.word	0xffffffff
    41a8:	ffffffff 	.word	0xffffffff
    41ac:	ffffffff 	.word	0xffffffff
    41b0:	ffffffff 	.word	0xffffffff
    41b4:	ffffffff 	.word	0xffffffff
    41b8:	ffffffff 	.word	0xffffffff
    41bc:	ffffffff 	.word	0xffffffff
    41c0:	ffffffff 	.word	0xffffffff
    41c4:	ffffffff 	.word	0xffffffff
    41c8:	ffffffff 	.word	0xffffffff
    41cc:	ffffffff 	.word	0xffffffff
    41d0:	ffffffff 	.word	0xffffffff
    41d4:	ffffffff 	.word	0xffffffff
    41d8:	ffffffff 	.word	0xffffffff
    41dc:	ffffffff 	.word	0xffffffff
    41e0:	ffffffff 	.word	0xffffffff
    41e4:	ffffffff 	.word	0xffffffff
    41e8:	ffffffff 	.word	0xffffffff
    41ec:	ffffffff 	.word	0xffffffff
    41f0:	ffffffff 	.word	0xffffffff
    41f4:	ffffffff 	.word	0xffffffff
    41f8:	ffffffff 	.word	0xffffffff
    41fc:	ffffffff 	.word	0xffffffff
    4200:	ffffffff 	.word	0xffffffff
    4204:	ffffffff 	.word	0xffffffff
    4208:	ffffffff 	.word	0xffffffff
    420c:	ffffffff 	.word	0xffffffff
    4210:	ffffffff 	.word	0xffffffff
    4214:	ffffffff 	.word	0xffffffff
    4218:	ffffffff 	.word	0xffffffff
    421c:	ffffffff 	.word	0xffffffff
    4220:	ffffffff 	.word	0xffffffff
    4224:	ffffffff 	.word	0xffffffff
    4228:	ffffffff 	.word	0xffffffff
    422c:	ffffffff 	.word	0xffffffff
    4230:	ffffffff 	.word	0xffffffff
    4234:	ffffffff 	.word	0xffffffff
    4238:	ffffffff 	.word	0xffffffff
    423c:	ffffffff 	.word	0xffffffff
    4240:	ffffffff 	.word	0xffffffff
    4244:	ffffffff 	.word	0xffffffff
    4248:	ffffffff 	.word	0xffffffff
    424c:	ffffffff 	.word	0xffffffff
    4250:	ffffffff 	.word	0xffffffff
    4254:	ffffffff 	.word	0xffffffff
    4258:	ffffffff 	.word	0xffffffff
    425c:	ffffffff 	.word	0xffffffff
    4260:	ffffffff 	.word	0xffffffff
    4264:	ffffffff 	.word	0xffffffff
    4268:	ffffffff 	.word	0xffffffff
    426c:	ffffffff 	.word	0xffffffff
    4270:	ffffffff 	.word	0xffffffff
    4274:	ffffffff 	.word	0xffffffff
    4278:	ffffffff 	.word	0xffffffff
    427c:	ffffffff 	.word	0xffffffff
    4280:	ffffffff 	.word	0xffffffff
    4284:	ffffffff 	.word	0xffffffff
    4288:	ffffffff 	.word	0xffffffff
    428c:	ffffffff 	.word	0xffffffff
    4290:	ffffffff 	.word	0xffffffff
    4294:	ffffffff 	.word	0xffffffff
    4298:	ffffffff 	.word	0xffffffff
    429c:	ffffffff 	.word	0xffffffff
    42a0:	ffffffff 	.word	0xffffffff
    42a4:	ffffffff 	.word	0xffffffff
    42a8:	ffffffff 	.word	0xffffffff
    42ac:	ffffffff 	.word	0xffffffff
    42b0:	ffffffff 	.word	0xffffffff
    42b4:	ffffffff 	.word	0xffffffff
    42b8:	ffffffff 	.word	0xffffffff
    42bc:	ffffffff 	.word	0xffffffff
    42c0:	ffffffff 	.word	0xffffffff
    42c4:	ffffffff 	.word	0xffffffff
    42c8:	ffffffff 	.word	0xffffffff
    42cc:	ffffffff 	.word	0xffffffff
    42d0:	ffffffff 	.word	0xffffffff
    42d4:	ffffffff 	.word	0xffffffff
    42d8:	ffffffff 	.word	0xffffffff
    42dc:	ffffffff 	.word	0xffffffff
    42e0:	ffffffff 	.word	0xffffffff
    42e4:	ffffffff 	.word	0xffffffff
    42e8:	ffffffff 	.word	0xffffffff
    42ec:	ffffffff 	.word	0xffffffff
    42f0:	ffffffff 	.word	0xffffffff
    42f4:	ffffffff 	.word	0xffffffff
    42f8:	ffffffff 	.word	0xffffffff
    42fc:	ffffffff 	.word	0xffffffff
    4300:	ffffffff 	.word	0xffffffff
    4304:	ffffffff 	.word	0xffffffff
    4308:	ffffffff 	.word	0xffffffff
    430c:	ffffffff 	.word	0xffffffff
    4310:	ffffffff 	.word	0xffffffff
    4314:	ffffffff 	.word	0xffffffff
    4318:	ffffffff 	.word	0xffffffff
    431c:	ffffffff 	.word	0xffffffff
    4320:	ffffffff 	.word	0xffffffff
    4324:	ffffffff 	.word	0xffffffff
    4328:	ffffffff 	.word	0xffffffff
    432c:	ffffffff 	.word	0xffffffff
    4330:	ffffffff 	.word	0xffffffff
    4334:	ffffffff 	.word	0xffffffff
    4338:	ffffffff 	.word	0xffffffff
    433c:	ffffffff 	.word	0xffffffff
    4340:	ffffffff 	.word	0xffffffff
    4344:	ffffffff 	.word	0xffffffff
    4348:	ffffffff 	.word	0xffffffff
    434c:	ffffffff 	.word	0xffffffff
    4350:	ffffffff 	.word	0xffffffff
    4354:	ffffffff 	.word	0xffffffff
    4358:	ffffffff 	.word	0xffffffff
    435c:	ffffffff 	.word	0xffffffff
    4360:	ffffffff 	.word	0xffffffff
    4364:	ffffffff 	.word	0xffffffff
    4368:	ffffffff 	.word	0xffffffff
    436c:	ffffffff 	.word	0xffffffff
    4370:	ffffffff 	.word	0xffffffff
    4374:	ffffffff 	.word	0xffffffff
    4378:	ffffffff 	.word	0xffffffff
    437c:	ffffffff 	.word	0xffffffff
    4380:	ffffffff 	.word	0xffffffff
    4384:	ffffffff 	.word	0xffffffff
    4388:	ffffffff 	.word	0xffffffff
    438c:	ffffffff 	.word	0xffffffff
    4390:	ffffffff 	.word	0xffffffff
    4394:	ffffffff 	.word	0xffffffff
    4398:	ffffffff 	.word	0xffffffff
    439c:	ffffffff 	.word	0xffffffff
    43a0:	ffffffff 	.word	0xffffffff
    43a4:	ffffffff 	.word	0xffffffff
    43a8:	ffffffff 	.word	0xffffffff
    43ac:	ffffffff 	.word	0xffffffff
    43b0:	ffffffff 	.word	0xffffffff
    43b4:	ffffffff 	.word	0xffffffff
    43b8:	ffffffff 	.word	0xffffffff
    43bc:	ffffffff 	.word	0xffffffff
    43c0:	ffffffff 	.word	0xffffffff
    43c4:	ffffffff 	.word	0xffffffff
    43c8:	ffffffff 	.word	0xffffffff
    43cc:	ffffffff 	.word	0xffffffff
    43d0:	ffffffff 	.word	0xffffffff
    43d4:	ffffffff 	.word	0xffffffff
    43d8:	ffffffff 	.word	0xffffffff
    43dc:	ffffffff 	.word	0xffffffff
    43e0:	ffffffff 	.word	0xffffffff
    43e4:	ffffffff 	.word	0xffffffff
    43e8:	ffffffff 	.word	0xffffffff
    43ec:	ffffffff 	.word	0xffffffff
    43f0:	ffffffff 	.word	0xffffffff
    43f4:	ffffffff 	.word	0xffffffff
    43f8:	ffffffff 	.word	0xffffffff
    43fc:	ffffffff 	.word	0xffffffff

00004400 <__do_global_dtors_aux>:
    4400:	b510      	push	{r4, lr}
    4402:	4c06      	ldr	r4, [pc, #24]	; (441c <__do_global_dtors_aux+0x1c>)
    4404:	7823      	ldrb	r3, [r4, #0]
    4406:	2b00      	cmp	r3, #0
    4408:	d107      	bne.n	441a <__do_global_dtors_aux+0x1a>
    440a:	4b05      	ldr	r3, [pc, #20]	; (4420 <__do_global_dtors_aux+0x20>)
    440c:	2b00      	cmp	r3, #0
    440e:	d002      	beq.n	4416 <__do_global_dtors_aux+0x16>
    4410:	4804      	ldr	r0, [pc, #16]	; (4424 <__do_global_dtors_aux+0x24>)
    4412:	e000      	b.n	4416 <__do_global_dtors_aux+0x16>
    4414:	bf00      	nop
    4416:	2301      	movs	r3, #1
    4418:	7023      	strb	r3, [r4, #0]
    441a:	bd10      	pop	{r4, pc}
    441c:	20000080 	.word	0x20000080
    4420:	00000000 	.word	0x00000000
    4424:	00016fe8 	.word	0x00016fe8

00004428 <frame_dummy>:
    4428:	4b08      	ldr	r3, [pc, #32]	; (444c <frame_dummy+0x24>)
    442a:	b510      	push	{r4, lr}
    442c:	2b00      	cmp	r3, #0
    442e:	d003      	beq.n	4438 <frame_dummy+0x10>
    4430:	4907      	ldr	r1, [pc, #28]	; (4450 <frame_dummy+0x28>)
    4432:	4808      	ldr	r0, [pc, #32]	; (4454 <frame_dummy+0x2c>)
    4434:	e000      	b.n	4438 <frame_dummy+0x10>
    4436:	bf00      	nop
    4438:	4807      	ldr	r0, [pc, #28]	; (4458 <frame_dummy+0x30>)
    443a:	6803      	ldr	r3, [r0, #0]
    443c:	2b00      	cmp	r3, #0
    443e:	d100      	bne.n	4442 <frame_dummy+0x1a>
    4440:	bd10      	pop	{r4, pc}
    4442:	4b06      	ldr	r3, [pc, #24]	; (445c <frame_dummy+0x34>)
    4444:	2b00      	cmp	r3, #0
    4446:	d0fb      	beq.n	4440 <frame_dummy+0x18>
    4448:	4798      	blx	r3
    444a:	e7f9      	b.n	4440 <frame_dummy+0x18>
    444c:	00000000 	.word	0x00000000
    4450:	20000084 	.word	0x20000084
    4454:	00016fe8 	.word	0x00016fe8
    4458:	00016fe8 	.word	0x00016fe8
    445c:	00000000 	.word	0x00000000

00004460 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    4460:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    4462:	2000      	movs	r0, #0
    4464:	4b08      	ldr	r3, [pc, #32]	; (4488 <delay_init+0x28>)
    4466:	4798      	blx	r3
    4468:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    446a:	4c08      	ldr	r4, [pc, #32]	; (448c <delay_init+0x2c>)
    446c:	21fa      	movs	r1, #250	; 0xfa
    446e:	0089      	lsls	r1, r1, #2
    4470:	47a0      	blx	r4
    4472:	4b07      	ldr	r3, [pc, #28]	; (4490 <delay_init+0x30>)
    4474:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    4476:	4907      	ldr	r1, [pc, #28]	; (4494 <delay_init+0x34>)
    4478:	0028      	movs	r0, r5
    447a:	47a0      	blx	r4
    447c:	4b06      	ldr	r3, [pc, #24]	; (4498 <delay_init+0x38>)
    447e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    4480:	2205      	movs	r2, #5
    4482:	4b06      	ldr	r3, [pc, #24]	; (449c <delay_init+0x3c>)
    4484:	601a      	str	r2, [r3, #0]
}
    4486:	bd70      	pop	{r4, r5, r6, pc}
    4488:	000060b9 	.word	0x000060b9
    448c:	00011d81 	.word	0x00011d81
    4490:	20000000 	.word	0x20000000
    4494:	000f4240 	.word	0x000f4240
    4498:	20000004 	.word	0x20000004
    449c:	e000e010 	.word	0xe000e010

000044a0 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    44a0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    44a2:	4b08      	ldr	r3, [pc, #32]	; (44c4 <delay_cycles_us+0x24>)
    44a4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    44a6:	4a08      	ldr	r2, [pc, #32]	; (44c8 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    44a8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    44aa:	2180      	movs	r1, #128	; 0x80
    44ac:	0249      	lsls	r1, r1, #9
	while (n--) {
    44ae:	3801      	subs	r0, #1
    44b0:	d307      	bcc.n	44c2 <delay_cycles_us+0x22>
	if (n > 0) {
    44b2:	2c00      	cmp	r4, #0
    44b4:	d0fb      	beq.n	44ae <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    44b6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    44b8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    44ba:	6813      	ldr	r3, [r2, #0]
    44bc:	420b      	tst	r3, r1
    44be:	d0fc      	beq.n	44ba <delay_cycles_us+0x1a>
    44c0:	e7f5      	b.n	44ae <delay_cycles_us+0xe>
	}
}
    44c2:	bd30      	pop	{r4, r5, pc}
    44c4:	20000004 	.word	0x20000004
    44c8:	e000e010 	.word	0xe000e010

000044cc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    44cc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    44ce:	4b08      	ldr	r3, [pc, #32]	; (44f0 <delay_cycles_ms+0x24>)
    44d0:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    44d2:	4a08      	ldr	r2, [pc, #32]	; (44f4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    44d4:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    44d6:	2180      	movs	r1, #128	; 0x80
    44d8:	0249      	lsls	r1, r1, #9
	while (n--) {
    44da:	3801      	subs	r0, #1
    44dc:	d307      	bcc.n	44ee <delay_cycles_ms+0x22>
	if (n > 0) {
    44de:	2c00      	cmp	r4, #0
    44e0:	d0fb      	beq.n	44da <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    44e2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    44e4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    44e6:	6813      	ldr	r3, [r2, #0]
    44e8:	420b      	tst	r3, r1
    44ea:	d0fc      	beq.n	44e6 <delay_cycles_ms+0x1a>
    44ec:	e7f5      	b.n	44da <delay_cycles_ms+0xe>
	}
}
    44ee:	bd30      	pop	{r4, r5, pc}
    44f0:	20000000 	.word	0x20000000
    44f4:	e000e010 	.word	0xe000e010

000044f8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    44f8:	4b0c      	ldr	r3, [pc, #48]	; (452c <cpu_irq_enter_critical+0x34>)
    44fa:	681b      	ldr	r3, [r3, #0]
    44fc:	2b00      	cmp	r3, #0
    44fe:	d106      	bne.n	450e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4500:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4504:	2b00      	cmp	r3, #0
    4506:	d007      	beq.n	4518 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4508:	2200      	movs	r2, #0
    450a:	4b09      	ldr	r3, [pc, #36]	; (4530 <cpu_irq_enter_critical+0x38>)
    450c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    450e:	4a07      	ldr	r2, [pc, #28]	; (452c <cpu_irq_enter_critical+0x34>)
    4510:	6813      	ldr	r3, [r2, #0]
    4512:	3301      	adds	r3, #1
    4514:	6013      	str	r3, [r2, #0]
}
    4516:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4518:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    451a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    451e:	2200      	movs	r2, #0
    4520:	4b04      	ldr	r3, [pc, #16]	; (4534 <cpu_irq_enter_critical+0x3c>)
    4522:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4524:	3201      	adds	r2, #1
    4526:	4b02      	ldr	r3, [pc, #8]	; (4530 <cpu_irq_enter_critical+0x38>)
    4528:	701a      	strb	r2, [r3, #0]
    452a:	e7f0      	b.n	450e <cpu_irq_enter_critical+0x16>
    452c:	2000009c 	.word	0x2000009c
    4530:	200000a0 	.word	0x200000a0
    4534:	20000008 	.word	0x20000008

00004538 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4538:	4b08      	ldr	r3, [pc, #32]	; (455c <cpu_irq_leave_critical+0x24>)
    453a:	681a      	ldr	r2, [r3, #0]
    453c:	3a01      	subs	r2, #1
    453e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4540:	681b      	ldr	r3, [r3, #0]
    4542:	2b00      	cmp	r3, #0
    4544:	d109      	bne.n	455a <cpu_irq_leave_critical+0x22>
    4546:	4b06      	ldr	r3, [pc, #24]	; (4560 <cpu_irq_leave_critical+0x28>)
    4548:	781b      	ldrb	r3, [r3, #0]
    454a:	2b00      	cmp	r3, #0
    454c:	d005      	beq.n	455a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    454e:	2201      	movs	r2, #1
    4550:	4b04      	ldr	r3, [pc, #16]	; (4564 <cpu_irq_leave_critical+0x2c>)
    4552:	701a      	strb	r2, [r3, #0]
    4554:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4558:	b662      	cpsie	i
	}
}
    455a:	4770      	bx	lr
    455c:	2000009c 	.word	0x2000009c
    4560:	200000a0 	.word	0x200000a0
    4564:	20000008 	.word	0x20000008

00004568 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4568:	b5f0      	push	{r4, r5, r6, r7, lr}
    456a:	46c6      	mov	lr, r8
    456c:	b500      	push	{lr}
    456e:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    4570:	ac01      	add	r4, sp, #4
    4572:	2501      	movs	r5, #1
    4574:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    4576:	2300      	movs	r3, #0
    4578:	4698      	mov	r8, r3
    457a:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    457c:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    457e:	0021      	movs	r1, r4
    4580:	2013      	movs	r0, #19
    4582:	4e12      	ldr	r6, [pc, #72]	; (45cc <system_board_init+0x64>)
    4584:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4586:	4f12      	ldr	r7, [pc, #72]	; (45d0 <system_board_init+0x68>)
    4588:	2380      	movs	r3, #128	; 0x80
    458a:	031b      	lsls	r3, r3, #12
    458c:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    458e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    4590:	0021      	movs	r1, r4
    4592:	2012      	movs	r0, #18
    4594:	47b0      	blx	r6
    4596:	2380      	movs	r3, #128	; 0x80
    4598:	02db      	lsls	r3, r3, #11
    459a:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    459c:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    459e:	0021      	movs	r1, r4
    45a0:	200d      	movs	r0, #13
    45a2:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    45a4:	2380      	movs	r3, #128	; 0x80
    45a6:	019b      	lsls	r3, r3, #6
    45a8:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    45aa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    45ac:	0021      	movs	r1, r4
    45ae:	2009      	movs	r0, #9
    45b0:	47b0      	blx	r6
    45b2:	2380      	movs	r3, #128	; 0x80
    45b4:	009b      	lsls	r3, r3, #2
    45b6:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    45b8:	4643      	mov	r3, r8
    45ba:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    45bc:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    45be:	0021      	movs	r1, r4
    45c0:	201c      	movs	r0, #28
    45c2:	47b0      	blx	r6
		
}
    45c4:	b002      	add	sp, #8
    45c6:	bc04      	pop	{r2}
    45c8:	4690      	mov	r8, r2
    45ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45cc:	000050fd 	.word	0x000050fd
    45d0:	40002800 	.word	0x40002800

000045d4 <_adc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    45d4:	2000      	movs	r0, #0
    45d6:	4770      	bx	lr

000045d8 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    45d8:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    45da:	2300      	movs	r3, #0
    45dc:	2200      	movs	r2, #0
    45de:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
    45e0:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
    45e2:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    45e4:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    45e6:	2100      	movs	r1, #0
    45e8:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    45ea:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
    45ec:	61c3      	str	r3, [r0, #28]
#if SAMR30 || SAMR34 || SAMR35 || (WLR089)
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
    45ee:	2406      	movs	r4, #6
    45f0:	7104      	strb	r4, [r0, #4]
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
    45f2:	24c0      	movs	r4, #192	; 0xc0
    45f4:	0164      	lsls	r4, r4, #5
    45f6:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    45f8:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    45fa:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
    45fc:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
    45fe:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
    4600:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    4602:	242a      	movs	r4, #42	; 0x2a
    4604:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
    4606:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
    4608:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
    460a:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
    460c:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
    460e:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
    4610:	3c06      	subs	r4, #6
    4612:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    4614:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    4616:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    4618:	7541      	strb	r1, [r0, #21]
}
    461a:	bd10      	pop	{r4, pc}

0000461c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    461c:	b5f0      	push	{r4, r5, r6, r7, lr}
    461e:	46ce      	mov	lr, r9
    4620:	b500      	push	{lr}
    4622:	b098      	sub	sp, #96	; 0x60
    4624:	0005      	movs	r5, r0
    4626:	000c      	movs	r4, r1
    4628:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
    462a:	0008      	movs	r0, r1
    462c:	4bb2      	ldr	r3, [pc, #712]	; (48f8 <adc_init+0x2dc>)
    462e:	4798      	blx	r3

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    4630:	602c      	str	r4, [r5, #0]

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    4632:	4ab2      	ldr	r2, [pc, #712]	; (48fc <adc_init+0x2e0>)
    4634:	6a13      	ldr	r3, [r2, #32]
    4636:	2108      	movs	r1, #8
    4638:	430b      	orrs	r3, r1
    463a:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    463c:	7822      	ldrb	r2, [r4, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    463e:	2305      	movs	r3, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    4640:	07d2      	lsls	r2, r2, #31
    4642:	d504      	bpl.n	464e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
    4644:	0018      	movs	r0, r3
    4646:	b018      	add	sp, #96	; 0x60
    4648:	bc04      	pop	{r2}
    464a:	4691      	mov	r9, r2
    464c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    464e:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    4650:	8c13      	ldrh	r3, [r2, #32]
    4652:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    4654:	2b00      	cmp	r3, #0
    4656:	d1fb      	bne.n	4650 <adc_init+0x34>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    4658:	7822      	ldrb	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    465a:	331c      	adds	r3, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    465c:	0792      	lsls	r2, r2, #30
    465e:	d4f1      	bmi.n	4644 <adc_init+0x28>
	module_inst->reference = config->reference;
    4660:	7873      	ldrb	r3, [r6, #1]
    4662:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
    4664:	2b00      	cmp	r3, #0
    4666:	d104      	bne.n	4672 <adc_init+0x56>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
    4668:	4aa5      	ldr	r2, [pc, #660]	; (4900 <adc_init+0x2e4>)
    466a:	69d3      	ldr	r3, [r2, #28]
    466c:	2104      	movs	r1, #4
    466e:	430b      	orrs	r3, r1
    4670:	61d3      	str	r3, [r2, #28]
		module_inst->callback[i] = NULL;
    4672:	2300      	movs	r3, #0
    4674:	60ab      	str	r3, [r5, #8]
    4676:	60eb      	str	r3, [r5, #12]
    4678:	612b      	str	r3, [r5, #16]
	module_inst->registered_callback_mask = 0;
    467a:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
    467c:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
    467e:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
    4680:	772b      	strb	r3, [r5, #28]
	_adc_instances[instance] = module_inst;
    4682:	0080      	lsls	r0, r0, #2
    4684:	4b9f      	ldr	r3, [pc, #636]	; (4904 <adc_init+0x2e8>)
    4686:	50c5      	str	r5, [r0, r3]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    4688:	232a      	movs	r3, #42	; 0x2a
    468a:	5cf3      	ldrb	r3, [r6, r3]
    468c:	2b00      	cmp	r3, #0
    468e:	d105      	bne.n	469c <adc_init+0x80>
    4690:	7b33      	ldrb	r3, [r6, #12]
    4692:	2b00      	cmp	r3, #0
    4694:	d102      	bne.n	469c <adc_init+0x80>
		module_inst->software_trigger = true;
    4696:	3301      	adds	r3, #1
    4698:	776b      	strb	r3, [r5, #29]
    469a:	e001      	b.n	46a0 <adc_init+0x84>
		module_inst->software_trigger = false;
    469c:	2300      	movs	r3, #0
    469e:	776b      	strb	r3, [r5, #29]
	Adc *const adc_module = module_inst->hw;
    46a0:	682f      	ldr	r7, [r5, #0]
	gclk_chan_conf.source_generator = config->clock_source;
    46a2:	7833      	ldrb	r3, [r6, #0]
    46a4:	466a      	mov	r2, sp
    46a6:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
    46a8:	4669      	mov	r1, sp
    46aa:	201e      	movs	r0, #30
    46ac:	4b96      	ldr	r3, [pc, #600]	; (4908 <adc_init+0x2ec>)
    46ae:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
    46b0:	201e      	movs	r0, #30
    46b2:	4b96      	ldr	r3, [pc, #600]	; (490c <adc_init+0x2f0>)
    46b4:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
    46b6:	7934      	ldrb	r4, [r6, #4]
	const uint32_t pinmapping[] = {
    46b8:	2258      	movs	r2, #88	; 0x58
    46ba:	4995      	ldr	r1, [pc, #596]	; (4910 <adc_init+0x2f4>)
    46bc:	a802      	add	r0, sp, #8
    46be:	4b95      	ldr	r3, [pc, #596]	; (4914 <adc_init+0x2f8>)
    46c0:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
    46c2:	2c13      	cmp	r4, #19
    46c4:	d90b      	bls.n	46de <adc_init+0xc2>
	_adc_configure_ain_pin(index, config->negative_input);
    46c6:	88f4      	ldrh	r4, [r6, #6]
	const uint32_t pinmapping[] = {
    46c8:	2258      	movs	r2, #88	; 0x58
    46ca:	4991      	ldr	r1, [pc, #580]	; (4910 <adc_init+0x2f4>)
    46cc:	a802      	add	r0, sp, #8
    46ce:	4b91      	ldr	r3, [pc, #580]	; (4914 <adc_init+0x2f8>)
    46d0:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
    46d2:	2c13      	cmp	r4, #19
    46d4:	d911      	bls.n	46fa <adc_init+0xde>
    46d6:	2400      	movs	r4, #0
	const uint32_t pinmapping[] = {
    46d8:	4b8e      	ldr	r3, [pc, #568]	; (4914 <adc_init+0x2f8>)
    46da:	4699      	mov	r9, r3
    46dc:	e01e      	b.n	471c <adc_init+0x100>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    46de:	00a4      	lsls	r4, r4, #2
    46e0:	ab02      	add	r3, sp, #8
    46e2:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    46e4:	a901      	add	r1, sp, #4
    46e6:	2300      	movs	r3, #0
    46e8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    46ea:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    46ec:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    46ee:	3301      	adds	r3, #1
    46f0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    46f2:	b2c0      	uxtb	r0, r0
    46f4:	4b88      	ldr	r3, [pc, #544]	; (4918 <adc_init+0x2fc>)
    46f6:	4798      	blx	r3
    46f8:	e7e5      	b.n	46c6 <adc_init+0xaa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    46fa:	00a4      	lsls	r4, r4, #2
    46fc:	ab02      	add	r3, sp, #8
    46fe:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4700:	a901      	add	r1, sp, #4
    4702:	2300      	movs	r3, #0
    4704:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    4706:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    4708:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    470a:	3301      	adds	r3, #1
    470c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    470e:	b2c0      	uxtb	r0, r0
    4710:	4b81      	ldr	r3, [pc, #516]	; (4918 <adc_init+0x2fc>)
    4712:	4798      	blx	r3
    4714:	e7df      	b.n	46d6 <adc_init+0xba>
    4716:	3401      	adds	r4, #1
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
    4718:	2c14      	cmp	r4, #20
    471a:	d018      	beq.n	474e <adc_init+0x132>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
    471c:	2301      	movs	r3, #1
    471e:	40a3      	lsls	r3, r4
    4720:	6932      	ldr	r2, [r6, #16]
    4722:	421a      	tst	r2, r3
    4724:	d0f7      	beq.n	4716 <adc_init+0xfa>
	const uint32_t pinmapping[] = {
    4726:	2258      	movs	r2, #88	; 0x58
    4728:	4979      	ldr	r1, [pc, #484]	; (4910 <adc_init+0x2f4>)
    472a:	a802      	add	r0, sp, #8
    472c:	47c8      	blx	r9
	if (pin <= _adc_extchannel_msb[index]) {
    472e:	2c13      	cmp	r4, #19
    4730:	d8f1      	bhi.n	4716 <adc_init+0xfa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    4732:	00a3      	lsls	r3, r4, #2
    4734:	aa02      	add	r2, sp, #8
    4736:	5898      	ldr	r0, [r3, r2]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4738:	a901      	add	r1, sp, #4
    473a:	2300      	movs	r3, #0
    473c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    473e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    4740:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    4742:	3301      	adds	r3, #1
    4744:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    4746:	b2c0      	uxtb	r0, r0
    4748:	4b73      	ldr	r3, [pc, #460]	; (4918 <adc_init+0x2fc>)
    474a:	4798      	blx	r3
    474c:	e7e3      	b.n	4716 <adc_init+0xfa>
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
    474e:	7b73      	ldrb	r3, [r6, #13]
    4750:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
    4752:	7bb2      	ldrb	r2, [r6, #14]
    4754:	01d2      	lsls	r2, r2, #7
    4756:	4313      	orrs	r3, r2
    4758:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
    475a:	703b      	strb	r3, [r7, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
    475c:	7d33      	ldrb	r3, [r6, #20]
    475e:	01db      	lsls	r3, r3, #7
			| (config->reference);
    4760:	7872      	ldrb	r2, [r6, #1]
    4762:	4313      	orrs	r3, r2
    4764:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    4766:	70bb      	strb	r3, [r7, #2]
	switch (config->resolution) {
    4768:	78f3      	ldrb	r3, [r6, #3]
    476a:	2b34      	cmp	r3, #52	; 0x34
    476c:	d900      	bls.n	4770 <adc_init+0x154>
    476e:	e140      	b.n	49f2 <adc_init+0x3d6>
    4770:	009b      	lsls	r3, r3, #2
    4772:	4a6a      	ldr	r2, [pc, #424]	; (491c <adc_init+0x300>)
    4774:	58d3      	ldr	r3, [r2, r3]
    4776:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    4778:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
    477a:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_4;
    477c:	2102      	movs	r1, #2
    477e:	e01a      	b.n	47b6 <adc_init+0x19a>
		adjres = config->divide_result;
    4780:	7a71      	ldrb	r1, [r6, #9]
		accumulate = config->accumulate_samples;
    4782:	7a32      	ldrb	r2, [r6, #8]
		resolution = ADC_RESOLUTION_16BIT;
    4784:	2010      	movs	r0, #16
    4786:	e016      	b.n	47b6 <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    4788:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
    478a:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
    478c:	2101      	movs	r1, #1
    478e:	e012      	b.n	47b6 <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    4790:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
    4792:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    4794:	2100      	movs	r1, #0
    4796:	e00e      	b.n	47b6 <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    4798:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
    479a:	2030      	movs	r0, #48	; 0x30
	uint8_t adjres = 0;
    479c:	2100      	movs	r1, #0
    479e:	e00a      	b.n	47b6 <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    47a0:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
    47a2:	2020      	movs	r0, #32
	uint8_t adjres = 0;
    47a4:	2100      	movs	r1, #0
    47a6:	e006      	b.n	47b6 <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    47a8:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
    47aa:	2000      	movs	r0, #0
	uint8_t adjres = 0;
    47ac:	2100      	movs	r1, #0
    47ae:	e002      	b.n	47b6 <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    47b0:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
    47b2:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
    47b4:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    47b6:	0109      	lsls	r1, r1, #4
    47b8:	2370      	movs	r3, #112	; 0x70
    47ba:	400b      	ands	r3, r1
    47bc:	4313      	orrs	r3, r2
    47be:	733b      	strb	r3, [r7, #12]
	Adc *const adc_module = module_inst->hw;
    47c0:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    47c2:	8c13      	ldrh	r3, [r2, #32]
    47c4:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    47c6:	2b00      	cmp	r3, #0
    47c8:	d1fb      	bne.n	47c2 <adc_init+0x1a6>
	if (config->sample_length > 63) {
    47ca:	7d72      	ldrb	r2, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
    47cc:	3317      	adds	r3, #23
	if (config->sample_length > 63) {
    47ce:	2a3f      	cmp	r2, #63	; 0x3f
    47d0:	d900      	bls.n	47d4 <adc_init+0x1b8>
    47d2:	e737      	b.n	4644 <adc_init+0x28>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
    47d4:	7bf3      	ldrb	r3, [r6, #15]
    47d6:	01db      	lsls	r3, r3, #7
    47d8:	431a      	orrs	r2, r3
    47da:	b2d2      	uxtb	r2, r2
		adc_module->SAMPCTRL.reg =
    47dc:	737a      	strb	r2, [r7, #13]
	Adc *const adc_module = module_inst->hw;
    47de:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    47e0:	8c13      	ldrh	r3, [r2, #32]
    47e2:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    47e4:	2b00      	cmp	r3, #0
    47e6:	d1fb      	bne.n	47e0 <adc_init+0x1c4>
			config->clock_prescaler;
    47e8:	78b3      	ldrb	r3, [r6, #2]
	adc_module->CTRLB.reg =
    47ea:	707b      	strb	r3, [r7, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
    47ec:	2324      	movs	r3, #36	; 0x24
    47ee:	5cf3      	ldrb	r3, [r6, r3]
    47f0:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
    47f2:	7b32      	ldrb	r2, [r6, #12]
    47f4:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
    47f6:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
    47f8:	7af3      	ldrb	r3, [r6, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
    47fa:	4313      	orrs	r3, r2
    47fc:	7ab2      	ldrb	r2, [r6, #10]
    47fe:	0052      	lsls	r2, r2, #1
    4800:	4313      	orrs	r3, r2
    4802:	4303      	orrs	r3, r0
	adc_module->CTRLC.reg =
    4804:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
    4806:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    4808:	8c13      	ldrh	r3, [r2, #32]
    480a:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    480c:	2b00      	cmp	r3, #0
    480e:	d1fb      	bne.n	4808 <adc_init+0x1ec>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    4810:	8b32      	ldrh	r2, [r6, #24]
    4812:	2a00      	cmp	r2, #0
    4814:	d020      	beq.n	4858 <adc_init+0x23c>
		switch (resolution) {
    4816:	2810      	cmp	r0, #16
    4818:	d100      	bne.n	481c <adc_init+0x200>
    481a:	e0c9      	b.n	49b0 <adc_init+0x394>
    481c:	d800      	bhi.n	4820 <adc_init+0x204>
    481e:	e083      	b.n	4928 <adc_init+0x30c>
    4820:	2820      	cmp	r0, #32
    4822:	d100      	bne.n	4826 <adc_init+0x20a>
    4824:	e0a3      	b.n	496e <adc_init+0x352>
    4826:	2830      	cmp	r0, #48	; 0x30
    4828:	d116      	bne.n	4858 <adc_init+0x23c>
			if (config->differential_mode &&
    482a:	7af3      	ldrb	r3, [r6, #11]
    482c:	2b00      	cmp	r3, #0
    482e:	d00a      	beq.n	4846 <adc_init+0x22a>
					(config->window.window_lower_value > 127 ||
    4830:	69f1      	ldr	r1, [r6, #28]
    4832:	3180      	adds	r1, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    4834:	2317      	movs	r3, #23
			if (config->differential_mode &&
    4836:	29ff      	cmp	r1, #255	; 0xff
    4838:	d900      	bls.n	483c <adc_init+0x220>
    483a:	e703      	b.n	4644 <adc_init+0x28>
					config->window.window_lower_value < -128 ||
    483c:	6a31      	ldr	r1, [r6, #32]
    483e:	3180      	adds	r1, #128	; 0x80
    4840:	29ff      	cmp	r1, #255	; 0xff
    4842:	d900      	bls.n	4846 <adc_init+0x22a>
    4844:	e6fe      	b.n	4644 <adc_init+0x28>
				return STATUS_ERR_INVALID_ARG;
    4846:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 255 ||
    4848:	69f1      	ldr	r1, [r6, #28]
    484a:	29ff      	cmp	r1, #255	; 0xff
    484c:	dd00      	ble.n	4850 <adc_init+0x234>
    484e:	e6f9      	b.n	4644 <adc_init+0x28>
    4850:	6a31      	ldr	r1, [r6, #32]
    4852:	29ff      	cmp	r1, #255	; 0xff
    4854:	dd00      	ble.n	4858 <adc_init+0x23c>
    4856:	e6f5      	b.n	4644 <adc_init+0x28>
	adc_module->CTRLC.reg |= config->window.window_mode;
    4858:	897b      	ldrh	r3, [r7, #10]
    485a:	431a      	orrs	r2, r3
    485c:	817a      	strh	r2, [r7, #10]
	Adc *const adc_module = module_inst->hw;
    485e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    4860:	8c13      	ldrh	r3, [r2, #32]
    4862:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    4864:	2b00      	cmp	r3, #0
    4866:	d1fb      	bne.n	4860 <adc_init+0x244>
	adc_module->WINLT.reg =
    4868:	8bb3      	ldrh	r3, [r6, #28]
    486a:	81fb      	strh	r3, [r7, #14]
	Adc *const adc_module = module_inst->hw;
    486c:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    486e:	8c13      	ldrh	r3, [r2, #32]
    4870:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    4872:	2b00      	cmp	r3, #0
    4874:	d1fb      	bne.n	486e <adc_init+0x252>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    4876:	8c33      	ldrh	r3, [r6, #32]
    4878:	823b      	strh	r3, [r7, #16]
	Adc *const adc_module = module_inst->hw;
    487a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    487c:	8c13      	ldrh	r3, [r2, #32]
    487e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    4880:	2b00      	cmp	r3, #0
    4882:	d1fb      	bne.n	487c <adc_init+0x260>
			config->positive_input;
    4884:	7933      	ldrb	r3, [r6, #4]
			config->negative_input |
    4886:	88f2      	ldrh	r2, [r6, #6]
    4888:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    488a:	813b      	strh	r3, [r7, #8]
	Adc *const adc_module = module_inst->hw;
    488c:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    488e:	8c13      	ldrh	r3, [r2, #32]
    4890:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    4892:	2b00      	cmp	r3, #0
    4894:	d1fb      	bne.n	488e <adc_init+0x272>
	adc_module->EVCTRL.reg = config->event_action;
    4896:	332a      	adds	r3, #42	; 0x2a
    4898:	5cf3      	ldrb	r3, [r6, r3]
    489a:	70fb      	strb	r3, [r7, #3]
	adc_module->INTENCLR.reg =
    489c:	2307      	movs	r3, #7
    489e:	713b      	strb	r3, [r7, #4]
	if (config->correction.correction_enable){
    48a0:	331d      	adds	r3, #29
    48a2:	5cf3      	ldrb	r3, [r6, r3]
    48a4:	2b00      	cmp	r3, #0
    48a6:	d01b      	beq.n	48e0 <adc_init+0x2c4>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    48a8:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
    48aa:	491d      	ldr	r1, [pc, #116]	; (4920 <adc_init+0x304>)
			return STATUS_ERR_INVALID_ARG;
    48ac:	2317      	movs	r3, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    48ae:	428a      	cmp	r2, r1
    48b0:	d900      	bls.n	48b4 <adc_init+0x298>
    48b2:	e6c7      	b.n	4644 <adc_init+0x28>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    48b4:	827a      	strh	r2, [r7, #18]
	Adc *const adc_module = module_inst->hw;
    48b6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    48b8:	8c13      	ldrh	r3, [r2, #32]
    48ba:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
    48bc:	2b00      	cmp	r3, #0
    48be:	d1fb      	bne.n	48b8 <adc_init+0x29c>
		if (config->correction.offset_correction > 2047 ||
    48c0:	8d31      	ldrh	r1, [r6, #40]	; 0x28
    48c2:	2380      	movs	r3, #128	; 0x80
    48c4:	011b      	lsls	r3, r3, #4
    48c6:	18ca      	adds	r2, r1, r3
    48c8:	4815      	ldr	r0, [pc, #84]	; (4920 <adc_init+0x304>)
    48ca:	b292      	uxth	r2, r2
			return STATUS_ERR_INVALID_ARG;
    48cc:	2317      	movs	r3, #23
		if (config->correction.offset_correction > 2047 ||
    48ce:	4282      	cmp	r2, r0
    48d0:	d900      	bls.n	48d4 <adc_init+0x2b8>
    48d2:	e6b7      	b.n	4644 <adc_init+0x28>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    48d4:	82b9      	strh	r1, [r7, #20]
	Adc *const adc_module = module_inst->hw;
    48d6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    48d8:	8c13      	ldrh	r3, [r2, #32]
    48da:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
    48dc:	2b00      	cmp	r3, #0
    48de:	d1fb      	bne.n	48d8 <adc_init+0x2bc>
			ADC_CALIB_BIASREFBUF(
    48e0:	4b10      	ldr	r3, [pc, #64]	; (4924 <adc_init+0x308>)
    48e2:	681b      	ldr	r3, [r3, #0]
    48e4:	021a      	lsls	r2, r3, #8
    48e6:	21e0      	movs	r1, #224	; 0xe0
    48e8:	00c9      	lsls	r1, r1, #3
    48ea:	400a      	ands	r2, r1
			ADC_CALIB_BIASCOMP(
    48ec:	069b      	lsls	r3, r3, #26
    48ee:	0f5b      	lsrs	r3, r3, #29
			) |
    48f0:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    48f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	return STATUS_OK;
    48f4:	2300      	movs	r3, #0
    48f6:	e6a5      	b.n	4644 <adc_init+0x28>
    48f8:	000045d5 	.word	0x000045d5
    48fc:	40000400 	.word	0x40000400
    4900:	40001400 	.word	0x40001400
    4904:	20001e24 	.word	0x20001e24
    4908:	00006195 	.word	0x00006195
    490c:	00006125 	.word	0x00006125
    4910:	00016458 	.word	0x00016458
    4914:	00014fe3 	.word	0x00014fe3
    4918:	00006291 	.word	0x00006291
    491c:	00016384 	.word	0x00016384
    4920:	00000fff 	.word	0x00000fff
    4924:	00806020 	.word	0x00806020
		switch (resolution) {
    4928:	2800      	cmp	r0, #0
    492a:	d195      	bne.n	4858 <adc_init+0x23c>
			if (config->differential_mode &&
    492c:	7af3      	ldrb	r3, [r6, #11]
    492e:	2b00      	cmp	r3, #0
    4930:	d012      	beq.n	4958 <adc_init+0x33c>
					(config->window.window_lower_value > 2047 ||
    4932:	69f3      	ldr	r3, [r6, #28]
    4934:	2080      	movs	r0, #128	; 0x80
    4936:	0100      	lsls	r0, r0, #4
    4938:	4684      	mov	ip, r0
    493a:	4463      	add	r3, ip
    493c:	0019      	movs	r1, r3
			if (config->differential_mode &&
    493e:	482e      	ldr	r0, [pc, #184]	; (49f8 <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
    4940:	2317      	movs	r3, #23
			if (config->differential_mode &&
    4942:	4281      	cmp	r1, r0
    4944:	d900      	bls.n	4948 <adc_init+0x32c>
    4946:	e67d      	b.n	4644 <adc_init+0x28>
					config->window.window_lower_value < -2048 ||
    4948:	6a33      	ldr	r3, [r6, #32]
    494a:	4463      	add	r3, ip
    494c:	0019      	movs	r1, r3
    494e:	482a      	ldr	r0, [pc, #168]	; (49f8 <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
    4950:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
    4952:	4281      	cmp	r1, r0
    4954:	d900      	bls.n	4958 <adc_init+0x33c>
    4956:	e675      	b.n	4644 <adc_init+0x28>
			} else if (config->window.window_lower_value > 4095 ||
    4958:	4927      	ldr	r1, [pc, #156]	; (49f8 <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
    495a:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 4095 ||
    495c:	69f0      	ldr	r0, [r6, #28]
    495e:	4288      	cmp	r0, r1
    4960:	dd00      	ble.n	4964 <adc_init+0x348>
    4962:	e66f      	b.n	4644 <adc_init+0x28>
    4964:	6a30      	ldr	r0, [r6, #32]
    4966:	4288      	cmp	r0, r1
    4968:	dd00      	ble.n	496c <adc_init+0x350>
    496a:	e66b      	b.n	4644 <adc_init+0x28>
    496c:	e774      	b.n	4858 <adc_init+0x23c>
			if (config->differential_mode &&
    496e:	7af3      	ldrb	r3, [r6, #11]
    4970:	2b00      	cmp	r3, #0
    4972:	d012      	beq.n	499a <adc_init+0x37e>
					(config->window.window_lower_value > 511 ||
    4974:	69f3      	ldr	r3, [r6, #28]
    4976:	2080      	movs	r0, #128	; 0x80
    4978:	0080      	lsls	r0, r0, #2
    497a:	4684      	mov	ip, r0
    497c:	4463      	add	r3, ip
    497e:	0019      	movs	r1, r3
			if (config->differential_mode &&
    4980:	481e      	ldr	r0, [pc, #120]	; (49fc <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
    4982:	2317      	movs	r3, #23
			if (config->differential_mode &&
    4984:	4281      	cmp	r1, r0
    4986:	d900      	bls.n	498a <adc_init+0x36e>
    4988:	e65c      	b.n	4644 <adc_init+0x28>
					config->window.window_lower_value < -512 ||
    498a:	6a33      	ldr	r3, [r6, #32]
    498c:	4463      	add	r3, ip
    498e:	0019      	movs	r1, r3
    4990:	481a      	ldr	r0, [pc, #104]	; (49fc <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
    4992:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
    4994:	4281      	cmp	r1, r0
    4996:	d900      	bls.n	499a <adc_init+0x37e>
    4998:	e654      	b.n	4644 <adc_init+0x28>
			} else if (config->window.window_lower_value > 1023 ||
    499a:	4918      	ldr	r1, [pc, #96]	; (49fc <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
    499c:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 1023 ||
    499e:	69f0      	ldr	r0, [r6, #28]
    49a0:	4288      	cmp	r0, r1
    49a2:	dd00      	ble.n	49a6 <adc_init+0x38a>
    49a4:	e64e      	b.n	4644 <adc_init+0x28>
    49a6:	6a30      	ldr	r0, [r6, #32]
    49a8:	4288      	cmp	r0, r1
    49aa:	dd00      	ble.n	49ae <adc_init+0x392>
    49ac:	e64a      	b.n	4644 <adc_init+0x28>
    49ae:	e753      	b.n	4858 <adc_init+0x23c>
			if (config->differential_mode &&
    49b0:	7af3      	ldrb	r3, [r6, #11]
    49b2:	2b00      	cmp	r3, #0
    49b4:	d012      	beq.n	49dc <adc_init+0x3c0>
					(config->window.window_lower_value > 32767 ||
    49b6:	69f3      	ldr	r3, [r6, #28]
    49b8:	2080      	movs	r0, #128	; 0x80
    49ba:	0200      	lsls	r0, r0, #8
    49bc:	4684      	mov	ip, r0
    49be:	4463      	add	r3, ip
    49c0:	0019      	movs	r1, r3
			if (config->differential_mode &&
    49c2:	480f      	ldr	r0, [pc, #60]	; (4a00 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
    49c4:	2317      	movs	r3, #23
			if (config->differential_mode &&
    49c6:	4281      	cmp	r1, r0
    49c8:	d900      	bls.n	49cc <adc_init+0x3b0>
    49ca:	e63b      	b.n	4644 <adc_init+0x28>
					config->window.window_lower_value < -32768 ||
    49cc:	6a33      	ldr	r3, [r6, #32]
    49ce:	4463      	add	r3, ip
    49d0:	0019      	movs	r1, r3
    49d2:	480b      	ldr	r0, [pc, #44]	; (4a00 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
    49d4:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
    49d6:	4281      	cmp	r1, r0
    49d8:	d900      	bls.n	49dc <adc_init+0x3c0>
    49da:	e633      	b.n	4644 <adc_init+0x28>
			} else if (config->window.window_lower_value > 65535 ||
    49dc:	4908      	ldr	r1, [pc, #32]	; (4a00 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
    49de:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 65535 ||
    49e0:	69f0      	ldr	r0, [r6, #28]
    49e2:	4288      	cmp	r0, r1
    49e4:	dd00      	ble.n	49e8 <adc_init+0x3cc>
    49e6:	e62d      	b.n	4644 <adc_init+0x28>
    49e8:	6a30      	ldr	r0, [r6, #32]
    49ea:	4288      	cmp	r0, r1
    49ec:	dd00      	ble.n	49f0 <adc_init+0x3d4>
    49ee:	e629      	b.n	4644 <adc_init+0x28>
    49f0:	e732      	b.n	4858 <adc_init+0x23c>
		return STATUS_ERR_INVALID_ARG;
    49f2:	2317      	movs	r3, #23
    49f4:	e626      	b.n	4644 <adc_init+0x28>
    49f6:	46c0      	nop			; (mov r8, r8)
    49f8:	00000fff 	.word	0x00000fff
    49fc:	000003ff 	.word	0x000003ff
    4a00:	0000ffff 	.word	0x0000ffff

00004a04 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
    4a04:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    4a06:	4b2f      	ldr	r3, [pc, #188]	; (4ac4 <ADC_Handler+0xc0>)
    4a08:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    4a0a:	6823      	ldr	r3, [r4, #0]
    4a0c:	799a      	ldrb	r2, [r3, #6]
    4a0e:	795d      	ldrb	r5, [r3, #5]
    4a10:	4015      	ands	r5, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    4a12:	07ea      	lsls	r2, r5, #31
    4a14:	d52a      	bpl.n	4a6c <ADC_Handler+0x68>
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    4a16:	2201      	movs	r2, #1
    4a18:	719a      	strb	r2, [r3, #6]
		*(module->job_buffer++) = module->hw->RESULT.reg;
    4a1a:	6962      	ldr	r2, [r4, #20]
    4a1c:	1c93      	adds	r3, r2, #2
    4a1e:	6163      	str	r3, [r4, #20]
    4a20:	6823      	ldr	r3, [r4, #0]
    4a22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4a24:	b29b      	uxth	r3, r3
    4a26:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
    4a28:	8b23      	ldrh	r3, [r4, #24]
    4a2a:	3b01      	subs	r3, #1
    4a2c:	b29b      	uxth	r3, r3
    4a2e:	8323      	strh	r3, [r4, #24]
    4a30:	2b00      	cmp	r3, #0
    4a32:	d015      	beq.n	4a60 <ADC_Handler+0x5c>
			if (module->software_trigger == true
    4a34:	7f63      	ldrb	r3, [r4, #29]
    4a36:	2b00      	cmp	r3, #0
    4a38:	d018      	beq.n	4a6c <ADC_Handler+0x68>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
    4a3a:	6822      	ldr	r2, [r4, #0]
    4a3c:	79d3      	ldrb	r3, [r2, #7]
    4a3e:	b25b      	sxtb	r3, r3
    4a40:	2b00      	cmp	r3, #0
    4a42:	db13      	blt.n	4a6c <ADC_Handler+0x68>
    4a44:	8c13      	ldrh	r3, [r2, #32]
    4a46:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    4a48:	2b00      	cmp	r3, #0
    4a4a:	d1fb      	bne.n	4a44 <ADC_Handler+0x40>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4a4c:	7e13      	ldrb	r3, [r2, #24]
    4a4e:	2102      	movs	r1, #2
    4a50:	430b      	orrs	r3, r1
    4a52:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
    4a54:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
    4a56:	8c13      	ldrh	r3, [r2, #32]
    4a58:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    4a5a:	2b00      	cmp	r3, #0
    4a5c:	d1fb      	bne.n	4a56 <ADC_Handler+0x52>
    4a5e:	e005      	b.n	4a6c <ADC_Handler+0x68>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    4a60:	2301      	movs	r3, #1
    4a62:	6822      	ldr	r2, [r4, #0]
    4a64:	7113      	strb	r3, [r2, #4]
			if (module->job_status == STATUS_BUSY) {
    4a66:	7f23      	ldrb	r3, [r4, #28]
    4a68:	2b05      	cmp	r3, #5
    4a6a:	d016      	beq.n	4a9a <ADC_Handler+0x96>
	if (flags & ADC_INTFLAG_WINMON) {
    4a6c:	076b      	lsls	r3, r5, #29
    4a6e:	d508      	bpl.n	4a82 <ADC_Handler+0x7e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    4a70:	2304      	movs	r3, #4
    4a72:	6822      	ldr	r2, [r4, #0]
    4a74:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    4a76:	7ee3      	ldrb	r3, [r4, #27]
    4a78:	079b      	lsls	r3, r3, #30
    4a7a:	d502      	bpl.n	4a82 <ADC_Handler+0x7e>
    4a7c:	7ea3      	ldrb	r3, [r4, #26]
    4a7e:	079b      	lsls	r3, r3, #30
    4a80:	d417      	bmi.n	4ab2 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    4a82:	07ab      	lsls	r3, r5, #30
    4a84:	d508      	bpl.n	4a98 <ADC_Handler+0x94>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    4a86:	2302      	movs	r3, #2
    4a88:	6822      	ldr	r2, [r4, #0]
    4a8a:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    4a8c:	7ee3      	ldrb	r3, [r4, #27]
    4a8e:	075b      	lsls	r3, r3, #29
    4a90:	d502      	bpl.n	4a98 <ADC_Handler+0x94>
    4a92:	7ea3      	ldrb	r3, [r4, #26]
    4a94:	075b      	lsls	r3, r3, #29
    4a96:	d410      	bmi.n	4aba <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    4a98:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
    4a9a:	2300      	movs	r3, #0
    4a9c:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
    4a9e:	7ee3      	ldrb	r3, [r4, #27]
    4aa0:	07db      	lsls	r3, r3, #31
    4aa2:	d5e3      	bpl.n	4a6c <ADC_Handler+0x68>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    4aa4:	7ea3      	ldrb	r3, [r4, #26]
    4aa6:	07db      	lsls	r3, r3, #31
    4aa8:	d5e0      	bpl.n	4a6c <ADC_Handler+0x68>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    4aaa:	0020      	movs	r0, r4
    4aac:	68a3      	ldr	r3, [r4, #8]
    4aae:	4798      	blx	r3
    4ab0:	e7dc      	b.n	4a6c <ADC_Handler+0x68>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    4ab2:	0020      	movs	r0, r4
    4ab4:	68e3      	ldr	r3, [r4, #12]
    4ab6:	4798      	blx	r3
    4ab8:	e7e3      	b.n	4a82 <ADC_Handler+0x7e>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    4aba:	6923      	ldr	r3, [r4, #16]
    4abc:	0020      	movs	r0, r4
    4abe:	4798      	blx	r3
}
    4ac0:	e7ea      	b.n	4a98 <ADC_Handler+0x94>
    4ac2:	46c0      	nop			; (mov r8, r8)
    4ac4:	20001e24 	.word	0x20001e24

00004ac8 <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    4ac8:	1c93      	adds	r3, r2, #2
    4aca:	009b      	lsls	r3, r3, #2
    4acc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
    4ace:	2301      	movs	r3, #1
    4ad0:	4093      	lsls	r3, r2
    4ad2:	001a      	movs	r2, r3
    4ad4:	7e83      	ldrb	r3, [r0, #26]
    4ad6:	4313      	orrs	r3, r2
    4ad8:	7683      	strb	r3, [r0, #26]
}
    4ada:	4770      	bx	lr

00004adc <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
    4adc:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    4ade:	8b03      	ldrh	r3, [r0, #24]
    4ae0:	b29b      	uxth	r3, r3
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
    4ae2:	2405      	movs	r4, #5
	if(module_inst->remaining_conversions != 0 ||
    4ae4:	2b00      	cmp	r3, #0
    4ae6:	d001      	beq.n	4aec <adc_read_buffer_job+0x10>
	if(module_inst->software_trigger == true) {
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
}
    4ae8:	0020      	movs	r0, r4
    4aea:	bd10      	pop	{r4, pc}
			module_inst->job_status == STATUS_BUSY){
    4aec:	7f03      	ldrb	r3, [r0, #28]
	if(module_inst->remaining_conversions != 0 ||
    4aee:	2b05      	cmp	r3, #5
    4af0:	d0fa      	beq.n	4ae8 <adc_read_buffer_job+0xc>
	module_inst->job_status = STATUS_BUSY;
    4af2:	2305      	movs	r3, #5
    4af4:	7703      	strb	r3, [r0, #28]
	module_inst->remaining_conversions = samples;
    4af6:	8302      	strh	r2, [r0, #24]
	module_inst->job_buffer = buffer;
    4af8:	6141      	str	r1, [r0, #20]
	adc_module->INTENSET.reg = interrupt;
    4afa:	3b04      	subs	r3, #4
    4afc:	6802      	ldr	r2, [r0, #0]
    4afe:	7153      	strb	r3, [r2, #5]
	if(module_inst->software_trigger == true) {
    4b00:	7f43      	ldrb	r3, [r0, #29]
	return STATUS_OK;
    4b02:	2400      	movs	r4, #0
	if(module_inst->software_trigger == true) {
    4b04:	2b00      	cmp	r3, #0
    4b06:	d0ef      	beq.n	4ae8 <adc_read_buffer_job+0xc>
	Adc *const adc_module = module_inst->hw;
    4b08:	6802      	ldr	r2, [r0, #0]
    4b0a:	8c13      	ldrh	r3, [r2, #32]
    4b0c:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    4b0e:	2b00      	cmp	r3, #0
    4b10:	d1fb      	bne.n	4b0a <adc_read_buffer_job+0x2e>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4b12:	7e13      	ldrb	r3, [r2, #24]
    4b14:	2102      	movs	r1, #2
    4b16:	430b      	orrs	r3, r1
    4b18:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
    4b1a:	6802      	ldr	r2, [r0, #0]
	if (adc_module->SYNCBUSY.reg) {
    4b1c:	8c13      	ldrh	r3, [r2, #32]
    4b1e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    4b20:	2b00      	cmp	r3, #0
    4b22:	d1fb      	bne.n	4b1c <adc_read_buffer_job+0x40>
	return STATUS_OK;
    4b24:	2400      	movs	r4, #0
    4b26:	e7df      	b.n	4ae8 <adc_read_buffer_job+0xc>

00004b28 <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    4b28:	2301      	movs	r3, #1
    4b2a:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    4b2c:	2300      	movs	r3, #0
    4b2e:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    4b30:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    4b32:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    4b34:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    4b36:	220f      	movs	r2, #15
    4b38:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    4b3a:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    4b3c:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    4b3e:	7203      	strb	r3, [r0, #8]
}
    4b40:	4770      	bx	lr

00004b42 <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    4b42:	6802      	ldr	r2, [r0, #0]
    4b44:	6813      	ldr	r3, [r2, #0]
    4b46:	2102      	movs	r1, #2
    4b48:	430b      	orrs	r3, r1
    4b4a:	6013      	str	r3, [r2, #0]

}
    4b4c:	4770      	bx	lr

00004b4e <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    4b4e:	2303      	movs	r3, #3
    4b50:	6802      	ldr	r2, [r0, #0]
    4b52:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    4b54:	6802      	ldr	r2, [r0, #0]
    4b56:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    4b58:	6802      	ldr	r2, [r0, #0]
    4b5a:	6813      	ldr	r3, [r2, #0]
    4b5c:	2102      	movs	r1, #2
    4b5e:	438b      	bics	r3, r1
    4b60:	6013      	str	r3, [r2, #0]
}
    4b62:	4770      	bx	lr

00004b64 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    4b64:	b570      	push	{r4, r5, r6, lr}
    4b66:	0004      	movs	r4, r0
    4b68:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    4b6a:	78d3      	ldrb	r3, [r2, #3]
    4b6c:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    4b6e:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    4b70:	7853      	ldrb	r3, [r2, #1]
    4b72:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    4b74:	7913      	ldrb	r3, [r2, #4]
    4b76:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    4b78:	7813      	ldrb	r3, [r2, #0]
    4b7a:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    4b7c:	7891      	ldrb	r1, [r2, #2]
    4b7e:	02c9      	lsls	r1, r1, #11
    4b80:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    4b82:	7851      	ldrb	r1, [r2, #1]
    4b84:	0209      	lsls	r1, r1, #8
    4b86:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    4b88:	78d1      	ldrb	r1, [r2, #3]
    4b8a:	0089      	lsls	r1, r1, #2
    4b8c:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    4b8e:	7911      	ldrb	r1, [r2, #4]
    4b90:	0149      	lsls	r1, r1, #5
    4b92:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    4b94:	7991      	ldrb	r1, [r2, #6]
    4b96:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    4b98:	79d0      	ldrb	r0, [r2, #7]
    4b9a:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4b9c:	4301      	orrs	r1, r0
    4b9e:	7a10      	ldrb	r0, [r2, #8]
    4ba0:	0300      	lsls	r0, r0, #12
    4ba2:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    4ba4:	7952      	ldrb	r2, [r2, #5]
    4ba6:	0412      	lsls	r2, r2, #16
    4ba8:	20f0      	movs	r0, #240	; 0xf0
    4baa:	0300      	lsls	r0, r0, #12
    4bac:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4bae:	430a      	orrs	r2, r1
    4bb0:	4313      	orrs	r3, r2
    4bb2:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    4bb4:	682b      	ldr	r3, [r5, #0]
    4bb6:	079b      	lsls	r3, r3, #30
    4bb8:	d401      	bmi.n	4bbe <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    4bba:	602e      	str	r6, [r5, #0]
	}
}
    4bbc:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    4bbe:	0020      	movs	r0, r4
    4bc0:	4b03      	ldr	r3, [pc, #12]	; (4bd0 <aes_set_config+0x6c>)
    4bc2:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    4bc4:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    4bc6:	0020      	movs	r0, r4
    4bc8:	4b02      	ldr	r3, [pc, #8]	; (4bd4 <aes_set_config+0x70>)
    4bca:	4798      	blx	r3
    4bcc:	e7f6      	b.n	4bbc <aes_set_config+0x58>
    4bce:	46c0      	nop			; (mov r8, r8)
    4bd0:	00004b4f 	.word	0x00004b4f
    4bd4:	00004b43 	.word	0x00004b43

00004bd8 <aes_init>:
{
    4bd8:	b570      	push	{r4, r5, r6, lr}
			MCLK->APBCMASK.reg |= mask;
    4bda:	4c05      	ldr	r4, [pc, #20]	; (4bf0 <aes_init+0x18>)
    4bdc:	69e5      	ldr	r5, [r4, #28]
    4bde:	2380      	movs	r3, #128	; 0x80
    4be0:	019b      	lsls	r3, r3, #6
    4be2:	432b      	orrs	r3, r5
    4be4:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    4be6:	2301      	movs	r3, #1
    4be8:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    4bea:	4b02      	ldr	r3, [pc, #8]	; (4bf4 <aes_init+0x1c>)
    4bec:	4798      	blx	r3
}
    4bee:	bd70      	pop	{r4, r5, r6, pc}
    4bf0:	40000400 	.word	0x40000400
    4bf4:	00004b65 	.word	0x00004b65

00004bf8 <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    4bf8:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    4bfa:	7943      	ldrb	r3, [r0, #5]
    4bfc:	2b01      	cmp	r3, #1
    4bfe:	d005      	beq.n	4c0c <aes_write_key+0x14>
    4c00:	2b00      	cmp	r3, #0
    4c02:	d010      	beq.n	4c26 <aes_write_key+0x2e>
    4c04:	2b02      	cmp	r3, #2
    4c06:	d10d      	bne.n	4c24 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    4c08:	2508      	movs	r5, #8
    4c0a:	e000      	b.n	4c0e <aes_write_key+0x16>
		key_length = 6;
    4c0c:	2506      	movs	r5, #6
{
    4c0e:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    4c10:	c910      	ldmia	r1!, {r4}
    4c12:	1c9a      	adds	r2, r3, #2
    4c14:	0092      	lsls	r2, r2, #2
    4c16:	6806      	ldr	r6, [r0, #0]
    4c18:	46b4      	mov	ip, r6
    4c1a:	4462      	add	r2, ip
    4c1c:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    4c1e:	3301      	adds	r3, #1
    4c20:	42ab      	cmp	r3, r5
    4c22:	d3f5      	bcc.n	4c10 <aes_write_key+0x18>
		key++;
	}
}
    4c24:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    4c26:	2504      	movs	r5, #4
    4c28:	e7f1      	b.n	4c0e <aes_write_key+0x16>
    4c2a:	Address 0x00004c2a is out of bounds.


00004c2c <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    4c2c:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4c2e:	2300      	movs	r3, #0
    4c30:	6802      	ldr	r2, [r0, #0]
    4c32:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    4c34:	4b0f      	ldr	r3, [pc, #60]	; (4c74 <aes_write_input_data+0x48>)
    4c36:	6842      	ldr	r2, [r0, #4]
    4c38:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4c3a:	4a0f      	ldr	r2, [pc, #60]	; (4c78 <aes_write_input_data+0x4c>)
    4c3c:	4293      	cmp	r3, r2
    4c3e:	d00a      	beq.n	4c56 <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    4c40:	7903      	ldrb	r3, [r0, #4]
    4c42:	2b03      	cmp	r3, #3
    4c44:	d00e      	beq.n	4c64 <aes_write_input_data+0x38>
    4c46:	000c      	movs	r4, r1
    4c48:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    4c4a:	6803      	ldr	r3, [r0, #0]
    4c4c:	c904      	ldmia	r1!, {r2}
    4c4e:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    4c50:	428c      	cmp	r4, r1
    4c52:	d1fa      	bne.n	4c4a <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    4c54:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    4c56:	6803      	ldr	r3, [r0, #0]
    4c58:	680a      	ldr	r2, [r1, #0]
    4c5a:	639a      	str	r2, [r3, #56]	; 0x38
    4c5c:	6803      	ldr	r3, [r0, #0]
    4c5e:	684a      	ldr	r2, [r1, #4]
    4c60:	639a      	str	r2, [r3, #56]	; 0x38
    4c62:	e7f7      	b.n	4c54 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4c64:	7983      	ldrb	r3, [r0, #6]
    4c66:	3b02      	subs	r3, #2
    4c68:	2b01      	cmp	r3, #1
    4c6a:	d8ec      	bhi.n	4c46 <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    4c6c:	6803      	ldr	r3, [r0, #0]
    4c6e:	680a      	ldr	r2, [r1, #0]
    4c70:	639a      	str	r2, [r3, #56]	; 0x38
    4c72:	e7ef      	b.n	4c54 <aes_write_input_data+0x28>
    4c74:	00ff00ff 	.word	0x00ff00ff
    4c78:	00010003 	.word	0x00010003

00004c7c <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4c7c:	2300      	movs	r3, #0
    4c7e:	6802      	ldr	r2, [r0, #0]
    4c80:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    4c82:	4b10      	ldr	r3, [pc, #64]	; (4cc4 <aes_read_output_data+0x48>)
    4c84:	6842      	ldr	r2, [r0, #4]
    4c86:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4c88:	4a0f      	ldr	r2, [pc, #60]	; (4cc8 <aes_read_output_data+0x4c>)
    4c8a:	4293      	cmp	r3, r2
    4c8c:	d00a      	beq.n	4ca4 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    4c8e:	7903      	ldrb	r3, [r0, #4]
    4c90:	2b03      	cmp	r3, #3
    4c92:	d00e      	beq.n	4cb2 <aes_read_output_data+0x36>
    4c94:	000a      	movs	r2, r1
    4c96:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    4c98:	6803      	ldr	r3, [r0, #0]
    4c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4c9c:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    4c9e:	428a      	cmp	r2, r1
    4ca0:	d1fa      	bne.n	4c98 <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    4ca2:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    4ca4:	6803      	ldr	r3, [r0, #0]
    4ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4ca8:	600b      	str	r3, [r1, #0]
    4caa:	6803      	ldr	r3, [r0, #0]
    4cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4cae:	604b      	str	r3, [r1, #4]
    4cb0:	e7f7      	b.n	4ca2 <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4cb2:	7983      	ldrb	r3, [r0, #6]
    4cb4:	3b02      	subs	r3, #2
    4cb6:	2b01      	cmp	r3, #1
    4cb8:	d8ec      	bhi.n	4c94 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    4cba:	6803      	ldr	r3, [r0, #0]
    4cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4cbe:	600b      	str	r3, [r1, #0]
    4cc0:	e7ef      	b.n	4ca2 <aes_read_output_data+0x26>
    4cc2:	46c0      	nop			; (mov r8, r8)
    4cc4:	00ff00ff 	.word	0x00ff00ff
    4cc8:	00010003 	.word	0x00010003

00004ccc <AES_Handler>:

/**
* \internal The AES interrupt handler.
*/
void AES_Handler(void)
{
    4ccc:	b510      	push	{r4, lr}
	uint32_t status = AES->INTFLAG.reg;
    4cce:	4b0c      	ldr	r3, [pc, #48]	; (4d00 <AES_Handler+0x34>)
    4cd0:	79dc      	ldrb	r4, [r3, #7]
    4cd2:	b2e4      	uxtb	r4, r4

	if (status & AES_INTFLAG_ENCCMP) {
    4cd4:	07e3      	lsls	r3, r4, #31
    4cd6:	d507      	bpl.n	4ce8 <AES_Handler+0x1c>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4cd8:	4b0a      	ldr	r3, [pc, #40]	; (4d04 <AES_Handler+0x38>)
    4cda:	681b      	ldr	r3, [r3, #0]
    4cdc:	2b00      	cmp	r3, #0
    4cde:	d00d      	beq.n	4cfc <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_ENCCMP;
    4ce0:	2101      	movs	r1, #1
    4ce2:	4a07      	ldr	r2, [pc, #28]	; (4d00 <AES_Handler+0x34>)
    4ce4:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4ce6:	4798      	blx	r3
		}
	}

	if (status & AES_INTFLAG_GFMCMP) {
    4ce8:	07a3      	lsls	r3, r4, #30
    4cea:	d507      	bpl.n	4cfc <AES_Handler+0x30>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4cec:	4b05      	ldr	r3, [pc, #20]	; (4d04 <AES_Handler+0x38>)
    4cee:	681b      	ldr	r3, [r3, #0]
    4cf0:	2b00      	cmp	r3, #0
    4cf2:	d003      	beq.n	4cfc <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_GFMCMP;
    4cf4:	2102      	movs	r1, #2
    4cf6:	4a02      	ldr	r2, [pc, #8]	; (4d00 <AES_Handler+0x34>)
    4cf8:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4cfa:	4798      	blx	r3
		}
	}
}
    4cfc:	bd10      	pop	{r4, pc}
    4cfe:	46c0      	nop			; (mov r8, r8)
    4d00:	42003400 	.word	0x42003400
    4d04:	200000a4 	.word	0x200000a4

00004d08 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4d08:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4d0a:	2a00      	cmp	r2, #0
    4d0c:	d001      	beq.n	4d12 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4d0e:	0018      	movs	r0, r3
    4d10:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4d12:	008b      	lsls	r3, r1, #2
    4d14:	4a06      	ldr	r2, [pc, #24]	; (4d30 <extint_register_callback+0x28>)
    4d16:	589b      	ldr	r3, [r3, r2]
    4d18:	2b00      	cmp	r3, #0
    4d1a:	d003      	beq.n	4d24 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4d1c:	4283      	cmp	r3, r0
    4d1e:	d005      	beq.n	4d2c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4d20:	231d      	movs	r3, #29
    4d22:	e7f4      	b.n	4d0e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4d24:	0089      	lsls	r1, r1, #2
    4d26:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4d28:	2300      	movs	r3, #0
    4d2a:	e7f0      	b.n	4d0e <extint_register_callback+0x6>
		return STATUS_OK;
    4d2c:	2300      	movs	r3, #0
    4d2e:	e7ee      	b.n	4d0e <extint_register_callback+0x6>
    4d30:	20001e2c 	.word	0x20001e2c

00004d34 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4d34:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4d36:	2900      	cmp	r1, #0
    4d38:	d001      	beq.n	4d3e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    4d3a:	0018      	movs	r0, r3
    4d3c:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    4d3e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4d40:	281f      	cmp	r0, #31
    4d42:	d800      	bhi.n	4d46 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4d44:	4a02      	ldr	r2, [pc, #8]	; (4d50 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    4d46:	2301      	movs	r3, #1
    4d48:	4083      	lsls	r3, r0
    4d4a:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    4d4c:	2300      	movs	r3, #0
    4d4e:	e7f4      	b.n	4d3a <extint_chan_enable_callback+0x6>
    4d50:	40002400 	.word	0x40002400

00004d54 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4d54:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4d56:	2200      	movs	r2, #0
    4d58:	4b10      	ldr	r3, [pc, #64]	; (4d9c <EIC_Handler+0x48>)
    4d5a:	701a      	strb	r2, [r3, #0]
    4d5c:	2300      	movs	r3, #0
    4d5e:	4910      	ldr	r1, [pc, #64]	; (4da0 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4d60:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4d62:	4e10      	ldr	r6, [pc, #64]	; (4da4 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4d64:	4c0d      	ldr	r4, [pc, #52]	; (4d9c <EIC_Handler+0x48>)
    4d66:	e00a      	b.n	4d7e <EIC_Handler+0x2a>
		return eics[eic_index];
    4d68:	490d      	ldr	r1, [pc, #52]	; (4da0 <EIC_Handler+0x4c>)
    4d6a:	e008      	b.n	4d7e <EIC_Handler+0x2a>
    4d6c:	7823      	ldrb	r3, [r4, #0]
    4d6e:	3301      	adds	r3, #1
    4d70:	b2db      	uxtb	r3, r3
    4d72:	7023      	strb	r3, [r4, #0]
    4d74:	2b0f      	cmp	r3, #15
    4d76:	d810      	bhi.n	4d9a <EIC_Handler+0x46>
		return NULL;
    4d78:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4d7a:	2b1f      	cmp	r3, #31
    4d7c:	d9f4      	bls.n	4d68 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    4d7e:	0028      	movs	r0, r5
    4d80:	4018      	ands	r0, r3
    4d82:	2201      	movs	r2, #1
    4d84:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4d86:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    4d88:	4210      	tst	r0, r2
    4d8a:	d0ef      	beq.n	4d6c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4d8c:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4d8e:	009b      	lsls	r3, r3, #2
    4d90:	599b      	ldr	r3, [r3, r6]
    4d92:	2b00      	cmp	r3, #0
    4d94:	d0ea      	beq.n	4d6c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4d96:	4798      	blx	r3
    4d98:	e7e8      	b.n	4d6c <EIC_Handler+0x18>
			}
		}
	}
}
    4d9a:	bd70      	pop	{r4, r5, r6, pc}
    4d9c:	20001e28 	.word	0x20001e28
    4da0:	40002400 	.word	0x40002400
    4da4:	20001e2c 	.word	0x20001e2c

00004da8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4da8:	4a06      	ldr	r2, [pc, #24]	; (4dc4 <_extint_enable+0x1c>)
    4daa:	7813      	ldrb	r3, [r2, #0]
    4dac:	2102      	movs	r1, #2
    4dae:	430b      	orrs	r3, r1
    4db0:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4db2:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4db4:	6853      	ldr	r3, [r2, #4]
    4db6:	4219      	tst	r1, r3
    4db8:	d1fc      	bne.n	4db4 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4dba:	6853      	ldr	r3, [r2, #4]
    4dbc:	4218      	tst	r0, r3
    4dbe:	d1f9      	bne.n	4db4 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4dc0:	4770      	bx	lr
    4dc2:	46c0      	nop			; (mov r8, r8)
    4dc4:	40002400 	.word	0x40002400

00004dc8 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4dc8:	4a06      	ldr	r2, [pc, #24]	; (4de4 <_extint_disable+0x1c>)
    4dca:	7813      	ldrb	r3, [r2, #0]
    4dcc:	2102      	movs	r1, #2
    4dce:	438b      	bics	r3, r1
    4dd0:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4dd2:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4dd4:	6853      	ldr	r3, [r2, #4]
    4dd6:	4219      	tst	r1, r3
    4dd8:	d1fc      	bne.n	4dd4 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4dda:	6853      	ldr	r3, [r2, #4]
    4ddc:	4218      	tst	r0, r3
    4dde:	d1f9      	bne.n	4dd4 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4de0:	4770      	bx	lr
    4de2:	46c0      	nop			; (mov r8, r8)
    4de4:	40002400 	.word	0x40002400

00004de8 <_system_extint_init>:
{
    4de8:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    4dea:	4a12      	ldr	r2, [pc, #72]	; (4e34 <_system_extint_init+0x4c>)
    4dec:	6951      	ldr	r1, [r2, #20]
    4dee:	2380      	movs	r3, #128	; 0x80
    4df0:	009b      	lsls	r3, r3, #2
    4df2:	430b      	orrs	r3, r1
    4df4:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    4df6:	4a10      	ldr	r2, [pc, #64]	; (4e38 <_system_extint_init+0x50>)
    4df8:	7813      	ldrb	r3, [r2, #0]
    4dfa:	2101      	movs	r1, #1
    4dfc:	430b      	orrs	r3, r1
    4dfe:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e00:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e02:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e04:	6853      	ldr	r3, [r2, #4]
    4e06:	4219      	tst	r1, r3
    4e08:	d1fc      	bne.n	4e04 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e0a:	6853      	ldr	r3, [r2, #4]
    4e0c:	4218      	tst	r0, r3
    4e0e:	d1f9      	bne.n	4e04 <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    4e10:	4a09      	ldr	r2, [pc, #36]	; (4e38 <_system_extint_init+0x50>)
    4e12:	7813      	ldrb	r3, [r2, #0]
    4e14:	2110      	movs	r1, #16
    4e16:	430b      	orrs	r3, r1
    4e18:	7013      	strb	r3, [r2, #0]
    4e1a:	4b08      	ldr	r3, [pc, #32]	; (4e3c <_system_extint_init+0x54>)
    4e1c:	0019      	movs	r1, r3
    4e1e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    4e20:	2200      	movs	r2, #0
    4e22:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4e24:	428b      	cmp	r3, r1
    4e26:	d1fc      	bne.n	4e22 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4e28:	2208      	movs	r2, #8
    4e2a:	4b05      	ldr	r3, [pc, #20]	; (4e40 <_system_extint_init+0x58>)
    4e2c:	601a      	str	r2, [r3, #0]
	_extint_enable();
    4e2e:	4b05      	ldr	r3, [pc, #20]	; (4e44 <_system_extint_init+0x5c>)
    4e30:	4798      	blx	r3
}
    4e32:	bd10      	pop	{r4, pc}
    4e34:	40000400 	.word	0x40000400
    4e38:	40002400 	.word	0x40002400
    4e3c:	20001e2c 	.word	0x20001e2c
    4e40:	e000e100 	.word	0xe000e100
    4e44:	00004da9 	.word	0x00004da9

00004e48 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4e48:	2300      	movs	r3, #0
    4e4a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4e4c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4e4e:	2201      	movs	r2, #1
    4e50:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    4e52:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4e54:	3201      	adds	r2, #1
    4e56:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    4e58:	7243      	strb	r3, [r0, #9]
}
    4e5a:	4770      	bx	lr

00004e5c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e5e:	b083      	sub	sp, #12
    4e60:	0005      	movs	r5, r0
    4e62:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    4e64:	4b1c      	ldr	r3, [pc, #112]	; (4ed8 <extint_chan_set_config+0x7c>)
    4e66:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4e68:	a901      	add	r1, sp, #4
    4e6a:	2300      	movs	r3, #0
    4e6c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    4e6e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4e70:	7923      	ldrb	r3, [r4, #4]
    4e72:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4e74:	7a23      	ldrb	r3, [r4, #8]
    4e76:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4e78:	7820      	ldrb	r0, [r4, #0]
    4e7a:	4b18      	ldr	r3, [pc, #96]	; (4edc <extint_chan_set_config+0x80>)
    4e7c:	4798      	blx	r3
		return NULL;
    4e7e:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4e80:	2d1f      	cmp	r5, #31
    4e82:	d800      	bhi.n	4e86 <extint_chan_set_config+0x2a>
		return eics[eic_index];
    4e84:	4916      	ldr	r1, [pc, #88]	; (4ee0 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    4e86:	2207      	movs	r2, #7
    4e88:	402a      	ands	r2, r5
    4e8a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4e8c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4e8e:	7aa3      	ldrb	r3, [r4, #10]
    4e90:	2b00      	cmp	r3, #0
    4e92:	d001      	beq.n	4e98 <extint_chan_set_config+0x3c>
    4e94:	2308      	movs	r3, #8
    4e96:	431f      	orrs	r7, r3
    4e98:	08eb      	lsrs	r3, r5, #3
    4e9a:	009b      	lsls	r3, r3, #2
    4e9c:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4e9e:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4ea0:	260f      	movs	r6, #15
    4ea2:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4ea4:	43b0      	bics	r0, r6
			(new_config << config_pos);
    4ea6:	4097      	lsls	r7, r2
    4ea8:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4eaa:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    4eac:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    4eae:	7a63      	ldrb	r3, [r4, #9]
    4eb0:	2b00      	cmp	r3, #0
    4eb2:	d10b      	bne.n	4ecc <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    4eb4:	698a      	ldr	r2, [r1, #24]
    4eb6:	2301      	movs	r3, #1
    4eb8:	40ab      	lsls	r3, r5
    4eba:	43db      	mvns	r3, r3
    4ebc:	041b      	lsls	r3, r3, #16
    4ebe:	0c1b      	lsrs	r3, r3, #16
    4ec0:	4013      	ands	r3, r2
    4ec2:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    4ec4:	4b07      	ldr	r3, [pc, #28]	; (4ee4 <extint_chan_set_config+0x88>)
    4ec6:	4798      	blx	r3
}
    4ec8:	b003      	add	sp, #12
    4eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    4ecc:	698a      	ldr	r2, [r1, #24]
    4ece:	2301      	movs	r3, #1
    4ed0:	40ab      	lsls	r3, r5
    4ed2:	4313      	orrs	r3, r2
    4ed4:	618b      	str	r3, [r1, #24]
    4ed6:	e7f5      	b.n	4ec4 <extint_chan_set_config+0x68>
    4ed8:	00004dc9 	.word	0x00004dc9
    4edc:	00006291 	.word	0x00006291
    4ee0:	40002400 	.word	0x40002400
    4ee4:	00004da9 	.word	0x00004da9

00004ee8 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4ee8:	b530      	push	{r4, r5, lr}
    4eea:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4eec:	4a25      	ldr	r2, [pc, #148]	; (4f84 <nvm_execute_command+0x9c>)
    4eee:	8810      	ldrh	r0, [r2, #0]
    4ef0:	8853      	ldrh	r3, [r2, #2]
    4ef2:	4343      	muls	r3, r0
    4ef4:	428b      	cmp	r3, r1
    4ef6:	d20b      	bcs.n	4f10 <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    4ef8:	2280      	movs	r2, #128	; 0x80
    4efa:	0192      	lsls	r2, r2, #6
    4efc:	4b22      	ldr	r3, [pc, #136]	; (4f88 <nvm_execute_command+0xa0>)
    4efe:	18cb      	adds	r3, r1, r3
    4f00:	4293      	cmp	r3, r2
    4f02:	d905      	bls.n	4f10 <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4f04:	4a21      	ldr	r2, [pc, #132]	; (4f8c <nvm_execute_command+0xa4>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4f06:	2018      	movs	r0, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4f08:	4b21      	ldr	r3, [pc, #132]	; (4f90 <nvm_execute_command+0xa8>)
    4f0a:	18cb      	adds	r3, r1, r3
    4f0c:	4293      	cmp	r3, r2
    4f0e:	d80e      	bhi.n	4f2e <nvm_execute_command+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    4f10:	4b20      	ldr	r3, [pc, #128]	; (4f94 <nvm_execute_command+0xac>)
    4f12:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    4f14:	2280      	movs	r2, #128	; 0x80
    4f16:	02d2      	lsls	r2, r2, #11
    4f18:	432a      	orrs	r2, r5
    4f1a:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4f1c:	2220      	movs	r2, #32
    4f1e:	32ff      	adds	r2, #255	; 0xff
    4f20:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4f22:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4f24:	07db      	lsls	r3, r3, #31
    4f26:	d403      	bmi.n	4f30 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    4f28:	4b1a      	ldr	r3, [pc, #104]	; (4f94 <nvm_execute_command+0xac>)
    4f2a:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    4f2c:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    4f2e:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    4f30:	2c45      	cmp	r4, #69	; 0x45
    4f32:	d822      	bhi.n	4f7a <nvm_execute_command+0x92>
    4f34:	00a3      	lsls	r3, r4, #2
    4f36:	4a18      	ldr	r2, [pc, #96]	; (4f98 <nvm_execute_command+0xb0>)
    4f38:	58d3      	ldr	r3, [r2, r3]
    4f3a:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4f3c:	4b15      	ldr	r3, [pc, #84]	; (4f94 <nvm_execute_command+0xac>)
    4f3e:	8b1b      	ldrh	r3, [r3, #24]
    4f40:	05db      	lsls	r3, r3, #23
    4f42:	d503      	bpl.n	4f4c <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    4f44:	4b13      	ldr	r3, [pc, #76]	; (4f94 <nvm_execute_command+0xac>)
    4f46:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    4f48:	2010      	movs	r0, #16
    4f4a:	e7f0      	b.n	4f2e <nvm_execute_command+0x46>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4f4c:	0889      	lsrs	r1, r1, #2
    4f4e:	0049      	lsls	r1, r1, #1
    4f50:	4b10      	ldr	r3, [pc, #64]	; (4f94 <nvm_execute_command+0xac>)
    4f52:	61d9      	str	r1, [r3, #28]
			break;
    4f54:	e003      	b.n	4f5e <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4f56:	0889      	lsrs	r1, r1, #2
    4f58:	0049      	lsls	r1, r1, #1
    4f5a:	4b0e      	ldr	r3, [pc, #56]	; (4f94 <nvm_execute_command+0xac>)
    4f5c:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    4f5e:	20a5      	movs	r0, #165	; 0xa5
    4f60:	0200      	lsls	r0, r0, #8
    4f62:	4304      	orrs	r4, r0
    4f64:	4b0b      	ldr	r3, [pc, #44]	; (4f94 <nvm_execute_command+0xac>)
    4f66:	801c      	strh	r4, [r3, #0]
    4f68:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4f6a:	2201      	movs	r2, #1
    4f6c:	7d0b      	ldrb	r3, [r1, #20]
    4f6e:	4213      	tst	r3, r2
    4f70:	d0fc      	beq.n	4f6c <nvm_execute_command+0x84>
	nvm_module->CTRLB.reg = ctrlb_bak;
    4f72:	4b08      	ldr	r3, [pc, #32]	; (4f94 <nvm_execute_command+0xac>)
    4f74:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    4f76:	2000      	movs	r0, #0
    4f78:	e7d9      	b.n	4f2e <nvm_execute_command+0x46>
			nvm_module->CTRLB.reg = ctrlb_bak;
    4f7a:	4b06      	ldr	r3, [pc, #24]	; (4f94 <nvm_execute_command+0xac>)
    4f7c:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    4f7e:	2017      	movs	r0, #23
    4f80:	e7d5      	b.n	4f2e <nvm_execute_command+0x46>
    4f82:	46c0      	nop			; (mov r8, r8)
    4f84:	200000ac 	.word	0x200000ac
    4f88:	ff7fc000 	.word	0xff7fc000
    4f8c:	00001fff 	.word	0x00001fff
    4f90:	ffc00000 	.word	0xffc00000
    4f94:	41004000 	.word	0x41004000
    4f98:	000164b0 	.word	0x000164b0

00004f9c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    4f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4f9e:	4b2f      	ldr	r3, [pc, #188]	; (505c <nvm_write_buffer+0xc0>)
    4fa0:	881c      	ldrh	r4, [r3, #0]
    4fa2:	885b      	ldrh	r3, [r3, #2]
    4fa4:	4363      	muls	r3, r4
	if (destination_address >
    4fa6:	4283      	cmp	r3, r0
    4fa8:	d207      	bcs.n	4fba <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4faa:	4e2d      	ldr	r6, [pc, #180]	; (5060 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4fac:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4fae:	4b2d      	ldr	r3, [pc, #180]	; (5064 <nvm_write_buffer+0xc8>)
    4fb0:	18c3      	adds	r3, r0, r3
    4fb2:	42b3      	cmp	r3, r6
    4fb4:	d806      	bhi.n	4fc4 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    4fb6:	2601      	movs	r6, #1
    4fb8:	e000      	b.n	4fbc <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    4fba:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4fbc:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    4fbe:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4fc0:	4218      	tst	r0, r3
    4fc2:	d001      	beq.n	4fc8 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    4fc4:	0028      	movs	r0, r5
    4fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    4fc8:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    4fca:	4294      	cmp	r4, r2
    4fcc:	d3fa      	bcc.n	4fc4 <nvm_write_buffer+0x28>
    4fce:	4b26      	ldr	r3, [pc, #152]	; (5068 <nvm_write_buffer+0xcc>)
    4fd0:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4fd2:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    4fd4:	07db      	lsls	r3, r3, #31
    4fd6:	d5f5      	bpl.n	4fc4 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    4fd8:	4c24      	ldr	r4, [pc, #144]	; (506c <nvm_write_buffer+0xd0>)
    4fda:	4b23      	ldr	r3, [pc, #140]	; (5068 <nvm_write_buffer+0xcc>)
    4fdc:	801c      	strh	r4, [r3, #0]
    4fde:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    4fe0:	2401      	movs	r4, #1
    4fe2:	7d2b      	ldrb	r3, [r5, #20]
    4fe4:	4223      	tst	r3, r4
    4fe6:	d0fc      	beq.n	4fe2 <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4fe8:	2420      	movs	r4, #32
    4fea:	34ff      	adds	r4, #255	; 0xff
    4fec:	4b1e      	ldr	r3, [pc, #120]	; (5068 <nvm_write_buffer+0xcc>)
    4fee:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4ff0:	2a00      	cmp	r2, #0
    4ff2:	d02c      	beq.n	504e <nvm_write_buffer+0xb2>
    4ff4:	2301      	movs	r3, #1
    4ff6:	0005      	movs	r5, r0
    4ff8:	439d      	bics	r5, r3
    4ffa:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4ffc:	1e54      	subs	r4, r2, #1
    4ffe:	46a4      	mov	ip, r4
    5000:	e009      	b.n	5016 <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    5002:	18cf      	adds	r7, r1, r3
    5004:	787f      	ldrb	r7, [r7, #1]
    5006:	023f      	lsls	r7, r7, #8
    5008:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    500a:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    500c:	3302      	adds	r3, #2
    500e:	b29b      	uxth	r3, r3
    5010:	3502      	adds	r5, #2
    5012:	429a      	cmp	r2, r3
    5014:	d904      	bls.n	5020 <nvm_write_buffer+0x84>
		data = buffer[i];
    5016:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    5018:	4563      	cmp	r3, ip
    501a:	dbf2      	blt.n	5002 <nvm_write_buffer+0x66>
		data = buffer[i];
    501c:	b2a4      	uxth	r4, r4
    501e:	e7f4      	b.n	500a <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    5020:	4b0e      	ldr	r3, [pc, #56]	; (505c <nvm_write_buffer+0xc0>)
    5022:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    5024:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    5026:	2b00      	cmp	r3, #0
    5028:	d1cc      	bne.n	4fc4 <nvm_write_buffer+0x28>
    502a:	2a3f      	cmp	r2, #63	; 0x3f
    502c:	d8ca      	bhi.n	4fc4 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    502e:	2e00      	cmp	r6, #0
    5030:	d106      	bne.n	5040 <nvm_write_buffer+0xa4>
    5032:	2200      	movs	r2, #0
    5034:	0001      	movs	r1, r0
    5036:	2004      	movs	r0, #4
    5038:	4b0d      	ldr	r3, [pc, #52]	; (5070 <nvm_write_buffer+0xd4>)
    503a:	4798      	blx	r3
    503c:	0005      	movs	r5, r0
    503e:	e7c1      	b.n	4fc4 <nvm_write_buffer+0x28>
    5040:	2200      	movs	r2, #0
    5042:	0001      	movs	r1, r0
    5044:	201c      	movs	r0, #28
    5046:	4b0a      	ldr	r3, [pc, #40]	; (5070 <nvm_write_buffer+0xd4>)
    5048:	4798      	blx	r3
    504a:	0005      	movs	r5, r0
    504c:	e7ba      	b.n	4fc4 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    504e:	4b03      	ldr	r3, [pc, #12]	; (505c <nvm_write_buffer+0xc0>)
    5050:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    5052:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    5054:	2b00      	cmp	r3, #0
    5056:	d0ea      	beq.n	502e <nvm_write_buffer+0x92>
    5058:	e7b4      	b.n	4fc4 <nvm_write_buffer+0x28>
    505a:	46c0      	nop			; (mov r8, r8)
    505c:	200000ac 	.word	0x200000ac
    5060:	00001fff 	.word	0x00001fff
    5064:	ffc00000 	.word	0xffc00000
    5068:	41004000 	.word	0x41004000
    506c:	ffffa544 	.word	0xffffa544
    5070:	00004ee9 	.word	0x00004ee9

00005074 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    5074:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    5076:	4a1b      	ldr	r2, [pc, #108]	; (50e4 <nvm_erase_row+0x70>)
    5078:	8813      	ldrh	r3, [r2, #0]
    507a:	8852      	ldrh	r2, [r2, #2]
    507c:	435a      	muls	r2, r3
	if (row_address >
    507e:	4282      	cmp	r2, r0
    5080:	d207      	bcs.n	5092 <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    5082:	4c19      	ldr	r4, [pc, #100]	; (50e8 <nvm_erase_row+0x74>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    5084:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    5086:	4919      	ldr	r1, [pc, #100]	; (50ec <nvm_erase_row+0x78>)
    5088:	1841      	adds	r1, r0, r1
    508a:	42a1      	cmp	r1, r4
    508c:	d807      	bhi.n	509e <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    508e:	2101      	movs	r1, #1
    5090:	e000      	b.n	5094 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    5092:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    5094:	009b      	lsls	r3, r3, #2
    5096:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    5098:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    509a:	4218      	tst	r0, r3
    509c:	d001      	beq.n	50a2 <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    509e:	0010      	movs	r0, r2
    50a0:	bd10      	pop	{r4, pc}
    50a2:	4b13      	ldr	r3, [pc, #76]	; (50f0 <nvm_erase_row+0x7c>)
    50a4:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    50a6:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    50a8:	07db      	lsls	r3, r3, #31
    50aa:	d5f8      	bpl.n	509e <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    50ac:	4b10      	ldr	r3, [pc, #64]	; (50f0 <nvm_erase_row+0x7c>)
    50ae:	2220      	movs	r2, #32
    50b0:	32ff      	adds	r2, #255	; 0xff
    50b2:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    50b4:	0880      	lsrs	r0, r0, #2
    50b6:	0040      	lsls	r0, r0, #1
    50b8:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    50ba:	2900      	cmp	r1, #0
    50bc:	d10f      	bne.n	50de <nvm_erase_row+0x6a>
    50be:	4a0d      	ldr	r2, [pc, #52]	; (50f4 <nvm_erase_row+0x80>)
    50c0:	4b0b      	ldr	r3, [pc, #44]	; (50f0 <nvm_erase_row+0x7c>)
    50c2:	801a      	strh	r2, [r3, #0]
    50c4:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    50c6:	2201      	movs	r2, #1
    50c8:	7d0b      	ldrb	r3, [r1, #20]
    50ca:	4213      	tst	r3, r2
    50cc:	d0fc      	beq.n	50c8 <nvm_erase_row+0x54>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    50ce:	4b08      	ldr	r3, [pc, #32]	; (50f0 <nvm_erase_row+0x7c>)
    50d0:	8b1a      	ldrh	r2, [r3, #24]
    50d2:	201c      	movs	r0, #28
    50d4:	4002      	ands	r2, r0
	return STATUS_OK;
    50d6:	1e50      	subs	r0, r2, #1
    50d8:	4182      	sbcs	r2, r0
    50da:	0092      	lsls	r2, r2, #2
    50dc:	e7df      	b.n	509e <nvm_erase_row+0x2a>
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    50de:	4a06      	ldr	r2, [pc, #24]	; (50f8 <nvm_erase_row+0x84>)
    50e0:	e7ee      	b.n	50c0 <nvm_erase_row+0x4c>
    50e2:	46c0      	nop			; (mov r8, r8)
    50e4:	200000ac 	.word	0x200000ac
    50e8:	00001fff 	.word	0x00001fff
    50ec:	ffc00000 	.word	0xffc00000
    50f0:	41004000 	.word	0x41004000
    50f4:	0000a502 	.word	0x0000a502
    50f8:	0000a51a 	.word	0x0000a51a

000050fc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    50fc:	b500      	push	{lr}
    50fe:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5100:	ab01      	add	r3, sp, #4
    5102:	2280      	movs	r2, #128	; 0x80
    5104:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    5106:	780a      	ldrb	r2, [r1, #0]
    5108:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    510a:	784a      	ldrb	r2, [r1, #1]
    510c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    510e:	788a      	ldrb	r2, [r1, #2]
    5110:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    5112:	0019      	movs	r1, r3
    5114:	4b01      	ldr	r3, [pc, #4]	; (511c <port_pin_set_config+0x20>)
    5116:	4798      	blx	r3
}
    5118:	b003      	add	sp, #12
    511a:	bd00      	pop	{pc}
    511c:	00006291 	.word	0x00006291

00005120 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5120:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    5122:	6918      	ldr	r0, [r3, #16]
    5124:	1e43      	subs	r3, r0, #1
    5126:	4198      	sbcs	r0, r3
    5128:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    512a:	4770      	bx	lr

0000512c <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    512c:	b570      	push	{r4, r5, r6, lr}
    512e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5130:	6806      	ldr	r6, [r0, #0]
    5132:	2204      	movs	r2, #4
    5134:	4b08      	ldr	r3, [pc, #32]	; (5158 <rtc_count_enable+0x2c>)
    5136:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    5138:	4d08      	ldr	r5, [pc, #32]	; (515c <rtc_count_enable+0x30>)
    513a:	0020      	movs	r0, r4
    513c:	47a8      	blx	r5
    513e:	2800      	cmp	r0, #0
    5140:	d1fb      	bne.n	513a <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    5142:	8833      	ldrh	r3, [r6, #0]
    5144:	2202      	movs	r2, #2
    5146:	4313      	orrs	r3, r2
    5148:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    514a:	4d04      	ldr	r5, [pc, #16]	; (515c <rtc_count_enable+0x30>)
    514c:	0020      	movs	r0, r4
    514e:	47a8      	blx	r5
    5150:	2800      	cmp	r0, #0
    5152:	d1fb      	bne.n	514c <rtc_count_enable+0x20>
		/* Wait for synchronization */
	}
}
    5154:	bd70      	pop	{r4, r5, r6, pc}
    5156:	46c0      	nop			; (mov r8, r8)
    5158:	e000e100 	.word	0xe000e100
    515c:	00005121 	.word	0x00005121

00005160 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    5160:	b570      	push	{r4, r5, r6, lr}
    5162:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5164:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5166:	2104      	movs	r1, #4
    5168:	2380      	movs	r3, #128	; 0x80
    516a:	4a0a      	ldr	r2, [pc, #40]	; (5194 <rtc_count_disable+0x34>)
    516c:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    516e:	4d0a      	ldr	r5, [pc, #40]	; (5198 <rtc_count_disable+0x38>)
    5170:	0020      	movs	r0, r4
    5172:	47a8      	blx	r5
    5174:	2800      	cmp	r0, #0
    5176:	d1fb      	bne.n	5170 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    5178:	4b08      	ldr	r3, [pc, #32]	; (519c <rtc_count_disable+0x3c>)
    517a:	8133      	strh	r3, [r6, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    517c:	81b3      	strh	r3, [r6, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    517e:	8833      	ldrh	r3, [r6, #0]
    5180:	2202      	movs	r2, #2
    5182:	4393      	bics	r3, r2
    5184:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    5186:	4d04      	ldr	r5, [pc, #16]	; (5198 <rtc_count_disable+0x38>)
    5188:	0020      	movs	r0, r4
    518a:	47a8      	blx	r5
    518c:	2800      	cmp	r0, #0
    518e:	d1fb      	bne.n	5188 <rtc_count_disable+0x28>
		/* Wait for synchronization */
	}
}
    5190:	bd70      	pop	{r4, r5, r6, pc}
    5192:	46c0      	nop			; (mov r8, r8)
    5194:	e000e100 	.word	0xe000e100
    5198:	00005121 	.word	0x00005121
    519c:	ffff81ff 	.word	0xffff81ff

000051a0 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    51a0:	b570      	push	{r4, r5, r6, lr}
    51a2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    51a4:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
    51a6:	4b0a      	ldr	r3, [pc, #40]	; (51d0 <rtc_count_reset+0x30>)
    51a8:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    51aa:	2300      	movs	r3, #0
    51ac:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->enabled_callback    = 0;
    51ae:	86e3      	strh	r3, [r4, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
    51b0:	4d08      	ldr	r5, [pc, #32]	; (51d4 <rtc_count_reset+0x34>)
    51b2:	0020      	movs	r0, r4
    51b4:	47a8      	blx	r5
    51b6:	2800      	cmp	r0, #0
    51b8:	d1fb      	bne.n	51b2 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    51ba:	8833      	ldrh	r3, [r6, #0]
    51bc:	2201      	movs	r2, #1
    51be:	4313      	orrs	r3, r2
    51c0:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    51c2:	4d04      	ldr	r5, [pc, #16]	; (51d4 <rtc_count_reset+0x34>)
    51c4:	0020      	movs	r0, r4
    51c6:	47a8      	blx	r5
    51c8:	2800      	cmp	r0, #0
    51ca:	d1fb      	bne.n	51c4 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}
}
    51cc:	bd70      	pop	{r4, r5, r6, pc}
    51ce:	46c0      	nop			; (mov r8, r8)
    51d0:	00005161 	.word	0x00005161
    51d4:	00005121 	.word	0x00005121

000051d8 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    51d8:	b570      	push	{r4, r5, r6, lr}
    51da:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    51dc:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    51de:	4d08      	ldr	r5, [pc, #32]	; (5200 <rtc_count_get_count+0x28>)
    51e0:	0020      	movs	r0, r4
    51e2:	47a8      	blx	r5
    51e4:	2800      	cmp	r0, #0
    51e6:	d1fb      	bne.n	51e0 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    51e8:	7923      	ldrb	r3, [r4, #4]
    51ea:	2b00      	cmp	r3, #0
    51ec:	d004      	beq.n	51f8 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    51ee:	2000      	movs	r0, #0
	switch (module->mode) {
    51f0:	2b01      	cmp	r3, #1
    51f2:	d100      	bne.n	51f6 <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    51f4:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    51f6:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    51f8:	8b30      	ldrh	r0, [r6, #24]
    51fa:	b280      	uxth	r0, r0
			break;
    51fc:	e7fb      	b.n	51f6 <rtc_count_get_count+0x1e>
    51fe:	46c0      	nop			; (mov r8, r8)
    5200:	00005121 	.word	0x00005121

00005204 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    5204:	b5f0      	push	{r4, r5, r6, r7, lr}
    5206:	b083      	sub	sp, #12
    5208:	0004      	movs	r4, r0
    520a:	9101      	str	r1, [sp, #4]
    520c:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    520e:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    5210:	4f13      	ldr	r7, [pc, #76]	; (5260 <rtc_count_set_compare+0x5c>)
    5212:	0020      	movs	r0, r4
    5214:	47b8      	blx	r7
    5216:	2800      	cmp	r0, #0
    5218:	d1fb      	bne.n	5212 <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    521a:	7923      	ldrb	r3, [r4, #4]
    521c:	2b00      	cmp	r3, #0
    521e:	d00e      	beq.n	523e <rtc_count_set_compare+0x3a>
    5220:	2b01      	cmp	r3, #1
    5222:	d119      	bne.n	5258 <rtc_count_set_compare+0x54>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
    5224:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
    5226:	2d01      	cmp	r5, #1
    5228:	d817      	bhi.n	525a <rtc_count_set_compare+0x56>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    522a:	3508      	adds	r5, #8
    522c:	00ad      	lsls	r5, r5, #2
    522e:	9b01      	ldr	r3, [sp, #4]
    5230:	51ab      	str	r3, [r5, r6]
		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	while (rtc_count_is_syncing(module)) {
    5232:	4d0b      	ldr	r5, [pc, #44]	; (5260 <rtc_count_set_compare+0x5c>)
    5234:	0020      	movs	r0, r4
    5236:	47a8      	blx	r5
    5238:	2800      	cmp	r0, #0
    523a:	d1fb      	bne.n	5234 <rtc_count_set_compare+0x30>
    523c:	e00d      	b.n	525a <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    523e:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    5240:	2d02      	cmp	r5, #2
    5242:	d80a      	bhi.n	525a <rtc_count_set_compare+0x56>
			if (comp_value > 0xffff) {
    5244:	4b07      	ldr	r3, [pc, #28]	; (5264 <rtc_count_set_compare+0x60>)
    5246:	9a01      	ldr	r2, [sp, #4]
    5248:	429a      	cmp	r2, r3
    524a:	d806      	bhi.n	525a <rtc_count_set_compare+0x56>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    524c:	466b      	mov	r3, sp
    524e:	889b      	ldrh	r3, [r3, #4]
    5250:	3510      	adds	r5, #16
    5252:	006d      	lsls	r5, r5, #1
    5254:	53ab      	strh	r3, [r5, r6]
			break;
    5256:	e7ec      	b.n	5232 <rtc_count_set_compare+0x2e>
			return STATUS_ERR_BAD_FORMAT;
    5258:	201a      	movs	r0, #26
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
    525a:	b003      	add	sp, #12
    525c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    525e:	46c0      	nop			; (mov r8, r8)
    5260:	00005121 	.word	0x00005121
    5264:	0000ffff 	.word	0x0000ffff

00005268 <rtc_count_init>:
{
    5268:	b570      	push	{r4, r5, r6, lr}
    526a:	0004      	movs	r4, r0
    526c:	0015      	movs	r5, r2
	module->hw = hw;
    526e:	6001      	str	r1, [r0, #0]
    5270:	4a1f      	ldr	r2, [pc, #124]	; (52f0 <rtc_count_init+0x88>)
    5272:	6951      	ldr	r1, [r2, #20]
    5274:	2380      	movs	r3, #128	; 0x80
    5276:	005b      	lsls	r3, r3, #1
    5278:	430b      	orrs	r3, r1
    527a:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    527c:	2200      	movs	r2, #0
    527e:	4b1d      	ldr	r3, [pc, #116]	; (52f4 <rtc_count_init+0x8c>)
    5280:	611a      	str	r2, [r3, #16]
	rtc_count_reset(module);
    5282:	4b1d      	ldr	r3, [pc, #116]	; (52f8 <rtc_count_init+0x90>)
    5284:	4798      	blx	r3
	module->mode                = config->mode;
    5286:	78ab      	ldrb	r3, [r5, #2]
    5288:	7123      	strb	r3, [r4, #4]
	_rtc_instance[0] = module;
    528a:	4b1c      	ldr	r3, [pc, #112]	; (52fc <rtc_count_init+0x94>)
    528c:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
    528e:	6822      	ldr	r2, [r4, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    5290:	792b      	ldrb	r3, [r5, #4]
    5292:	03db      	lsls	r3, r3, #15
				    | config->prescaler;
    5294:	8829      	ldrh	r1, [r5, #0]
    5296:	430b      	orrs	r3, r1
    5298:	b29b      	uxth	r3, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
    529a:	8013      	strh	r3, [r2, #0]
	switch (config->mode) {
    529c:	78ab      	ldrb	r3, [r5, #2]
    529e:	2b00      	cmp	r3, #0
    52a0:	d013      	beq.n	52ca <rtc_count_init+0x62>
			return STATUS_ERR_INVALID_ARG;
    52a2:	2017      	movs	r0, #23
	switch (config->mode) {
    52a4:	2b01      	cmp	r3, #1
    52a6:	d10f      	bne.n	52c8 <rtc_count_init+0x60>
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
    52a8:	8813      	ldrh	r3, [r2, #0]
    52aa:	b29b      	uxth	r3, r3
    52ac:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    52ae:	78eb      	ldrb	r3, [r5, #3]
    52b0:	2b00      	cmp	r3, #0
    52b2:	d003      	beq.n	52bc <rtc_count_init+0x54>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
    52b4:	8813      	ldrh	r3, [r2, #0]
    52b6:	2180      	movs	r1, #128	; 0x80
    52b8:	430b      	orrs	r3, r1
    52ba:	8013      	strh	r3, [r2, #0]
				rtc_count_set_compare(module, config->compare_values[i],
    52bc:	68a9      	ldr	r1, [r5, #8]
    52be:	2200      	movs	r2, #0
    52c0:	0020      	movs	r0, r4
    52c2:	4b0f      	ldr	r3, [pc, #60]	; (5300 <rtc_count_init+0x98>)
    52c4:	4798      	blx	r3
	return STATUS_OK;
    52c6:	2000      	movs	r0, #0
}
    52c8:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
    52ca:	8813      	ldrh	r3, [r2, #0]
    52cc:	2104      	movs	r1, #4
    52ce:	430b      	orrs	r3, r1
    52d0:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    52d2:	78eb      	ldrb	r3, [r5, #3]
				return STATUS_ERR_INVALID_ARG;
    52d4:	2017      	movs	r0, #23
			if (config->clear_on_match) {
    52d6:	2b00      	cmp	r3, #0
    52d8:	d1f6      	bne.n	52c8 <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
    52da:	2200      	movs	r2, #0
    52dc:	68a9      	ldr	r1, [r5, #8]
    52de:	0020      	movs	r0, r4
    52e0:	4e07      	ldr	r6, [pc, #28]	; (5300 <rtc_count_init+0x98>)
    52e2:	47b0      	blx	r6
    52e4:	68e9      	ldr	r1, [r5, #12]
    52e6:	2201      	movs	r2, #1
    52e8:	0020      	movs	r0, r4
    52ea:	47b0      	blx	r6
	return STATUS_OK;
    52ec:	2000      	movs	r0, #0
    52ee:	e7eb      	b.n	52c8 <rtc_count_init+0x60>
    52f0:	40000400 	.word	0x40000400
    52f4:	40001000 	.word	0x40001000
    52f8:	000051a1 	.word	0x000051a1
    52fc:	20001e6c 	.word	0x20001e6c
    5300:	00005205 	.word	0x00005205

00005304 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
    5304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5306:	0004      	movs	r4, r0
    5308:	000e      	movs	r6, r1
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
    530a:	7903      	ldrb	r3, [r0, #4]
		return STATUS_ERR_UNSUPPORTED_DEV;
    530c:	2015      	movs	r0, #21
	if (module->mode != RTC_COUNT_MODE_16BIT) {
    530e:	2b00      	cmp	r3, #0
    5310:	d000      	beq.n	5314 <rtc_count_set_period+0x10>
	while (rtc_count_is_syncing(module)) {
		/* Wait for synchronization */
	}

	return STATUS_OK;
}
    5312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Rtc *const rtc_module = module->hw;
    5314:	6827      	ldr	r7, [r4, #0]
	while (rtc_count_is_syncing(module)) {
    5316:	4d06      	ldr	r5, [pc, #24]	; (5330 <rtc_count_set_period+0x2c>)
    5318:	0020      	movs	r0, r4
    531a:	47a8      	blx	r5
    531c:	2800      	cmp	r0, #0
    531e:	d1fb      	bne.n	5318 <rtc_count_set_period+0x14>
	rtc_module->MODE1.PER.reg = period_value;
    5320:	83be      	strh	r6, [r7, #28]
	while (rtc_count_is_syncing(module)) {
    5322:	4d03      	ldr	r5, [pc, #12]	; (5330 <rtc_count_set_period+0x2c>)
    5324:	0020      	movs	r0, r4
    5326:	47a8      	blx	r5
    5328:	2800      	cmp	r0, #0
    532a:	d1fb      	bne.n	5324 <rtc_count_set_period+0x20>
    532c:	e7f1      	b.n	5312 <rtc_count_set_period+0xe>
    532e:	46c0      	nop			; (mov r8, r8)
    5330:	00005121 	.word	0x00005121

00005334 <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
    5334:	2a0a      	cmp	r2, #10
    5336:	d009      	beq.n	534c <rtc_count_register_callback+0x18>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    5338:	2a07      	cmp	r2, #7
    533a:	d907      	bls.n	534c <rtc_count_register_callback+0x18>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
    533c:	7903      	ldrb	r3, [r0, #4]
    533e:	2b00      	cmp	r3, #0
    5340:	d010      	beq.n	5364 <rtc_count_register_callback+0x30>
    5342:	2b01      	cmp	r3, #1
    5344:	d112      	bne.n	536c <rtc_count_register_callback+0x38>
    5346:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
    5348:	2a09      	cmp	r2, #9
    534a:	d809      	bhi.n	5360 <rtc_count_register_callback+0x2c>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
    534c:	1c93      	adds	r3, r2, #2
    534e:	009b      	lsls	r3, r3, #2
    5350:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    5352:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    5354:	2101      	movs	r1, #1
    5356:	4091      	lsls	r1, r2
    5358:	430b      	orrs	r3, r1
    535a:	b29b      	uxth	r3, r3
    535c:	8683      	strh	r3, [r0, #52]	; 0x34
    535e:	2300      	movs	r3, #0
	}

	return status;
}
    5360:	0018      	movs	r0, r3
    5362:	4770      	bx	lr
    5364:	2317      	movs	r3, #23
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
    5366:	2a0a      	cmp	r2, #10
    5368:	d8fa      	bhi.n	5360 <rtc_count_register_callback+0x2c>
    536a:	e7ef      	b.n	534c <rtc_count_register_callback+0x18>
			status = STATUS_ERR_INVALID_ARG;
    536c:	2317      	movs	r3, #23
    536e:	e7f7      	b.n	5360 <rtc_count_register_callback+0x2c>

00005370 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    5370:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5372:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    5374:	290a      	cmp	r1, #10
    5376:	d011      	beq.n	539c <rtc_count_enable_callback+0x2c>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    5378:	2907      	cmp	r1, #7
    537a:	d912      	bls.n	53a2 <rtc_count_enable_callback+0x32>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    537c:	2380      	movs	r3, #128	; 0x80
    537e:	005b      	lsls	r3, r3, #1
    5380:	000c      	movs	r4, r1
    5382:	3c08      	subs	r4, #8
    5384:	40a3      	lsls	r3, r4
    5386:	24c0      	movs	r4, #192	; 0xc0
    5388:	00a4      	lsls	r4, r4, #2
    538a:	4023      	ands	r3, r4
    538c:	8153      	strh	r3, [r2, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    538e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    5390:	2201      	movs	r2, #1
    5392:	408a      	lsls	r2, r1
    5394:	4313      	orrs	r3, r2
    5396:	b29b      	uxth	r3, r3
    5398:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    539a:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    539c:	4b04      	ldr	r3, [pc, #16]	; (53b0 <rtc_count_enable_callback+0x40>)
    539e:	8153      	strh	r3, [r2, #10]
    53a0:	e7f5      	b.n	538e <rtc_count_enable_callback+0x1e>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
    53a2:	2401      	movs	r4, #1
    53a4:	408c      	lsls	r4, r1
    53a6:	23ff      	movs	r3, #255	; 0xff
    53a8:	4023      	ands	r3, r4
    53aa:	8153      	strh	r3, [r2, #10]
    53ac:	e7ef      	b.n	538e <rtc_count_enable_callback+0x1e>
    53ae:	46c0      	nop			; (mov r8, r8)
    53b0:	ffff8000 	.word	0xffff8000

000053b4 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    53b4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    53b6:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    53b8:	290a      	cmp	r1, #10
    53ba:	d010      	beq.n	53de <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    53bc:	2907      	cmp	r1, #7
    53be:	d911      	bls.n	53e4 <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    53c0:	2380      	movs	r3, #128	; 0x80
    53c2:	005b      	lsls	r3, r3, #1
    53c4:	000c      	movs	r4, r1
    53c6:	3c08      	subs	r4, #8
    53c8:	40a3      	lsls	r3, r4
    53ca:	24c0      	movs	r4, #192	; 0xc0
    53cc:	00a4      	lsls	r4, r4, #2
    53ce:	4023      	ands	r3, r4
    53d0:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    53d2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    53d4:	2201      	movs	r2, #1
    53d6:	408a      	lsls	r2, r1
    53d8:	4393      	bics	r3, r2
    53da:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    53dc:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    53de:	4b04      	ldr	r3, [pc, #16]	; (53f0 <rtc_count_disable_callback+0x3c>)
    53e0:	8113      	strh	r3, [r2, #8]
    53e2:	e7f6      	b.n	53d2 <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    53e4:	2401      	movs	r4, #1
    53e6:	408c      	lsls	r4, r1
    53e8:	23ff      	movs	r3, #255	; 0xff
    53ea:	4023      	ands	r3, r4
    53ec:	8113      	strh	r3, [r2, #8]
    53ee:	e7f0      	b.n	53d2 <rtc_count_disable_callback+0x1e>
    53f0:	ffff8000 	.word	0xffff8000

000053f4 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    53f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53f6:	46de      	mov	lr, fp
    53f8:	4657      	mov	r7, sl
    53fa:	464e      	mov	r6, r9
    53fc:	4645      	mov	r5, r8
    53fe:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    5400:	4b2b      	ldr	r3, [pc, #172]	; (54b0 <RTC_Handler+0xbc>)
    5402:	681b      	ldr	r3, [r3, #0]
    5404:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    5406:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    5408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    540a:	4652      	mov	r2, sl
    540c:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    540e:	401a      	ands	r2, r3
    5410:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    5412:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    5414:	8973      	ldrh	r3, [r6, #10]
    5416:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    5418:	b21a      	sxth	r2, r3
    541a:	2a00      	cmp	r2, #0
    541c:	db08      	blt.n	5430 <RTC_Handler+0x3c>
    541e:	27ff      	movs	r7, #255	; 0xff
    5420:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    5422:	d02a      	beq.n	547a <RTC_Handler+0x86>
    5424:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    5426:	2301      	movs	r3, #1
    5428:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    542a:	33fe      	adds	r3, #254	; 0xfe
    542c:	469b      	mov	fp, r3
    542e:	e014      	b.n	545a <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    5430:	4643      	mov	r3, r8
    5432:	055b      	lsls	r3, r3, #21
    5434:	d407      	bmi.n	5446 <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    5436:	4b1f      	ldr	r3, [pc, #124]	; (54b4 <RTC_Handler+0xc0>)
    5438:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    543a:	bc3c      	pop	{r2, r3, r4, r5}
    543c:	4690      	mov	r8, r2
    543e:	4699      	mov	r9, r3
    5440:	46a2      	mov	sl, r4
    5442:	46ab      	mov	fp, r5
    5444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    5446:	4653      	mov	r3, sl
    5448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    544a:	4798      	blx	r3
    544c:	e7f3      	b.n	5436 <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    544e:	465b      	mov	r3, fp
    5450:	401d      	ands	r5, r3
    5452:	81b5      	strh	r5, [r6, #12]
    5454:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    5456:	2c08      	cmp	r4, #8
    5458:	d0ef      	beq.n	543a <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    545a:	0023      	movs	r3, r4
    545c:	464d      	mov	r5, r9
    545e:	40a5      	lsls	r5, r4
    5460:	422f      	tst	r7, r5
    5462:	d0f4      	beq.n	544e <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    5464:	4642      	mov	r2, r8
    5466:	4122      	asrs	r2, r4
    5468:	4649      	mov	r1, r9
    546a:	4211      	tst	r1, r2
    546c:	d0ef      	beq.n	544e <RTC_Handler+0x5a>
				module->callbacks[i]();
    546e:	3302      	adds	r3, #2
    5470:	009b      	lsls	r3, r3, #2
    5472:	4652      	mov	r2, sl
    5474:	589b      	ldr	r3, [r3, r2]
    5476:	4798      	blx	r3
    5478:	e7e9      	b.n	544e <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    547a:	05da      	lsls	r2, r3, #23
    547c:	d50a      	bpl.n	5494 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    547e:	4643      	mov	r3, r8
    5480:	05db      	lsls	r3, r3, #23
    5482:	d403      	bmi.n	548c <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    5484:	2380      	movs	r3, #128	; 0x80
    5486:	005b      	lsls	r3, r3, #1
    5488:	81b3      	strh	r3, [r6, #12]
    548a:	e7d6      	b.n	543a <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    548c:	4653      	mov	r3, sl
    548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5490:	4798      	blx	r3
    5492:	e7f7      	b.n	5484 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    5494:	059b      	lsls	r3, r3, #22
    5496:	d5d0      	bpl.n	543a <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    5498:	4643      	mov	r3, r8
    549a:	059b      	lsls	r3, r3, #22
    549c:	d403      	bmi.n	54a6 <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    549e:	2380      	movs	r3, #128	; 0x80
    54a0:	009b      	lsls	r3, r3, #2
    54a2:	81b3      	strh	r3, [r6, #12]
}
    54a4:	e7c9      	b.n	543a <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    54a6:	4653      	mov	r3, sl
    54a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    54aa:	4798      	blx	r3
    54ac:	e7f7      	b.n	549e <RTC_Handler+0xaa>
    54ae:	46c0      	nop			; (mov r8, r8)
    54b0:	20001e6c 	.word	0x20001e6c
    54b4:	ffff8000 	.word	0xffff8000

000054b8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    54b8:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    54ba:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    54bc:	2340      	movs	r3, #64	; 0x40
    54be:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    54c0:	4281      	cmp	r1, r0
    54c2:	d202      	bcs.n	54ca <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    54c4:	0018      	movs	r0, r3
    54c6:	bd10      	pop	{r4, pc}
		baud_calculated++;
    54c8:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    54ca:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    54cc:	1c63      	adds	r3, r4, #1
    54ce:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    54d0:	4288      	cmp	r0, r1
    54d2:	d9f9      	bls.n	54c8 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    54d4:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    54d6:	2cff      	cmp	r4, #255	; 0xff
    54d8:	d8f4      	bhi.n	54c4 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    54da:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    54dc:	2300      	movs	r3, #0
    54de:	e7f1      	b.n	54c4 <_sercom_get_sync_baud_val+0xc>

000054e0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    54e0:	b510      	push	{r4, lr}
    54e2:	b082      	sub	sp, #8
    54e4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    54e6:	4b0e      	ldr	r3, [pc, #56]	; (5520 <sercom_set_gclk_generator+0x40>)
    54e8:	781b      	ldrb	r3, [r3, #0]
    54ea:	2b00      	cmp	r3, #0
    54ec:	d007      	beq.n	54fe <sercom_set_gclk_generator+0x1e>
    54ee:	2900      	cmp	r1, #0
    54f0:	d105      	bne.n	54fe <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    54f2:	4b0b      	ldr	r3, [pc, #44]	; (5520 <sercom_set_gclk_generator+0x40>)
    54f4:	785b      	ldrb	r3, [r3, #1]
    54f6:	4283      	cmp	r3, r0
    54f8:	d010      	beq.n	551c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    54fa:	201d      	movs	r0, #29
    54fc:	e00c      	b.n	5518 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    54fe:	a901      	add	r1, sp, #4
    5500:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    5502:	2011      	movs	r0, #17
    5504:	4b07      	ldr	r3, [pc, #28]	; (5524 <sercom_set_gclk_generator+0x44>)
    5506:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    5508:	2011      	movs	r0, #17
    550a:	4b07      	ldr	r3, [pc, #28]	; (5528 <sercom_set_gclk_generator+0x48>)
    550c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    550e:	4b04      	ldr	r3, [pc, #16]	; (5520 <sercom_set_gclk_generator+0x40>)
    5510:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    5512:	2201      	movs	r2, #1
    5514:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    5516:	2000      	movs	r0, #0
}
    5518:	b002      	add	sp, #8
    551a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    551c:	2000      	movs	r0, #0
    551e:	e7fb      	b.n	5518 <sercom_set_gclk_generator+0x38>
    5520:	200000b4 	.word	0x200000b4
    5524:	00006195 	.word	0x00006195
    5528:	00006125 	.word	0x00006125

0000552c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    552c:	4b3c      	ldr	r3, [pc, #240]	; (5620 <_sercom_get_default_pad+0xf4>)
    552e:	4298      	cmp	r0, r3
    5530:	d032      	beq.n	5598 <_sercom_get_default_pad+0x6c>
    5532:	d90a      	bls.n	554a <_sercom_get_default_pad+0x1e>
    5534:	4b3b      	ldr	r3, [pc, #236]	; (5624 <_sercom_get_default_pad+0xf8>)
    5536:	4298      	cmp	r0, r3
    5538:	d04e      	beq.n	55d8 <_sercom_get_default_pad+0xac>
    553a:	4b3b      	ldr	r3, [pc, #236]	; (5628 <_sercom_get_default_pad+0xfc>)
    553c:	4298      	cmp	r0, r3
    553e:	d055      	beq.n	55ec <_sercom_get_default_pad+0xc0>
    5540:	4b3a      	ldr	r3, [pc, #232]	; (562c <_sercom_get_default_pad+0x100>)
    5542:	4298      	cmp	r0, r3
    5544:	d038      	beq.n	55b8 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    5546:	2000      	movs	r0, #0
}
    5548:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    554a:	2384      	movs	r3, #132	; 0x84
    554c:	05db      	lsls	r3, r3, #23
    554e:	4298      	cmp	r0, r3
    5550:	d00c      	beq.n	556c <_sercom_get_default_pad+0x40>
    5552:	4b37      	ldr	r3, [pc, #220]	; (5630 <_sercom_get_default_pad+0x104>)
    5554:	4298      	cmp	r0, r3
    5556:	d1f6      	bne.n	5546 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5558:	2901      	cmp	r1, #1
    555a:	d017      	beq.n	558c <_sercom_get_default_pad+0x60>
    555c:	2900      	cmp	r1, #0
    555e:	d057      	beq.n	5610 <_sercom_get_default_pad+0xe4>
    5560:	2902      	cmp	r1, #2
    5562:	d015      	beq.n	5590 <_sercom_get_default_pad+0x64>
    5564:	2903      	cmp	r1, #3
    5566:	d015      	beq.n	5594 <_sercom_get_default_pad+0x68>
	return 0;
    5568:	2000      	movs	r0, #0
    556a:	e7ed      	b.n	5548 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    556c:	2901      	cmp	r1, #1
    556e:	d007      	beq.n	5580 <_sercom_get_default_pad+0x54>
    5570:	2900      	cmp	r1, #0
    5572:	d04b      	beq.n	560c <_sercom_get_default_pad+0xe0>
    5574:	2902      	cmp	r1, #2
    5576:	d005      	beq.n	5584 <_sercom_get_default_pad+0x58>
    5578:	2903      	cmp	r1, #3
    557a:	d005      	beq.n	5588 <_sercom_get_default_pad+0x5c>
	return 0;
    557c:	2000      	movs	r0, #0
    557e:	e7e3      	b.n	5548 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5580:	482c      	ldr	r0, [pc, #176]	; (5634 <_sercom_get_default_pad+0x108>)
    5582:	e7e1      	b.n	5548 <_sercom_get_default_pad+0x1c>
    5584:	482c      	ldr	r0, [pc, #176]	; (5638 <_sercom_get_default_pad+0x10c>)
    5586:	e7df      	b.n	5548 <_sercom_get_default_pad+0x1c>
    5588:	482c      	ldr	r0, [pc, #176]	; (563c <_sercom_get_default_pad+0x110>)
    558a:	e7dd      	b.n	5548 <_sercom_get_default_pad+0x1c>
    558c:	482c      	ldr	r0, [pc, #176]	; (5640 <_sercom_get_default_pad+0x114>)
    558e:	e7db      	b.n	5548 <_sercom_get_default_pad+0x1c>
    5590:	482c      	ldr	r0, [pc, #176]	; (5644 <_sercom_get_default_pad+0x118>)
    5592:	e7d9      	b.n	5548 <_sercom_get_default_pad+0x1c>
    5594:	482c      	ldr	r0, [pc, #176]	; (5648 <_sercom_get_default_pad+0x11c>)
    5596:	e7d7      	b.n	5548 <_sercom_get_default_pad+0x1c>
    5598:	2901      	cmp	r1, #1
    559a:	d007      	beq.n	55ac <_sercom_get_default_pad+0x80>
    559c:	2900      	cmp	r1, #0
    559e:	d039      	beq.n	5614 <_sercom_get_default_pad+0xe8>
    55a0:	2902      	cmp	r1, #2
    55a2:	d005      	beq.n	55b0 <_sercom_get_default_pad+0x84>
    55a4:	2903      	cmp	r1, #3
    55a6:	d005      	beq.n	55b4 <_sercom_get_default_pad+0x88>
	return 0;
    55a8:	2000      	movs	r0, #0
    55aa:	e7cd      	b.n	5548 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    55ac:	4827      	ldr	r0, [pc, #156]	; (564c <_sercom_get_default_pad+0x120>)
    55ae:	e7cb      	b.n	5548 <_sercom_get_default_pad+0x1c>
    55b0:	4827      	ldr	r0, [pc, #156]	; (5650 <_sercom_get_default_pad+0x124>)
    55b2:	e7c9      	b.n	5548 <_sercom_get_default_pad+0x1c>
    55b4:	4827      	ldr	r0, [pc, #156]	; (5654 <_sercom_get_default_pad+0x128>)
    55b6:	e7c7      	b.n	5548 <_sercom_get_default_pad+0x1c>
    55b8:	2901      	cmp	r1, #1
    55ba:	d007      	beq.n	55cc <_sercom_get_default_pad+0xa0>
    55bc:	2900      	cmp	r1, #0
    55be:	d02b      	beq.n	5618 <_sercom_get_default_pad+0xec>
    55c0:	2902      	cmp	r1, #2
    55c2:	d005      	beq.n	55d0 <_sercom_get_default_pad+0xa4>
    55c4:	2903      	cmp	r1, #3
    55c6:	d005      	beq.n	55d4 <_sercom_get_default_pad+0xa8>
	return 0;
    55c8:	2000      	movs	r0, #0
    55ca:	e7bd      	b.n	5548 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    55cc:	4822      	ldr	r0, [pc, #136]	; (5658 <_sercom_get_default_pad+0x12c>)
    55ce:	e7bb      	b.n	5548 <_sercom_get_default_pad+0x1c>
    55d0:	4822      	ldr	r0, [pc, #136]	; (565c <_sercom_get_default_pad+0x130>)
    55d2:	e7b9      	b.n	5548 <_sercom_get_default_pad+0x1c>
    55d4:	4822      	ldr	r0, [pc, #136]	; (5660 <_sercom_get_default_pad+0x134>)
    55d6:	e7b7      	b.n	5548 <_sercom_get_default_pad+0x1c>
    55d8:	2902      	cmp	r1, #2
    55da:	d003      	beq.n	55e4 <_sercom_get_default_pad+0xb8>
    55dc:	2903      	cmp	r1, #3
    55de:	d003      	beq.n	55e8 <_sercom_get_default_pad+0xbc>
    55e0:	2000      	movs	r0, #0
    55e2:	e7b1      	b.n	5548 <_sercom_get_default_pad+0x1c>
    55e4:	481f      	ldr	r0, [pc, #124]	; (5664 <_sercom_get_default_pad+0x138>)
    55e6:	e7af      	b.n	5548 <_sercom_get_default_pad+0x1c>
    55e8:	481f      	ldr	r0, [pc, #124]	; (5668 <_sercom_get_default_pad+0x13c>)
    55ea:	e7ad      	b.n	5548 <_sercom_get_default_pad+0x1c>
    55ec:	2901      	cmp	r1, #1
    55ee:	d007      	beq.n	5600 <_sercom_get_default_pad+0xd4>
    55f0:	2900      	cmp	r1, #0
    55f2:	d013      	beq.n	561c <_sercom_get_default_pad+0xf0>
    55f4:	2902      	cmp	r1, #2
    55f6:	d005      	beq.n	5604 <_sercom_get_default_pad+0xd8>
    55f8:	2903      	cmp	r1, #3
    55fa:	d005      	beq.n	5608 <_sercom_get_default_pad+0xdc>
	return 0;
    55fc:	2000      	movs	r0, #0
    55fe:	e7a3      	b.n	5548 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5600:	481a      	ldr	r0, [pc, #104]	; (566c <_sercom_get_default_pad+0x140>)
    5602:	e7a1      	b.n	5548 <_sercom_get_default_pad+0x1c>
    5604:	481a      	ldr	r0, [pc, #104]	; (5670 <_sercom_get_default_pad+0x144>)
    5606:	e79f      	b.n	5548 <_sercom_get_default_pad+0x1c>
    5608:	481a      	ldr	r0, [pc, #104]	; (5674 <_sercom_get_default_pad+0x148>)
    560a:	e79d      	b.n	5548 <_sercom_get_default_pad+0x1c>
    560c:	481a      	ldr	r0, [pc, #104]	; (5678 <_sercom_get_default_pad+0x14c>)
    560e:	e79b      	b.n	5548 <_sercom_get_default_pad+0x1c>
    5610:	2003      	movs	r0, #3
    5612:	e799      	b.n	5548 <_sercom_get_default_pad+0x1c>
    5614:	4819      	ldr	r0, [pc, #100]	; (567c <_sercom_get_default_pad+0x150>)
    5616:	e797      	b.n	5548 <_sercom_get_default_pad+0x1c>
    5618:	4819      	ldr	r0, [pc, #100]	; (5680 <_sercom_get_default_pad+0x154>)
    561a:	e795      	b.n	5548 <_sercom_get_default_pad+0x1c>
    561c:	4819      	ldr	r0, [pc, #100]	; (5684 <_sercom_get_default_pad+0x158>)
    561e:	e793      	b.n	5548 <_sercom_get_default_pad+0x1c>
    5620:	42000800 	.word	0x42000800
    5624:	42001000 	.word	0x42001000
    5628:	43000400 	.word	0x43000400
    562c:	42000c00 	.word	0x42000c00
    5630:	42000400 	.word	0x42000400
    5634:	00050003 	.word	0x00050003
    5638:	00060003 	.word	0x00060003
    563c:	00070003 	.word	0x00070003
    5640:	00010003 	.word	0x00010003
    5644:	001e0003 	.word	0x001e0003
    5648:	001f0003 	.word	0x001f0003
    564c:	00090003 	.word	0x00090003
    5650:	000a0003 	.word	0x000a0003
    5654:	000b0003 	.word	0x000b0003
    5658:	00110003 	.word	0x00110003
    565c:	00120003 	.word	0x00120003
    5660:	00130003 	.word	0x00130003
    5664:	000e0003 	.word	0x000e0003
    5668:	000f0003 	.word	0x000f0003
    566c:	00170003 	.word	0x00170003
    5670:	00180003 	.word	0x00180003
    5674:	00190003 	.word	0x00190003
    5678:	00040003 	.word	0x00040003
    567c:	00080003 	.word	0x00080003
    5680:	00100003 	.word	0x00100003
    5684:	00160003 	.word	0x00160003

00005688 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    5688:	b530      	push	{r4, r5, lr}
    568a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    568c:	4b0b      	ldr	r3, [pc, #44]	; (56bc <_sercom_get_sercom_inst_index+0x34>)
    568e:	466a      	mov	r2, sp
    5690:	cb32      	ldmia	r3!, {r1, r4, r5}
    5692:	c232      	stmia	r2!, {r1, r4, r5}
    5694:	cb32      	ldmia	r3!, {r1, r4, r5}
    5696:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5698:	9b00      	ldr	r3, [sp, #0]
    569a:	4283      	cmp	r3, r0
    569c:	d00b      	beq.n	56b6 <_sercom_get_sercom_inst_index+0x2e>
    569e:	2301      	movs	r3, #1
    56a0:	009a      	lsls	r2, r3, #2
    56a2:	4669      	mov	r1, sp
    56a4:	5852      	ldr	r2, [r2, r1]
    56a6:	4282      	cmp	r2, r0
    56a8:	d006      	beq.n	56b8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    56aa:	3301      	adds	r3, #1
    56ac:	2b06      	cmp	r3, #6
    56ae:	d1f7      	bne.n	56a0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    56b0:	2000      	movs	r0, #0
}
    56b2:	b007      	add	sp, #28
    56b4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    56b6:	2300      	movs	r3, #0
			return i;
    56b8:	b2d8      	uxtb	r0, r3
    56ba:	e7fa      	b.n	56b2 <_sercom_get_sercom_inst_index+0x2a>
    56bc:	000165c8 	.word	0x000165c8

000056c0 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    56c0:	b510      	push	{r4, lr}
    56c2:	4b02      	ldr	r3, [pc, #8]	; (56cc <SERCOM0_Handler+0xc>)
    56c4:	681b      	ldr	r3, [r3, #0]
    56c6:	2000      	movs	r0, #0
    56c8:	4798      	blx	r3
    56ca:	bd10      	pop	{r4, pc}
    56cc:	200000b8 	.word	0x200000b8

000056d0 <SERCOM1_Handler>:
    56d0:	b510      	push	{r4, lr}
    56d2:	4b02      	ldr	r3, [pc, #8]	; (56dc <SERCOM1_Handler+0xc>)
    56d4:	685b      	ldr	r3, [r3, #4]
    56d6:	2001      	movs	r0, #1
    56d8:	4798      	blx	r3
    56da:	bd10      	pop	{r4, pc}
    56dc:	200000b8 	.word	0x200000b8

000056e0 <SERCOM2_Handler>:
    56e0:	b510      	push	{r4, lr}
    56e2:	4b02      	ldr	r3, [pc, #8]	; (56ec <SERCOM2_Handler+0xc>)
    56e4:	689b      	ldr	r3, [r3, #8]
    56e6:	2002      	movs	r0, #2
    56e8:	4798      	blx	r3
    56ea:	bd10      	pop	{r4, pc}
    56ec:	200000b8 	.word	0x200000b8

000056f0 <SERCOM3_Handler>:
    56f0:	b510      	push	{r4, lr}
    56f2:	4b02      	ldr	r3, [pc, #8]	; (56fc <SERCOM3_Handler+0xc>)
    56f4:	68db      	ldr	r3, [r3, #12]
    56f6:	2003      	movs	r0, #3
    56f8:	4798      	blx	r3
    56fa:	bd10      	pop	{r4, pc}
    56fc:	200000b8 	.word	0x200000b8

00005700 <SERCOM4_Handler>:
    5700:	b510      	push	{r4, lr}
    5702:	4b02      	ldr	r3, [pc, #8]	; (570c <SERCOM4_Handler+0xc>)
    5704:	691b      	ldr	r3, [r3, #16]
    5706:	2004      	movs	r0, #4
    5708:	4798      	blx	r3
    570a:	bd10      	pop	{r4, pc}
    570c:	200000b8 	.word	0x200000b8

00005710 <SERCOM5_Handler>:
    5710:	b510      	push	{r4, lr}
    5712:	4b02      	ldr	r3, [pc, #8]	; (571c <SERCOM5_Handler+0xc>)
    5714:	695b      	ldr	r3, [r3, #20]
    5716:	2005      	movs	r0, #5
    5718:	4798      	blx	r3
    571a:	bd10      	pop	{r4, pc}
    571c:	200000b8 	.word	0x200000b8

00005720 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    5720:	b5f0      	push	{r4, r5, r6, r7, lr}
    5722:	46d6      	mov	lr, sl
    5724:	464f      	mov	r7, r9
    5726:	4646      	mov	r6, r8
    5728:	b5c0      	push	{r6, r7, lr}
    572a:	b08a      	sub	sp, #40	; 0x28
    572c:	0006      	movs	r6, r0
    572e:	000f      	movs	r7, r1
    5730:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    5732:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    5734:	680b      	ldr	r3, [r1, #0]
    5736:	079b      	lsls	r3, r3, #30
    5738:	d40a      	bmi.n	5750 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    573a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    573c:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    573e:	07db      	lsls	r3, r3, #31
    5740:	d400      	bmi.n	5744 <spi_init+0x24>
    5742:	e0af      	b.n	58a4 <spi_init+0x184>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    5744:	b00a      	add	sp, #40	; 0x28
    5746:	bc1c      	pop	{r2, r3, r4}
    5748:	4690      	mov	r8, r2
    574a:	4699      	mov	r9, r3
    574c:	46a2      	mov	sl, r4
    574e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    5750:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5752:	9305      	str	r3, [sp, #20]
    5754:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    5756:	9306      	str	r3, [sp, #24]
    5758:	6b13      	ldr	r3, [r2, #48]	; 0x30
    575a:	9307      	str	r3, [sp, #28]
    575c:	6b53      	ldr	r3, [r2, #52]	; 0x34
    575e:	9308      	str	r3, [sp, #32]
    5760:	2500      	movs	r5, #0
    5762:	e00a      	b.n	577a <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5764:	0038      	movs	r0, r7
    5766:	4bb6      	ldr	r3, [pc, #728]	; (5a40 <spi_init+0x320>)
    5768:	4798      	blx	r3
    576a:	e00e      	b.n	578a <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    576c:	230f      	movs	r3, #15
    576e:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    5770:	4581      	cmp	r9, r0
    5772:	d130      	bne.n	57d6 <spi_init+0xb6>
    5774:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5776:	2d04      	cmp	r5, #4
    5778:	d031      	beq.n	57de <spi_init+0xbe>
    577a:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    577c:	00ab      	lsls	r3, r5, #2
    577e:	aa02      	add	r2, sp, #8
    5780:	200c      	movs	r0, #12
    5782:	1812      	adds	r2, r2, r0
    5784:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    5786:	2800      	cmp	r0, #0
    5788:	d0ec      	beq.n	5764 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    578a:	1c43      	adds	r3, r0, #1
    578c:	d0f2      	beq.n	5774 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    578e:	0401      	lsls	r1, r0, #16
    5790:	0c0b      	lsrs	r3, r1, #16
    5792:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    5794:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    5796:	b2c3      	uxtb	r3, r0
    5798:	469c      	mov	ip, r3
		return NULL;
    579a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    579c:	0602      	lsls	r2, r0, #24
    579e:	d405      	bmi.n	57ac <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    57a0:	4663      	mov	r3, ip
    57a2:	095b      	lsrs	r3, r3, #5
    57a4:	01db      	lsls	r3, r3, #7
    57a6:	4aa7      	ldr	r2, [pc, #668]	; (5a44 <spi_init+0x324>)
    57a8:	4690      	mov	r8, r2
    57aa:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    57ac:	221f      	movs	r2, #31
    57ae:	4660      	mov	r0, ip
    57b0:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    57b2:	1898      	adds	r0, r3, r2
    57b4:	3040      	adds	r0, #64	; 0x40
    57b6:	7800      	ldrb	r0, [r0, #0]
    57b8:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    57ba:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    57bc:	4651      	mov	r1, sl
    57be:	07c9      	lsls	r1, r1, #31
    57c0:	d5d6      	bpl.n	5770 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    57c2:	0852      	lsrs	r2, r2, #1
    57c4:	189b      	adds	r3, r3, r2
    57c6:	3330      	adds	r3, #48	; 0x30
    57c8:	7818      	ldrb	r0, [r3, #0]
    57ca:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    57cc:	4663      	mov	r3, ip
    57ce:	07db      	lsls	r3, r3, #31
    57d0:	d5cc      	bpl.n	576c <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    57d2:	0900      	lsrs	r0, r0, #4
    57d4:	e7cc      	b.n	5770 <spi_init+0x50>
			module->hw = NULL;
    57d6:	2300      	movs	r3, #0
    57d8:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    57da:	201c      	movs	r0, #28
    57dc:	e7b2      	b.n	5744 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    57de:	2011      	movs	r0, #17
    57e0:	4b99      	ldr	r3, [pc, #612]	; (5a48 <spi_init+0x328>)
    57e2:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    57e4:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    57e6:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    57e8:	2a01      	cmp	r2, #1
    57ea:	d016      	beq.n	581a <spi_init+0xfa>
	if (config->mode == SPI_MODE_SLAVE) {
    57ec:	7821      	ldrb	r1, [r4, #0]
    57ee:	2900      	cmp	r1, #0
    57f0:	d127      	bne.n	5842 <spi_init+0x122>
		if (spi_module->CTRLA.reg != addr) {
    57f2:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    57f4:	7fe2      	ldrb	r2, [r4, #31]
    57f6:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    57f8:	7fa0      	ldrb	r0, [r4, #30]
    57fa:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    57fc:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    57fe:	429a      	cmp	r2, r3
    5800:	d1a0      	bne.n	5744 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    5802:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    5804:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    5806:	3004      	adds	r0, #4
    5808:	5c20      	ldrb	r0, [r4, r0]
    580a:	2800      	cmp	r0, #0
    580c:	d001      	beq.n	5812 <spi_init+0xf2>
    580e:	2040      	movs	r0, #64	; 0x40
    5810:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    5812:	2008      	movs	r0, #8
    5814:	4303      	orrs	r3, r0
    5816:	431d      	orrs	r5, r3
    5818:	e014      	b.n	5844 <spi_init+0x124>
		enum status_code error_code = _sercom_get_sync_baud_val(
    581a:	aa04      	add	r2, sp, #16
    581c:	0001      	movs	r1, r0
    581e:	69a0      	ldr	r0, [r4, #24]
    5820:	4b8a      	ldr	r3, [pc, #552]	; (5a4c <spi_init+0x32c>)
    5822:	4798      	blx	r3
    5824:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5826:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5828:	2b00      	cmp	r3, #0
    582a:	d000      	beq.n	582e <spi_init+0x10e>
    582c:	e78a      	b.n	5744 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    582e:	7b3b      	ldrb	r3, [r7, #12]
    5830:	b2db      	uxtb	r3, r3
    5832:	aa04      	add	r2, sp, #16
    5834:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    5836:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5838:	429a      	cmp	r2, r3
    583a:	d000      	beq.n	583e <spi_init+0x11e>
    583c:	e782      	b.n	5744 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    583e:	350c      	adds	r5, #12
    5840:	e7d4      	b.n	57ec <spi_init+0xcc>
	uint32_t ctrlb = 0;
    5842:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    5844:	6863      	ldr	r3, [r4, #4]
    5846:	68a0      	ldr	r0, [r4, #8]
    5848:	4303      	orrs	r3, r0
    584a:	68e0      	ldr	r0, [r4, #12]
    584c:	4303      	orrs	r3, r0
    584e:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    5850:	7c20      	ldrb	r0, [r4, #16]
    5852:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    5854:	7c60      	ldrb	r0, [r4, #17]
    5856:	2800      	cmp	r0, #0
    5858:	d001      	beq.n	585e <spi_init+0x13e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    585a:	2080      	movs	r0, #128	; 0x80
    585c:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    585e:	7ca0      	ldrb	r0, [r4, #18]
    5860:	2800      	cmp	r0, #0
    5862:	d002      	beq.n	586a <spi_init+0x14a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5864:	2080      	movs	r0, #128	; 0x80
    5866:	0280      	lsls	r0, r0, #10
    5868:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    586a:	7ce0      	ldrb	r0, [r4, #19]
    586c:	2800      	cmp	r0, #0
    586e:	d002      	beq.n	5876 <spi_init+0x156>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5870:	2080      	movs	r0, #128	; 0x80
    5872:	0080      	lsls	r0, r0, #2
    5874:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    5876:	7d20      	ldrb	r0, [r4, #20]
    5878:	2800      	cmp	r0, #0
    587a:	d002      	beq.n	5882 <spi_init+0x162>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    587c:	2080      	movs	r0, #128	; 0x80
    587e:	0180      	lsls	r0, r0, #6
    5880:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    5882:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    5884:	2502      	movs	r5, #2
    5886:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    5888:	4283      	cmp	r3, r0
    588a:	d003      	beq.n	5894 <spi_init+0x174>
	module->hw = NULL;
    588c:	2300      	movs	r3, #0
    588e:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    5890:	201c      	movs	r0, #28
    5892:	e757      	b.n	5744 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    5894:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    5896:	4293      	cmp	r3, r2
    5898:	d1f8      	bne.n	588c <spi_init+0x16c>
		module->mode           = config->mode;
    589a:	7171      	strb	r1, [r6, #5]
		module->character_size = config->character_size;
    589c:	7c23      	ldrb	r3, [r4, #16]
    589e:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    58a0:	2000      	movs	r0, #0
    58a2:	e74f      	b.n	5744 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    58a4:	0008      	movs	r0, r1
    58a6:	4b6a      	ldr	r3, [pc, #424]	; (5a50 <spi_init+0x330>)
    58a8:	4798      	blx	r3
	if (sercom_index == 5) {
    58aa:	2805      	cmp	r0, #5
    58ac:	d100      	bne.n	58b0 <spi_init+0x190>
    58ae:	e0bf      	b.n	5a30 <spi_init+0x310>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    58b0:	0003      	movs	r3, r0
    58b2:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    58b4:	4967      	ldr	r1, [pc, #412]	; (5a54 <spi_init+0x334>)
    58b6:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    58b8:	2201      	movs	r2, #1
    58ba:	4082      	lsls	r2, r0
    58bc:	432a      	orrs	r2, r5
    58be:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    58c0:	a909      	add	r1, sp, #36	; 0x24
    58c2:	2524      	movs	r5, #36	; 0x24
    58c4:	5d62      	ldrb	r2, [r4, r5]
    58c6:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    58c8:	b2db      	uxtb	r3, r3
    58ca:	9301      	str	r3, [sp, #4]
    58cc:	0018      	movs	r0, r3
    58ce:	4b62      	ldr	r3, [pc, #392]	; (5a58 <spi_init+0x338>)
    58d0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    58d2:	9801      	ldr	r0, [sp, #4]
    58d4:	4b61      	ldr	r3, [pc, #388]	; (5a5c <spi_init+0x33c>)
    58d6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    58d8:	5d60      	ldrb	r0, [r4, r5]
    58da:	2100      	movs	r1, #0
    58dc:	4b60      	ldr	r3, [pc, #384]	; (5a60 <spi_init+0x340>)
    58de:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    58e0:	7823      	ldrb	r3, [r4, #0]
    58e2:	2b01      	cmp	r3, #1
    58e4:	d020      	beq.n	5928 <spi_init+0x208>
	if (config->mode == SPI_MODE_SLAVE) {
    58e6:	7823      	ldrb	r3, [r4, #0]
    58e8:	2b00      	cmp	r3, #0
    58ea:	d103      	bne.n	58f4 <spi_init+0x1d4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    58ec:	683b      	ldr	r3, [r7, #0]
    58ee:	2208      	movs	r2, #8
    58f0:	4313      	orrs	r3, r2
    58f2:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    58f4:	6833      	ldr	r3, [r6, #0]
    58f6:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    58f8:	ab04      	add	r3, sp, #16
    58fa:	2280      	movs	r2, #128	; 0x80
    58fc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    58fe:	2200      	movs	r2, #0
    5900:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5902:	2101      	movs	r1, #1
    5904:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    5906:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    5908:	7823      	ldrb	r3, [r4, #0]
    590a:	2b00      	cmp	r3, #0
    590c:	d101      	bne.n	5912 <spi_init+0x1f2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    590e:	ab04      	add	r3, sp, #16
    5910:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5912:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5914:	9305      	str	r3, [sp, #20]
    5916:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5918:	9306      	str	r3, [sp, #24]
    591a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    591c:	9307      	str	r3, [sp, #28]
    591e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5920:	9308      	str	r3, [sp, #32]
    5922:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5924:	ad05      	add	r5, sp, #20
    5926:	e011      	b.n	594c <spi_init+0x22c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5928:	683b      	ldr	r3, [r7, #0]
    592a:	220c      	movs	r2, #12
    592c:	4313      	orrs	r3, r2
    592e:	603b      	str	r3, [r7, #0]
    5930:	e7d9      	b.n	58e6 <spi_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5932:	4640      	mov	r0, r8
    5934:	4b42      	ldr	r3, [pc, #264]	; (5a40 <spi_init+0x320>)
    5936:	4798      	blx	r3
    5938:	e00d      	b.n	5956 <spi_init+0x236>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    593a:	a904      	add	r1, sp, #16
    593c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    593e:	0c00      	lsrs	r0, r0, #16
    5940:	b2c0      	uxtb	r0, r0
    5942:	4b48      	ldr	r3, [pc, #288]	; (5a64 <spi_init+0x344>)
    5944:	4798      	blx	r3
    5946:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5948:	2f04      	cmp	r7, #4
    594a:	d007      	beq.n	595c <spi_init+0x23c>
    594c:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    594e:	00bb      	lsls	r3, r7, #2
    5950:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    5952:	2800      	cmp	r0, #0
    5954:	d0ed      	beq.n	5932 <spi_init+0x212>
		if (current_pinmux != PINMUX_UNUSED) {
    5956:	1c43      	adds	r3, r0, #1
    5958:	d1ef      	bne.n	593a <spi_init+0x21a>
    595a:	e7f4      	b.n	5946 <spi_init+0x226>
	module->mode             = config->mode;
    595c:	7823      	ldrb	r3, [r4, #0]
    595e:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    5960:	7c23      	ldrb	r3, [r4, #16]
    5962:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    5964:	7ca3      	ldrb	r3, [r4, #18]
    5966:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    5968:	7d23      	ldrb	r3, [r4, #20]
    596a:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    596c:	2200      	movs	r2, #0
    596e:	ab02      	add	r3, sp, #8
    5970:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    5972:	7823      	ldrb	r3, [r4, #0]
    5974:	2b01      	cmp	r3, #1
    5976:	d014      	beq.n	59a2 <spi_init+0x282>
	if (config->mode == SPI_MODE_SLAVE) {
    5978:	7823      	ldrb	r3, [r4, #0]
    597a:	2b00      	cmp	r3, #0
    597c:	d129      	bne.n	59d2 <spi_init+0x2b2>
		ctrla = config->mode_specific.slave.frame_format;
    597e:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    5980:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    5982:	4643      	mov	r3, r8
    5984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5986:	7fe1      	ldrb	r1, [r4, #31]
    5988:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    598a:	7fa5      	ldrb	r5, [r4, #30]
    598c:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    598e:	4319      	orrs	r1, r3
    5990:	4643      	mov	r3, r8
    5992:	6259      	str	r1, [r3, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    5994:	2320      	movs	r3, #32
    5996:	5ce3      	ldrb	r3, [r4, r3]
    5998:	2b00      	cmp	r3, #0
    599a:	d01c      	beq.n	59d6 <spi_init+0x2b6>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    599c:	2340      	movs	r3, #64	; 0x40
    599e:	431a      	orrs	r2, r3
    59a0:	e019      	b.n	59d6 <spi_init+0x2b6>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    59a2:	6830      	ldr	r0, [r6, #0]
    59a4:	4b2a      	ldr	r3, [pc, #168]	; (5a50 <spi_init+0x330>)
    59a6:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    59a8:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    59aa:	b2c0      	uxtb	r0, r0
    59ac:	4b26      	ldr	r3, [pc, #152]	; (5a48 <spi_init+0x328>)
    59ae:	4798      	blx	r3
    59b0:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    59b2:	ab02      	add	r3, sp, #8
    59b4:	1d9a      	adds	r2, r3, #6
    59b6:	69a0      	ldr	r0, [r4, #24]
    59b8:	4b24      	ldr	r3, [pc, #144]	; (5a4c <spi_init+0x32c>)
    59ba:	4798      	blx	r3
    59bc:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    59be:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    59c0:	2b00      	cmp	r3, #0
    59c2:	d000      	beq.n	59c6 <spi_init+0x2a6>
    59c4:	e6be      	b.n	5744 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    59c6:	ab02      	add	r3, sp, #8
    59c8:	3306      	adds	r3, #6
    59ca:	781b      	ldrb	r3, [r3, #0]
    59cc:	4642      	mov	r2, r8
    59ce:	7313      	strb	r3, [r2, #12]
    59d0:	e7d2      	b.n	5978 <spi_init+0x258>
	uint32_t ctrlb = 0;
    59d2:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    59d4:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    59d6:	6863      	ldr	r3, [r4, #4]
    59d8:	68a1      	ldr	r1, [r4, #8]
    59da:	430b      	orrs	r3, r1
    59dc:	68e1      	ldr	r1, [r4, #12]
    59de:	430b      	orrs	r3, r1
    59e0:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    59e2:	7c21      	ldrb	r1, [r4, #16]
    59e4:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    59e6:	7c61      	ldrb	r1, [r4, #17]
    59e8:	2900      	cmp	r1, #0
    59ea:	d103      	bne.n	59f4 <spi_init+0x2d4>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    59ec:	491e      	ldr	r1, [pc, #120]	; (5a68 <spi_init+0x348>)
    59ee:	7889      	ldrb	r1, [r1, #2]
    59f0:	0789      	lsls	r1, r1, #30
    59f2:	d501      	bpl.n	59f8 <spi_init+0x2d8>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    59f4:	2180      	movs	r1, #128	; 0x80
    59f6:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    59f8:	7ca1      	ldrb	r1, [r4, #18]
    59fa:	2900      	cmp	r1, #0
    59fc:	d002      	beq.n	5a04 <spi_init+0x2e4>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    59fe:	2180      	movs	r1, #128	; 0x80
    5a00:	0289      	lsls	r1, r1, #10
    5a02:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    5a04:	7ce1      	ldrb	r1, [r4, #19]
    5a06:	2900      	cmp	r1, #0
    5a08:	d002      	beq.n	5a10 <spi_init+0x2f0>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5a0a:	2180      	movs	r1, #128	; 0x80
    5a0c:	0089      	lsls	r1, r1, #2
    5a0e:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    5a10:	7d21      	ldrb	r1, [r4, #20]
    5a12:	2900      	cmp	r1, #0
    5a14:	d002      	beq.n	5a1c <spi_init+0x2fc>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5a16:	2180      	movs	r1, #128	; 0x80
    5a18:	0189      	lsls	r1, r1, #6
    5a1a:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    5a1c:	4641      	mov	r1, r8
    5a1e:	6809      	ldr	r1, [r1, #0]
    5a20:	430b      	orrs	r3, r1
    5a22:	4641      	mov	r1, r8
    5a24:	600b      	str	r3, [r1, #0]
	spi_module->CTRLB.reg |= ctrlb;
    5a26:	684b      	ldr	r3, [r1, #4]
    5a28:	431a      	orrs	r2, r3
    5a2a:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    5a2c:	2000      	movs	r0, #0
    5a2e:	e689      	b.n	5744 <spi_init+0x24>
			MCLK->APBDMASK.reg |= mask;
    5a30:	4a08      	ldr	r2, [pc, #32]	; (5a54 <spi_init+0x334>)
    5a32:	6a13      	ldr	r3, [r2, #32]
    5a34:	2102      	movs	r1, #2
    5a36:	430b      	orrs	r3, r1
    5a38:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    5a3a:	2318      	movs	r3, #24
    5a3c:	e740      	b.n	58c0 <spi_init+0x1a0>
    5a3e:	46c0      	nop			; (mov r8, r8)
    5a40:	0000552d 	.word	0x0000552d
    5a44:	40002800 	.word	0x40002800
    5a48:	000061b9 	.word	0x000061b9
    5a4c:	000054b9 	.word	0x000054b9
    5a50:	00005689 	.word	0x00005689
    5a54:	40000400 	.word	0x40000400
    5a58:	00006195 	.word	0x00006195
    5a5c:	00006125 	.word	0x00006125
    5a60:	000054e1 	.word	0x000054e1
    5a64:	00006291 	.word	0x00006291
    5a68:	41002000 	.word	0x41002000

00005a6c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    5a6c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    5a6e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    5a70:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    5a72:	2c01      	cmp	r4, #1
    5a74:	d001      	beq.n	5a7a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    5a76:	0018      	movs	r0, r3
    5a78:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    5a7a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    5a7c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    5a7e:	2c00      	cmp	r4, #0
    5a80:	d1f9      	bne.n	5a76 <spi_select_slave+0xa>
		if (select) {
    5a82:	2a00      	cmp	r2, #0
    5a84:	d058      	beq.n	5b38 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    5a86:	784b      	ldrb	r3, [r1, #1]
    5a88:	2b00      	cmp	r3, #0
    5a8a:	d044      	beq.n	5b16 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5a8c:	6803      	ldr	r3, [r0, #0]
    5a8e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    5a90:	07db      	lsls	r3, r3, #31
    5a92:	d410      	bmi.n	5ab6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    5a94:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5a96:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5a98:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5a9a:	2900      	cmp	r1, #0
    5a9c:	d104      	bne.n	5aa8 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    5a9e:	0953      	lsrs	r3, r2, #5
    5aa0:	01db      	lsls	r3, r3, #7
    5aa2:	492e      	ldr	r1, [pc, #184]	; (5b5c <spi_select_slave+0xf0>)
    5aa4:	468c      	mov	ip, r1
    5aa6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5aa8:	211f      	movs	r1, #31
    5aaa:	4011      	ands	r1, r2
    5aac:	2201      	movs	r2, #1
    5aae:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5ab0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    5ab2:	2305      	movs	r3, #5
    5ab4:	e7df      	b.n	5a76 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5ab6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5ab8:	09d4      	lsrs	r4, r2, #7
		return NULL;
    5aba:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5abc:	2c00      	cmp	r4, #0
    5abe:	d104      	bne.n	5aca <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    5ac0:	0953      	lsrs	r3, r2, #5
    5ac2:	01db      	lsls	r3, r3, #7
    5ac4:	4c25      	ldr	r4, [pc, #148]	; (5b5c <spi_select_slave+0xf0>)
    5ac6:	46a4      	mov	ip, r4
    5ac8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5aca:	241f      	movs	r4, #31
    5acc:	4014      	ands	r4, r2
    5ace:	2201      	movs	r2, #1
    5ad0:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    5ad2:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5ad4:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5ad6:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5ad8:	07d2      	lsls	r2, r2, #31
    5ada:	d501      	bpl.n	5ae0 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5adc:	788a      	ldrb	r2, [r1, #2]
    5ade:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    5ae0:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    5ae2:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    5ae4:	2a00      	cmp	r2, #0
    5ae6:	d1c6      	bne.n	5a76 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5ae8:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    5aea:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5aec:	7e13      	ldrb	r3, [r2, #24]
    5aee:	420b      	tst	r3, r1
    5af0:	d0fc      	beq.n	5aec <spi_select_slave+0x80>
    5af2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    5af4:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5af6:	0749      	lsls	r1, r1, #29
    5af8:	d5bd      	bpl.n	5a76 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5afa:	8b53      	ldrh	r3, [r2, #26]
    5afc:	075b      	lsls	r3, r3, #29
    5afe:	d501      	bpl.n	5b04 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5b00:	2304      	movs	r3, #4
    5b02:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5b04:	7983      	ldrb	r3, [r0, #6]
    5b06:	2b01      	cmp	r3, #1
    5b08:	d002      	beq.n	5b10 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5b0a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5b0c:	2300      	movs	r3, #0
    5b0e:	e7b2      	b.n	5a76 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5b10:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5b12:	2300      	movs	r3, #0
    5b14:	e7af      	b.n	5a76 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5b16:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5b18:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5b1a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5b1c:	2900      	cmp	r1, #0
    5b1e:	d104      	bne.n	5b2a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    5b20:	0953      	lsrs	r3, r2, #5
    5b22:	01db      	lsls	r3, r3, #7
    5b24:	490d      	ldr	r1, [pc, #52]	; (5b5c <spi_select_slave+0xf0>)
    5b26:	468c      	mov	ip, r1
    5b28:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b2a:	211f      	movs	r1, #31
    5b2c:	4011      	ands	r1, r2
    5b2e:	2201      	movs	r2, #1
    5b30:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5b32:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    5b34:	2300      	movs	r3, #0
    5b36:	e79e      	b.n	5a76 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    5b38:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5b3a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5b3c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5b3e:	2900      	cmp	r1, #0
    5b40:	d104      	bne.n	5b4c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    5b42:	0953      	lsrs	r3, r2, #5
    5b44:	01db      	lsls	r3, r3, #7
    5b46:	4905      	ldr	r1, [pc, #20]	; (5b5c <spi_select_slave+0xf0>)
    5b48:	468c      	mov	ip, r1
    5b4a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b4c:	211f      	movs	r1, #31
    5b4e:	4011      	ands	r1, r2
    5b50:	2201      	movs	r2, #1
    5b52:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5b54:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    5b56:	2300      	movs	r3, #0
    5b58:	e78d      	b.n	5a76 <spi_select_slave+0xa>
    5b5a:	46c0      	nop			; (mov r8, r8)
    5b5c:	40002800 	.word	0x40002800

00005b60 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5b60:	b510      	push	{r4, lr}
	switch (clock_source) {
    5b62:	2808      	cmp	r0, #8
    5b64:	d803      	bhi.n	5b6e <system_clock_source_get_hz+0xe>
    5b66:	0080      	lsls	r0, r0, #2
    5b68:	4b1c      	ldr	r3, [pc, #112]	; (5bdc <system_clock_source_get_hz+0x7c>)
    5b6a:	581b      	ldr	r3, [r3, r0]
    5b6c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    5b6e:	2000      	movs	r0, #0
    5b70:	e032      	b.n	5bd8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    5b72:	4b1b      	ldr	r3, [pc, #108]	; (5be0 <system_clock_source_get_hz+0x80>)
    5b74:	6918      	ldr	r0, [r3, #16]
    5b76:	e02f      	b.n	5bd8 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    5b78:	4b1a      	ldr	r3, [pc, #104]	; (5be4 <system_clock_source_get_hz+0x84>)
    5b7a:	7d18      	ldrb	r0, [r3, #20]
    5b7c:	0700      	lsls	r0, r0, #28
    5b7e:	0f80      	lsrs	r0, r0, #30
    5b80:	1c43      	adds	r3, r0, #1
    5b82:	4819      	ldr	r0, [pc, #100]	; (5be8 <system_clock_source_get_hz+0x88>)
    5b84:	4358      	muls	r0, r3
    5b86:	e027      	b.n	5bd8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    5b88:	4b15      	ldr	r3, [pc, #84]	; (5be0 <system_clock_source_get_hz+0x80>)
    5b8a:	6958      	ldr	r0, [r3, #20]
    5b8c:	e024      	b.n	5bd8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    5b8e:	4b14      	ldr	r3, [pc, #80]	; (5be0 <system_clock_source_get_hz+0x80>)
    5b90:	681b      	ldr	r3, [r3, #0]
			return 0;
    5b92:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    5b94:	079b      	lsls	r3, r3, #30
    5b96:	d51f      	bpl.n	5bd8 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    5b98:	4912      	ldr	r1, [pc, #72]	; (5be4 <system_clock_source_get_hz+0x84>)
    5b9a:	2280      	movs	r2, #128	; 0x80
    5b9c:	0052      	lsls	r2, r2, #1
    5b9e:	68cb      	ldr	r3, [r1, #12]
    5ba0:	4213      	tst	r3, r2
    5ba2:	d0fc      	beq.n	5b9e <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    5ba4:	4b0e      	ldr	r3, [pc, #56]	; (5be0 <system_clock_source_get_hz+0x80>)
    5ba6:	681b      	ldr	r3, [r3, #0]
    5ba8:	075b      	lsls	r3, r3, #29
    5baa:	d401      	bmi.n	5bb0 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    5bac:	480f      	ldr	r0, [pc, #60]	; (5bec <system_clock_source_get_hz+0x8c>)
    5bae:	e013      	b.n	5bd8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    5bb0:	2000      	movs	r0, #0
    5bb2:	4b0f      	ldr	r3, [pc, #60]	; (5bf0 <system_clock_source_get_hz+0x90>)
    5bb4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    5bb6:	4b0a      	ldr	r3, [pc, #40]	; (5be0 <system_clock_source_get_hz+0x80>)
    5bb8:	689b      	ldr	r3, [r3, #8]
    5bba:	041b      	lsls	r3, r3, #16
    5bbc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    5bbe:	4358      	muls	r0, r3
    5bc0:	e00a      	b.n	5bd8 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    5bc2:	2328      	movs	r3, #40	; 0x28
    5bc4:	4a07      	ldr	r2, [pc, #28]	; (5be4 <system_clock_source_get_hz+0x84>)
    5bc6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    5bc8:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    5bca:	079b      	lsls	r3, r3, #30
    5bcc:	d504      	bpl.n	5bd8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    5bce:	4b04      	ldr	r3, [pc, #16]	; (5be0 <system_clock_source_get_hz+0x80>)
    5bd0:	68d8      	ldr	r0, [r3, #12]
    5bd2:	e001      	b.n	5bd8 <system_clock_source_get_hz+0x78>
		return 32768UL;
    5bd4:	2080      	movs	r0, #128	; 0x80
    5bd6:	0200      	lsls	r0, r0, #8
	}
}
    5bd8:	bd10      	pop	{r4, pc}
    5bda:	46c0      	nop			; (mov r8, r8)
    5bdc:	000165e0 	.word	0x000165e0
    5be0:	200000d0 	.word	0x200000d0
    5be4:	40000c00 	.word	0x40000c00
    5be8:	003d0900 	.word	0x003d0900
    5bec:	02dc6c00 	.word	0x02dc6c00
    5bf0:	000061b9 	.word	0x000061b9

00005bf4 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    5bf4:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    5bf6:	4c0b      	ldr	r4, [pc, #44]	; (5c24 <system_clock_source_osc16m_set_config+0x30>)
    5bf8:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    5bfa:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5bfc:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    5bfe:	7802      	ldrb	r2, [r0, #0]
    5c00:	2103      	movs	r1, #3
    5c02:	4011      	ands	r1, r2
    5c04:	0089      	lsls	r1, r1, #2
    5c06:	220c      	movs	r2, #12
    5c08:	4393      	bics	r3, r2
    5c0a:	430b      	orrs	r3, r1
    5c0c:	3a0b      	subs	r2, #11
    5c0e:	4032      	ands	r2, r6
    5c10:	0192      	lsls	r2, r2, #6
    5c12:	2140      	movs	r1, #64	; 0x40
    5c14:	438b      	bics	r3, r1
    5c16:	4313      	orrs	r3, r2
    5c18:	01ed      	lsls	r5, r5, #7
    5c1a:	227f      	movs	r2, #127	; 0x7f
    5c1c:	4013      	ands	r3, r2
    5c1e:	432b      	orrs	r3, r5
    5c20:	7523      	strb	r3, [r4, #20]
}
    5c22:	bd70      	pop	{r4, r5, r6, pc}
    5c24:	40000c00 	.word	0x40000c00

00005c28 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c2a:	46d6      	mov	lr, sl
    5c2c:	464f      	mov	r7, r9
    5c2e:	4646      	mov	r6, r8
    5c30:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    5c32:	4b20      	ldr	r3, [pc, #128]	; (5cb4 <system_clock_source_xosc32k_set_config+0x8c>)
    5c34:	469a      	mov	sl, r3
    5c36:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    5c38:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5c3a:	7801      	ldrb	r1, [r0, #0]
    5c3c:	424c      	negs	r4, r1
    5c3e:	414c      	adcs	r4, r1
    5c40:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    5c42:	7881      	ldrb	r1, [r0, #2]
    5c44:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    5c46:	78c1      	ldrb	r1, [r0, #3]
    5c48:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    5c4a:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5c4c:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    5c4e:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5c50:	6840      	ldr	r0, [r0, #4]
    5c52:	4919      	ldr	r1, [pc, #100]	; (5cb8 <system_clock_source_xosc32k_set_config+0x90>)
    5c54:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    5c56:	2101      	movs	r1, #1
    5c58:	4648      	mov	r0, r9
    5c5a:	0080      	lsls	r0, r0, #2
    5c5c:	2204      	movs	r2, #4
    5c5e:	4393      	bics	r3, r2
    5c60:	4303      	orrs	r3, r0
    5c62:	4640      	mov	r0, r8
    5c64:	4008      	ands	r0, r1
    5c66:	00c0      	lsls	r0, r0, #3
    5c68:	3204      	adds	r2, #4
    5c6a:	4393      	bics	r3, r2
    5c6c:	4303      	orrs	r3, r0
    5c6e:	4660      	mov	r0, ip
    5c70:	4008      	ands	r0, r1
    5c72:	0100      	lsls	r0, r0, #4
    5c74:	3208      	adds	r2, #8
    5c76:	4393      	bics	r3, r2
    5c78:	4303      	orrs	r3, r0
    5c7a:	400f      	ands	r7, r1
    5c7c:	01bf      	lsls	r7, r7, #6
    5c7e:	2040      	movs	r0, #64	; 0x40
    5c80:	4383      	bics	r3, r0
    5c82:	433b      	orrs	r3, r7
    5c84:	400e      	ands	r6, r1
    5c86:	01f6      	lsls	r6, r6, #7
    5c88:	3040      	adds	r0, #64	; 0x40
    5c8a:	4383      	bics	r3, r0
    5c8c:	4333      	orrs	r3, r6
    5c8e:	3879      	subs	r0, #121	; 0x79
    5c90:	4005      	ands	r5, r0
    5c92:	022d      	lsls	r5, r5, #8
    5c94:	4809      	ldr	r0, [pc, #36]	; (5cbc <system_clock_source_xosc32k_set_config+0x94>)
    5c96:	4003      	ands	r3, r0
    5c98:	432b      	orrs	r3, r5
    5c9a:	4021      	ands	r1, r4
    5c9c:	0309      	lsls	r1, r1, #12
    5c9e:	4808      	ldr	r0, [pc, #32]	; (5cc0 <system_clock_source_xosc32k_set_config+0x98>)
    5ca0:	4003      	ands	r3, r0
    5ca2:	430b      	orrs	r3, r1
    5ca4:	4652      	mov	r2, sl
    5ca6:	6153      	str	r3, [r2, #20]
}
    5ca8:	bc1c      	pop	{r2, r3, r4}
    5caa:	4690      	mov	r8, r2
    5cac:	4699      	mov	r9, r3
    5cae:	46a2      	mov	sl, r4
    5cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cb2:	46c0      	nop			; (mov r8, r8)
    5cb4:	40001000 	.word	0x40001000
    5cb8:	200000d0 	.word	0x200000d0
    5cbc:	fffff8ff 	.word	0xfffff8ff
    5cc0:	ffffefff 	.word	0xffffefff

00005cc4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    5cc4:	2808      	cmp	r0, #8
    5cc6:	d803      	bhi.n	5cd0 <system_clock_source_enable+0xc>
    5cc8:	0080      	lsls	r0, r0, #2
    5cca:	4b29      	ldr	r3, [pc, #164]	; (5d70 <system_clock_source_enable+0xac>)
    5ccc:	581b      	ldr	r3, [r3, r0]
    5cce:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5cd0:	2017      	movs	r0, #23
    5cd2:	e04b      	b.n	5d6c <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    5cd4:	4a27      	ldr	r2, [pc, #156]	; (5d74 <system_clock_source_enable+0xb0>)
    5cd6:	7d13      	ldrb	r3, [r2, #20]
    5cd8:	2102      	movs	r1, #2
    5cda:	430b      	orrs	r3, r1
    5cdc:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    5cde:	2000      	movs	r0, #0
    5ce0:	e044      	b.n	5d6c <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    5ce2:	4a25      	ldr	r2, [pc, #148]	; (5d78 <system_clock_source_enable+0xb4>)
    5ce4:	6993      	ldr	r3, [r2, #24]
    5ce6:	2102      	movs	r1, #2
    5ce8:	430b      	orrs	r3, r1
    5cea:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    5cec:	2000      	movs	r0, #0
		break;
    5cee:	e03d      	b.n	5d6c <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    5cf0:	4a20      	ldr	r2, [pc, #128]	; (5d74 <system_clock_source_enable+0xb0>)
    5cf2:	8a13      	ldrh	r3, [r2, #16]
    5cf4:	2102      	movs	r1, #2
    5cf6:	430b      	orrs	r3, r1
    5cf8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    5cfa:	2000      	movs	r0, #0
		break;
    5cfc:	e036      	b.n	5d6c <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    5cfe:	4a1e      	ldr	r2, [pc, #120]	; (5d78 <system_clock_source_enable+0xb4>)
    5d00:	6953      	ldr	r3, [r2, #20]
    5d02:	2102      	movs	r1, #2
    5d04:	430b      	orrs	r3, r1
    5d06:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    5d08:	2000      	movs	r0, #0
		break;
    5d0a:	e02f      	b.n	5d6c <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    5d0c:	491b      	ldr	r1, [pc, #108]	; (5d7c <system_clock_source_enable+0xb8>)
    5d0e:	680b      	ldr	r3, [r1, #0]
    5d10:	2202      	movs	r2, #2
    5d12:	4313      	orrs	r3, r2
    5d14:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    5d16:	4b17      	ldr	r3, [pc, #92]	; (5d74 <system_clock_source_enable+0xb0>)
    5d18:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    5d1a:	0019      	movs	r1, r3
    5d1c:	32fe      	adds	r2, #254	; 0xfe
    5d1e:	68cb      	ldr	r3, [r1, #12]
    5d20:	4213      	tst	r3, r2
    5d22:	d0fc      	beq.n	5d1e <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5d24:	4a15      	ldr	r2, [pc, #84]	; (5d7c <system_clock_source_enable+0xb8>)
    5d26:	6891      	ldr	r1, [r2, #8]
    5d28:	4b12      	ldr	r3, [pc, #72]	; (5d74 <system_clock_source_enable+0xb0>)
    5d2a:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5d2c:	6852      	ldr	r2, [r2, #4]
    5d2e:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    5d30:	2200      	movs	r2, #0
    5d32:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    5d34:	0019      	movs	r1, r3
    5d36:	3201      	adds	r2, #1
    5d38:	32ff      	adds	r2, #255	; 0xff
    5d3a:	68cb      	ldr	r3, [r1, #12]
    5d3c:	4213      	tst	r3, r2
    5d3e:	d0fc      	beq.n	5d3a <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5d40:	4b0e      	ldr	r3, [pc, #56]	; (5d7c <system_clock_source_enable+0xb8>)
    5d42:	681b      	ldr	r3, [r3, #0]
    5d44:	b29b      	uxth	r3, r3
    5d46:	4a0b      	ldr	r2, [pc, #44]	; (5d74 <system_clock_source_enable+0xb0>)
    5d48:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    5d4a:	2000      	movs	r0, #0
    5d4c:	e00e      	b.n	5d6c <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    5d4e:	4909      	ldr	r1, [pc, #36]	; (5d74 <system_clock_source_enable+0xb0>)
    5d50:	2228      	movs	r2, #40	; 0x28
    5d52:	5c8b      	ldrb	r3, [r1, r2]
    5d54:	2002      	movs	r0, #2
    5d56:	4303      	orrs	r3, r0
    5d58:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    5d5a:	0008      	movs	r0, r1
    5d5c:	2138      	movs	r1, #56	; 0x38
    5d5e:	3a26      	subs	r2, #38	; 0x26
    5d60:	5c43      	ldrb	r3, [r0, r1]
    5d62:	4213      	tst	r3, r2
    5d64:	d1fc      	bne.n	5d60 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    5d66:	2000      	movs	r0, #0
    5d68:	e000      	b.n	5d6c <system_clock_source_enable+0xa8>
		return STATUS_OK;
    5d6a:	2000      	movs	r0, #0
}
    5d6c:	4770      	bx	lr
    5d6e:	46c0      	nop			; (mov r8, r8)
    5d70:	00016604 	.word	0x00016604
    5d74:	40000c00 	.word	0x40000c00
    5d78:	40001000 	.word	0x40001000
    5d7c:	200000d0 	.word	0x200000d0

00005d80 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    5d80:	2808      	cmp	r0, #8
    5d82:	d832      	bhi.n	5dea <system_clock_source_disable+0x6a>
    5d84:	0080      	lsls	r0, r0, #2
    5d86:	4b1a      	ldr	r3, [pc, #104]	; (5df0 <system_clock_source_disable+0x70>)
    5d88:	581b      	ldr	r3, [r3, r0]
    5d8a:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    5d8c:	4a19      	ldr	r2, [pc, #100]	; (5df4 <system_clock_source_disable+0x74>)
    5d8e:	7d13      	ldrb	r3, [r2, #20]
    5d90:	2102      	movs	r1, #2
    5d92:	438b      	bics	r3, r1
    5d94:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    5d96:	2000      	movs	r0, #0
}
    5d98:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    5d9a:	4a17      	ldr	r2, [pc, #92]	; (5df8 <system_clock_source_disable+0x78>)
    5d9c:	6993      	ldr	r3, [r2, #24]
    5d9e:	2102      	movs	r1, #2
    5da0:	438b      	bics	r3, r1
    5da2:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    5da4:	2000      	movs	r0, #0
		break;
    5da6:	e7f7      	b.n	5d98 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    5da8:	4a12      	ldr	r2, [pc, #72]	; (5df4 <system_clock_source_disable+0x74>)
    5daa:	8a13      	ldrh	r3, [r2, #16]
    5dac:	2102      	movs	r1, #2
    5dae:	438b      	bics	r3, r1
    5db0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    5db2:	2000      	movs	r0, #0
		break;
    5db4:	e7f0      	b.n	5d98 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    5db6:	4a10      	ldr	r2, [pc, #64]	; (5df8 <system_clock_source_disable+0x78>)
    5db8:	6953      	ldr	r3, [r2, #20]
    5dba:	2102      	movs	r1, #2
    5dbc:	438b      	bics	r3, r1
    5dbe:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    5dc0:	2000      	movs	r0, #0
		break;
    5dc2:	e7e9      	b.n	5d98 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    5dc4:	4b0d      	ldr	r3, [pc, #52]	; (5dfc <system_clock_source_disable+0x7c>)
    5dc6:	681a      	ldr	r2, [r3, #0]
    5dc8:	2102      	movs	r1, #2
    5dca:	438a      	bics	r2, r1
    5dcc:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5dce:	681b      	ldr	r3, [r3, #0]
    5dd0:	b29b      	uxth	r3, r3
    5dd2:	4a08      	ldr	r2, [pc, #32]	; (5df4 <system_clock_source_disable+0x74>)
    5dd4:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    5dd6:	2000      	movs	r0, #0
		break;
    5dd8:	e7de      	b.n	5d98 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    5dda:	4906      	ldr	r1, [pc, #24]	; (5df4 <system_clock_source_disable+0x74>)
    5ddc:	2228      	movs	r2, #40	; 0x28
    5dde:	5c8b      	ldrb	r3, [r1, r2]
    5de0:	2002      	movs	r0, #2
    5de2:	4383      	bics	r3, r0
    5de4:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    5de6:	2000      	movs	r0, #0
		break;
    5de8:	e7d6      	b.n	5d98 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    5dea:	2017      	movs	r0, #23
    5dec:	e7d4      	b.n	5d98 <system_clock_source_disable+0x18>
    5dee:	46c0      	nop			; (mov r8, r8)
    5df0:	00016628 	.word	0x00016628
    5df4:	40000c00 	.word	0x40000c00
    5df8:	40001000 	.word	0x40001000
    5dfc:	200000d0 	.word	0x200000d0

00005e00 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e02:	46d6      	mov	lr, sl
    5e04:	464f      	mov	r7, r9
    5e06:	4646      	mov	r6, r8
    5e08:	b5c0      	push	{r6, r7, lr}
    5e0a:	b088      	sub	sp, #32
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    5e0c:	2280      	movs	r2, #128	; 0x80
    5e0e:	0052      	lsls	r2, r2, #1
    5e10:	4b56      	ldr	r3, [pc, #344]	; (5f6c <system_clock_init+0x16c>)
    5e12:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    5e14:	3afd      	subs	r2, #253	; 0xfd
    5e16:	4b56      	ldr	r3, [pc, #344]	; (5f70 <system_clock_init+0x170>)
    5e18:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5e1a:	4a56      	ldr	r2, [pc, #344]	; (5f74 <system_clock_init+0x174>)
    5e1c:	6853      	ldr	r3, [r2, #4]
    5e1e:	211e      	movs	r1, #30
    5e20:	438b      	bics	r3, r1
    5e22:	391a      	subs	r1, #26
    5e24:	430b      	orrs	r3, r1
    5e26:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    5e28:	2380      	movs	r3, #128	; 0x80
    5e2a:	05db      	lsls	r3, r3, #23
    5e2c:	789b      	ldrb	r3, [r3, #2]
    5e2e:	2b02      	cmp	r3, #2
    5e30:	d00f      	beq.n	5e52 <system_clock_init+0x52>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    5e32:	2380      	movs	r3, #128	; 0x80
    5e34:	05db      	lsls	r3, r3, #23
    5e36:	789b      	ldrb	r3, [r3, #2]
    5e38:	b25b      	sxtb	r3, r3
    5e3a:	2b00      	cmp	r3, #0
    5e3c:	db09      	blt.n	5e52 <system_clock_init+0x52>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    5e3e:	2380      	movs	r3, #128	; 0x80
    5e40:	05db      	lsls	r3, r3, #23
    5e42:	2201      	movs	r2, #1
    5e44:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    5e46:	3201      	adds	r2, #1
    5e48:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    5e4a:	001a      	movs	r2, r3
    5e4c:	7993      	ldrb	r3, [r2, #6]
    5e4e:	2b00      	cmp	r3, #0
    5e50:	d0fc      	beq.n	5e4c <system_clock_init+0x4c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5e52:	a805      	add	r0, sp, #20
    5e54:	2300      	movs	r3, #0
    5e56:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    5e58:	2280      	movs	r2, #128	; 0x80
    5e5a:	0212      	lsls	r2, r2, #8
    5e5c:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    5e5e:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    5e60:	2201      	movs	r2, #1
    5e62:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    5e64:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    5e66:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    5e68:	3203      	adds	r2, #3
    5e6a:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    5e6c:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    5e6e:	4b42      	ldr	r3, [pc, #264]	; (5f78 <system_clock_init+0x178>)
    5e70:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    5e72:	2005      	movs	r0, #5
    5e74:	4b41      	ldr	r3, [pc, #260]	; (5f7c <system_clock_init+0x17c>)
    5e76:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    5e78:	4941      	ldr	r1, [pc, #260]	; (5f80 <system_clock_init+0x180>)
    5e7a:	2201      	movs	r2, #1
    5e7c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    5e7e:	421a      	tst	r2, r3
    5e80:	d0fc      	beq.n	5e7c <system_clock_init+0x7c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    5e82:	4a3f      	ldr	r2, [pc, #252]	; (5f80 <system_clock_init+0x180>)
    5e84:	6953      	ldr	r3, [r2, #20]
    5e86:	2180      	movs	r1, #128	; 0x80
    5e88:	430b      	orrs	r3, r1
    5e8a:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    5e8c:	a902      	add	r1, sp, #8
    5e8e:	2501      	movs	r5, #1
    5e90:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    5e92:	2400      	movs	r4, #0
    5e94:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    5e96:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    5e98:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    5e9a:	2303      	movs	r3, #3
    5e9c:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    5e9e:	2000      	movs	r0, #0
    5ea0:	4b38      	ldr	r3, [pc, #224]	; (5f84 <system_clock_init+0x184>)
    5ea2:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    5ea4:	2006      	movs	r0, #6
    5ea6:	4b38      	ldr	r3, [pc, #224]	; (5f88 <system_clock_init+0x188>)
    5ea8:	4798      	blx	r3
	config->run_in_standby  = false;
    5eaa:	a801      	add	r0, sp, #4
    5eac:	7044      	strb	r4, [r0, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    5eae:	7005      	strb	r5, [r0, #0]
	osc16m_conf.on_demand       = 0;
    5eb0:	7084      	strb	r4, [r0, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    5eb2:	4b36      	ldr	r3, [pc, #216]	; (5f8c <system_clock_init+0x18c>)
    5eb4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    5eb6:	2006      	movs	r0, #6
    5eb8:	4b30      	ldr	r3, [pc, #192]	; (5f7c <system_clock_init+0x17c>)
    5eba:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    5ebc:	492b      	ldr	r1, [pc, #172]	; (5f6c <system_clock_init+0x16c>)
    5ebe:	2210      	movs	r2, #16
    5ec0:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    5ec2:	421a      	tst	r2, r3
    5ec4:	d0fc      	beq.n	5ec0 <system_clock_init+0xc0>
	config->division_factor    = 1;
    5ec6:	ac02      	add	r4, sp, #8
    5ec8:	2601      	movs	r6, #1
    5eca:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    5ecc:	2500      	movs	r5, #0
    5ece:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    5ed0:	2306      	movs	r3, #6
    5ed2:	469a      	mov	sl, r3
    5ed4:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    5ed6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    5ed8:	7265      	strb	r5, [r4, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    5eda:	0021      	movs	r1, r4
    5edc:	2000      	movs	r0, #0
    5ede:	4b29      	ldr	r3, [pc, #164]	; (5f84 <system_clock_init+0x184>)
    5ee0:	4698      	mov	r8, r3
    5ee2:	4798      	blx	r3
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5ee4:	4b2a      	ldr	r3, [pc, #168]	; (5f90 <system_clock_init+0x190>)
    5ee6:	4798      	blx	r3
	config->division_factor    = 1;
    5ee8:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    5eea:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    5eec:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5eee:	2305      	movs	r3, #5
    5ef0:	7023      	strb	r3, [r4, #0]
    5ef2:	7226      	strb	r6, [r4, #8]
    5ef4:	0021      	movs	r1, r4
    5ef6:	2001      	movs	r0, #1
    5ef8:	47c0      	blx	r8
    5efa:	2001      	movs	r0, #1
    5efc:	4b25      	ldr	r3, [pc, #148]	; (5f94 <system_clock_init+0x194>)
    5efe:	4699      	mov	r9, r3
    5f00:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    5f02:	4f25      	ldr	r7, [pc, #148]	; (5f98 <system_clock_init+0x198>)
    5f04:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    5f06:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    5f08:	713e      	strb	r6, [r7, #4]
	config->division_factor    = 1;
    5f0a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    5f0c:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    5f0e:	4653      	mov	r3, sl
    5f10:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    5f12:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    5f14:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5f16:	0021      	movs	r1, r4
    5f18:	2000      	movs	r0, #0
    5f1a:	47c0      	blx	r8
    5f1c:	2000      	movs	r0, #0
    5f1e:	47c8      	blx	r9
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    5f20:	2000      	movs	r0, #0
    5f22:	4b1e      	ldr	r3, [pc, #120]	; (5f9c <system_clock_init+0x19c>)
    5f24:	4798      	blx	r3
    5f26:	7939      	ldrb	r1, [r7, #4]
    5f28:	b2c9      	uxtb	r1, r1
    5f2a:	4b1d      	ldr	r3, [pc, #116]	; (5fa0 <system_clock_init+0x1a0>)
    5f2c:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    5f2e:	4b1d      	ldr	r3, [pc, #116]	; (5fa4 <system_clock_init+0x1a4>)
    5f30:	4298      	cmp	r0, r3
    5f32:	d814      	bhi.n	5f5e <system_clock_init+0x15e>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    5f34:	2380      	movs	r3, #128	; 0x80
    5f36:	05db      	lsls	r3, r3, #23
    5f38:	789b      	ldrb	r3, [r3, #2]
    5f3a:	2b00      	cmp	r3, #0
    5f3c:	d00f      	beq.n	5f5e <system_clock_init+0x15e>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    5f3e:	2380      	movs	r3, #128	; 0x80
    5f40:	05db      	lsls	r3, r3, #23
    5f42:	789b      	ldrb	r3, [r3, #2]
    5f44:	b25b      	sxtb	r3, r3
    5f46:	2b00      	cmp	r3, #0
    5f48:	db09      	blt.n	5f5e <system_clock_init+0x15e>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    5f4a:	2380      	movs	r3, #128	; 0x80
    5f4c:	05db      	lsls	r3, r3, #23
    5f4e:	2201      	movs	r2, #1
    5f50:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    5f52:	2200      	movs	r2, #0
    5f54:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    5f56:	001a      	movs	r2, r3
    5f58:	7993      	ldrb	r3, [r2, #6]
    5f5a:	2b00      	cmp	r3, #0
    5f5c:	d0fc      	beq.n	5f58 <system_clock_init+0x158>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    5f5e:	b008      	add	sp, #32
    5f60:	bc1c      	pop	{r2, r3, r4}
    5f62:	4690      	mov	r8, r2
    5f64:	4699      	mov	r9, r3
    5f66:	46a2      	mov	sl, r4
    5f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f6a:	46c0      	nop			; (mov r8, r8)
    5f6c:	40000c00 	.word	0x40000c00
    5f70:	40001400 	.word	0x40001400
    5f74:	41004000 	.word	0x41004000
    5f78:	00005c29 	.word	0x00005c29
    5f7c:	00005cc5 	.word	0x00005cc5
    5f80:	40001000 	.word	0x40001000
    5f84:	00005fcd 	.word	0x00005fcd
    5f88:	00005d81 	.word	0x00005d81
    5f8c:	00005bf5 	.word	0x00005bf5
    5f90:	00005fa9 	.word	0x00005fa9
    5f94:	00006079 	.word	0x00006079
    5f98:	40000400 	.word	0x40000400
    5f9c:	000060b9 	.word	0x000060b9
    5fa0:	00011d81 	.word	0x00011d81
    5fa4:	00b71b00 	.word	0x00b71b00

00005fa8 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    5fa8:	4a06      	ldr	r2, [pc, #24]	; (5fc4 <system_gclk_init+0x1c>)
    5faa:	6953      	ldr	r3, [r2, #20]
    5fac:	2140      	movs	r1, #64	; 0x40
    5fae:	430b      	orrs	r3, r1
    5fb0:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    5fb2:	2201      	movs	r2, #1
    5fb4:	4b04      	ldr	r3, [pc, #16]	; (5fc8 <system_gclk_init+0x20>)
    5fb6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    5fb8:	0019      	movs	r1, r3
    5fba:	780b      	ldrb	r3, [r1, #0]
    5fbc:	4213      	tst	r3, r2
    5fbe:	d1fc      	bne.n	5fba <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    5fc0:	4770      	bx	lr
    5fc2:	46c0      	nop			; (mov r8, r8)
    5fc4:	40000400 	.word	0x40000400
    5fc8:	40001800 	.word	0x40001800

00005fcc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5fcc:	b570      	push	{r4, r5, r6, lr}
    5fce:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5fd0:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5fd2:	784b      	ldrb	r3, [r1, #1]
    5fd4:	2b00      	cmp	r3, #0
    5fd6:	d002      	beq.n	5fde <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5fd8:	2380      	movs	r3, #128	; 0x80
    5fda:	00db      	lsls	r3, r3, #3
    5fdc:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5fde:	7a4b      	ldrb	r3, [r1, #9]
    5fe0:	2b00      	cmp	r3, #0
    5fe2:	d002      	beq.n	5fea <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5fe4:	2380      	movs	r3, #128	; 0x80
    5fe6:	011b      	lsls	r3, r3, #4
    5fe8:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5fea:	6848      	ldr	r0, [r1, #4]
    5fec:	2801      	cmp	r0, #1
    5fee:	d90f      	bls.n	6010 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5ff0:	1e43      	subs	r3, r0, #1
    5ff2:	4218      	tst	r0, r3
    5ff4:	d131      	bne.n	605a <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5ff6:	2802      	cmp	r0, #2
    5ff8:	d92d      	bls.n	6056 <system_gclk_gen_set_config+0x8a>
    5ffa:	2302      	movs	r3, #2
    5ffc:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    5ffe:	3201      	adds	r2, #1
						mask <<= 1) {
    6000:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    6002:	4298      	cmp	r0, r3
    6004:	d8fb      	bhi.n	5ffe <system_gclk_gen_set_config+0x32>
    6006:	2380      	movs	r3, #128	; 0x80
    6008:	015b      	lsls	r3, r3, #5
    600a:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    600c:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    600e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6010:	7a0b      	ldrb	r3, [r1, #8]
    6012:	2b00      	cmp	r3, #0
    6014:	d002      	beq.n	601c <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6016:	2380      	movs	r3, #128	; 0x80
    6018:	019b      	lsls	r3, r3, #6
    601a:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    601c:	2604      	movs	r6, #4
    601e:	40a6      	lsls	r6, r4
    6020:	4911      	ldr	r1, [pc, #68]	; (6068 <system_gclk_gen_set_config+0x9c>)
    6022:	4a12      	ldr	r2, [pc, #72]	; (606c <system_gclk_gen_set_config+0xa0>)
    6024:	684b      	ldr	r3, [r1, #4]
    6026:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    6028:	421e      	tst	r6, r3
    602a:	d1fb      	bne.n	6024 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    602c:	4b10      	ldr	r3, [pc, #64]	; (6070 <system_gclk_gen_set_config+0xa4>)
    602e:	4798      	blx	r3
    6030:	00a4      	lsls	r4, r4, #2
    6032:	4b0d      	ldr	r3, [pc, #52]	; (6068 <system_gclk_gen_set_config+0x9c>)
    6034:	469c      	mov	ip, r3
    6036:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    6038:	6a22      	ldr	r2, [r4, #32]
    603a:	2380      	movs	r3, #128	; 0x80
    603c:	005b      	lsls	r3, r3, #1
    603e:	401a      	ands	r2, r3
    6040:	432a      	orrs	r2, r5
    6042:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6044:	4661      	mov	r1, ip
    6046:	4a09      	ldr	r2, [pc, #36]	; (606c <system_gclk_gen_set_config+0xa0>)
    6048:	684b      	ldr	r3, [r1, #4]
    604a:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    604c:	421e      	tst	r6, r3
    604e:	d1fb      	bne.n	6048 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    6050:	4b08      	ldr	r3, [pc, #32]	; (6074 <system_gclk_gen_set_config+0xa8>)
    6052:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    6054:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    6056:	2200      	movs	r2, #0
    6058:	e7d5      	b.n	6006 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    605a:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    605c:	2380      	movs	r3, #128	; 0x80
    605e:	009b      	lsls	r3, r3, #2
    6060:	4318      	orrs	r0, r3
    6062:	4305      	orrs	r5, r0
    6064:	e7d4      	b.n	6010 <system_gclk_gen_set_config+0x44>
    6066:	46c0      	nop			; (mov r8, r8)
    6068:	40001800 	.word	0x40001800
    606c:	000007fc 	.word	0x000007fc
    6070:	000044f9 	.word	0x000044f9
    6074:	00004539 	.word	0x00004539

00006078 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6078:	b510      	push	{r4, lr}
    607a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    607c:	2204      	movs	r2, #4
    607e:	4082      	lsls	r2, r0
    6080:	4809      	ldr	r0, [pc, #36]	; (60a8 <system_gclk_gen_enable+0x30>)
    6082:	490a      	ldr	r1, [pc, #40]	; (60ac <system_gclk_gen_enable+0x34>)
    6084:	6843      	ldr	r3, [r0, #4]
    6086:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    6088:	421a      	tst	r2, r3
    608a:	d1fb      	bne.n	6084 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    608c:	4b08      	ldr	r3, [pc, #32]	; (60b0 <system_gclk_gen_enable+0x38>)
    608e:	4798      	blx	r3
    6090:	00a4      	lsls	r4, r4, #2
    6092:	4b05      	ldr	r3, [pc, #20]	; (60a8 <system_gclk_gen_enable+0x30>)
    6094:	469c      	mov	ip, r3
    6096:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    6098:	6a22      	ldr	r2, [r4, #32]
    609a:	2380      	movs	r3, #128	; 0x80
    609c:	005b      	lsls	r3, r3, #1
    609e:	4313      	orrs	r3, r2
    60a0:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    60a2:	4b04      	ldr	r3, [pc, #16]	; (60b4 <system_gclk_gen_enable+0x3c>)
    60a4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    60a6:	bd10      	pop	{r4, pc}
    60a8:	40001800 	.word	0x40001800
    60ac:	000007fc 	.word	0x000007fc
    60b0:	000044f9 	.word	0x000044f9
    60b4:	00004539 	.word	0x00004539

000060b8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    60b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60ba:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    60bc:	2204      	movs	r2, #4
    60be:	4082      	lsls	r2, r0
    60c0:	4812      	ldr	r0, [pc, #72]	; (610c <system_gclk_gen_get_hz+0x54>)
    60c2:	4913      	ldr	r1, [pc, #76]	; (6110 <system_gclk_gen_get_hz+0x58>)
    60c4:	6843      	ldr	r3, [r0, #4]
    60c6:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    60c8:	421a      	tst	r2, r3
    60ca:	d1fb      	bne.n	60c4 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    60cc:	4b11      	ldr	r3, [pc, #68]	; (6114 <system_gclk_gen_get_hz+0x5c>)
    60ce:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    60d0:	4f0e      	ldr	r7, [pc, #56]	; (610c <system_gclk_gen_get_hz+0x54>)
    60d2:	3408      	adds	r4, #8
    60d4:	00a4      	lsls	r4, r4, #2
    60d6:	59e0      	ldr	r0, [r4, r7]
    60d8:	0700      	lsls	r0, r0, #28
    60da:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    60dc:	4b0e      	ldr	r3, [pc, #56]	; (6118 <system_gclk_gen_get_hz+0x60>)
    60de:	4798      	blx	r3
    60e0:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    60e2:	59e5      	ldr	r5, [r4, r7]
    60e4:	04ed      	lsls	r5, r5, #19
    60e6:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    60e8:	59e4      	ldr	r4, [r4, r7]
    60ea:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    60ec:	4b0b      	ldr	r3, [pc, #44]	; (611c <system_gclk_gen_get_hz+0x64>)
    60ee:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    60f0:	2d00      	cmp	r5, #0
    60f2:	d107      	bne.n	6104 <system_gclk_gen_get_hz+0x4c>
    60f4:	2c01      	cmp	r4, #1
    60f6:	d907      	bls.n	6108 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    60f8:	0021      	movs	r1, r4
    60fa:	0030      	movs	r0, r6
    60fc:	4b08      	ldr	r3, [pc, #32]	; (6120 <system_gclk_gen_get_hz+0x68>)
    60fe:	4798      	blx	r3
    6100:	0006      	movs	r6, r0
    6102:	e001      	b.n	6108 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    6104:	3401      	adds	r4, #1
    6106:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    6108:	0030      	movs	r0, r6
    610a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    610c:	40001800 	.word	0x40001800
    6110:	000007fc 	.word	0x000007fc
    6114:	000044f9 	.word	0x000044f9
    6118:	00005b61 	.word	0x00005b61
    611c:	00004539 	.word	0x00004539
    6120:	00011d81 	.word	0x00011d81

00006124 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6124:	b510      	push	{r4, lr}
    6126:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6128:	4b09      	ldr	r3, [pc, #36]	; (6150 <system_gclk_chan_enable+0x2c>)
    612a:	4798      	blx	r3
    612c:	00a0      	lsls	r0, r4, #2
    612e:	4b09      	ldr	r3, [pc, #36]	; (6154 <system_gclk_chan_enable+0x30>)
    6130:	469c      	mov	ip, r3
    6132:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    6134:	2280      	movs	r2, #128	; 0x80
    6136:	5883      	ldr	r3, [r0, r2]
    6138:	2140      	movs	r1, #64	; 0x40
    613a:	430b      	orrs	r3, r1
    613c:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    613e:	3140      	adds	r1, #64	; 0x40
    6140:	3a40      	subs	r2, #64	; 0x40
    6142:	5843      	ldr	r3, [r0, r1]
    6144:	421a      	tst	r2, r3
    6146:	d0fc      	beq.n	6142 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    6148:	4b03      	ldr	r3, [pc, #12]	; (6158 <system_gclk_chan_enable+0x34>)
    614a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    614c:	bd10      	pop	{r4, pc}
    614e:	46c0      	nop			; (mov r8, r8)
    6150:	000044f9 	.word	0x000044f9
    6154:	40001800 	.word	0x40001800
    6158:	00004539 	.word	0x00004539

0000615c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    615c:	b510      	push	{r4, lr}
    615e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6160:	4b09      	ldr	r3, [pc, #36]	; (6188 <system_gclk_chan_disable+0x2c>)
    6162:	4798      	blx	r3
    6164:	00a0      	lsls	r0, r4, #2
    6166:	4b09      	ldr	r3, [pc, #36]	; (618c <system_gclk_chan_disable+0x30>)
    6168:	469c      	mov	ip, r3
    616a:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    616c:	2280      	movs	r2, #128	; 0x80
    616e:	5883      	ldr	r3, [r0, r2]
    6170:	2140      	movs	r1, #64	; 0x40
    6172:	438b      	bics	r3, r1
    6174:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    6176:	3140      	adds	r1, #64	; 0x40
    6178:	3a40      	subs	r2, #64	; 0x40
    617a:	5843      	ldr	r3, [r0, r1]
    617c:	421a      	tst	r2, r3
    617e:	d1fc      	bne.n	617a <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    6180:	4b03      	ldr	r3, [pc, #12]	; (6190 <system_gclk_chan_disable+0x34>)
    6182:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    6184:	bd10      	pop	{r4, pc}
    6186:	46c0      	nop			; (mov r8, r8)
    6188:	000044f9 	.word	0x000044f9
    618c:	40001800 	.word	0x40001800
    6190:	00004539 	.word	0x00004539

00006194 <system_gclk_chan_set_config>:
{
    6194:	b570      	push	{r4, r5, r6, lr}
    6196:	0004      	movs	r4, r0
    6198:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    619a:	4b05      	ldr	r3, [pc, #20]	; (61b0 <system_gclk_chan_set_config+0x1c>)
    619c:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    619e:	782a      	ldrb	r2, [r5, #0]
    61a0:	230f      	movs	r3, #15
    61a2:	4013      	ands	r3, r2
    61a4:	3420      	adds	r4, #32
    61a6:	00a4      	lsls	r4, r4, #2
    61a8:	4a02      	ldr	r2, [pc, #8]	; (61b4 <system_gclk_chan_set_config+0x20>)
    61aa:	50a3      	str	r3, [r4, r2]
}
    61ac:	bd70      	pop	{r4, r5, r6, pc}
    61ae:	46c0      	nop			; (mov r8, r8)
    61b0:	0000615d 	.word	0x0000615d
    61b4:	40001800 	.word	0x40001800

000061b8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    61b8:	b510      	push	{r4, lr}
    61ba:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    61bc:	4b06      	ldr	r3, [pc, #24]	; (61d8 <system_gclk_chan_get_hz+0x20>)
    61be:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    61c0:	3420      	adds	r4, #32
    61c2:	00a4      	lsls	r4, r4, #2
    61c4:	4b05      	ldr	r3, [pc, #20]	; (61dc <system_gclk_chan_get_hz+0x24>)
    61c6:	58e4      	ldr	r4, [r4, r3]
    61c8:	0724      	lsls	r4, r4, #28
    61ca:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    61cc:	4b04      	ldr	r3, [pc, #16]	; (61e0 <system_gclk_chan_get_hz+0x28>)
    61ce:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    61d0:	0020      	movs	r0, r4
    61d2:	4b04      	ldr	r3, [pc, #16]	; (61e4 <system_gclk_chan_get_hz+0x2c>)
    61d4:	4798      	blx	r3
}
    61d6:	bd10      	pop	{r4, pc}
    61d8:	000044f9 	.word	0x000044f9
    61dc:	40001800 	.word	0x40001800
    61e0:	00004539 	.word	0x00004539
    61e4:	000060b9 	.word	0x000060b9

000061e8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    61e8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    61ea:	78d3      	ldrb	r3, [r2, #3]
    61ec:	2b00      	cmp	r3, #0
    61ee:	d135      	bne.n	625c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    61f0:	7813      	ldrb	r3, [r2, #0]
    61f2:	2b80      	cmp	r3, #128	; 0x80
    61f4:	d029      	beq.n	624a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    61f6:	061b      	lsls	r3, r3, #24
    61f8:	2480      	movs	r4, #128	; 0x80
    61fa:	0264      	lsls	r4, r4, #9
    61fc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    61fe:	7854      	ldrb	r4, [r2, #1]
    6200:	2502      	movs	r5, #2
    6202:	43ac      	bics	r4, r5
    6204:	d106      	bne.n	6214 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6206:	7894      	ldrb	r4, [r2, #2]
    6208:	2c00      	cmp	r4, #0
    620a:	d120      	bne.n	624e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    620c:	2480      	movs	r4, #128	; 0x80
    620e:	02a4      	lsls	r4, r4, #10
    6210:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6212:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6214:	7854      	ldrb	r4, [r2, #1]
    6216:	3c01      	subs	r4, #1
    6218:	2c01      	cmp	r4, #1
    621a:	d91c      	bls.n	6256 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    621c:	040d      	lsls	r5, r1, #16
    621e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6220:	24a0      	movs	r4, #160	; 0xa0
    6222:	05e4      	lsls	r4, r4, #23
    6224:	432c      	orrs	r4, r5
    6226:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6228:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    622a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    622c:	24d0      	movs	r4, #208	; 0xd0
    622e:	0624      	lsls	r4, r4, #24
    6230:	432c      	orrs	r4, r5
    6232:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6234:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6236:	78d4      	ldrb	r4, [r2, #3]
    6238:	2c00      	cmp	r4, #0
    623a:	d122      	bne.n	6282 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    623c:	035b      	lsls	r3, r3, #13
    623e:	d51c      	bpl.n	627a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6240:	7893      	ldrb	r3, [r2, #2]
    6242:	2b01      	cmp	r3, #1
    6244:	d01e      	beq.n	6284 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    6246:	6141      	str	r1, [r0, #20]
    6248:	e017      	b.n	627a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    624a:	2300      	movs	r3, #0
    624c:	e7d7      	b.n	61fe <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    624e:	24c0      	movs	r4, #192	; 0xc0
    6250:	02e4      	lsls	r4, r4, #11
    6252:	4323      	orrs	r3, r4
    6254:	e7dd      	b.n	6212 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6256:	4c0d      	ldr	r4, [pc, #52]	; (628c <_system_pinmux_config+0xa4>)
    6258:	4023      	ands	r3, r4
    625a:	e7df      	b.n	621c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    625c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    625e:	040c      	lsls	r4, r1, #16
    6260:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6262:	23a0      	movs	r3, #160	; 0xa0
    6264:	05db      	lsls	r3, r3, #23
    6266:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6268:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    626a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    626c:	23d0      	movs	r3, #208	; 0xd0
    626e:	061b      	lsls	r3, r3, #24
    6270:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6272:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    6274:	78d3      	ldrb	r3, [r2, #3]
    6276:	2b00      	cmp	r3, #0
    6278:	d103      	bne.n	6282 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    627a:	7853      	ldrb	r3, [r2, #1]
    627c:	3b01      	subs	r3, #1
    627e:	2b01      	cmp	r3, #1
    6280:	d902      	bls.n	6288 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    6282:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    6284:	6181      	str	r1, [r0, #24]
    6286:	e7f8      	b.n	627a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    6288:	6081      	str	r1, [r0, #8]
}
    628a:	e7fa      	b.n	6282 <_system_pinmux_config+0x9a>
    628c:	fffbffff 	.word	0xfffbffff

00006290 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6290:	b510      	push	{r4, lr}
    6292:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    6294:	09c1      	lsrs	r1, r0, #7
		return NULL;
    6296:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6298:	2900      	cmp	r1, #0
    629a:	d104      	bne.n	62a6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    629c:	0943      	lsrs	r3, r0, #5
    629e:	01db      	lsls	r3, r3, #7
    62a0:	4905      	ldr	r1, [pc, #20]	; (62b8 <system_pinmux_pin_set_config+0x28>)
    62a2:	468c      	mov	ip, r1
    62a4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    62a6:	241f      	movs	r4, #31
    62a8:	4020      	ands	r0, r4
    62aa:	2101      	movs	r1, #1
    62ac:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    62ae:	0018      	movs	r0, r3
    62b0:	4b02      	ldr	r3, [pc, #8]	; (62bc <system_pinmux_pin_set_config+0x2c>)
    62b2:	4798      	blx	r3
}
    62b4:	bd10      	pop	{r4, pc}
    62b6:	46c0      	nop			; (mov r8, r8)
    62b8:	40002800 	.word	0x40002800
    62bc:	000061e9 	.word	0x000061e9

000062c0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    62c0:	4770      	bx	lr
    62c2:	Address 0x000062c2 is out of bounds.


000062c4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    62c4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    62c6:	4b05      	ldr	r3, [pc, #20]	; (62dc <system_init+0x18>)
    62c8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    62ca:	4b05      	ldr	r3, [pc, #20]	; (62e0 <system_init+0x1c>)
    62cc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    62ce:	4b05      	ldr	r3, [pc, #20]	; (62e4 <system_init+0x20>)
    62d0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    62d2:	4b05      	ldr	r3, [pc, #20]	; (62e8 <system_init+0x24>)
    62d4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    62d6:	4b05      	ldr	r3, [pc, #20]	; (62ec <system_init+0x28>)
    62d8:	4798      	blx	r3
}
    62da:	bd10      	pop	{r4, pc}
    62dc:	00005e01 	.word	0x00005e01
    62e0:	00004569 	.word	0x00004569
    62e4:	000062c1 	.word	0x000062c1
    62e8:	00004de9 	.word	0x00004de9
    62ec:	000062c1 	.word	0x000062c1

000062f0 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    62f0:	1c93      	adds	r3, r2, #2
    62f2:	009b      	lsls	r3, r3, #2
    62f4:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    62f6:	2a02      	cmp	r2, #2
    62f8:	d009      	beq.n	630e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    62fa:	2a03      	cmp	r2, #3
    62fc:	d00c      	beq.n	6318 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    62fe:	2301      	movs	r3, #1
    6300:	4093      	lsls	r3, r2
    6302:	001a      	movs	r2, r3
    6304:	7e03      	ldrb	r3, [r0, #24]
    6306:	4313      	orrs	r3, r2
    6308:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    630a:	2000      	movs	r0, #0
    630c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    630e:	7e03      	ldrb	r3, [r0, #24]
    6310:	2210      	movs	r2, #16
    6312:	4313      	orrs	r3, r2
    6314:	7603      	strb	r3, [r0, #24]
    6316:	e7f8      	b.n	630a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    6318:	7e03      	ldrb	r3, [r0, #24]
    631a:	2220      	movs	r2, #32
    631c:	4313      	orrs	r3, r2
    631e:	7603      	strb	r3, [r0, #24]
    6320:	e7f3      	b.n	630a <tc_register_callback+0x1a>
    6322:	Address 0x00006322 is out of bounds.


00006324 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    6324:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    6326:	0080      	lsls	r0, r0, #2
    6328:	4b16      	ldr	r3, [pc, #88]	; (6384 <_tc_interrupt_handler+0x60>)
    632a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    632c:	6823      	ldr	r3, [r4, #0]
    632e:	7a9d      	ldrb	r5, [r3, #10]
    6330:	7e22      	ldrb	r2, [r4, #24]
    6332:	7e63      	ldrb	r3, [r4, #25]
    6334:	4013      	ands	r3, r2
    6336:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    6338:	07eb      	lsls	r3, r5, #31
    633a:	d406      	bmi.n	634a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    633c:	07ab      	lsls	r3, r5, #30
    633e:	d40b      	bmi.n	6358 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    6340:	06eb      	lsls	r3, r5, #27
    6342:	d410      	bmi.n	6366 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    6344:	06ab      	lsls	r3, r5, #26
    6346:	d415      	bmi.n	6374 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    6348:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    634a:	0020      	movs	r0, r4
    634c:	68a3      	ldr	r3, [r4, #8]
    634e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    6350:	2301      	movs	r3, #1
    6352:	6822      	ldr	r2, [r4, #0]
    6354:	7293      	strb	r3, [r2, #10]
    6356:	e7f1      	b.n	633c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    6358:	0020      	movs	r0, r4
    635a:	68e3      	ldr	r3, [r4, #12]
    635c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    635e:	2302      	movs	r3, #2
    6360:	6822      	ldr	r2, [r4, #0]
    6362:	7293      	strb	r3, [r2, #10]
    6364:	e7ec      	b.n	6340 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    6366:	0020      	movs	r0, r4
    6368:	6923      	ldr	r3, [r4, #16]
    636a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    636c:	2310      	movs	r3, #16
    636e:	6822      	ldr	r2, [r4, #0]
    6370:	7293      	strb	r3, [r2, #10]
    6372:	e7e7      	b.n	6344 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    6374:	0020      	movs	r0, r4
    6376:	6963      	ldr	r3, [r4, #20]
    6378:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    637a:	6823      	ldr	r3, [r4, #0]
    637c:	2220      	movs	r2, #32
    637e:	729a      	strb	r2, [r3, #10]
}
    6380:	e7e2      	b.n	6348 <_tc_interrupt_handler+0x24>
    6382:	46c0      	nop			; (mov r8, r8)
    6384:	20001e70 	.word	0x20001e70

00006388 <TC0_Handler>:
	_TC_INTERRUPT_HANDLER(0,0)
    6388:	b510      	push	{r4, lr}
    638a:	2000      	movs	r0, #0
    638c:	4b01      	ldr	r3, [pc, #4]	; (6394 <TC0_Handler+0xc>)
    638e:	4798      	blx	r3
    6390:	bd10      	pop	{r4, pc}
    6392:	46c0      	nop			; (mov r8, r8)
    6394:	00006325 	.word	0x00006325

00006398 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    6398:	b510      	push	{r4, lr}
    639a:	2001      	movs	r0, #1
    639c:	4b01      	ldr	r3, [pc, #4]	; (63a4 <TC1_Handler+0xc>)
    639e:	4798      	blx	r3
    63a0:	bd10      	pop	{r4, pc}
    63a2:	46c0      	nop			; (mov r8, r8)
    63a4:	00006325 	.word	0x00006325

000063a8 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    63a8:	b510      	push	{r4, lr}
    63aa:	2002      	movs	r0, #2
    63ac:	4b01      	ldr	r3, [pc, #4]	; (63b4 <TC4_Handler+0xc>)
    63ae:	4798      	blx	r3
    63b0:	bd10      	pop	{r4, pc}
    63b2:	46c0      	nop			; (mov r8, r8)
    63b4:	00006325 	.word	0x00006325

000063b8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    63b8:	b530      	push	{r4, r5, lr}
    63ba:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    63bc:	a901      	add	r1, sp, #4
    63be:	4b0c      	ldr	r3, [pc, #48]	; (63f0 <_tc_get_inst_index+0x38>)
    63c0:	000a      	movs	r2, r1
    63c2:	cb32      	ldmia	r3!, {r1, r4, r5}
    63c4:	c232      	stmia	r2!, {r1, r4, r5}
    63c6:	cb12      	ldmia	r3!, {r1, r4}
    63c8:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    63ca:	9b01      	ldr	r3, [sp, #4]
    63cc:	4298      	cmp	r0, r3
    63ce:	d00b      	beq.n	63e8 <_tc_get_inst_index+0x30>
    63d0:	2301      	movs	r3, #1
    63d2:	a901      	add	r1, sp, #4
    63d4:	009a      	lsls	r2, r3, #2
    63d6:	5852      	ldr	r2, [r2, r1]
    63d8:	4282      	cmp	r2, r0
    63da:	d006      	beq.n	63ea <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    63dc:	3301      	adds	r3, #1
    63de:	2b05      	cmp	r3, #5
    63e0:	d1f8      	bne.n	63d4 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    63e2:	2000      	movs	r0, #0
}
    63e4:	b007      	add	sp, #28
    63e6:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    63e8:	2300      	movs	r3, #0
			return i;
    63ea:	b2d8      	uxtb	r0, r3
    63ec:	e7fa      	b.n	63e4 <_tc_get_inst_index+0x2c>
    63ee:	46c0      	nop			; (mov r8, r8)
    63f0:	00016674 	.word	0x00016674

000063f4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    63f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    63f6:	46c6      	mov	lr, r8
    63f8:	b500      	push	{lr}
    63fa:	b08e      	sub	sp, #56	; 0x38
    63fc:	0004      	movs	r4, r0
    63fe:	000d      	movs	r5, r1
    6400:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    6402:	0008      	movs	r0, r1
    6404:	4bae      	ldr	r3, [pc, #696]	; (66c0 <tc_init+0x2cc>)
    6406:	4798      	blx	r3
    6408:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    640a:	ab0c      	add	r3, sp, #48	; 0x30
    640c:	221b      	movs	r2, #27
    640e:	701a      	strb	r2, [r3, #0]
    6410:	705a      	strb	r2, [r3, #1]
    6412:	3201      	adds	r2, #1
    6414:	709a      	strb	r2, [r3, #2]
    6416:	70da      	strb	r2, [r3, #3]
    6418:	3201      	adds	r2, #1
    641a:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    641c:	a902      	add	r1, sp, #8
    641e:	4ba9      	ldr	r3, [pc, #676]	; (66c4 <tc_init+0x2d0>)
    6420:	3314      	adds	r3, #20
    6422:	000a      	movs	r2, r1
    6424:	cb83      	ldmia	r3!, {r0, r1, r7}
    6426:	c283      	stmia	r2!, {r0, r1, r7}
    6428:	cb83      	ldmia	r3!, {r0, r1, r7}
    642a:	c283      	stmia	r2!, {r0, r1, r7}
    642c:	cb83      	ldmia	r3!, {r0, r1, r7}
    642e:	c283      	stmia	r2!, {r0, r1, r7}
    6430:	681b      	ldr	r3, [r3, #0]
    6432:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    6434:	2300      	movs	r3, #0
    6436:	60a3      	str	r3, [r4, #8]
    6438:	60e3      	str	r3, [r4, #12]
    643a:	6123      	str	r3, [r4, #16]
    643c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    643e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    6440:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    6442:	4643      	mov	r3, r8
    6444:	009a      	lsls	r2, r3, #2
    6446:	4ba0      	ldr	r3, [pc, #640]	; (66c8 <tc_init+0x2d4>)
    6448:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    644a:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    644c:	2334      	movs	r3, #52	; 0x34
    644e:	5cf3      	ldrb	r3, [r6, r3]
    6450:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6452:	78f3      	ldrb	r3, [r6, #3]
    6454:	2b08      	cmp	r3, #8
    6456:	d008      	beq.n	646a <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    6458:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    645a:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    645c:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    645e:	07db      	lsls	r3, r3, #31
    6460:	d508      	bpl.n	6474 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    6462:	b00e      	add	sp, #56	; 0x38
    6464:	bc04      	pop	{r2}
    6466:	4690      	mov	r8, r2
    6468:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    646a:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    646c:	4642      	mov	r2, r8
    646e:	07d2      	lsls	r2, r2, #31
    6470:	d4f7      	bmi.n	6462 <tc_init+0x6e>
    6472:	e7f1      	b.n	6458 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6474:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    6476:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6478:	079b      	lsls	r3, r3, #30
    647a:	d4f2      	bmi.n	6462 <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    647c:	682b      	ldr	r3, [r5, #0]
    647e:	079b      	lsls	r3, r3, #30
    6480:	d4ef      	bmi.n	6462 <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    6482:	7c33      	ldrb	r3, [r6, #16]
    6484:	2b00      	cmp	r3, #0
    6486:	d112      	bne.n	64ae <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    6488:	7f33      	ldrb	r3, [r6, #28]
    648a:	2b00      	cmp	r3, #0
    648c:	d11b      	bne.n	64c6 <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    648e:	4643      	mov	r3, r8
    6490:	005a      	lsls	r2, r3, #1
    6492:	a902      	add	r1, sp, #8
    6494:	1c53      	adds	r3, r2, #1
    6496:	009b      	lsls	r3, r3, #2
    6498:	5858      	ldr	r0, [r3, r1]
    649a:	4643      	mov	r3, r8
    649c:	00db      	lsls	r3, r3, #3
    649e:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    64a0:	b2d9      	uxtb	r1, r3
    64a2:	2904      	cmp	r1, #4
    64a4:	d823      	bhi.n	64ee <tc_init+0xfa>
    64a6:	008b      	lsls	r3, r1, #2
    64a8:	4988      	ldr	r1, [pc, #544]	; (66cc <tc_init+0x2d8>)
    64aa:	58cb      	ldr	r3, [r1, r3]
    64ac:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    64ae:	a901      	add	r1, sp, #4
    64b0:	2301      	movs	r3, #1
    64b2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    64b4:	2200      	movs	r2, #0
    64b6:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    64b8:	7e32      	ldrb	r2, [r6, #24]
    64ba:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    64bc:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    64be:	7d30      	ldrb	r0, [r6, #20]
    64c0:	4b83      	ldr	r3, [pc, #524]	; (66d0 <tc_init+0x2dc>)
    64c2:	4798      	blx	r3
    64c4:	e7e0      	b.n	6488 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    64c6:	a901      	add	r1, sp, #4
    64c8:	2301      	movs	r3, #1
    64ca:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    64cc:	2200      	movs	r2, #0
    64ce:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    64d0:	3224      	adds	r2, #36	; 0x24
    64d2:	18b2      	adds	r2, r6, r2
    64d4:	7812      	ldrb	r2, [r2, #0]
    64d6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    64d8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    64da:	331f      	adds	r3, #31
    64dc:	18f3      	adds	r3, r6, r3
    64de:	7818      	ldrb	r0, [r3, #0]
    64e0:	4b7b      	ldr	r3, [pc, #492]	; (66d0 <tc_init+0x2dc>)
    64e2:	4798      	blx	r3
    64e4:	e7d3      	b.n	648e <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    64e6:	497b      	ldr	r1, [pc, #492]	; (66d4 <tc_init+0x2e0>)
    64e8:	694b      	ldr	r3, [r1, #20]
    64ea:	4318      	orrs	r0, r3
    64ec:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    64ee:	78f3      	ldrb	r3, [r6, #3]
    64f0:	2b08      	cmp	r3, #8
    64f2:	d100      	bne.n	64f6 <tc_init+0x102>
    64f4:	e086      	b.n	6604 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    64f6:	7833      	ldrb	r3, [r6, #0]
    64f8:	466a      	mov	r2, sp
    64fa:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    64fc:	ab0c      	add	r3, sp, #48	; 0x30
    64fe:	4642      	mov	r2, r8
    6500:	5c9f      	ldrb	r7, [r3, r2]
    6502:	4669      	mov	r1, sp
    6504:	0038      	movs	r0, r7
    6506:	4b74      	ldr	r3, [pc, #464]	; (66d8 <tc_init+0x2e4>)
    6508:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    650a:	0038      	movs	r0, r7
    650c:	4b73      	ldr	r3, [pc, #460]	; (66dc <tc_init+0x2e8>)
    650e:	4798      	blx	r3
			(uint32_t)config->counter_size |
    6510:	78f3      	ldrb	r3, [r6, #3]
    6512:	79f2      	ldrb	r2, [r6, #7]
    6514:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    6516:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    6518:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    651a:	7a72      	ldrb	r2, [r6, #9]
    651c:	2a00      	cmp	r2, #0
    651e:	d002      	beq.n	6526 <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    6520:	2280      	movs	r2, #128	; 0x80
    6522:	0252      	lsls	r2, r2, #9
    6524:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    6526:	7ab2      	ldrb	r2, [r6, #10]
    6528:	2a00      	cmp	r2, #0
    652a:	d002      	beq.n	6532 <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    652c:	2280      	movs	r2, #128	; 0x80
    652e:	0292      	lsls	r2, r2, #10
    6530:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    6532:	7af2      	ldrb	r2, [r6, #11]
    6534:	2a00      	cmp	r2, #0
    6536:	d002      	beq.n	653e <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6538:	2280      	movs	r2, #128	; 0x80
    653a:	0352      	lsls	r2, r2, #13
    653c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    653e:	7b32      	ldrb	r2, [r6, #12]
    6540:	2a00      	cmp	r2, #0
    6542:	d002      	beq.n	654a <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6544:	2280      	movs	r2, #128	; 0x80
    6546:	0392      	lsls	r2, r2, #14
    6548:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    654a:	7871      	ldrb	r1, [r6, #1]
    654c:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    654e:	78b2      	ldrb	r2, [r6, #2]
    6550:	01d2      	lsls	r2, r2, #7
    6552:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6554:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6556:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    6558:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    655a:	2b00      	cmp	r3, #0
    655c:	d1fc      	bne.n	6558 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    655e:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6560:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6562:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6564:	2b00      	cmp	r3, #0
    6566:	d1fc      	bne.n	6562 <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    6568:	79b3      	ldrb	r3, [r6, #6]
    656a:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    656c:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    656e:	1e4b      	subs	r3, r1, #1
    6570:	4199      	sbcs	r1, r3
    6572:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    6574:	7bb3      	ldrb	r3, [r6, #14]
    6576:	2b00      	cmp	r3, #0
    6578:	d001      	beq.n	657e <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    657a:	2301      	movs	r3, #1
    657c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    657e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6580:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6582:	2b00      	cmp	r3, #0
    6584:	d1fc      	bne.n	6580 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    6586:	33ff      	adds	r3, #255	; 0xff
    6588:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    658a:	2900      	cmp	r1, #0
    658c:	d004      	beq.n	6598 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    658e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6590:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    6592:	2b00      	cmp	r3, #0
    6594:	d1fc      	bne.n	6590 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    6596:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    6598:	7a33      	ldrb	r3, [r6, #8]
    659a:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    659c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    659e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    65a0:	2b00      	cmp	r3, #0
    65a2:	d1fc      	bne.n	659e <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    65a4:	7923      	ldrb	r3, [r4, #4]
    65a6:	2b04      	cmp	r3, #4
    65a8:	d059      	beq.n	665e <tc_init+0x26a>
    65aa:	2b08      	cmp	r3, #8
    65ac:	d074      	beq.n	6698 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    65ae:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    65b0:	2b00      	cmp	r3, #0
    65b2:	d000      	beq.n	65b6 <tc_init+0x1c2>
    65b4:	e755      	b.n	6462 <tc_init+0x6e>
    65b6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    65b8:	2b00      	cmp	r3, #0
    65ba:	d1fc      	bne.n	65b6 <tc_init+0x1c2>
				= config->counter_16_bit.value;
    65bc:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    65be:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    65c0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    65c2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    65c4:	2b00      	cmp	r3, #0
    65c6:	d1fc      	bne.n	65c2 <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    65c8:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    65ca:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    65cc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    65ce:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    65d0:	2b00      	cmp	r3, #0
    65d2:	d1fc      	bne.n	65ce <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    65d4:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    65d6:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    65d8:	2000      	movs	r0, #0
    65da:	e742      	b.n	6462 <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    65dc:	493d      	ldr	r1, [pc, #244]	; (66d4 <tc_init+0x2e0>)
    65de:	698b      	ldr	r3, [r1, #24]
    65e0:	4318      	orrs	r0, r3
    65e2:	6188      	str	r0, [r1, #24]
    65e4:	e783      	b.n	64ee <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    65e6:	493b      	ldr	r1, [pc, #236]	; (66d4 <tc_init+0x2e0>)
    65e8:	69cb      	ldr	r3, [r1, #28]
    65ea:	4318      	orrs	r0, r3
    65ec:	61c8      	str	r0, [r1, #28]
    65ee:	e77e      	b.n	64ee <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    65f0:	4938      	ldr	r1, [pc, #224]	; (66d4 <tc_init+0x2e0>)
    65f2:	6a0b      	ldr	r3, [r1, #32]
    65f4:	4318      	orrs	r0, r3
    65f6:	6208      	str	r0, [r1, #32]
    65f8:	e779      	b.n	64ee <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    65fa:	4b36      	ldr	r3, [pc, #216]	; (66d4 <tc_init+0x2e0>)
    65fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
    65fe:	4308      	orrs	r0, r1
    6600:	6258      	str	r0, [r3, #36]	; 0x24
    6602:	e774      	b.n	64ee <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    6604:	4643      	mov	r3, r8
    6606:	3301      	adds	r3, #1
    6608:	2b04      	cmp	r3, #4
    660a:	dd00      	ble.n	660e <tc_init+0x21a>
    660c:	e773      	b.n	64f6 <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    660e:	ab02      	add	r3, sp, #8
    6610:	1cd1      	adds	r1, r2, #3
    6612:	0089      	lsls	r1, r1, #2
    6614:	58c9      	ldr	r1, [r1, r3]
    6616:	3202      	adds	r2, #2
    6618:	0092      	lsls	r2, r2, #2
    661a:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    661c:	b2da      	uxtb	r2, r3
    661e:	2a04      	cmp	r2, #4
    6620:	d900      	bls.n	6624 <tc_init+0x230>
    6622:	e768      	b.n	64f6 <tc_init+0x102>
    6624:	0093      	lsls	r3, r2, #2
    6626:	4a2e      	ldr	r2, [pc, #184]	; (66e0 <tc_init+0x2ec>)
    6628:	58d3      	ldr	r3, [r2, r3]
    662a:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    662c:	4a29      	ldr	r2, [pc, #164]	; (66d4 <tc_init+0x2e0>)
    662e:	6953      	ldr	r3, [r2, #20]
    6630:	4319      	orrs	r1, r3
    6632:	6151      	str	r1, [r2, #20]
    6634:	e75f      	b.n	64f6 <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    6636:	4a27      	ldr	r2, [pc, #156]	; (66d4 <tc_init+0x2e0>)
    6638:	6993      	ldr	r3, [r2, #24]
    663a:	4319      	orrs	r1, r3
    663c:	6191      	str	r1, [r2, #24]
    663e:	e75a      	b.n	64f6 <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    6640:	4a24      	ldr	r2, [pc, #144]	; (66d4 <tc_init+0x2e0>)
    6642:	69d3      	ldr	r3, [r2, #28]
    6644:	4319      	orrs	r1, r3
    6646:	61d1      	str	r1, [r2, #28]
    6648:	e755      	b.n	64f6 <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    664a:	4a22      	ldr	r2, [pc, #136]	; (66d4 <tc_init+0x2e0>)
    664c:	6a13      	ldr	r3, [r2, #32]
    664e:	4319      	orrs	r1, r3
    6650:	6211      	str	r1, [r2, #32]
    6652:	e750      	b.n	64f6 <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    6654:	4b1f      	ldr	r3, [pc, #124]	; (66d4 <tc_init+0x2e0>)
    6656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6658:	4311      	orrs	r1, r2
    665a:	6259      	str	r1, [r3, #36]	; 0x24
    665c:	e74b      	b.n	64f6 <tc_init+0x102>
    665e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6660:	2b00      	cmp	r3, #0
    6662:	d1fc      	bne.n	665e <tc_init+0x26a>
					config->counter_8_bit.value;
    6664:	3328      	adds	r3, #40	; 0x28
    6666:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    6668:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    666a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    666c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    666e:	2b00      	cmp	r3, #0
    6670:	d1fc      	bne.n	666c <tc_init+0x278>
					config->counter_8_bit.period;
    6672:	3329      	adds	r3, #41	; 0x29
    6674:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    6676:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6678:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    667a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    667c:	2b00      	cmp	r3, #0
    667e:	d1fc      	bne.n	667a <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    6680:	332a      	adds	r3, #42	; 0x2a
    6682:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    6684:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6686:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6688:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    668a:	2b00      	cmp	r3, #0
    668c:	d1fc      	bne.n	6688 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    668e:	332b      	adds	r3, #43	; 0x2b
    6690:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    6692:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    6694:	2000      	movs	r0, #0
    6696:	e6e4      	b.n	6462 <tc_init+0x6e>
    6698:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    669a:	2b00      	cmp	r3, #0
    669c:	d1fc      	bne.n	6698 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    669e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    66a0:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    66a2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    66a4:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    66a6:	2b00      	cmp	r3, #0
    66a8:	d1fc      	bne.n	66a4 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    66aa:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    66ac:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    66ae:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    66b0:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    66b2:	2b00      	cmp	r3, #0
    66b4:	d1fc      	bne.n	66b0 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    66b6:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    66b8:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    66ba:	2000      	movs	r0, #0
    66bc:	e6d1      	b.n	6462 <tc_init+0x6e>
    66be:	46c0      	nop			; (mov r8, r8)
    66c0:	000063b9 	.word	0x000063b9
    66c4:	00016674 	.word	0x00016674
    66c8:	20001e70 	.word	0x20001e70
    66cc:	0001664c 	.word	0x0001664c
    66d0:	00006291 	.word	0x00006291
    66d4:	40000400 	.word	0x40000400
    66d8:	00006195 	.word	0x00006195
    66dc:	00006125 	.word	0x00006125
    66e0:	00016660 	.word	0x00016660

000066e4 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    66e4:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    66e6:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    66e8:	2b00      	cmp	r3, #0
    66ea:	d1fc      	bne.n	66e6 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    66ec:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    66ee:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    66f0:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    66f2:	2b00      	cmp	r3, #0
    66f4:	d1fc      	bne.n	66f0 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    66f6:	3380      	adds	r3, #128	; 0x80
    66f8:	7153      	strb	r3, [r2, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30) || (SAMR34) || (WLR089)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
    66fa:	7953      	ldrb	r3, [r2, #5]
    66fc:	b25b      	sxtb	r3, r3
    66fe:	2b00      	cmp	r3, #0
    6700:	dbfb      	blt.n	66fa <tc_get_count_value+0x16>

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    6702:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    6704:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    6706:	2b00      	cmp	r3, #0
    6708:	d1fc      	bne.n	6704 <tc_get_count_value+0x20>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    670a:	7903      	ldrb	r3, [r0, #4]
    670c:	2b04      	cmp	r3, #4
    670e:	d005      	beq.n	671c <tc_get_count_value+0x38>
    6710:	2b08      	cmp	r3, #8
    6712:	d009      	beq.n	6728 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    6714:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    6716:	2b00      	cmp	r3, #0
    6718:	d003      	beq.n	6722 <tc_get_count_value+0x3e>
}
    671a:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    671c:	7d10      	ldrb	r0, [r2, #20]
    671e:	b2c0      	uxtb	r0, r0
    6720:	e7fb      	b.n	671a <tc_get_count_value+0x36>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    6722:	8a90      	ldrh	r0, [r2, #20]
    6724:	b280      	uxth	r0, r0
    6726:	e7f8      	b.n	671a <tc_get_count_value+0x36>
			return tc_module->COUNT32.COUNT.reg;
    6728:	6950      	ldr	r0, [r2, #20]
    672a:	e7f6      	b.n	671a <tc_get_count_value+0x36>

0000672c <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    672c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    672e:	6804      	ldr	r4, [r0, #0]
    6730:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    6732:	2b00      	cmp	r3, #0
    6734:	d1fc      	bne.n	6730 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    6736:	7903      	ldrb	r3, [r0, #4]
    6738:	2b04      	cmp	r3, #4
    673a:	d006      	beq.n	674a <tc_set_compare_value+0x1e>
    673c:	2b08      	cmp	r3, #8
    673e:	d028      	beq.n	6792 <tc_set_compare_value+0x66>
    6740:	2b00      	cmp	r3, #0
    6742:	d013      	beq.n	676c <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    6744:	2317      	movs	r3, #23
}
    6746:	0018      	movs	r0, r3
    6748:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    674a:	2317      	movs	r3, #23
			if (channel_index <
    674c:	2901      	cmp	r1, #1
    674e:	d8fa      	bhi.n	6746 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    6750:	7e83      	ldrb	r3, [r0, #26]
    6752:	2b00      	cmp	r3, #0
    6754:	d005      	beq.n	6762 <tc_set_compare_value+0x36>
							(uint8_t)compare;
    6756:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    6758:	1861      	adds	r1, r4, r1
    675a:	3130      	adds	r1, #48	; 0x30
    675c:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    675e:	2300      	movs	r3, #0
    6760:	e7f1      	b.n	6746 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    6762:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    6764:	1864      	adds	r4, r4, r1
    6766:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    6768:	2300      	movs	r3, #0
    676a:	e7ec      	b.n	6746 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    676c:	2317      	movs	r3, #23
			if (channel_index <
    676e:	2901      	cmp	r1, #1
    6770:	d8e9      	bhi.n	6746 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    6772:	7e83      	ldrb	r3, [r0, #26]
    6774:	2b00      	cmp	r3, #0
    6776:	d005      	beq.n	6784 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    6778:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    677a:	3118      	adds	r1, #24
    677c:	0049      	lsls	r1, r1, #1
    677e:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    6780:	2300      	movs	r3, #0
    6782:	e7e0      	b.n	6746 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    6784:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    6786:	310c      	adds	r1, #12
    6788:	0049      	lsls	r1, r1, #1
    678a:	1864      	adds	r4, r4, r1
    678c:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    678e:	2300      	movs	r3, #0
    6790:	e7d9      	b.n	6746 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    6792:	2317      	movs	r3, #23
			if (channel_index <
    6794:	2901      	cmp	r1, #1
    6796:	d8d6      	bhi.n	6746 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    6798:	7e83      	ldrb	r3, [r0, #26]
    679a:	2b00      	cmp	r3, #0
    679c:	d105      	bne.n	67aa <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    679e:	3106      	adds	r1, #6
    67a0:	0089      	lsls	r1, r1, #2
    67a2:	1864      	adds	r4, r4, r1
    67a4:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    67a6:	2300      	movs	r3, #0
    67a8:	e7cd      	b.n	6746 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    67aa:	310c      	adds	r1, #12
    67ac:	0089      	lsls	r1, r1, #2
    67ae:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    67b0:	2300      	movs	r3, #0
    67b2:	e7c8      	b.n	6746 <tc_set_compare_value+0x1a>

000067b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    67b4:	e7fe      	b.n	67b4 <Dummy_Handler>
    67b6:	Address 0x000067b6 is out of bounds.


000067b8 <Reset_Handler>:
{
    67b8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    67ba:	4a1a      	ldr	r2, [pc, #104]	; (6824 <Reset_Handler+0x6c>)
    67bc:	4b1a      	ldr	r3, [pc, #104]	; (6828 <Reset_Handler+0x70>)
    67be:	429a      	cmp	r2, r3
    67c0:	d011      	beq.n	67e6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    67c2:	001a      	movs	r2, r3
    67c4:	4b19      	ldr	r3, [pc, #100]	; (682c <Reset_Handler+0x74>)
    67c6:	429a      	cmp	r2, r3
    67c8:	d20d      	bcs.n	67e6 <Reset_Handler+0x2e>
    67ca:	4a19      	ldr	r2, [pc, #100]	; (6830 <Reset_Handler+0x78>)
    67cc:	3303      	adds	r3, #3
    67ce:	1a9b      	subs	r3, r3, r2
    67d0:	089b      	lsrs	r3, r3, #2
    67d2:	3301      	adds	r3, #1
    67d4:	009b      	lsls	r3, r3, #2
    67d6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    67d8:	4813      	ldr	r0, [pc, #76]	; (6828 <Reset_Handler+0x70>)
    67da:	4912      	ldr	r1, [pc, #72]	; (6824 <Reset_Handler+0x6c>)
    67dc:	588c      	ldr	r4, [r1, r2]
    67de:	5084      	str	r4, [r0, r2]
    67e0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    67e2:	429a      	cmp	r2, r3
    67e4:	d1fa      	bne.n	67dc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    67e6:	4a13      	ldr	r2, [pc, #76]	; (6834 <Reset_Handler+0x7c>)
    67e8:	4b13      	ldr	r3, [pc, #76]	; (6838 <Reset_Handler+0x80>)
    67ea:	429a      	cmp	r2, r3
    67ec:	d20a      	bcs.n	6804 <Reset_Handler+0x4c>
    67ee:	43d3      	mvns	r3, r2
    67f0:	4911      	ldr	r1, [pc, #68]	; (6838 <Reset_Handler+0x80>)
    67f2:	185b      	adds	r3, r3, r1
    67f4:	2103      	movs	r1, #3
    67f6:	438b      	bics	r3, r1
    67f8:	3304      	adds	r3, #4
    67fa:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    67fc:	2100      	movs	r1, #0
    67fe:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6800:	4293      	cmp	r3, r2
    6802:	d1fc      	bne.n	67fe <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6804:	4a0d      	ldr	r2, [pc, #52]	; (683c <Reset_Handler+0x84>)
    6806:	21ff      	movs	r1, #255	; 0xff
    6808:	4b0d      	ldr	r3, [pc, #52]	; (6840 <Reset_Handler+0x88>)
    680a:	438b      	bics	r3, r1
    680c:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    680e:	4a0d      	ldr	r2, [pc, #52]	; (6844 <Reset_Handler+0x8c>)
    6810:	6853      	ldr	r3, [r2, #4]
    6812:	397f      	subs	r1, #127	; 0x7f
    6814:	430b      	orrs	r3, r1
    6816:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    6818:	4b0b      	ldr	r3, [pc, #44]	; (6848 <Reset_Handler+0x90>)
    681a:	4798      	blx	r3
        main();
    681c:	4b0b      	ldr	r3, [pc, #44]	; (684c <Reset_Handler+0x94>)
    681e:	4798      	blx	r3
    6820:	e7fe      	b.n	6820 <Reset_Handler+0x68>
    6822:	46c0      	nop			; (mov r8, r8)
    6824:	00016fe8 	.word	0x00016fe8
    6828:	20000000 	.word	0x20000000
    682c:	20000080 	.word	0x20000080
    6830:	20000004 	.word	0x20000004
    6834:	20000080 	.word	0x20000080
    6838:	20003e40 	.word	0x20003e40
    683c:	e000ed00 	.word	0xe000ed00
    6840:	00000000 	.word	0x00000000
    6844:	41004000 	.word	0x41004000
    6848:	00014f7d 	.word	0x00014f7d
    684c:	0000706d 	.word	0x0000706d

00006850 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6850:	b5f0      	push	{r4, r5, r6, r7, lr}
    6852:	46c6      	mov	lr, r8
    6854:	b500      	push	{lr}
    6856:	000c      	movs	r4, r1
    6858:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    685a:	2800      	cmp	r0, #0
    685c:	d10f      	bne.n	687e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    685e:	2a00      	cmp	r2, #0
    6860:	dd11      	ble.n	6886 <_read+0x36>
    6862:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    6864:	4e09      	ldr	r6, [pc, #36]	; (688c <_read+0x3c>)
    6866:	4d0a      	ldr	r5, [pc, #40]	; (6890 <_read+0x40>)
    6868:	6830      	ldr	r0, [r6, #0]
    686a:	0021      	movs	r1, r4
    686c:	682b      	ldr	r3, [r5, #0]
    686e:	4798      	blx	r3
		ptr++;
    6870:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    6872:	42bc      	cmp	r4, r7
    6874:	d1f8      	bne.n	6868 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    6876:	4640      	mov	r0, r8
    6878:	bc04      	pop	{r2}
    687a:	4690      	mov	r8, r2
    687c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    687e:	2301      	movs	r3, #1
    6880:	425b      	negs	r3, r3
    6882:	4698      	mov	r8, r3
    6884:	e7f7      	b.n	6876 <_read+0x26>
	for (; len > 0; --len) {
    6886:	4680      	mov	r8, r0
    6888:	e7f5      	b.n	6876 <_read+0x26>
    688a:	46c0      	nop			; (mov r8, r8)
    688c:	20001e8c 	.word	0x20001e8c
    6890:	20001e84 	.word	0x20001e84

00006894 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6894:	b5f0      	push	{r4, r5, r6, r7, lr}
    6896:	46c6      	mov	lr, r8
    6898:	b500      	push	{lr}
    689a:	000e      	movs	r6, r1
    689c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    689e:	3801      	subs	r0, #1
    68a0:	2802      	cmp	r0, #2
    68a2:	d810      	bhi.n	68c6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    68a4:	2a00      	cmp	r2, #0
    68a6:	d011      	beq.n	68cc <_write+0x38>
    68a8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    68aa:	4b0c      	ldr	r3, [pc, #48]	; (68dc <_write+0x48>)
    68ac:	4698      	mov	r8, r3
    68ae:	4f0c      	ldr	r7, [pc, #48]	; (68e0 <_write+0x4c>)
    68b0:	4643      	mov	r3, r8
    68b2:	6818      	ldr	r0, [r3, #0]
    68b4:	5d31      	ldrb	r1, [r6, r4]
    68b6:	683b      	ldr	r3, [r7, #0]
    68b8:	4798      	blx	r3
    68ba:	2800      	cmp	r0, #0
    68bc:	db08      	blt.n	68d0 <_write+0x3c>
			return -1;
		}
		++nChars;
    68be:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    68c0:	42a5      	cmp	r5, r4
    68c2:	d1f5      	bne.n	68b0 <_write+0x1c>
    68c4:	e006      	b.n	68d4 <_write+0x40>
		return -1;
    68c6:	2401      	movs	r4, #1
    68c8:	4264      	negs	r4, r4
    68ca:	e003      	b.n	68d4 <_write+0x40>
	for (; len != 0; --len) {
    68cc:	0014      	movs	r4, r2
    68ce:	e001      	b.n	68d4 <_write+0x40>
			return -1;
    68d0:	2401      	movs	r4, #1
    68d2:	4264      	negs	r4, r4
	}
	return nChars;
}
    68d4:	0020      	movs	r0, r4
    68d6:	bc04      	pop	{r2}
    68d8:	4690      	mov	r8, r2
    68da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68dc:	20001e8c 	.word	0x20001e8c
    68e0:	20001e88 	.word	0x20001e88

000068e4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    68e4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    68e6:	4a06      	ldr	r2, [pc, #24]	; (6900 <_sbrk+0x1c>)
    68e8:	6812      	ldr	r2, [r2, #0]
    68ea:	2a00      	cmp	r2, #0
    68ec:	d004      	beq.n	68f8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    68ee:	4a04      	ldr	r2, [pc, #16]	; (6900 <_sbrk+0x1c>)
    68f0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    68f2:	18c3      	adds	r3, r0, r3
    68f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    68f6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    68f8:	4902      	ldr	r1, [pc, #8]	; (6904 <_sbrk+0x20>)
    68fa:	4a01      	ldr	r2, [pc, #4]	; (6900 <_sbrk+0x1c>)
    68fc:	6011      	str	r1, [r2, #0]
    68fe:	e7f6      	b.n	68ee <_sbrk+0xa>
    6900:	200000e8 	.word	0x200000e8
    6904:	20005e40 	.word	0x20005e40

00006908 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    6908:	2001      	movs	r0, #1
    690a:	4240      	negs	r0, r0
    690c:	4770      	bx	lr

0000690e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    690e:	2380      	movs	r3, #128	; 0x80
    6910:	019b      	lsls	r3, r3, #6
    6912:	604b      	str	r3, [r1, #4]

	return 0;
}
    6914:	2000      	movs	r0, #0
    6916:	4770      	bx	lr

00006918 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    6918:	2001      	movs	r0, #1
    691a:	4770      	bx	lr

0000691c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    691c:	2000      	movs	r0, #0
    691e:	4770      	bx	lr

00006920 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    6920:	be00      	bkpt	0x0000
    6922:	e7fe      	b.n	6922 <_exit+0x2>

00006924 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    6924:	4770      	bx	lr

00006926 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    6926:	2001      	movs	r0, #1
    6928:	4240      	negs	r0, r0
    692a:	4770      	bx	lr

0000692c <sal_FillSubKey>:
		}
	}
}

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
    692c:	b530      	push	{r4, r5, lr}
	uint8_t i = 0;
	uint8_t carry = 0;

	i=size;

	while(i--)
    692e:	1e53      	subs	r3, r2, #1
    6930:	b2db      	uxtb	r3, r3
    6932:	2a00      	cmp	r2, #0
    6934:	d00b      	beq.n	694e <sal_FillSubKey+0x22>
    6936:	2400      	movs	r4, #0
	{
		key[i] = (source[i] << 1) | carry;
    6938:	18c5      	adds	r5, r0, r3
    693a:	782a      	ldrb	r2, [r5, #0]
    693c:	0052      	lsls	r2, r2, #1
    693e:	4322      	orrs	r2, r4
    6940:	54ca      	strb	r2, [r1, r3]
		carry = !!(source[i] & 0x80);
    6942:	782c      	ldrb	r4, [r5, #0]
    6944:	09e4      	lsrs	r4, r4, #7
	while(i--)
    6946:	3b01      	subs	r3, #1
    6948:	b2db      	uxtb	r3, r3
    694a:	2bff      	cmp	r3, #255	; 0xff
    694c:	d1f4      	bne.n	6938 <sal_FillSubKey+0xc>
	}
}
    694e:	bd30      	pop	{r4, r5, pc}

00006950 <SAL_AESEncode>:
{
    6950:	b510      	push	{r4, lr}
    6952:	b084      	sub	sp, #16
    6954:	0004      	movs	r4, r0
    6956:	0011      	movs	r1, r2
	memcpy(useKey, key, sizeof(useKey));
    6958:	2210      	movs	r2, #16
    695a:	4668      	mov	r0, sp
    695c:	4b04      	ldr	r3, [pc, #16]	; (6970 <SAL_AESEncode+0x20>)
    695e:	4798      	blx	r3
	AESEncode(buffer, useKey);
    6960:	4669      	mov	r1, sp
    6962:	0020      	movs	r0, r4
    6964:	4b03      	ldr	r3, [pc, #12]	; (6974 <SAL_AESEncode+0x24>)
    6966:	4798      	blx	r3
}
    6968:	2000      	movs	r0, #0
    696a:	b004      	add	sp, #16
    696c:	bd10      	pop	{r4, pc}
    696e:	46c0      	nop			; (mov r8, r8)
    6970:	00014fe3 	.word	0x00014fe3
    6974:	0000b7c1 	.word	0x0000b7c1

00006978 <SAL_DeriveSessionKey>:
{
    6978:	b510      	push	{r4, lr}
	sal_status = SAL_AESEncode(block, src_key, key);
    697a:	4b01      	ldr	r3, [pc, #4]	; (6980 <SAL_DeriveSessionKey+0x8>)
    697c:	4798      	blx	r3
}
    697e:	bd10      	pop	{r4, pc}
    6980:	00006951 	.word	0x00006951

00006984 <SAL_Read>:
}
    6984:	2000      	movs	r0, #0
    6986:	4770      	bx	lr

00006988 <SAL_AESCmac>:
{
    6988:	b5f0      	push	{r4, r5, r6, r7, lr}
    698a:	46d6      	mov	lr, sl
    698c:	464f      	mov	r7, r9
    698e:	4646      	mov	r6, r8
    6990:	b5c0      	push	{r6, r7, lr}
    6992:	b0a4      	sub	sp, #144	; 0x90
    6994:	9001      	str	r0, [sp, #4]
    6996:	000f      	movs	r7, r1
    6998:	9102      	str	r1, [sp, #8]
    699a:	9203      	str	r2, [sp, #12]
    699c:	469a      	mov	sl, r3
    699e:	ab2c      	add	r3, sp, #176	; 0xb0
    69a0:	881c      	ldrh	r4, [r3, #0]
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    69a2:	ae08      	add	r6, sp, #32
    69a4:	2210      	movs	r2, #16
    69a6:	2100      	movs	r1, #0
    69a8:	0030      	movs	r0, r6
    69aa:	4d64      	ldr	r5, [pc, #400]	; (6b3c <SAL_AESCmac+0x1b4>)
    69ac:	47a8      	blx	r5
    69ae:	2387      	movs	r3, #135	; 0x87
    69b0:	73f3      	strb	r3, [r6, #15]
	memset(l, 0, sizeof(l));
    69b2:	2210      	movs	r2, #16
    69b4:	2100      	movs	r1, #0
    69b6:	a804      	add	r0, sp, #16
    69b8:	47a8      	blx	r5
	SAL_AESEncode(l, key_type, key);
    69ba:	9a01      	ldr	r2, [sp, #4]
    69bc:	0039      	movs	r1, r7
    69be:	a804      	add	r0, sp, #16
    69c0:	4b5f      	ldr	r3, [pc, #380]	; (6b40 <SAL_AESCmac+0x1b8>)
    69c2:	4798      	blx	r3
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
    69c4:	ab04      	add	r3, sp, #16
    69c6:	781b      	ldrb	r3, [r3, #0]
    69c8:	2b7f      	cmp	r3, #127	; 0x7f
    69ca:	d82d      	bhi.n	6a28 <SAL_AESCmac+0xa0>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    69cc:	2210      	movs	r2, #16
    69ce:	a920      	add	r1, sp, #128	; 0x80
    69d0:	a804      	add	r0, sp, #16
    69d2:	4b5c      	ldr	r3, [pc, #368]	; (6b44 <SAL_AESCmac+0x1bc>)
    69d4:	4798      	blx	r3
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
    69d6:	ab20      	add	r3, sp, #128	; 0x80
    69d8:	781b      	ldrb	r3, [r3, #0]
    69da:	2b7f      	cmp	r3, #127	; 0x7f
    69dc:	d834      	bhi.n	6a48 <SAL_AESCmac+0xc0>
		sal_FillSubKey( k1, k2, (sizeof(l)) );
    69de:	2210      	movs	r2, #16
    69e0:	a91c      	add	r1, sp, #112	; 0x70
    69e2:	a820      	add	r0, sp, #128	; 0x80
    69e4:	4b57      	ldr	r3, [pc, #348]	; (6b44 <SAL_AESCmac+0x1bc>)
    69e6:	4798      	blx	r3
	n = (size + 15) >> 4;
    69e8:	0023      	movs	r3, r4
    69ea:	330f      	adds	r3, #15
    69ec:	111d      	asrs	r5, r3, #4
    69ee:	b2aa      	uxth	r2, r5
    69f0:	4690      	mov	r8, r2
	if (n == 0)
    69f2:	2a00      	cmp	r2, #0
    69f4:	d038      	beq.n	6a68 <SAL_AESCmac+0xe0>
	if ( flag == 1 )
    69f6:	0722      	lsls	r2, r4, #28
    69f8:	d138      	bne.n	6a6c <SAL_AESCmac+0xe4>
		for (i=((n-1) << 4); i<(n << 4); i++)
    69fa:	4642      	mov	r2, r8
    69fc:	3a01      	subs	r2, #1
    69fe:	0112      	lsls	r2, r2, #4
    6a00:	b296      	uxth	r6, r2
    6a02:	4f51      	ldr	r7, [pc, #324]	; (6b48 <SAL_AESCmac+0x1c0>)
    6a04:	401f      	ands	r7, r3
    6a06:	42be      	cmp	r6, r7
    6a08:	da54      	bge.n	6ab4 <SAL_AESCmac+0x12c>
    6a0a:	0033      	movs	r3, r6
			mLast[j] = input[i] ^ k1[j];
    6a0c:	a910      	add	r1, sp, #64	; 0x40
    6a0e:	aa20      	add	r2, sp, #128	; 0x80
    6a10:	1b98      	subs	r0, r3, r6
    6a12:	b280      	uxth	r0, r0
    6a14:	4654      	mov	r4, sl
    6a16:	5ce4      	ldrb	r4, [r4, r3]
    6a18:	5c15      	ldrb	r5, [r2, r0]
    6a1a:	406c      	eors	r4, r5
    6a1c:	540c      	strb	r4, [r1, r0]
		for (i=((n-1) << 4); i<(n << 4); i++)
    6a1e:	3301      	adds	r3, #1
    6a20:	b29b      	uxth	r3, r3
    6a22:	42bb      	cmp	r3, r7
    6a24:	dbf4      	blt.n	6a10 <SAL_AESCmac+0x88>
    6a26:	e045      	b.n	6ab4 <SAL_AESCmac+0x12c>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    6a28:	2210      	movs	r2, #16
    6a2a:	a920      	add	r1, sp, #128	; 0x80
    6a2c:	a804      	add	r0, sp, #16
    6a2e:	4b45      	ldr	r3, [pc, #276]	; (6b44 <SAL_AESCmac+0x1bc>)
    6a30:	4798      	blx	r3
    6a32:	2300      	movs	r3, #0
			k1[i] ^= const_Rb[i];
    6a34:	aa20      	add	r2, sp, #128	; 0x80
    6a36:	a908      	add	r1, sp, #32
    6a38:	5c98      	ldrb	r0, [r3, r2]
    6a3a:	5c5d      	ldrb	r5, [r3, r1]
    6a3c:	4068      	eors	r0, r5
    6a3e:	5498      	strb	r0, [r3, r2]
    6a40:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    6a42:	2b10      	cmp	r3, #16
    6a44:	d1f8      	bne.n	6a38 <SAL_AESCmac+0xb0>
    6a46:	e7c6      	b.n	69d6 <SAL_AESCmac+0x4e>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
    6a48:	2210      	movs	r2, #16
    6a4a:	a91c      	add	r1, sp, #112	; 0x70
    6a4c:	a820      	add	r0, sp, #128	; 0x80
    6a4e:	4b3d      	ldr	r3, [pc, #244]	; (6b44 <SAL_AESCmac+0x1bc>)
    6a50:	4798      	blx	r3
    6a52:	2300      	movs	r3, #0
			k2[i] = k2[i] ^ const_Rb[i];
    6a54:	aa1c      	add	r2, sp, #112	; 0x70
    6a56:	a908      	add	r1, sp, #32
    6a58:	5c98      	ldrb	r0, [r3, r2]
    6a5a:	5c5d      	ldrb	r5, [r3, r1]
    6a5c:	4068      	eors	r0, r5
    6a5e:	5498      	strb	r0, [r3, r2]
    6a60:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    6a62:	2b10      	cmp	r3, #16
    6a64:	d1f8      	bne.n	6a58 <SAL_AESCmac+0xd0>
    6a66:	e7bf      	b.n	69e8 <SAL_AESCmac+0x60>
		n = 1;
    6a68:	2301      	movs	r3, #1
    6a6a:	4698      	mov	r8, r3
		ptr = &input[size - (size%16)];
    6a6c:	230f      	movs	r3, #15
    6a6e:	0020      	movs	r0, r4
    6a70:	4398      	bics	r0, r3
    6a72:	2300      	movs	r3, #0
			if ( i < (size%16) )
    6a74:	220f      	movs	r2, #15
    6a76:	4014      	ands	r4, r2
					padded[i] = 0x00;
    6a78:	a90c      	add	r1, sp, #48	; 0x30
    6a7a:	2700      	movs	r7, #0
					padded[i] = 0x80;
    6a7c:	2680      	movs	r6, #128	; 0x80
				padded[i] = ptr[i];
    6a7e:	4450      	add	r0, sl
    6a80:	e005      	b.n	6a8e <SAL_AESCmac+0x106>
				if ( i == (size%16) )
    6a82:	4294      	cmp	r4, r2
    6a84:	d009      	beq.n	6a9a <SAL_AESCmac+0x112>
					padded[i] = 0x00;
    6a86:	545f      	strb	r7, [r3, r1]
    6a88:	3301      	adds	r3, #1
		for (i=0; i<16; i++)
    6a8a:	2b10      	cmp	r3, #16
    6a8c:	d007      	beq.n	6a9e <SAL_AESCmac+0x116>
    6a8e:	b29a      	uxth	r2, r3
			if ( i < (size%16) )
    6a90:	4294      	cmp	r4, r2
    6a92:	d9f6      	bls.n	6a82 <SAL_AESCmac+0xfa>
				padded[i] = ptr[i];
    6a94:	5cc2      	ldrb	r2, [r0, r3]
    6a96:	545a      	strb	r2, [r3, r1]
    6a98:	e7f6      	b.n	6a88 <SAL_AESCmac+0x100>
					padded[i] = 0x80;
    6a9a:	545e      	strb	r6, [r3, r1]
    6a9c:	e7f4      	b.n	6a88 <SAL_AESCmac+0x100>
    6a9e:	2300      	movs	r3, #0
			mLast[i] = padded[i] ^ k2[i];
    6aa0:	a810      	add	r0, sp, #64	; 0x40
    6aa2:	a90c      	add	r1, sp, #48	; 0x30
    6aa4:	aa1c      	add	r2, sp, #112	; 0x70
    6aa6:	5c5c      	ldrb	r4, [r3, r1]
    6aa8:	5c9d      	ldrb	r5, [r3, r2]
    6aaa:	406c      	eors	r4, r5
    6aac:	541c      	strb	r4, [r3, r0]
    6aae:	3301      	adds	r3, #1
		for (i=0; i<sizeof(mLast); i++)
    6ab0:	2b10      	cmp	r3, #16
    6ab2:	d1f8      	bne.n	6aa6 <SAL_AESCmac+0x11e>
	memset(x, 0, sizeof(x));
    6ab4:	2210      	movs	r2, #16
    6ab6:	2100      	movs	r1, #0
    6ab8:	a818      	add	r0, sp, #96	; 0x60
    6aba:	4b20      	ldr	r3, [pc, #128]	; (6b3c <SAL_AESCmac+0x1b4>)
    6abc:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    6abe:	2301      	movs	r3, #1
    6ac0:	425b      	negs	r3, r3
    6ac2:	4443      	add	r3, r8
    6ac4:	4699      	mov	r9, r3
    6ac6:	2000      	movs	r0, #0
    6ac8:	2700      	movs	r7, #0
    6aca:	2b00      	cmp	r3, #0
    6acc:	dd1a      	ble.n	6b04 <SAL_AESCmac+0x17c>
			y[j] = x[j] ^ input[(i << 4)+j];
    6ace:	ad14      	add	r5, sp, #80	; 0x50
    6ad0:	ac18      	add	r4, sp, #96	; 0x60
		memcpy(x, y, sizeof(y));
    6ad2:	4e1e      	ldr	r6, [pc, #120]	; (6b4c <SAL_AESCmac+0x1c4>)
			y[j] = x[j] ^ input[(i << 4)+j];
    6ad4:	0100      	lsls	r0, r0, #4
    6ad6:	2300      	movs	r3, #0
    6ad8:	4450      	add	r0, sl
    6ada:	5cc2      	ldrb	r2, [r0, r3]
    6adc:	5d19      	ldrb	r1, [r3, r4]
    6ade:	404a      	eors	r2, r1
    6ae0:	555a      	strb	r2, [r3, r5]
    6ae2:	3301      	adds	r3, #1
		for (j=0; j<16; j++)
    6ae4:	2b10      	cmp	r3, #16
    6ae6:	d1f8      	bne.n	6ada <SAL_AESCmac+0x152>
		memcpy(x, y, sizeof(y));
    6ae8:	2210      	movs	r2, #16
    6aea:	0029      	movs	r1, r5
    6aec:	0020      	movs	r0, r4
    6aee:	47b0      	blx	r6
		SAL_AESEncode(x, key_type, key);
    6af0:	9a01      	ldr	r2, [sp, #4]
    6af2:	9902      	ldr	r1, [sp, #8]
    6af4:	0020      	movs	r0, r4
    6af6:	4b12      	ldr	r3, [pc, #72]	; (6b40 <SAL_AESCmac+0x1b8>)
    6af8:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    6afa:	3701      	adds	r7, #1
    6afc:	b2bf      	uxth	r7, r7
    6afe:	0038      	movs	r0, r7
    6b00:	454f      	cmp	r7, r9
    6b02:	dbe7      	blt.n	6ad4 <SAL_AESCmac+0x14c>
    6b04:	2300      	movs	r3, #0
		y[i] = x[i] ^ mLast[i];
    6b06:	ac14      	add	r4, sp, #80	; 0x50
    6b08:	a818      	add	r0, sp, #96	; 0x60
    6b0a:	a910      	add	r1, sp, #64	; 0x40
    6b0c:	5c1a      	ldrb	r2, [r3, r0]
    6b0e:	5c5d      	ldrb	r5, [r3, r1]
    6b10:	406a      	eors	r2, r5
    6b12:	551a      	strb	r2, [r3, r4]
    6b14:	3301      	adds	r3, #1
	for (i=0; i<sizeof(x); i++)
    6b16:	2b10      	cmp	r3, #16
    6b18:	d1f8      	bne.n	6b0c <SAL_AESCmac+0x184>
	SAL_AESEncode(y, key_type, key);
    6b1a:	9a01      	ldr	r2, [sp, #4]
    6b1c:	9902      	ldr	r1, [sp, #8]
    6b1e:	a814      	add	r0, sp, #80	; 0x50
    6b20:	4b07      	ldr	r3, [pc, #28]	; (6b40 <SAL_AESCmac+0x1b8>)
    6b22:	4798      	blx	r3
	memcpy(output, y, sizeof(y));
    6b24:	2210      	movs	r2, #16
    6b26:	a914      	add	r1, sp, #80	; 0x50
    6b28:	9803      	ldr	r0, [sp, #12]
    6b2a:	4b08      	ldr	r3, [pc, #32]	; (6b4c <SAL_AESCmac+0x1c4>)
    6b2c:	4798      	blx	r3
}
    6b2e:	2000      	movs	r0, #0
    6b30:	b024      	add	sp, #144	; 0x90
    6b32:	bc1c      	pop	{r2, r3, r4}
    6b34:	4690      	mov	r8, r2
    6b36:	4699      	mov	r9, r3
    6b38:	46a2      	mov	sl, r4
    6b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b3c:	00014ff5 	.word	0x00014ff5
    6b40:	00006951 	.word	0x00006951
    6b44:	0000692d 	.word	0x0000692d
    6b48:	000ffff0 	.word	0x000ffff0
    6b4c:	00014fe3 	.word	0x00014fe3

00006b50 <adc_complete_callback>:
}

// Callback function when 128 samples are completed.
void adc_complete_callback(struct adc_module *const module)
{
	adc_read_done = true;
    6b50:	2201      	movs	r2, #1
    6b52:	4b01      	ldr	r3, [pc, #4]	; (6b58 <adc_complete_callback+0x8>)
    6b54:	701a      	strb	r2, [r3, #0]
}
    6b56:	4770      	bx	lr
    6b58:	200000ec 	.word	0x200000ec

00006b5c <CheckDIStatus>:
	return (port_base->IN.reg & pin_mask);
    6b5c:	4a0d      	ldr	r2, [pc, #52]	; (6b94 <CheckDIStatus+0x38>)
    6b5e:	6a13      	ldr	r3, [r2, #32]
	if(port_pin_get_input_level(DI1_PIN))
    6b60:	045b      	lsls	r3, r3, #17
		DigitalInputs |= 0x01;
    6b62:	0fdb      	lsrs	r3, r3, #31
    6b64:	6a11      	ldr	r1, [r2, #32]
	DigitalInputs &= 0xfd;
    6b66:	001a      	movs	r2, r3
	if(port_pin_get_input_level(DI2_PIN))
    6b68:	0409      	lsls	r1, r1, #16
    6b6a:	d501      	bpl.n	6b70 <CheckDIStatus+0x14>
		DigitalInputs |= 0x02;
    6b6c:	2202      	movs	r2, #2
    6b6e:	431a      	orrs	r2, r3
    6b70:	4b08      	ldr	r3, [pc, #32]	; (6b94 <CheckDIStatus+0x38>)
    6b72:	6a1b      	ldr	r3, [r3, #32]
	DigitalInputs &= 0xfb;
    6b74:	0010      	movs	r0, r2
	if(port_pin_get_input_level(DI3_PIN))
    6b76:	03db      	lsls	r3, r3, #15
    6b78:	d501      	bpl.n	6b7e <CheckDIStatus+0x22>
		DigitalInputs |= 0x04;
    6b7a:	2004      	movs	r0, #4
    6b7c:	4310      	orrs	r0, r2
    6b7e:	4b05      	ldr	r3, [pc, #20]	; (6b94 <CheckDIStatus+0x38>)
    6b80:	6a1b      	ldr	r3, [r3, #32]
	if(port_pin_get_input_level(DI4_PIN))
    6b82:	039b      	lsls	r3, r3, #14
    6b84:	d402      	bmi.n	6b8c <CheckDIStatus+0x30>
	DigitalInputs &= 0xf7;
    6b86:	2308      	movs	r3, #8
    6b88:	4398      	bics	r0, r3
}
    6b8a:	4770      	bx	lr
		DigitalInputs |= 0x08;
    6b8c:	2308      	movs	r3, #8
    6b8e:	4318      	orrs	r0, r3
    6b90:	e7fb      	b.n	6b8a <CheckDIStatus+0x2e>
    6b92:	46c0      	nop			; (mov r8, r8)
    6b94:	40002800 	.word	0x40002800

00006b98 <configure_adc>:


//Configure the ADC
void configure_adc(void)
{
    6b98:	b510      	push	{r4, lr}

	struct system_voltage_references_config vtg_ref;
	
	adc_get_config_defaults(&config_adc);
    6b9a:	4c0f      	ldr	r4, [pc, #60]	; (6bd8 <configure_adc+0x40>)
    6b9c:	0020      	movs	r0, r4
    6b9e:	4b0f      	ldr	r3, [pc, #60]	; (6bdc <configure_adc+0x44>)
    6ba0:	4798      	blx	r3
	config_adc.reference       = ADC_REFERENCE_INTREF;
    6ba2:	2200      	movs	r2, #0
    6ba4:	7062      	strb	r2, [r4, #1]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV32;
    6ba6:	2304      	movs	r3, #4
    6ba8:	70a3      	strb	r3, [r4, #2]
	config_adc.resolution      = ADC_RESOLUTION_12BIT;
    6baa:	70e2      	strb	r2, [r4, #3]
	config_adc.accumulate_samples = ADC_ACCUMULATE_SAMPLES_16;
    6bac:	7223      	strb	r3, [r4, #8]
	config_adc.divide_result      = ADC_ACCUMULATE_SAMPLES_16;
    6bae:	7263      	strb	r3, [r4, #9]
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN5;
	#else
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN6;
	#endif 
*/
	config_adc.sample_length	= 50; 
    6bb0:	332e      	adds	r3, #46	; 0x2e
    6bb2:	7563      	strb	r3, [r4, #21]
	SUPC->VREF.bit.SEL      = config->sel;
    6bb4:	4b0a      	ldr	r3, [pc, #40]	; (6be0 <configure_adc+0x48>)
    6bb6:	69da      	ldr	r2, [r3, #28]
    6bb8:	490a      	ldr	r1, [pc, #40]	; (6be4 <configure_adc+0x4c>)
    6bba:	4011      	ands	r1, r2
    6bbc:	22e0      	movs	r2, #224	; 0xe0
    6bbe:	02d2      	lsls	r2, r2, #11
    6bc0:	430a      	orrs	r2, r1
    6bc2:	61da      	str	r2, [r3, #28]
	SUPC->VREF.bit.ONDEMAND = config->on_demand;
    6bc4:	69da      	ldr	r2, [r3, #28]
    6bc6:	2180      	movs	r1, #128	; 0x80
    6bc8:	430a      	orrs	r2, r1
    6bca:	61da      	str	r2, [r3, #28]
	SUPC->VREF.bit.RUNSTDBY = config->run_in_standby;
    6bcc:	69da      	ldr	r2, [r3, #28]
    6bce:	3940      	subs	r1, #64	; 0x40
    6bd0:	438a      	bics	r2, r1
    6bd2:	61da      	str	r2, [r3, #28]
	system_voltage_reference_set_config(&vtg_ref);

//	config_adc.positive_input_sequence_mask_enable =/* ADC_POSITIVE_INPUT_PIN6 | ADC_POSITIVE_INPUT_PIN7 |*/ ADC_POSITIVE_INPUT_PIN10 | ADC_POSITIVE_INPUT_PIN11 | ADC_POSITIVE_INPUT_PIN16;
//	adc_enable_positive_input_sequence(&adc_instance, config_adc.positive_input_sequence_mask_enable);

}
    6bd4:	bd10      	pop	{r4, pc}
    6bd6:	46c0      	nop			; (mov r8, r8)
    6bd8:	20001ea0 	.word	0x20001ea0
    6bdc:	000045d9 	.word	0x000045d9
    6be0:	40001400 	.word	0x40001400
    6be4:	fff0ffff 	.word	0xfff0ffff

00006be8 <configure_AIN1>:


//Configure the AIN
void configure_AIN1(void)
{
    6be8:	b510      	push	{r4, lr}
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN6;
    6bea:	4a0f      	ldr	r2, [pc, #60]	; (6c28 <configure_AIN1+0x40>)
    6bec:	2306      	movs	r3, #6
    6bee:	7113      	strb	r3, [r2, #4]
	adc_init(&adc_instance, ADC, &config_adc);
    6bf0:	4c0e      	ldr	r4, [pc, #56]	; (6c2c <configure_AIN1+0x44>)
    6bf2:	490f      	ldr	r1, [pc, #60]	; (6c30 <configure_AIN1+0x48>)
    6bf4:	0020      	movs	r0, r4
    6bf6:	4b0f      	ldr	r3, [pc, #60]	; (6c34 <configure_AIN1+0x4c>)
    6bf8:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    6bfa:	6822      	ldr	r2, [r4, #0]
    6bfc:	8c13      	ldrh	r3, [r2, #32]
    6bfe:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    6c00:	2b00      	cmp	r3, #0
    6c02:	d1fb      	bne.n	6bfc <configure_AIN1+0x14>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6c04:	2180      	movs	r1, #128	; 0x80
    6c06:	03c9      	lsls	r1, r1, #15
    6c08:	4b0b      	ldr	r3, [pc, #44]	; (6c38 <configure_AIN1+0x50>)
    6c0a:	6019      	str	r1, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    6c0c:	2307      	movs	r3, #7
    6c0e:	7113      	strb	r3, [r2, #4]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    6c10:	7193      	strb	r3, [r2, #6]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    6c12:	7813      	ldrb	r3, [r2, #0]
    6c14:	2102      	movs	r1, #2
    6c16:	430b      	orrs	r3, r1
    6c18:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    6c1a:	4b04      	ldr	r3, [pc, #16]	; (6c2c <configure_AIN1+0x44>)
    6c1c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    6c1e:	8c13      	ldrh	r3, [r2, #32]
    6c20:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    6c22:	2b00      	cmp	r3, #0
    6c24:	d1fb      	bne.n	6c1e <configure_AIN1+0x36>
	adc_enable(&adc_instance);
}
    6c26:	bd10      	pop	{r4, pc}
    6c28:	20001ea0 	.word	0x20001ea0
    6c2c:	20001ecc 	.word	0x20001ecc
    6c30:	43000c00 	.word	0x43000c00
    6c34:	0000461d 	.word	0x0000461d
    6c38:	e000e100 	.word	0xe000e100

00006c3c <configure_AIN2>:
void configure_AIN2(void)
{
    6c3c:	b510      	push	{r4, lr}
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN4;
    6c3e:	4a0f      	ldr	r2, [pc, #60]	; (6c7c <configure_AIN2+0x40>)
    6c40:	2304      	movs	r3, #4
    6c42:	7113      	strb	r3, [r2, #4]
	adc_init(&adc_instance, ADC, &config_adc); 
    6c44:	4c0e      	ldr	r4, [pc, #56]	; (6c80 <configure_AIN2+0x44>)
    6c46:	490f      	ldr	r1, [pc, #60]	; (6c84 <configure_AIN2+0x48>)
    6c48:	0020      	movs	r0, r4
    6c4a:	4b0f      	ldr	r3, [pc, #60]	; (6c88 <configure_AIN2+0x4c>)
    6c4c:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    6c4e:	6822      	ldr	r2, [r4, #0]
    6c50:	8c13      	ldrh	r3, [r2, #32]
    6c52:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    6c54:	2b00      	cmp	r3, #0
    6c56:	d1fb      	bne.n	6c50 <configure_AIN2+0x14>
    6c58:	2180      	movs	r1, #128	; 0x80
    6c5a:	03c9      	lsls	r1, r1, #15
    6c5c:	4b0b      	ldr	r3, [pc, #44]	; (6c8c <configure_AIN2+0x50>)
    6c5e:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    6c60:	2307      	movs	r3, #7
    6c62:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    6c64:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    6c66:	7813      	ldrb	r3, [r2, #0]
    6c68:	2102      	movs	r1, #2
    6c6a:	430b      	orrs	r3, r1
    6c6c:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    6c6e:	4b04      	ldr	r3, [pc, #16]	; (6c80 <configure_AIN2+0x44>)
    6c70:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    6c72:	8c13      	ldrh	r3, [r2, #32]
    6c74:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    6c76:	2b00      	cmp	r3, #0
    6c78:	d1fb      	bne.n	6c72 <configure_AIN2+0x36>
	adc_enable(&adc_instance);
}
    6c7a:	bd10      	pop	{r4, pc}
    6c7c:	20001ea0 	.word	0x20001ea0
    6c80:	20001ecc 	.word	0x20001ecc
    6c84:	43000c00 	.word	0x43000c00
    6c88:	0000461d 	.word	0x0000461d
    6c8c:	e000e100 	.word	0xe000e100

00006c90 <configure_AIN3>:
void configure_AIN3(void)
{
    6c90:	b510      	push	{r4, lr}
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN5;
    6c92:	4a0f      	ldr	r2, [pc, #60]	; (6cd0 <configure_AIN3+0x40>)
    6c94:	2305      	movs	r3, #5
    6c96:	7113      	strb	r3, [r2, #4]
	adc_init(&adc_instance, ADC, &config_adc);
    6c98:	4c0e      	ldr	r4, [pc, #56]	; (6cd4 <configure_AIN3+0x44>)
    6c9a:	490f      	ldr	r1, [pc, #60]	; (6cd8 <configure_AIN3+0x48>)
    6c9c:	0020      	movs	r0, r4
    6c9e:	4b0f      	ldr	r3, [pc, #60]	; (6cdc <configure_AIN3+0x4c>)
    6ca0:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    6ca2:	6822      	ldr	r2, [r4, #0]
    6ca4:	8c13      	ldrh	r3, [r2, #32]
    6ca6:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    6ca8:	2b00      	cmp	r3, #0
    6caa:	d1fb      	bne.n	6ca4 <configure_AIN3+0x14>
    6cac:	2180      	movs	r1, #128	; 0x80
    6cae:	03c9      	lsls	r1, r1, #15
    6cb0:	4b0b      	ldr	r3, [pc, #44]	; (6ce0 <configure_AIN3+0x50>)
    6cb2:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    6cb4:	2307      	movs	r3, #7
    6cb6:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    6cb8:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    6cba:	7813      	ldrb	r3, [r2, #0]
    6cbc:	2102      	movs	r1, #2
    6cbe:	430b      	orrs	r3, r1
    6cc0:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    6cc2:	4b04      	ldr	r3, [pc, #16]	; (6cd4 <configure_AIN3+0x44>)
    6cc4:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    6cc6:	8c13      	ldrh	r3, [r2, #32]
    6cc8:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    6cca:	2b00      	cmp	r3, #0
    6ccc:	d1fb      	bne.n	6cc6 <configure_AIN3+0x36>
	adc_enable(&adc_instance);
}
    6cce:	bd10      	pop	{r4, pc}
    6cd0:	20001ea0 	.word	0x20001ea0
    6cd4:	20001ecc 	.word	0x20001ecc
    6cd8:	43000c00 	.word	0x43000c00
    6cdc:	0000461d 	.word	0x0000461d
    6ce0:	e000e100 	.word	0xe000e100

00006ce4 <configure_AIN4>:
void configure_AIN4(void)
{
    6ce4:	b510      	push	{r4, lr}
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN16;
    6ce6:	4a0f      	ldr	r2, [pc, #60]	; (6d24 <configure_AIN4+0x40>)
    6ce8:	2310      	movs	r3, #16
    6cea:	7113      	strb	r3, [r2, #4]
	adc_init(&adc_instance, ADC, &config_adc);
    6cec:	4c0e      	ldr	r4, [pc, #56]	; (6d28 <configure_AIN4+0x44>)
    6cee:	490f      	ldr	r1, [pc, #60]	; (6d2c <configure_AIN4+0x48>)
    6cf0:	0020      	movs	r0, r4
    6cf2:	4b0f      	ldr	r3, [pc, #60]	; (6d30 <configure_AIN4+0x4c>)
    6cf4:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    6cf6:	6822      	ldr	r2, [r4, #0]
    6cf8:	8c13      	ldrh	r3, [r2, #32]
    6cfa:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    6cfc:	2b00      	cmp	r3, #0
    6cfe:	d1fb      	bne.n	6cf8 <configure_AIN4+0x14>
    6d00:	2180      	movs	r1, #128	; 0x80
    6d02:	03c9      	lsls	r1, r1, #15
    6d04:	4b0b      	ldr	r3, [pc, #44]	; (6d34 <configure_AIN4+0x50>)
    6d06:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    6d08:	2307      	movs	r3, #7
    6d0a:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    6d0c:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    6d0e:	7813      	ldrb	r3, [r2, #0]
    6d10:	2102      	movs	r1, #2
    6d12:	430b      	orrs	r3, r1
    6d14:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    6d16:	4b04      	ldr	r3, [pc, #16]	; (6d28 <configure_AIN4+0x44>)
    6d18:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    6d1a:	8c13      	ldrh	r3, [r2, #32]
    6d1c:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    6d1e:	2b00      	cmp	r3, #0
    6d20:	d1fb      	bne.n	6d1a <configure_AIN4+0x36>
	adc_enable(&adc_instance);
}
    6d22:	bd10      	pop	{r4, pc}
    6d24:	20001ea0 	.word	0x20001ea0
    6d28:	20001ecc 	.word	0x20001ecc
    6d2c:	43000c00 	.word	0x43000c00
    6d30:	0000461d 	.word	0x0000461d
    6d34:	e000e100 	.word	0xe000e100

00006d38 <configure_adc_callbacks>:
}*/

	
// Register a call back for ADC
void configure_adc_callbacks(void)
{
    6d38:	b510      	push	{r4, lr}
	adc_register_callback(&adc_instance, adc_complete_callback, ADC_CALLBACK_READ_BUFFER);
    6d3a:	4c05      	ldr	r4, [pc, #20]	; (6d50 <configure_adc_callbacks+0x18>)
    6d3c:	2200      	movs	r2, #0
    6d3e:	4905      	ldr	r1, [pc, #20]	; (6d54 <configure_adc_callbacks+0x1c>)
    6d40:	0020      	movs	r0, r4
    6d42:	4b05      	ldr	r3, [pc, #20]	; (6d58 <configure_adc_callbacks+0x20>)
    6d44:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    6d46:	7ee3      	ldrb	r3, [r4, #27]
    6d48:	2201      	movs	r2, #1
    6d4a:	4313      	orrs	r3, r2
    6d4c:	76e3      	strb	r3, [r4, #27]
	adc_enable_callback(&adc_instance, ADC_CALLBACK_READ_BUFFER);
}
    6d4e:	bd10      	pop	{r4, pc}
    6d50:	20001ecc 	.word	0x20001ecc
    6d54:	00006b51 	.word	0x00006b51
    6d58:	00004ac9 	.word	0x00004ac9

00006d5c <adcReadPrint>:
//	    adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
}


void adcReadPrint(void)
{
    6d5c:	b510      	push	{r4, lr}
			
	configure_AIN1();
    6d5e:	4b54      	ldr	r3, [pc, #336]	; (6eb0 <adcReadPrint+0x154>)
    6d60:	4798      	blx	r3
	configure_adc_callbacks();
    6d62:	4b54      	ldr	r3, [pc, #336]	; (6eb4 <adcReadPrint+0x158>)
    6d64:	4798      	blx	r3
	adc_read_buffer_job(&adc_instance, &adc_result_buffer[1], 1);
    6d66:	2201      	movs	r2, #1
    6d68:	4953      	ldr	r1, [pc, #332]	; (6eb8 <adcReadPrint+0x15c>)
    6d6a:	3102      	adds	r1, #2
    6d6c:	4853      	ldr	r0, [pc, #332]	; (6ebc <adcReadPrint+0x160>)
    6d6e:	4b54      	ldr	r3, [pc, #336]	; (6ec0 <adcReadPrint+0x164>)
    6d70:	4798      	blx	r3
	while (adc_read_done == false)
    6d72:	4a54      	ldr	r2, [pc, #336]	; (6ec4 <adcReadPrint+0x168>)
    6d74:	7813      	ldrb	r3, [r2, #0]
    6d76:	2b00      	cmp	r3, #0
    6d78:	d0fc      	beq.n	6d74 <adcReadPrint+0x18>
	{
	}
	adc_read_done = false;
    6d7a:	2200      	movs	r2, #0
    6d7c:	4b51      	ldr	r3, [pc, #324]	; (6ec4 <adcReadPrint+0x168>)
    6d7e:	701a      	strb	r2, [r3, #0]
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    6d80:	4b4e      	ldr	r3, [pc, #312]	; (6ebc <adcReadPrint+0x160>)
    6d82:	681a      	ldr	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6d84:	2080      	movs	r0, #128	; 0x80
    6d86:	03c0      	lsls	r0, r0, #15
    6d88:	2380      	movs	r3, #128	; 0x80
    6d8a:	494f      	ldr	r1, [pc, #316]	; (6ec8 <adcReadPrint+0x16c>)
    6d8c:	50c8      	str	r0, [r1, r3]
    6d8e:	8c13      	ldrh	r3, [r2, #32]
    6d90:	b29b      	uxth	r3, r3
#	else
		system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	while (adc_is_syncing(module_inst)) {
    6d92:	2b00      	cmp	r3, #0
    6d94:	d1fb      	bne.n	6d8e <adcReadPrint+0x32>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    6d96:	3307      	adds	r3, #7
    6d98:	7113      	strb	r3, [r2, #4]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    6d9a:	7193      	strb	r3, [r2, #6]

	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    6d9c:	7813      	ldrb	r3, [r2, #0]
    6d9e:	2102      	movs	r1, #2
    6da0:	438b      	bics	r3, r1
    6da2:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    6da4:	4b45      	ldr	r3, [pc, #276]	; (6ebc <adcReadPrint+0x160>)
    6da6:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    6da8:	8c13      	ldrh	r3, [r2, #32]
    6daa:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    6dac:	2b00      	cmp	r3, #0
    6dae:	d1fb      	bne.n	6da8 <adcReadPrint+0x4c>
	adc_disable(&adc_instance);

	configure_AIN2();
    6db0:	4b46      	ldr	r3, [pc, #280]	; (6ecc <adcReadPrint+0x170>)
    6db2:	4798      	blx	r3
	configure_adc_callbacks();
    6db4:	4b3f      	ldr	r3, [pc, #252]	; (6eb4 <adcReadPrint+0x158>)
    6db6:	4798      	blx	r3
	adc_read_buffer_job(&adc_instance, &adc_result_buffer[2], 1);
    6db8:	2201      	movs	r2, #1
    6dba:	493f      	ldr	r1, [pc, #252]	; (6eb8 <adcReadPrint+0x15c>)
    6dbc:	3104      	adds	r1, #4
    6dbe:	483f      	ldr	r0, [pc, #252]	; (6ebc <adcReadPrint+0x160>)
    6dc0:	4b3f      	ldr	r3, [pc, #252]	; (6ec0 <adcReadPrint+0x164>)
    6dc2:	4798      	blx	r3
	while (adc_read_done == false)
    6dc4:	4a3f      	ldr	r2, [pc, #252]	; (6ec4 <adcReadPrint+0x168>)
    6dc6:	7813      	ldrb	r3, [r2, #0]
    6dc8:	2b00      	cmp	r3, #0
    6dca:	d0fc      	beq.n	6dc6 <adcReadPrint+0x6a>
	{
	}
	adc_read_done = false;
    6dcc:	2200      	movs	r2, #0
    6dce:	4b3d      	ldr	r3, [pc, #244]	; (6ec4 <adcReadPrint+0x168>)
    6dd0:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    6dd2:	4b3a      	ldr	r3, [pc, #232]	; (6ebc <adcReadPrint+0x160>)
    6dd4:	681a      	ldr	r2, [r3, #0]
    6dd6:	2080      	movs	r0, #128	; 0x80
    6dd8:	03c0      	lsls	r0, r0, #15
    6dda:	2380      	movs	r3, #128	; 0x80
    6ddc:	493a      	ldr	r1, [pc, #232]	; (6ec8 <adcReadPrint+0x16c>)
    6dde:	50c8      	str	r0, [r1, r3]
    6de0:	8c13      	ldrh	r3, [r2, #32]
    6de2:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    6de4:	2b00      	cmp	r3, #0
    6de6:	d1fb      	bne.n	6de0 <adcReadPrint+0x84>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    6de8:	3307      	adds	r3, #7
    6dea:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    6dec:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    6dee:	7813      	ldrb	r3, [r2, #0]
    6df0:	2102      	movs	r1, #2
    6df2:	438b      	bics	r3, r1
    6df4:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    6df6:	4b31      	ldr	r3, [pc, #196]	; (6ebc <adcReadPrint+0x160>)
    6df8:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    6dfa:	8c13      	ldrh	r3, [r2, #32]
    6dfc:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    6dfe:	2b00      	cmp	r3, #0
    6e00:	d1fb      	bne.n	6dfa <adcReadPrint+0x9e>
	adc_disable(&adc_instance);
			
	configure_AIN3();
    6e02:	4b33      	ldr	r3, [pc, #204]	; (6ed0 <adcReadPrint+0x174>)
    6e04:	4798      	blx	r3
	configure_adc_callbacks();
    6e06:	4b2b      	ldr	r3, [pc, #172]	; (6eb4 <adcReadPrint+0x158>)
    6e08:	4798      	blx	r3
	adc_read_buffer_job(&adc_instance, &adc_result_buffer[3], 1);
    6e0a:	2201      	movs	r2, #1
    6e0c:	492a      	ldr	r1, [pc, #168]	; (6eb8 <adcReadPrint+0x15c>)
    6e0e:	3106      	adds	r1, #6
    6e10:	482a      	ldr	r0, [pc, #168]	; (6ebc <adcReadPrint+0x160>)
    6e12:	4b2b      	ldr	r3, [pc, #172]	; (6ec0 <adcReadPrint+0x164>)
    6e14:	4798      	blx	r3
	while (adc_read_done == false)
    6e16:	4a2b      	ldr	r2, [pc, #172]	; (6ec4 <adcReadPrint+0x168>)
    6e18:	7813      	ldrb	r3, [r2, #0]
    6e1a:	2b00      	cmp	r3, #0
    6e1c:	d0fc      	beq.n	6e18 <adcReadPrint+0xbc>
	{
	}
	adc_read_done = false;
    6e1e:	2200      	movs	r2, #0
    6e20:	4b28      	ldr	r3, [pc, #160]	; (6ec4 <adcReadPrint+0x168>)
    6e22:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    6e24:	4b25      	ldr	r3, [pc, #148]	; (6ebc <adcReadPrint+0x160>)
    6e26:	681a      	ldr	r2, [r3, #0]
    6e28:	2080      	movs	r0, #128	; 0x80
    6e2a:	03c0      	lsls	r0, r0, #15
    6e2c:	2380      	movs	r3, #128	; 0x80
    6e2e:	4926      	ldr	r1, [pc, #152]	; (6ec8 <adcReadPrint+0x16c>)
    6e30:	50c8      	str	r0, [r1, r3]
    6e32:	8c13      	ldrh	r3, [r2, #32]
    6e34:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    6e36:	2b00      	cmp	r3, #0
    6e38:	d1fb      	bne.n	6e32 <adcReadPrint+0xd6>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    6e3a:	3307      	adds	r3, #7
    6e3c:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    6e3e:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    6e40:	7813      	ldrb	r3, [r2, #0]
    6e42:	2102      	movs	r1, #2
    6e44:	438b      	bics	r3, r1
    6e46:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    6e48:	4b1c      	ldr	r3, [pc, #112]	; (6ebc <adcReadPrint+0x160>)
    6e4a:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    6e4c:	8c13      	ldrh	r3, [r2, #32]
    6e4e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    6e50:	2b00      	cmp	r3, #0
    6e52:	d1fb      	bne.n	6e4c <adcReadPrint+0xf0>
	adc_disable(&adc_instance);
	
	configure_AIN4();
    6e54:	4b1f      	ldr	r3, [pc, #124]	; (6ed4 <adcReadPrint+0x178>)
    6e56:	4798      	blx	r3
	configure_adc_callbacks();
    6e58:	4b16      	ldr	r3, [pc, #88]	; (6eb4 <adcReadPrint+0x158>)
    6e5a:	4798      	blx	r3
	adc_read_buffer_job(&adc_instance, &adc_result_buffer[4], 1);
    6e5c:	2201      	movs	r2, #1
    6e5e:	4916      	ldr	r1, [pc, #88]	; (6eb8 <adcReadPrint+0x15c>)
    6e60:	3108      	adds	r1, #8
    6e62:	4816      	ldr	r0, [pc, #88]	; (6ebc <adcReadPrint+0x160>)
    6e64:	4b16      	ldr	r3, [pc, #88]	; (6ec0 <adcReadPrint+0x164>)
    6e66:	4798      	blx	r3
	while (adc_read_done == false)
    6e68:	4a16      	ldr	r2, [pc, #88]	; (6ec4 <adcReadPrint+0x168>)
    6e6a:	7813      	ldrb	r3, [r2, #0]
    6e6c:	2b00      	cmp	r3, #0
    6e6e:	d0fc      	beq.n	6e6a <adcReadPrint+0x10e>
	{
	}
	adc_read_done = false;
    6e70:	2200      	movs	r2, #0
    6e72:	4b14      	ldr	r3, [pc, #80]	; (6ec4 <adcReadPrint+0x168>)
    6e74:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    6e76:	4b11      	ldr	r3, [pc, #68]	; (6ebc <adcReadPrint+0x160>)
    6e78:	681a      	ldr	r2, [r3, #0]
    6e7a:	2080      	movs	r0, #128	; 0x80
    6e7c:	03c0      	lsls	r0, r0, #15
    6e7e:	2380      	movs	r3, #128	; 0x80
    6e80:	4911      	ldr	r1, [pc, #68]	; (6ec8 <adcReadPrint+0x16c>)
    6e82:	50c8      	str	r0, [r1, r3]
    6e84:	8c13      	ldrh	r3, [r2, #32]
    6e86:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    6e88:	2b00      	cmp	r3, #0
    6e8a:	d1fb      	bne.n	6e84 <adcReadPrint+0x128>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    6e8c:	3307      	adds	r3, #7
    6e8e:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    6e90:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    6e92:	7813      	ldrb	r3, [r2, #0]
    6e94:	2102      	movs	r1, #2
    6e96:	438b      	bics	r3, r1
    6e98:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    6e9a:	4b08      	ldr	r3, [pc, #32]	; (6ebc <adcReadPrint+0x160>)
    6e9c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    6e9e:	8c13      	ldrh	r3, [r2, #32]
    6ea0:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    6ea2:	2b00      	cmp	r3, #0
    6ea4:	d1fb      	bne.n	6e9e <adcReadPrint+0x142>
	adc_disable(&adc_instance);
	
	adc_result_buffer[0] = CheckDIStatus();
    6ea6:	4b0c      	ldr	r3, [pc, #48]	; (6ed8 <adcReadPrint+0x17c>)
    6ea8:	4798      	blx	r3
    6eaa:	4b03      	ldr	r3, [pc, #12]	; (6eb8 <adcReadPrint+0x15c>)
    6eac:	8018      	strh	r0, [r3, #0]

    #if defined (ENABLE_CONSOLE)
    printf("AIN1:%d, AIN2:%d, AIN3:%d, AIN4:%d, DI:%d",adc_result_buffer[0],adc_result_buffer[1],adc_result_buffer[2],adc_result_buffer[3], adc_result_buffer[4]);
    #endif
	
}
    6eae:	bd10      	pop	{r4, pc}
    6eb0:	00006be9 	.word	0x00006be9
    6eb4:	00006d39 	.word	0x00006d39
    6eb8:	200000f0 	.word	0x200000f0
    6ebc:	20001ecc 	.word	0x20001ecc
    6ec0:	00004add 	.word	0x00004add
    6ec4:	200000ec 	.word	0x200000ec
    6ec8:	e000e100 	.word	0xe000e100
    6ecc:	00006c3d 	.word	0x00006c3d
    6ed0:	00006c91 	.word	0x00006c91
    6ed4:	00006ce5 	.word	0x00006ce5
    6ed8:	00006b5d 	.word	0x00006b5d

00006edc <convertToString>:

void convertToString(const uint16_t adc_buff[], char* str, const uint8_t strSize)
{
    6edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ede:	46c6      	mov	lr, r8
    6ee0:	b500      	push	{lr}
    6ee2:	4688      	mov	r8, r1
	// Calculate the number of characters needed for the string
	size_t strLength = ADC_SAMPLES * 5; // Assuming each value requires 5 characters (including comma and space)

	// Check if the string size is sufficient
	if (strSize < strLength)
    6ee4:	2a18      	cmp	r2, #24
    6ee6:	d90f      	bls.n	6f08 <convertToString+0x2c>
    6ee8:	0005      	movs	r5, r0
    6eea:	000c      	movs	r4, r1
    6eec:	000e      	movs	r6, r1
    6eee:	3619      	adds	r6, #25

	// Convert each uint16_t value to a string
	for (size_t i = 0; i < ADC_SAMPLES; i++)
	{
		// Use sprintf to convert each value to a string and append to the main string
		sprintf(&str[i * 5], "%02x, ", adc_buff[i]); // Assuming each value is a decimal unsigned integer
    6ef0:	4f07      	ldr	r7, [pc, #28]	; (6f10 <convertToString+0x34>)
    6ef2:	882a      	ldrh	r2, [r5, #0]
    6ef4:	4907      	ldr	r1, [pc, #28]	; (6f14 <convertToString+0x38>)
    6ef6:	0020      	movs	r0, r4
    6ef8:	47b8      	blx	r7
    6efa:	3502      	adds	r5, #2
    6efc:	3405      	adds	r4, #5
	for (size_t i = 0; i < ADC_SAMPLES; i++)
    6efe:	42b4      	cmp	r4, r6
    6f00:	d1f7      	bne.n	6ef2 <convertToString+0x16>
	}

	// Replace the last space with a null terminator
	str[strLength - 1] = '\0';
    6f02:	2300      	movs	r3, #0
    6f04:	4642      	mov	r2, r8
    6f06:	7613      	strb	r3, [r2, #24]
}
    6f08:	bc04      	pop	{r2}
    6f0a:	4690      	mov	r8, r2
    6f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f0e:	46c0      	nop			; (mov r8, r8)
    6f10:	000156a5 	.word	0x000156a5
    6f14:	000166b0 	.word	0x000166b0

00006f18 <framePayload>:
	
void framePayload(uint16_t adc_buff[], uint8_t* payload, uint8_t maxpayloadSize)
{
    6f18:	b510      	push	{r4, lr}
	// Calculate the number of bytes needed for the payload
	size_t payloadBytes = ADC_SAMPLES * sizeof(uint16_t);

	// Check if the payload size is sufficient
	if (maxpayloadSize < payloadBytes)
    6f1a:	2a09      	cmp	r2, #9
    6f1c:	d800      	bhi.n	6f20 <framePayload+0x8>
		payload[i * 3 + 1] = (adc_buff[i] >> 8) & 0xFF;
		
		payload[i * 3 + 2] = 0x20;
	}
	*/
}
    6f1e:	bd10      	pop	{r4, pc}
	payload[0] = CVMS_MACid[0];
    6f20:	4b08      	ldr	r3, [pc, #32]	; (6f44 <framePayload+0x2c>)
    6f22:	781a      	ldrb	r2, [r3, #0]
    6f24:	700a      	strb	r2, [r1, #0]
	payload[1] = CVMS_MACid[1];
    6f26:	785a      	ldrb	r2, [r3, #1]
    6f28:	704a      	strb	r2, [r1, #1]
	payload[2] = CVMS_MACid[2];
    6f2a:	789a      	ldrb	r2, [r3, #2]
    6f2c:	708a      	strb	r2, [r1, #2]
	payload[3] = CVMS_MACid[3];
    6f2e:	78db      	ldrb	r3, [r3, #3]
    6f30:	70cb      	strb	r3, [r1, #3]
	payload[4] = 0x2c;
    6f32:	232c      	movs	r3, #44	; 0x2c
    6f34:	710b      	strb	r3, [r1, #4]
	payload[5] = 0x20;
    6f36:	3b0c      	subs	r3, #12
    6f38:	714b      	strb	r3, [r1, #5]
	convertToString(adc_buff, &payload[6], 26);
    6f3a:	3106      	adds	r1, #6
    6f3c:	221a      	movs	r2, #26
    6f3e:	4b02      	ldr	r3, [pc, #8]	; (6f48 <framePayload+0x30>)
    6f40:	4798      	blx	r3
    6f42:	e7ec      	b.n	6f1e <framePayload+0x6>
    6f44:	20001e90 	.word	0x20001e90
    6f48:	00006edd 	.word	0x00006edd

00006f4c <CVMS_Task>:
void CVMS_Task(uint8_t* data)
{
    6f4c:	b510      	push	{r4, lr}
    6f4e:	0004      	movs	r4, r0
	//analogCircuit(true);
	analogDelay(100);
    6f50:	2064      	movs	r0, #100	; 0x64
    6f52:	4b05      	ldr	r3, [pc, #20]	; (6f68 <CVMS_Task+0x1c>)
    6f54:	4798      	blx	r3
	adcReadPrint();
    6f56:	4b05      	ldr	r3, [pc, #20]	; (6f6c <CVMS_Task+0x20>)
    6f58:	4798      	blx	r3
	//analogCircuit(false);
	framePayload(adc_result_buffer, data, 36);
    6f5a:	2224      	movs	r2, #36	; 0x24
    6f5c:	0021      	movs	r1, r4
    6f5e:	4804      	ldr	r0, [pc, #16]	; (6f70 <CVMS_Task+0x24>)
    6f60:	4b04      	ldr	r3, [pc, #16]	; (6f74 <CVMS_Task+0x28>)
    6f62:	4798      	blx	r3
    6f64:	bd10      	pop	{r4, pc}
    6f66:	46c0      	nop			; (mov r8, r8)
    6f68:	00006fbd 	.word	0x00006fbd
    6f6c:	00006d5d 	.word	0x00006d5d
    6f70:	200000f0 	.word	0x200000f0
    6f74:	00006f19 	.word	0x00006f19

00006f78 <DemoOutput_Greeting>:
		#else
			printf("LBT support = Disable\r\n") ;
		#endif
    #endif
    #endif
}        
    6f78:	4770      	bx	lr

00006f7a <DemoOutput_Channel>:
        printf("\r\n");
        #endif
#endif
#endif
    }
}    
    6f7a:	4770      	bx	lr

00006f7c <DemoOutput_Instruction>:
		LCDDisplay((char *)"SW     : Broadcast \nBUTTON1: Unicast", 0, false);
	#else
		LCDDisplay((char *)"SW: Broadcast", 0, false);
	#endif
#endif
}
    6f7c:	4770      	bx	lr

00006f7e <DemoOutput_UpdateTxRx>:
void DemoOutput_UpdateTxRx(uint8_t TxNum, uint8_t RxNum)
{
#if defined (ENABLE_LCD)
    LCDTRXCount(TxNum, RxNum);  
#endif
}
    6f7e:	4770      	bx	lr

00006f80 <DemoOutput_ChannelError>:
    #if defined (ENABLE_CONSOLE)
        printf("\r\nSelection of channel ");
        printf("%d", channel);
        printf(" is not supported in current configuration.\r\n");
    #endif
}
    6f80:	4770      	bx	lr

00006f82 <DemoOutput_UnicastFail>:
        printf("\r\nUnicast Failed\r\n");
    #endif
#if defined (ENABLE_LCD)
    LCDDisplay((char *)" Unicast Failed", 0, true);
#endif
}    
    6f82:	4770      	bx	lr

00006f84 <DemoOutput_BroadcastFail>:
	printf("\r\nBroadcast Failed\r\n");
	#endif
	#if defined (ENABLE_LCD)
	LCDDisplay((char *)" Broadcast Failed", 0, true);
	#endif
}    
    6f84:	4770      	bx	lr
    6f86:	Address 0x00006f86 is out of bounds.


00006f88 <configure_gpio>:
uint32_t xSleepPinInterval = 0;
bool xCntTx = 1;
extern void TXLed(bool);

void configure_gpio()
{
    6f88:	b530      	push	{r4, r5, lr}
    6f8a:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    6f8c:	ac01      	add	r4, sp, #4
    6f8e:	2300      	movs	r3, #0
    6f90:	7023      	strb	r3, [r4, #0]
	config->powersave  = false;
    6f92:	70a3      	strb	r3, [r4, #2]
	struct port_config pin;
	/*Configures GPIOs*/
	port_get_config_defaults(&pin);
	
	pin.direction = PORT_PIN_DIR_INPUT;
	pin.input_pull = PORT_PIN_PULL_DOWN;
    6f94:	3302      	adds	r3, #2
    6f96:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(DI1_PIN, &pin);
    6f98:	0021      	movs	r1, r4
    6f9a:	200e      	movs	r0, #14
    6f9c:	4d06      	ldr	r5, [pc, #24]	; (6fb8 <configure_gpio+0x30>)
    6f9e:	47a8      	blx	r5
	port_pin_set_config(DI2_PIN, &pin);
    6fa0:	0021      	movs	r1, r4
    6fa2:	200f      	movs	r0, #15
    6fa4:	47a8      	blx	r5
	port_pin_set_config(DI3_PIN, &pin);
    6fa6:	0021      	movs	r1, r4
    6fa8:	2010      	movs	r0, #16
    6faa:	47a8      	blx	r5
	port_pin_set_config(DI4_PIN, &pin);
    6fac:	0021      	movs	r1, r4
    6fae:	2011      	movs	r0, #17
    6fb0:	47a8      	blx	r5

}
    6fb2:	b003      	add	sp, #12
    6fb4:	bd30      	pop	{r4, r5, pc}
    6fb6:	46c0      	nop			; (mov r8, r8)
    6fb8:	000050fd 	.word	0x000050fd

00006fbc <analogDelay>:
		SYSTEM_RunTasks();
		Run_Demo();
    }
}

void analogDelay(uint32_t delayValue){
    6fbc:	b510      	push	{r4, lr}
	delay_ms(delayValue);
    6fbe:	2800      	cmp	r0, #0
    6fc0:	d103      	bne.n	6fca <analogDelay+0xe>
    6fc2:	2001      	movs	r0, #1
    6fc4:	4b02      	ldr	r3, [pc, #8]	; (6fd0 <analogDelay+0x14>)
    6fc6:	4798      	blx	r3
}
    6fc8:	bd10      	pop	{r4, pc}
	delay_ms(delayValue);
    6fca:	4b02      	ldr	r3, [pc, #8]	; (6fd4 <analogDelay+0x18>)
    6fcc:	4798      	blx	r3
    6fce:	e7fb      	b.n	6fc8 <analogDelay+0xc>
    6fd0:	000044a1 	.word	0x000044a1
    6fd4:	000044cd 	.word	0x000044cd

00006fd8 <TXLed>:

void TXLed(bool OnOff)
{
	if(OnOff){
    6fd8:	2800      	cmp	r0, #0
    6fda:	d104      	bne.n	6fe6 <TXLed+0xe>
		port_base->OUTCLR.reg = pin_mask;
    6fdc:	2280      	movs	r2, #128	; 0x80
    6fde:	0312      	lsls	r2, r2, #12
    6fe0:	4b03      	ldr	r3, [pc, #12]	; (6ff0 <TXLed+0x18>)
    6fe2:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(LEDTx_PIN, LEDTx_ACTIVE);
	}
	else if(!OnOff){
		port_pin_set_output_level(LEDTx_PIN, LEDTx_INACTIVE);
	}	
}		
    6fe4:	4770      	bx	lr
		port_base->OUTSET.reg = pin_mask;
    6fe6:	2280      	movs	r2, #128	; 0x80
    6fe8:	0312      	lsls	r2, r2, #12
    6fea:	4b01      	ldr	r3, [pc, #4]	; (6ff0 <TXLed+0x18>)
    6fec:	619a      	str	r2, [r3, #24]
    6fee:	e7f9      	b.n	6fe4 <TXLed+0xc>
    6ff0:	40002800 	.word	0x40002800

00006ff4 <APP_TaskHandler>:

/*********************************************************************//*
 \brief      Application Task Handler
 ************************************************************************/
SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
    6ff4:	b510      	push	{r4, lr}
    Run_Demo();
    6ff6:	4b02      	ldr	r3, [pc, #8]	; (7000 <APP_TaskHandler+0xc>)
    6ff8:	4798      	blx	r3
    return SYSTEM_TASK_SUCCESS;
}
    6ffa:	2000      	movs	r0, #0
    6ffc:	bd10      	pop	{r4, pc}
    6ffe:	46c0      	nop			; (mov r8, r8)
    7000:	00007551 	.word	0x00007551

00007004 <ReadMacAddress>:
* Overview:		    Uses the MAC Address for addressing
*
* Note:			    
**********************************************************************/
void ReadMacAddress(void)
{
    7004:	b5f0      	push	{r4, r5, r6, r7, lr}
    7006:	b083      	sub	sp, #12
    7008:	466b      	mov	r3, sp
    700a:	4669      	mov	r1, sp
    700c:	4a11      	ldr	r2, [pc, #68]	; (7054 <ReadMacAddress+0x50>)
#elif (defined(__WLR089U0__))
	// applicable for module with WLR089 Xpro board or custom board
	#define NVM_UID_ADDRESS   ((volatile uint16_t *)(0x0080A00C))
	uint8_t i = 0, j = 0 ;
	uint8_t peui64[8] ;
	for (i = 0; i < MY_ADDRESS_LENGTH; i += 2, j++)
    700e:	4c12      	ldr	r4, [pc, #72]	; (7058 <ReadMacAddress+0x54>)
	{
		peui64[i] = (NVM_UID_ADDRESS[j] & 0xFF) ;
    7010:	8810      	ldrh	r0, [r2, #0]
    7012:	7008      	strb	r0, [r1, #0]
		peui64[i + 1] = (NVM_UID_ADDRESS[j] >> 8) ;
    7014:	8810      	ldrh	r0, [r2, #0]
    7016:	0a00      	lsrs	r0, r0, #8
    7018:	7048      	strb	r0, [r1, #1]
    701a:	3202      	adds	r2, #2
    701c:	3102      	adds	r1, #2
	for (i = 0; i < MY_ADDRESS_LENGTH; i += 2, j++)
    701e:	42a2      	cmp	r2, r4
    7020:	d1f6      	bne.n	7010 <ReadMacAddress+0xc>
    7022:	4a0e      	ldr	r2, [pc, #56]	; (705c <ReadMacAddress+0x58>)
    7024:	2008      	movs	r0, #8
    7026:	4240      	negs	r0, r0
    7028:	4468      	add	r0, sp
	}
	for (i= 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
    702a:	79d9      	ldrb	r1, [r3, #7]
    702c:	7011      	strb	r1, [r2, #0]
    702e:	3b01      	subs	r3, #1
    7030:	3201      	adds	r2, #1
	for (i= 0; i < MY_ADDRESS_LENGTH; i++)
    7032:	4283      	cmp	r3, r0
    7034:	d1f9      	bne.n	702a <ReadMacAddress+0x26>
    7036:	4d0a      	ldr	r5, [pc, #40]	; (7060 <ReadMacAddress+0x5c>)
    7038:	2400      	movs	r4, #0
#ifdef ENABLE_CONSOLE
#ifdef ENABLE_SLEEP_FEATURE		
		printf("%02x",peui64[i]);
#endif
#endif
		sprintf(&CVMS_MACid[i*2], "%02x",peui64[i]);
    703a:	4e0a      	ldr	r6, [pc, #40]	; (7064 <ReadMacAddress+0x60>)
    703c:	4f0a      	ldr	r7, [pc, #40]	; (7068 <ReadMacAddress+0x64>)
    703e:	466b      	mov	r3, sp
    7040:	5ce2      	ldrb	r2, [r4, r3]
    7042:	0031      	movs	r1, r6
    7044:	0028      	movs	r0, r5
    7046:	47b8      	blx	r7
    7048:	3401      	adds	r4, #1
    704a:	3502      	adds	r5, #2
	for (i= 0; i < MY_ADDRESS_LENGTH; i++)
    704c:	2c08      	cmp	r4, #8
    704e:	d1f6      	bne.n	703e <ReadMacAddress+0x3a>
		//CVMS_MACid[i] = peui64[i] ;
	}


#endif
}
    7050:	b003      	add	sp, #12
    7052:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7054:	0080a00c 	.word	0x0080a00c
    7058:	0080a014 	.word	0x0080a014
    705c:	20000014 	.word	0x20000014
    7060:	20001e90 	.word	0x20001e90
    7064:	000166b8 	.word	0x000166b8
    7068:	000156a5 	.word	0x000156a5

0000706c <main>:
{   
    706c:	b570      	push	{r4, r5, r6, lr}
	system_init();
    706e:	4b11      	ldr	r3, [pc, #68]	; (70b4 <main+0x48>)
    7070:	4798      	blx	r3
	delay_init();
    7072:	4b11      	ldr	r3, [pc, #68]	; (70b8 <main+0x4c>)
    7074:	4798      	blx	r3
	cpu_irq_enable();
    7076:	2201      	movs	r2, #1
    7078:	4b10      	ldr	r3, [pc, #64]	; (70bc <main+0x50>)
    707a:	701a      	strb	r2, [r3, #0]
    707c:	f3bf 8f5f 	dmb	sy
    7080:	b662      	cpsie	i
	ReadMacAddress(); 
    7082:	4b0f      	ldr	r3, [pc, #60]	; (70c0 <main+0x54>)
    7084:	4798      	blx	r3
	SystemTimerInit();
    7086:	4b0f      	ldr	r3, [pc, #60]	; (70c4 <main+0x58>)
    7088:	4798      	blx	r3
    DemoOutput_Greeting();	
    708a:	4b0f      	ldr	r3, [pc, #60]	; (70c8 <main+0x5c>)
    708c:	4798      	blx	r3
	configure_gpio();
    708e:	4b0f      	ldr	r3, [pc, #60]	; (70cc <main+0x60>)
    7090:	4798      	blx	r3
    7092:	2280      	movs	r2, #128	; 0x80
    7094:	0312      	lsls	r2, r2, #12
    7096:	4b0e      	ldr	r3, [pc, #56]	; (70d0 <main+0x64>)
    7098:	619a      	str	r2, [r3, #24]
    Initialize_Demo(freezer_enable);
    709a:	2000      	movs	r0, #0
    709c:	4b0d      	ldr	r3, [pc, #52]	; (70d4 <main+0x68>)
    709e:	4798      	blx	r3
	configure_adc();
    70a0:	4b0d      	ldr	r3, [pc, #52]	; (70d8 <main+0x6c>)
    70a2:	4798      	blx	r3
    Stack_Init();
    70a4:	4b0d      	ldr	r3, [pc, #52]	; (70dc <main+0x70>)
    70a6:	4798      	blx	r3
		SYSTEM_RunTasks();
    70a8:	4d0d      	ldr	r5, [pc, #52]	; (70e0 <main+0x74>)
		Run_Demo();
    70aa:	4c0e      	ldr	r4, [pc, #56]	; (70e4 <main+0x78>)
		SYSTEM_RunTasks();
    70ac:	47a8      	blx	r5
		Run_Demo();
    70ae:	47a0      	blx	r4
    70b0:	e7fc      	b.n	70ac <main+0x40>
    70b2:	46c0      	nop			; (mov r8, r8)
    70b4:	000062c5 	.word	0x000062c5
    70b8:	00004461 	.word	0x00004461
    70bc:	20000008 	.word	0x20000008
    70c0:	00007005 	.word	0x00007005
    70c4:	0000bb3d 	.word	0x0000bb3d
    70c8:	00006f79 	.word	0x00006f79
    70cc:	00006f89 	.word	0x00006f89
    70d0:	40002800 	.word	0x40002800
    70d4:	000073b5 	.word	0x000073b5
    70d8:	00006b99 	.word	0x00006b99
    70dc:	0000c175 	.word	0x0000c175
    70e0:	0000c185 	.word	0x0000c185
    70e4:	00007551 	.word	0x00007551

000070e8 <TxToutCallback>:
}
#endif //#ifdef PERIODIC_UPLINK

// Transmission time-out callback
void TxToutCallback(void)
{
    70e8:	b510      	push	{r4, lr}
#if defined(ENABLE_SLEEP_FEATURE)
	send_data = 0;
    70ea:	2200      	movs	r2, #0
    70ec:	4b04      	ldr	r3, [pc, #16]	; (7100 <TxToutCallback+0x18>)
    70ee:	701a      	strb	r2, [r3, #0]
#endif // #if defined(ENABLE_SLEEP_FEATURE)
	/* That bring the node back to continuous transaction cycle */
	PHY_DataConf(TRANSACTION_EXPIRED);
    70f0:	2005      	movs	r0, #5
    70f2:	4b04      	ldr	r3, [pc, #16]	; (7104 <TxToutCallback+0x1c>)
    70f4:	4798      	blx	r3
	SwTimerStop(TxTimerId);
    70f6:	4b04      	ldr	r3, [pc, #16]	; (7108 <TxToutCallback+0x20>)
    70f8:	7818      	ldrb	r0, [r3, #0]
    70fa:	4b04      	ldr	r3, [pc, #16]	; (710c <TxToutCallback+0x24>)
    70fc:	4798      	blx	r3
}
    70fe:	bd10      	pop	{r4, pc}
    7100:	20000104 	.word	0x20000104
    7104:	00009209 	.word	0x00009209
    7108:	20000105 	.word	0x20000105
    710c:	0000bef1 	.word	0x0000bef1

00007110 <dataConfcb>:

// Transmission callback
void dataConfcb(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    7110:	b510      	push	{r4, lr}
    7112:	0014      	movs	r4, r2
#if defined (ENABLE_CONSOLE)
	printf("\nData Confirm: Handle: %d status:%d \r\n", handle, status);
#endif // #if defined (ENABLE_CONSOLE)
#if defined(ENABLE_SLEEP_FEATURE)
	send_data = 0;
    7114:	2200      	movs	r2, #0
    7116:	4b06      	ldr	r3, [pc, #24]	; (7130 <dataConfcb+0x20>)
    7118:	701a      	strb	r2, [r3, #0]
#endif // #if defined(ENABLE_SLEEP_FEATURE)
	TXLed(false);
    711a:	2000      	movs	r0, #0
    711c:	4b05      	ldr	r3, [pc, #20]	; (7134 <dataConfcb+0x24>)
    711e:	4798      	blx	r3
	/* Stop transmission timeout timer */
	SwTimerStop(TxTimerId);
    7120:	4b05      	ldr	r3, [pc, #20]	; (7138 <dataConfcb+0x28>)
    7122:	7818      	ldrb	r0, [r3, #0]
    7124:	4b05      	ldr	r3, [pc, #20]	; (713c <dataConfcb+0x2c>)
    7126:	4798      	blx	r3
	/* Free payload buffer allocated */
	MiMem_Free(msgPointer);
    7128:	0020      	movs	r0, r4
    712a:	4b05      	ldr	r3, [pc, #20]	; (7140 <dataConfcb+0x30>)
    712c:	4798      	blx	r3
	SwTimerStart (DutyCyclingTimerId, MS_TO_US(dutyCyclingDurationMilliSec) , 0/*SW_TIMEOUT_RELATIVE*/, (void *)dutyCyclingCallback, NULL) ;
	#if defined (ENABLE_CONSOLE)
	printf("Send next data after: %ld ms\r\n", dutyCyclingDurationMilliSec) ;
	#endif
#endif // #ifdef DUTY_CYCLING
}
    712e:	bd10      	pop	{r4, pc}
    7130:	20000104 	.word	0x20000104
    7134:	00006fd9 	.word	0x00006fd9
    7138:	20000105 	.word	0x20000105
    713c:	0000bef1 	.word	0x0000bef1
    7140:	0000aad5 	.word	0x0000aad5

00007144 <ReceivedDataIndication>:
	printf("\r\n");
#endif
}

void ReceivedDataIndication (RECEIVED_MESSAGE *ind)
{
    7144:	b510      	push	{r4, lr}
    /*******************************************************************/
    // If a packet has been received, handle the information available
    // in rxMessage.
    /*******************************************************************/
	if ((myPANID.v[1] == ind->SourcePANID.v[1]) && (myPANID.v[0] == ind->SourcePANID.v[0]))
    7146:	4b0c      	ldr	r3, [pc, #48]	; (7178 <ReceivedDataIndication+0x34>)
    7148:	881a      	ldrh	r2, [r3, #0]
    714a:	8843      	ldrh	r3, [r0, #2]
    714c:	429a      	cmp	r2, r3
    714e:	d005      	beq.n	715c <ReceivedDataIndication+0x18>
		LED_Toggle(LED0);
		//DemoOutput_Instruction();
	}
	else
	{
		printf("Packet received from other Source PAN ID : 0x%x%x\r\n",ind->SourcePANID.v[1],ind->SourcePANID.v[0]);
    7150:	7882      	ldrb	r2, [r0, #2]
    7152:	78c1      	ldrb	r1, [r0, #3]
    7154:	4809      	ldr	r0, [pc, #36]	; (717c <ReceivedDataIndication+0x38>)
    7156:	4b0a      	ldr	r3, [pc, #40]	; (7180 <ReceivedDataIndication+0x3c>)
    7158:	4798      	blx	r3
	}
}
    715a:	bd10      	pop	{r4, pc}
		DemoOutput_UpdateTxRx(TxNum, ++RxNum);
    715c:	4b09      	ldr	r3, [pc, #36]	; (7184 <ReceivedDataIndication+0x40>)
    715e:	7818      	ldrb	r0, [r3, #0]
    7160:	4b09      	ldr	r3, [pc, #36]	; (7188 <ReceivedDataIndication+0x44>)
    7162:	7819      	ldrb	r1, [r3, #0]
    7164:	3101      	adds	r1, #1
    7166:	b2c9      	uxtb	r1, r1
    7168:	7019      	strb	r1, [r3, #0]
    716a:	4b08      	ldr	r3, [pc, #32]	; (718c <ReceivedDataIndication+0x48>)
    716c:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    716e:	2280      	movs	r2, #128	; 0x80
    7170:	0312      	lsls	r2, r2, #12
    7172:	4b07      	ldr	r3, [pc, #28]	; (7190 <ReceivedDataIndication+0x4c>)
    7174:	61da      	str	r2, [r3, #28]
    7176:	e7f0      	b.n	715a <ReceivedDataIndication+0x16>
    7178:	20002f88 	.word	0x20002f88
    717c:	000166c0 	.word	0x000166c0
    7180:	0001559d 	.word	0x0001559d
    7184:	20000101 	.word	0x20000101
    7188:	20000100 	.word	0x20000100
    718c:	00006f7f 	.word	0x00006f7f
    7190:	40002800 	.word	0x40002800

00007194 <p2p_demo_send_data>:
// uint8_t msgType - BROADCAST or UNICAST
// uint8_t targetAddr - target address for unicast message
// uint8_t* data - data buffer
// uint8_t len - data length
void p2p_demo_send_data(uint8_t msgType, uint8_t targetAddr, uint8_t *data, uint8_t len)
{
    7194:	b5f0      	push	{r4, r5, r6, r7, lr}
    7196:	46c6      	mov	lr, r8
    7198:	b500      	push	{lr}
    719a:	b086      	sub	sp, #24
    719c:	4680      	mov	r8, r0
    719e:	000e      	movs	r6, r1
    71a0:	0015      	movs	r5, r2
    71a2:	001c      	movs	r4, r3
	}
#endif // #ifdef DUTY_CYCLING
	
	uint8_t* dataPtr = NULL ;
	uint8_t dataLen = 0 ;
	uint16_t broadcastAddress = 0xFFFF ;
    71a4:	2201      	movs	r2, #1
    71a6:	4252      	negs	r2, r2
    71a8:	2316      	movs	r3, #22
    71aa:	446b      	add	r3, sp
    71ac:	801a      	strh	r2, [r3, #0]
	bool sendData_status ;	

	dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(len)) ;
    71ae:	2010      	movs	r0, #16
    71b0:	2c0f      	cmp	r4, #15
    71b2:	d905      	bls.n	71c0 <p2p_demo_send_data+0x2c>
    71b4:	0723      	lsls	r3, r4, #28
    71b6:	d03a      	beq.n	722e <p2p_demo_send_data+0x9a>
    71b8:	0920      	lsrs	r0, r4, #4
    71ba:	3001      	adds	r0, #1
    71bc:	0100      	lsls	r0, r0, #4
    71be:	b2c0      	uxtb	r0, r0
    71c0:	4b36      	ldr	r3, [pc, #216]	; (729c <p2p_demo_send_data+0x108>)
    71c2:	4798      	blx	r3
    71c4:	1e07      	subs	r7, r0, #0
	if (NULL == dataPtr)
    71c6:	d05e      	beq.n	7286 <p2p_demo_send_data+0xf2>
		return ;
	
	for (i = 0; i < len; i++)
    71c8:	2200      	movs	r2, #0
    71ca:	4b35      	ldr	r3, [pc, #212]	; (72a0 <p2p_demo_send_data+0x10c>)
    71cc:	701a      	strb	r2, [r3, #0]
    71ce:	2c00      	cmp	r4, #0
    71d0:	d031      	beq.n	7236 <p2p_demo_send_data+0xa2>
    71d2:	2100      	movs	r1, #0
    71d4:	2300      	movs	r3, #0
    71d6:	4832      	ldr	r0, [pc, #200]	; (72a0 <p2p_demo_send_data+0x10c>)
	{
		dataPtr[dataLen++] = data[i] ;
    71d8:	1c5a      	adds	r2, r3, #1
    71da:	b2d2      	uxtb	r2, r2
    71dc:	5c69      	ldrb	r1, [r5, r1]
    71de:	54f9      	strb	r1, [r7, r3]
	for (i = 0; i < len; i++)
    71e0:	7801      	ldrb	r1, [r0, #0]
    71e2:	3101      	adds	r1, #1
    71e4:	b2c9      	uxtb	r1, r1
    71e6:	7001      	strb	r1, [r0, #0]
		dataPtr[dataLen++] = data[i] ;
    71e8:	0013      	movs	r3, r2
	for (i = 0; i < len; i++)
    71ea:	428c      	cmp	r4, r1
    71ec:	d8f4      	bhi.n	71d8 <p2p_demo_send_data+0x44>
	}
#if defined(ENABLE_SLEEP_FEATURE)
	// to not enter to the sleep loop until data has been sent
	send_data = 1;
    71ee:	2101      	movs	r1, #1
    71f0:	4b2c      	ldr	r3, [pc, #176]	; (72a4 <p2p_demo_send_data+0x110>)
    71f2:	7019      	strb	r1, [r3, #0]

#ifdef DUTY_CYCLING
	appDataPhyLen = dataLen ;
#endif // #ifdef DUTY_CYCLING

	if (msgType == UNICAST)
    71f4:	4643      	mov	r3, r8
    71f6:	2b00      	cmp	r3, #0
    71f8:	d11f      	bne.n	723a <p2p_demo_send_data+0xa6>
	{
		// unicast message
		sendData_status = MiApp_SendData(LONG_ADDR_LEN, ConnectionTable[targetAddr].Address, dataLen, dataPtr, msghandledemo++, false, dataConfcb) ;
    71fa:	492b      	ldr	r1, [pc, #172]	; (72a8 <p2p_demo_send_data+0x114>)
    71fc:	780b      	ldrb	r3, [r1, #0]
    71fe:	1c58      	adds	r0, r3, #1
    7200:	7008      	strb	r0, [r1, #0]
    7202:	00b1      	lsls	r1, r6, #2
    7204:	1989      	adds	r1, r1, r6
    7206:	0049      	lsls	r1, r1, #1
    7208:	4e28      	ldr	r6, [pc, #160]	; (72ac <p2p_demo_send_data+0x118>)
    720a:	1989      	adds	r1, r1, r6
    720c:	4828      	ldr	r0, [pc, #160]	; (72b0 <p2p_demo_send_data+0x11c>)
    720e:	9002      	str	r0, [sp, #8]
    7210:	2000      	movs	r0, #0
    7212:	9001      	str	r0, [sp, #4]
    7214:	9300      	str	r3, [sp, #0]
    7216:	003b      	movs	r3, r7
    7218:	3008      	adds	r0, #8
    721a:	4c26      	ldr	r4, [pc, #152]	; (72b4 <p2p_demo_send_data+0x120>)
    721c:	47a0      	blx	r4
	{
		// broadcast message
		sendData_status = MiApp_SendData(SHORT_ADDR_LEN, (uint8_t *)&broadcastAddress, dataLen, dataPtr, msghandledemo++, false, dataConfcb) ;
	}

	if (sendData_status == false)
    721e:	2800      	cmp	r0, #0
    7220:	d11c      	bne.n	725c <p2p_demo_send_data+0xc8>
	{
#if defined(ENABLE_SLEEP_FEATURE)
		PHY_DataConf(FAILURE);
    7222:	2001      	movs	r0, #1
    7224:	4b24      	ldr	r3, [pc, #144]	; (72b8 <p2p_demo_send_data+0x124>)
    7226:	4798      	blx	r3
#endif // #if defined(ENABLE_SLEEP_FEATURE)
		if (msgType == UNICAST)
			DemoOutput_UnicastFail();
    7228:	4b24      	ldr	r3, [pc, #144]	; (72bc <p2p_demo_send_data+0x128>)
    722a:	4798      	blx	r3
    722c:	e023      	b.n	7276 <p2p_demo_send_data+0xe2>
	dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(len)) ;
    722e:	230f      	movs	r3, #15
    7230:	0020      	movs	r0, r4
    7232:	4398      	bics	r0, r3
    7234:	e7c4      	b.n	71c0 <p2p_demo_send_data+0x2c>
	uint8_t dataLen = 0 ;
    7236:	0022      	movs	r2, r4
    7238:	e7d9      	b.n	71ee <p2p_demo_send_data+0x5a>
		sendData_status = MiApp_SendData(SHORT_ADDR_LEN, (uint8_t *)&broadcastAddress, dataLen, dataPtr, msghandledemo++, false, dataConfcb) ;
    723a:	491b      	ldr	r1, [pc, #108]	; (72a8 <p2p_demo_send_data+0x114>)
    723c:	780b      	ldrb	r3, [r1, #0]
    723e:	1c58      	adds	r0, r3, #1
    7240:	7008      	strb	r0, [r1, #0]
    7242:	491b      	ldr	r1, [pc, #108]	; (72b0 <p2p_demo_send_data+0x11c>)
    7244:	9102      	str	r1, [sp, #8]
    7246:	2100      	movs	r1, #0
    7248:	9101      	str	r1, [sp, #4]
    724a:	9300      	str	r3, [sp, #0]
    724c:	003b      	movs	r3, r7
    724e:	3116      	adds	r1, #22
    7250:	4469      	add	r1, sp
    7252:	2002      	movs	r0, #2
    7254:	4c17      	ldr	r4, [pc, #92]	; (72b4 <p2p_demo_send_data+0x120>)
    7256:	47a0      	blx	r4
	if (sendData_status == false)
    7258:	2800      	cmp	r0, #0
    725a:	d018      	beq.n	728e <p2p_demo_send_data+0xfa>
			DemoOutput_BroadcastFail() ;
	}
	else
	{
		// Successful Transmission
		TxNum++ ;
    725c:	4a18      	ldr	r2, [pc, #96]	; (72c0 <p2p_demo_send_data+0x12c>)
    725e:	7813      	ldrb	r3, [r2, #0]
    7260:	3301      	adds	r3, #1
    7262:	7013      	strb	r3, [r2, #0]
		SwTimerStart (TxTimerId, MS_TO_US(5000), 0/*SW_TIMEOUT_RELATIVE*/, (void *)TxToutCallback, NULL) ;
    7264:	4b17      	ldr	r3, [pc, #92]	; (72c4 <p2p_demo_send_data+0x130>)
    7266:	7818      	ldrb	r0, [r3, #0]
    7268:	2300      	movs	r3, #0
    726a:	9300      	str	r3, [sp, #0]
    726c:	4b16      	ldr	r3, [pc, #88]	; (72c8 <p2p_demo_send_data+0x134>)
    726e:	2200      	movs	r2, #0
    7270:	4916      	ldr	r1, [pc, #88]	; (72cc <p2p_demo_send_data+0x138>)
    7272:	4c17      	ldr	r4, [pc, #92]	; (72d0 <p2p_demo_send_data+0x13c>)
    7274:	47a0      	blx	r4
	}
	// Update the LCD
	DemoOutput_UpdateTxRx(TxNum, RxNum);
    7276:	4b17      	ldr	r3, [pc, #92]	; (72d4 <p2p_demo_send_data+0x140>)
    7278:	7819      	ldrb	r1, [r3, #0]
    727a:	4b11      	ldr	r3, [pc, #68]	; (72c0 <p2p_demo_send_data+0x12c>)
    727c:	7818      	ldrb	r0, [r3, #0]
    727e:	4b16      	ldr	r3, [pc, #88]	; (72d8 <p2p_demo_send_data+0x144>)
    7280:	4798      	blx	r3
	DemoOutput_Instruction();
    7282:	4b16      	ldr	r3, [pc, #88]	; (72dc <p2p_demo_send_data+0x148>)
    7284:	4798      	blx	r3
#if defined (ENABLE_CONSOLE)
	printf("Tx Messages: %d - Rx Messages: %d\r\n", TxNum, RxNum) ;	
#endif
}
    7286:	b006      	add	sp, #24
    7288:	bc04      	pop	{r2}
    728a:	4690      	mov	r8, r2
    728c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PHY_DataConf(FAILURE);
    728e:	2001      	movs	r0, #1
    7290:	4b09      	ldr	r3, [pc, #36]	; (72b8 <p2p_demo_send_data+0x124>)
    7292:	4798      	blx	r3
			DemoOutput_BroadcastFail() ;
    7294:	4b12      	ldr	r3, [pc, #72]	; (72e0 <p2p_demo_send_data+0x14c>)
    7296:	4798      	blx	r3
    7298:	e7ed      	b.n	7276 <p2p_demo_send_data+0xe2>
    729a:	46c0      	nop			; (mov r8, r8)
    729c:	0000aa19 	.word	0x0000aa19
    72a0:	20001f10 	.word	0x20001f10
    72a4:	20000104 	.word	0x20000104
    72a8:	20000103 	.word	0x20000103
    72ac:	200025a8 	.word	0x200025a8
    72b0:	00007111 	.word	0x00007111
    72b4:	00009fb5 	.word	0x00009fb5
    72b8:	00009209 	.word	0x00009209
    72bc:	00006f83 	.word	0x00006f83
    72c0:	20000101 	.word	0x20000101
    72c4:	20000105 	.word	0x20000105
    72c8:	000070e9 	.word	0x000070e9
    72cc:	004c4b40 	.word	0x004c4b40
    72d0:	0000bbd9 	.word	0x0000bbd9
    72d4:	20000100 	.word	0x20000100
    72d8:	00006f7f 	.word	0x00006f7f
    72dc:	00006f7d 	.word	0x00006f7d
    72e0:	00006f85 	.word	0x00006f85

000072e4 <run_p2p_demo>:
{
    72e4:	b530      	push	{r4, r5, lr}
    72e6:	b083      	sub	sp, #12
	if (Total_Connections()) // Remove this condition and check.
    72e8:	4b23      	ldr	r3, [pc, #140]	; (7378 <run_p2p_demo+0x94>)
    72ea:	4798      	blx	r3
    72ec:	2800      	cmp	r0, #0
    72ee:	d01e      	beq.n	732e <run_p2p_demo+0x4a>
		if(!(P2PStatus.bits.DataRequesting || P2PStatus.bits.RxHasUserData || send_data))
    72f0:	4b22      	ldr	r3, [pc, #136]	; (737c <run_p2p_demo+0x98>)
    72f2:	781b      	ldrb	r3, [r3, #0]
    72f4:	075b      	lsls	r3, r3, #29
    72f6:	d41a      	bmi.n	732e <run_p2p_demo+0x4a>
    72f8:	4b20      	ldr	r3, [pc, #128]	; (737c <run_p2p_demo+0x98>)
    72fa:	781b      	ldrb	r3, [r3, #0]
    72fc:	071b      	lsls	r3, r3, #28
    72fe:	d416      	bmi.n	732e <run_p2p_demo+0x4a>
    7300:	4b1f      	ldr	r3, [pc, #124]	; (7380 <run_p2p_demo+0x9c>)
    7302:	781b      	ldrb	r3, [r3, #0]
    7304:	2b00      	cmp	r3, #0
    7306:	d112      	bne.n	732e <run_p2p_demo+0x4a>
			if((frame_cntr%2) == 0)
    7308:	4b1e      	ldr	r3, [pc, #120]	; (7384 <run_p2p_demo+0xa0>)
    730a:	781b      	ldrb	r3, [r3, #0]
    730c:	07db      	lsls	r3, r3, #31
    730e:	d510      	bpl.n	7332 <run_p2p_demo+0x4e>
			TXLed(true);
    7310:	2001      	movs	r0, #1
    7312:	4c1d      	ldr	r4, [pc, #116]	; (7388 <run_p2p_demo+0xa4>)
    7314:	47a0      	blx	r4
			p2p_demo_send_data(BROADCAST, 0, payloadData, PAYLOAD_SIZE);
    7316:	231f      	movs	r3, #31
    7318:	4a1c      	ldr	r2, [pc, #112]	; (738c <run_p2p_demo+0xa8>)
    731a:	2100      	movs	r1, #0
    731c:	2001      	movs	r0, #1
    731e:	4d1c      	ldr	r5, [pc, #112]	; (7390 <run_p2p_demo+0xac>)
    7320:	47a8      	blx	r5
			TXLed(false);				
    7322:	2000      	movs	r0, #0
    7324:	47a0      	blx	r4
			frame_cntr++;
    7326:	4a17      	ldr	r2, [pc, #92]	; (7384 <run_p2p_demo+0xa0>)
    7328:	7813      	ldrb	r3, [r2, #0]
    732a:	3301      	adds	r3, #1
    732c:	7013      	strb	r3, [r2, #0]
}
    732e:	b003      	add	sp, #12
    7330:	bd30      	pop	{r4, r5, pc}
				frame_cntr = 0;
    7332:	2400      	movs	r4, #0
    7334:	4b13      	ldr	r3, [pc, #76]	; (7384 <run_p2p_demo+0xa0>)
    7336:	701c      	strb	r4, [r3, #0]
				MiApp_TransceiverPowerState(POWER_STATE_SLEEP);
    7338:	2000      	movs	r0, #0
    733a:	4b16      	ldr	r3, [pc, #88]	; (7394 <run_p2p_demo+0xb0>)
    733c:	4798      	blx	r3
	config->input_pull = PORT_PIN_PULL_UP;
    733e:	a901      	add	r1, sp, #4
    7340:	2301      	movs	r3, #1
    7342:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    7344:	708c      	strb	r4, [r1, #2]
				pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    7346:	700b      	strb	r3, [r1, #0]
				port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    7348:	200d      	movs	r0, #13
    734a:	4b13      	ldr	r3, [pc, #76]	; (7398 <run_p2p_demo+0xb4>)
    734c:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    734e:	2280      	movs	r2, #128	; 0x80
    7350:	0192      	lsls	r2, r2, #6
    7352:	4b12      	ldr	r3, [pc, #72]	; (739c <run_p2p_demo+0xb8>)
    7354:	615a      	str	r2, [r3, #20]
				if(!xCntTx)
    7356:	4b12      	ldr	r3, [pc, #72]	; (73a0 <run_p2p_demo+0xbc>)
    7358:	781b      	ldrb	r3, [r3, #0]
    735a:	2b00      	cmp	r3, #0
    735c:	d006      	beq.n	736c <run_p2p_demo+0x88>
				MiApp_TransceiverPowerState(power_state_mode);
    735e:	2001      	movs	r0, #1
    7360:	4b0c      	ldr	r3, [pc, #48]	; (7394 <run_p2p_demo+0xb0>)
    7362:	4798      	blx	r3
					CVMS_Task(payloadData);// @ToDo  Read ADC & upload PAYLOAD here.
    7364:	4809      	ldr	r0, [pc, #36]	; (738c <run_p2p_demo+0xa8>)
    7366:	4b0f      	ldr	r3, [pc, #60]	; (73a4 <run_p2p_demo+0xc0>)
    7368:	4798      	blx	r3
    736a:	e7d1      	b.n	7310 <run_p2p_demo+0x2c>
				uint32_t sleep_interval = xSleepPinInterval ;		// default sleep interval
    736c:	4b0e      	ldr	r3, [pc, #56]	; (73a8 <run_p2p_demo+0xc4>)
					sm_sleep(sleep_interval) ;					
    736e:	6818      	ldr	r0, [r3, #0]
    7370:	4b0e      	ldr	r3, [pc, #56]	; (73ac <run_p2p_demo+0xc8>)
    7372:	4798      	blx	r3
    7374:	e7f3      	b.n	735e <run_p2p_demo+0x7a>
    7376:	46c0      	nop			; (mov r8, r8)
    7378:	00009e45 	.word	0x00009e45
    737c:	20003380 	.word	0x20003380
    7380:	20000104 	.word	0x20000104
    7384:	20000102 	.word	0x20000102
    7388:	00006fd9 	.word	0x00006fd9
    738c:	20001ef0 	.word	0x20001ef0
    7390:	00007195 	.word	0x00007195
    7394:	0000a7e9 	.word	0x0000a7e9
    7398:	000050fd 	.word	0x000050fd
    739c:	40002800 	.word	0x40002800
    73a0:	20000009 	.word	0x20000009
    73a4:	00006f4d 	.word	0x00006f4d
    73a8:	200000fc 	.word	0x200000fc
    73ac:	0000c721 	.word	0x0000c721

000073b0 <Connection_Confirm>:

#ifdef DUTY_CYCLING
		SwTimerCreate(&DutyCyclingTimerId) ;
#endif // #ifdef DUTY_CYCLING
	}
}
    73b0:	4770      	bx	lr
    73b2:	Address 0x000073b2 is out of bounds.


000073b4 <Initialize_Demo>:

bool Initialize_Demo(bool freezer_enable)
{
    73b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    73b6:	b087      	sub	sp, #28
    73b8:	0005      	movs	r5, r0
    uint8_t i;

	bool invalidIEEEAddrFlag = false;
	uint64_t invalidIEEEAddr;

    MiApp_SubscribeDataIndicationCallback(ReceivedDataIndication);
    73ba:	484f      	ldr	r0, [pc, #316]	; (74f8 <Initialize_Demo+0x144>)
    73bc:	4b4f      	ldr	r3, [pc, #316]	; (74fc <Initialize_Demo+0x148>)
    73be:	4798      	blx	r3

#ifdef ENABLE_SLEEP_FEATURE
	sm_init();
    73c0:	4b4f      	ldr	r3, [pc, #316]	; (7500 <Initialize_Demo+0x14c>)
    73c2:	4798      	blx	r3
#endif

    if (freezer_enable)
    73c4:	2d00      	cmp	r5, #0
    73c6:	d032      	beq.n	742e <Initialize_Demo+0x7a>
    {
        MiApp_ProtocolInit(NULL, NULL);
    73c8:	2100      	movs	r1, #0
    73ca:	2000      	movs	r0, #0
    73cc:	4b4d      	ldr	r3, [pc, #308]	; (7504 <Initialize_Demo+0x150>)
    73ce:	4798      	blx	r3
		srand(PHY_RandomReq());
    73d0:	4b4d      	ldr	r3, [pc, #308]	; (7508 <Initialize_Demo+0x154>)
    73d2:	4798      	blx	r3
    73d4:	4b4d      	ldr	r3, [pc, #308]	; (750c <Initialize_Demo+0x158>)
    73d6:	4798      	blx	r3
		/* Check if a valid IEEE address is available.
		0x0000000000000000 and 0xFFFFFFFFFFFFFFFF is presumed to be invalid */
		/* Check if IEEE address is 0x0000000000000000 */
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    73d8:	2200      	movs	r2, #0
    73da:	2300      	movs	r3, #0
    73dc:	9204      	str	r2, [sp, #16]
    73de:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    73e0:	4e4b      	ldr	r6, [pc, #300]	; (7510 <Initialize_Demo+0x15c>)
    73e2:	3208      	adds	r2, #8
    73e4:	0031      	movs	r1, r6
    73e6:	a804      	add	r0, sp, #16
    73e8:	4d4a      	ldr	r5, [pc, #296]	; (7514 <Initialize_Demo+0x160>)
    73ea:	47a8      	blx	r5
    73ec:	0004      	movs	r4, r0
		{
			invalidIEEEAddrFlag = true;
		}

		/* Check if IEEE address is 0xFFFFFFFFFFFFFFFF */
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    73ee:	2201      	movs	r2, #1
    73f0:	4252      	negs	r2, r2
    73f2:	17d3      	asrs	r3, r2, #31
    73f4:	9204      	str	r2, [sp, #16]
    73f6:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    73f8:	3209      	adds	r2, #9
    73fa:	0031      	movs	r1, r6
    73fc:	a804      	add	r0, sp, #16
    73fe:	47a8      	blx	r5
    7400:	2800      	cmp	r0, #0
    7402:	d00a      	beq.n	741a <Initialize_Demo+0x66>
		{
			invalidIEEEAddrFlag = true;
		}
		
		if (invalidIEEEAddrFlag)
    7404:	2c00      	cmp	r4, #0
    7406:	d008      	beq.n	741a <Initialize_Demo+0x66>
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
			{
				*peui64++ = (uint8_t)rand();
			}
		}
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    7408:	4841      	ldr	r0, [pc, #260]	; (7510 <Initialize_Demo+0x15c>)
    740a:	4b43      	ldr	r3, [pc, #268]	; (7518 <Initialize_Demo+0x164>)
    740c:	4798      	blx	r3
#endif    
*/
    }
	
	/* Create SW timer for transmission timeout */
	SwTimerCreate(&TxTimerId) ;
    740e:	4843      	ldr	r0, [pc, #268]	; (751c <Initialize_Demo+0x168>)
    7410:	4b43      	ldr	r3, [pc, #268]	; (7520 <Initialize_Demo+0x16c>)
    7412:	4798      	blx	r3
	
	return true;
    7414:	2001      	movs	r0, #1
}
    7416:	b007      	add	sp, #28
    7418:	bdf0      	pop	{r4, r5, r6, r7, pc}
    741a:	4c3d      	ldr	r4, [pc, #244]	; (7510 <Initialize_Demo+0x15c>)
    741c:	0026      	movs	r6, r4
    741e:	3608      	adds	r6, #8
				*peui64++ = (uint8_t)rand();
    7420:	4d40      	ldr	r5, [pc, #256]	; (7524 <Initialize_Demo+0x170>)
    7422:	47a8      	blx	r5
    7424:	7020      	strb	r0, [r4, #0]
    7426:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    7428:	42b4      	cmp	r4, r6
    742a:	d1fa      	bne.n	7422 <Initialize_Demo+0x6e>
    742c:	e7ec      	b.n	7408 <Initialize_Demo+0x54>
		TXLed(true);
    742e:	2001      	movs	r0, #1
    7430:	4b3d      	ldr	r3, [pc, #244]	; (7528 <Initialize_Demo+0x174>)
    7432:	4798      	blx	r3
        MiApp_ProtocolInit(NULL, NULL);
    7434:	2100      	movs	r1, #0
    7436:	2000      	movs	r0, #0
    7438:	4b32      	ldr	r3, [pc, #200]	; (7504 <Initialize_Demo+0x150>)
    743a:	4798      	blx	r3
		PHY_SetTxPower(txPower) ;
    743c:	2014      	movs	r0, #20
    743e:	4b3b      	ldr	r3, [pc, #236]	; (752c <Initialize_Demo+0x178>)
    7440:	4798      	blx	r3
		srand(PHY_RandomReq());
    7442:	4b31      	ldr	r3, [pc, #196]	; (7508 <Initialize_Demo+0x154>)
    7444:	4798      	blx	r3
    7446:	4b31      	ldr	r3, [pc, #196]	; (750c <Initialize_Demo+0x158>)
    7448:	4798      	blx	r3
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    744a:	2200      	movs	r2, #0
    744c:	2300      	movs	r3, #0
    744e:	9204      	str	r2, [sp, #16]
    7450:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7452:	4f2f      	ldr	r7, [pc, #188]	; (7510 <Initialize_Demo+0x15c>)
    7454:	3208      	adds	r2, #8
    7456:	0039      	movs	r1, r7
    7458:	a804      	add	r0, sp, #16
    745a:	4e2e      	ldr	r6, [pc, #184]	; (7514 <Initialize_Demo+0x160>)
    745c:	47b0      	blx	r6
    745e:	0004      	movs	r4, r0
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    7460:	2201      	movs	r2, #1
    7462:	4252      	negs	r2, r2
    7464:	17d3      	asrs	r3, r2, #31
    7466:	9204      	str	r2, [sp, #16]
    7468:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    746a:	3209      	adds	r2, #9
    746c:	0039      	movs	r1, r7
    746e:	a804      	add	r0, sp, #16
    7470:	47b0      	blx	r6
    7472:	2800      	cmp	r0, #0
    7474:	d02a      	beq.n	74cc <Initialize_Demo+0x118>
		if (invalidIEEEAddrFlag)
    7476:	2c00      	cmp	r4, #0
    7478:	d028      	beq.n	74cc <Initialize_Demo+0x118>
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    747a:	4825      	ldr	r0, [pc, #148]	; (7510 <Initialize_Demo+0x15c>)
    747c:	4b26      	ldr	r3, [pc, #152]	; (7518 <Initialize_Demo+0x164>)
    747e:	4798      	blx	r3
        MiApp_ConnectionMode(ENABLE_ALL_CONN);
    7480:	2000      	movs	r0, #0
    7482:	4b2b      	ldr	r3, [pc, #172]	; (7530 <Initialize_Demo+0x17c>)
    7484:	4798      	blx	r3
        DemoOutput_Channel(myChannel, 0);
    7486:	4c2b      	ldr	r4, [pc, #172]	; (7534 <Initialize_Demo+0x180>)
    7488:	7820      	ldrb	r0, [r4, #0]
    748a:	2100      	movs	r1, #0
    748c:	4b2a      	ldr	r3, [pc, #168]	; (7538 <Initialize_Demo+0x184>)
    748e:	4798      	blx	r3
        if( MiApp_Set(CHANNEL, &myChannel) == false )
    7490:	0021      	movs	r1, r4
    7492:	2000      	movs	r0, #0
    7494:	4b29      	ldr	r3, [pc, #164]	; (753c <Initialize_Demo+0x188>)
    7496:	4798      	blx	r3
    7498:	2800      	cmp	r0, #0
    749a:	d021      	beq.n	74e0 <Initialize_Demo+0x12c>
		uint16_t broadcastAddress = 0xFFFF;
    749c:	220e      	movs	r2, #14
    749e:	446a      	add	r2, sp
    74a0:	2301      	movs	r3, #1
    74a2:	425b      	negs	r3, r3
    74a4:	8013      	strh	r3, [r2, #0]
		i = MiApp_EstablishConnection(myChannel, 0, (uint8_t*)&broadcastAddress, 0, Connection_Confirm);
    74a6:	4b23      	ldr	r3, [pc, #140]	; (7534 <Initialize_Demo+0x180>)
    74a8:	7818      	ldrb	r0, [r3, #0]
    74aa:	4b25      	ldr	r3, [pc, #148]	; (7540 <Initialize_Demo+0x18c>)
    74ac:	9300      	str	r3, [sp, #0]
    74ae:	2300      	movs	r3, #0
    74b0:	2100      	movs	r1, #0
    74b2:	4c24      	ldr	r4, [pc, #144]	; (7544 <Initialize_Demo+0x190>)
    74b4:	47a0      	blx	r4
        if( i != 0xFF )
    74b6:	28ff      	cmp	r0, #255	; 0xff
    74b8:	d017      	beq.n	74ea <Initialize_Demo+0x136>
            DemoOutput_Channel(myChannel, 1);
    74ba:	4b1e      	ldr	r3, [pc, #120]	; (7534 <Initialize_Demo+0x180>)
    74bc:	7818      	ldrb	r0, [r3, #0]
    74be:	2101      	movs	r1, #1
    74c0:	4b1d      	ldr	r3, [pc, #116]	; (7538 <Initialize_Demo+0x184>)
    74c2:	4798      	blx	r3
			TXLed(false);
    74c4:	2000      	movs	r0, #0
    74c6:	4b18      	ldr	r3, [pc, #96]	; (7528 <Initialize_Demo+0x174>)
    74c8:	4798      	blx	r3
    74ca:	e7a0      	b.n	740e <Initialize_Demo+0x5a>
    74cc:	4c10      	ldr	r4, [pc, #64]	; (7510 <Initialize_Demo+0x15c>)
    74ce:	0027      	movs	r7, r4
    74d0:	3708      	adds	r7, #8
				*peui64++ = (uint8_t)rand();
    74d2:	4e14      	ldr	r6, [pc, #80]	; (7524 <Initialize_Demo+0x170>)
    74d4:	47b0      	blx	r6
    74d6:	7020      	strb	r0, [r4, #0]
    74d8:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    74da:	42bc      	cmp	r4, r7
    74dc:	d1fa      	bne.n	74d4 <Initialize_Demo+0x120>
    74de:	e7cc      	b.n	747a <Initialize_Demo+0xc6>
            DemoOutput_ChannelError(myChannel);
    74e0:	4b14      	ldr	r3, [pc, #80]	; (7534 <Initialize_Demo+0x180>)
    74e2:	7818      	ldrb	r0, [r3, #0]
    74e4:	4b18      	ldr	r3, [pc, #96]	; (7548 <Initialize_Demo+0x194>)
    74e6:	4798      	blx	r3
    74e8:	e7d8      	b.n	749c <Initialize_Demo+0xe8>
			delay_ms(1000);
    74ea:	20fa      	movs	r0, #250	; 0xfa
    74ec:	0080      	lsls	r0, r0, #2
    74ee:	4b17      	ldr	r3, [pc, #92]	; (754c <Initialize_Demo+0x198>)
    74f0:	4798      	blx	r3
			return false;
    74f2:	0028      	movs	r0, r5
    74f4:	e78f      	b.n	7416 <Initialize_Demo+0x62>
    74f6:	46c0      	nop			; (mov r8, r8)
    74f8:	00007145 	.word	0x00007145
    74fc:	0000a241 	.word	0x0000a241
    7500:	0000c6e1 	.word	0x0000c6e1
    7504:	0000a05d 	.word	0x0000a05d
    7508:	00009df9 	.word	0x00009df9
    750c:	000155d1 	.word	0x000155d1
    7510:	20000014 	.word	0x20000014
    7514:	00014fc5 	.word	0x00014fc5
    7518:	00009e1d 	.word	0x00009e1d
    751c:	20000105 	.word	0x20000105
    7520:	0000bba5 	.word	0x0000bba5
    7524:	0001562d 	.word	0x0001562d
    7528:	00006fd9 	.word	0x00006fd9
    752c:	00009c89 	.word	0x00009c89
    7530:	0000a221 	.word	0x0000a221
    7534:	2000000d 	.word	0x2000000d
    7538:	00006f7b 	.word	0x00006f7b
    753c:	0000a039 	.word	0x0000a039
    7540:	000073b1 	.word	0x000073b1
    7544:	0000a889 	.word	0x0000a889
    7548:	00006f81 	.word	0x00006f81
    754c:	000044cd 	.word	0x000044cd

00007550 <Run_Demo>:

void Run_Demo(void)
{
    7550:	b510      	push	{r4, lr}
    P2PTasks();
    7552:	4b02      	ldr	r3, [pc, #8]	; (755c <Run_Demo+0xc>)
    7554:	4798      	blx	r3
    run_p2p_demo();   
    7556:	4b02      	ldr	r3, [pc, #8]	; (7560 <Run_Demo+0x10>)
    7558:	4798      	blx	r3
    755a:	bd10      	pop	{r4, pc}
    755c:	0000a3b5 	.word	0x0000a3b5
    7560:	000072e5 	.word	0x000072e5

00007564 <CompareData>:
     Otherwise it is the start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
static bool CompareData(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    7564:	b5f0      	push	{r4, r5, r6, r7, lr}
    7566:	46c6      	mov	lr, r8
    7568:	b500      	push	{lr}
    756a:	b084      	sub	sp, #16
    756c:	0014      	movs	r4, r2
    756e:	001f      	movs	r7, r3
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7570:	4b29      	ldr	r3, [pc, #164]	; (7618 <CompareData+0xb4>)
    7572:	18cb      	adds	r3, r1, r3
    7574:	0340      	lsls	r0, r0, #13
    7576:	181d      	adds	r5, r3, r0
  uint8_t  buffer[16U];

  assert(numberOfBytes);
    7578:	2f00      	cmp	r7, #0
    757a:	d01a      	beq.n	75b2 <CompareData+0x4e>
  assert(address <= D_NV_MEMORY_END);
    757c:	4b27      	ldr	r3, [pc, #156]	; (761c <CompareData+0xb8>)
    757e:	1e5a      	subs	r2, r3, #1
    7580:	4295      	cmp	r5, r2
    7582:	d81c      	bhi.n	75be <CompareData+0x5a>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7584:	197a      	adds	r2, r7, r5
    7586:	4293      	cmp	r3, r2
    7588:	d31f      	bcc.n	75ca <CompareData+0x66>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    758a:	19c9      	adds	r1, r1, r7
    758c:	2380      	movs	r3, #128	; 0x80
    758e:	019b      	lsls	r3, r3, #6
    7590:	4299      	cmp	r1, r3
    7592:	d820      	bhi.n	75d6 <CompareData+0x72>

  while(numberOfBytes)
  {
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);

    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    7594:	4b22      	ldr	r3, [pc, #136]	; (7620 <CompareData+0xbc>)
    7596:	4698      	mov	r8, r3
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);
    7598:	1c3e      	adds	r6, r7, #0
    759a:	2f10      	cmp	r7, #16
    759c:	d900      	bls.n	75a0 <CompareData+0x3c>
    759e:	2610      	movs	r6, #16
    75a0:	b2b6      	uxth	r6, r6
    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    75a2:	0032      	movs	r2, r6
    75a4:	0029      	movs	r1, r5
    75a6:	4668      	mov	r0, sp
    75a8:	47c0      	blx	r8
    for (uint8_t i = 0U; i < bytesToRead; i++)
    75aa:	2e00      	cmp	r6, #0
    75ac:	d028      	beq.n	7600 <CompareData+0x9c>
    75ae:	2300      	movs	r3, #0
    75b0:	e01f      	b.n	75f2 <CompareData+0x8e>
  assert(numberOfBytes);
    75b2:	4b1c      	ldr	r3, [pc, #112]	; (7624 <CompareData+0xc0>)
    75b4:	4a1c      	ldr	r2, [pc, #112]	; (7628 <CompareData+0xc4>)
    75b6:	21d9      	movs	r1, #217	; 0xd9
    75b8:	481c      	ldr	r0, [pc, #112]	; (762c <CompareData+0xc8>)
    75ba:	4c1d      	ldr	r4, [pc, #116]	; (7630 <CompareData+0xcc>)
    75bc:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    75be:	4b1d      	ldr	r3, [pc, #116]	; (7634 <CompareData+0xd0>)
    75c0:	4a19      	ldr	r2, [pc, #100]	; (7628 <CompareData+0xc4>)
    75c2:	21da      	movs	r1, #218	; 0xda
    75c4:	4819      	ldr	r0, [pc, #100]	; (762c <CompareData+0xc8>)
    75c6:	4c1a      	ldr	r4, [pc, #104]	; (7630 <CompareData+0xcc>)
    75c8:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    75ca:	4b1b      	ldr	r3, [pc, #108]	; (7638 <CompareData+0xd4>)
    75cc:	4a16      	ldr	r2, [pc, #88]	; (7628 <CompareData+0xc4>)
    75ce:	21db      	movs	r1, #219	; 0xdb
    75d0:	4816      	ldr	r0, [pc, #88]	; (762c <CompareData+0xc8>)
    75d2:	4c17      	ldr	r4, [pc, #92]	; (7630 <CompareData+0xcc>)
    75d4:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    75d6:	4b19      	ldr	r3, [pc, #100]	; (763c <CompareData+0xd8>)
    75d8:	4a13      	ldr	r2, [pc, #76]	; (7628 <CompareData+0xc4>)
    75da:	21dc      	movs	r1, #220	; 0xdc
    75dc:	4813      	ldr	r0, [pc, #76]	; (762c <CompareData+0xc8>)
    75de:	4c14      	ldr	r4, [pc, #80]	; (7630 <CompareData+0xcc>)
    75e0:	47a0      	blx	r4
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    75e2:	21ff      	movs	r1, #255	; 0xff
    75e4:	4291      	cmp	r1, r2
    75e6:	d112      	bne.n	760e <CompareData+0xaa>
    for (uint8_t i = 0U; i < bytesToRead; i++)
    75e8:	3301      	adds	r3, #1
    75ea:	b2db      	uxtb	r3, r3
    75ec:	b29a      	uxth	r2, r3
    75ee:	4296      	cmp	r6, r2
    75f0:	d906      	bls.n	7600 <CompareData+0x9c>
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    75f2:	466a      	mov	r2, sp
    75f4:	5cd2      	ldrb	r2, [r2, r3]
    75f6:	2c00      	cmp	r4, #0
    75f8:	d0f3      	beq.n	75e2 <CompareData+0x7e>
    75fa:	7821      	ldrb	r1, [r4, #0]
    75fc:	3401      	adds	r4, #1
    75fe:	e7f1      	b.n	75e4 <CompareData+0x80>
        return false;

    numberOfBytes -= bytesToRead;
    7600:	1bbf      	subs	r7, r7, r6
    7602:	b2bf      	uxth	r7, r7
    address += bytesToRead;
    7604:	19ad      	adds	r5, r5, r6
  while(numberOfBytes)
    7606:	2f00      	cmp	r7, #0
    7608:	d1c6      	bne.n	7598 <CompareData+0x34>
  }

  return true;
    760a:	2001      	movs	r0, #1
    760c:	e000      	b.n	7610 <CompareData+0xac>
        return false;
    760e:	2000      	movs	r0, #0
}
    7610:	b004      	add	sp, #16
    7612:	bc04      	pop	{r2}
    7614:	4690      	mov	r8, r2
    7616:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7618:	00000400 	.word	0x00000400
    761c:	00004400 	.word	0x00004400
    7620:	00014fe3 	.word	0x00014fe3
    7624:	000166f4 	.word	0x000166f4
    7628:	00016800 	.word	0x00016800
    762c:	00016704 	.word	0x00016704
    7630:	00014f21 	.word	0x00014f21
    7634:	00016748 	.word	0x00016748
    7638:	00016764 	.word	0x00016764
    763c:	00016798 	.word	0x00016798

00007640 <D_Nv_Read_Impl>:
{
    7640:	b570      	push	{r4, r5, r6, lr}
    7642:	0015      	movs	r5, r2
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    7644:	0344      	lsls	r4, r0, #13
    7646:	4813      	ldr	r0, [pc, #76]	; (7694 <D_Nv_Read_Impl+0x54>)
    7648:	1808      	adds	r0, r1, r0
    764a:	1824      	adds	r4, r4, r0
  assert(address <= D_NV_MEMORY_END);
    764c:	4a12      	ldr	r2, [pc, #72]	; (7698 <D_Nv_Read_Impl+0x58>)
    764e:	1e50      	subs	r0, r2, #1
    7650:	4284      	cmp	r4, r0
    7652:	d80d      	bhi.n	7670 <D_Nv_Read_Impl+0x30>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    7654:	18e0      	adds	r0, r4, r3
    7656:	4282      	cmp	r2, r0
    7658:	d310      	bcc.n	767c <D_Nv_Read_Impl+0x3c>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    765a:	18c9      	adds	r1, r1, r3
    765c:	2280      	movs	r2, #128	; 0x80
    765e:	0192      	lsls	r2, r2, #6
    7660:	4291      	cmp	r1, r2
    7662:	d811      	bhi.n	7688 <D_Nv_Read_Impl+0x48>
  memcpy(pBuffer, (uint8_t FLASH_PTR *)address, numberOfBytes);
    7664:	001a      	movs	r2, r3
    7666:	0021      	movs	r1, r4
    7668:	0028      	movs	r0, r5
    766a:	4b0c      	ldr	r3, [pc, #48]	; (769c <D_Nv_Read_Impl+0x5c>)
    766c:	4798      	blx	r3
}
    766e:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    7670:	4b0b      	ldr	r3, [pc, #44]	; (76a0 <D_Nv_Read_Impl+0x60>)
    7672:	4a0c      	ldr	r2, [pc, #48]	; (76a4 <D_Nv_Read_Impl+0x64>)
    7674:	2172      	movs	r1, #114	; 0x72
    7676:	480c      	ldr	r0, [pc, #48]	; (76a8 <D_Nv_Read_Impl+0x68>)
    7678:	4c0c      	ldr	r4, [pc, #48]	; (76ac <D_Nv_Read_Impl+0x6c>)
    767a:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    767c:	4b0c      	ldr	r3, [pc, #48]	; (76b0 <D_Nv_Read_Impl+0x70>)
    767e:	4a09      	ldr	r2, [pc, #36]	; (76a4 <D_Nv_Read_Impl+0x64>)
    7680:	2173      	movs	r1, #115	; 0x73
    7682:	4809      	ldr	r0, [pc, #36]	; (76a8 <D_Nv_Read_Impl+0x68>)
    7684:	4c09      	ldr	r4, [pc, #36]	; (76ac <D_Nv_Read_Impl+0x6c>)
    7686:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    7688:	4b0a      	ldr	r3, [pc, #40]	; (76b4 <D_Nv_Read_Impl+0x74>)
    768a:	4a06      	ldr	r2, [pc, #24]	; (76a4 <D_Nv_Read_Impl+0x64>)
    768c:	2174      	movs	r1, #116	; 0x74
    768e:	4806      	ldr	r0, [pc, #24]	; (76a8 <D_Nv_Read_Impl+0x68>)
    7690:	4c06      	ldr	r4, [pc, #24]	; (76ac <D_Nv_Read_Impl+0x6c>)
    7692:	47a0      	blx	r4
    7694:	00000400 	.word	0x00000400
    7698:	00004400 	.word	0x00004400
    769c:	00014fe3 	.word	0x00014fe3
    76a0:	00016748 	.word	0x00016748
    76a4:	000167c8 	.word	0x000167c8
    76a8:	00016704 	.word	0x00016704
    76ac:	00014f21 	.word	0x00014f21
    76b0:	00016764 	.word	0x00016764
    76b4:	00016798 	.word	0x00016798

000076b8 <D_Nv_Write_Impl>:
{
    76b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    76ba:	46de      	mov	lr, fp
    76bc:	4657      	mov	r7, sl
    76be:	464e      	mov	r6, r9
    76c0:	4645      	mov	r5, r8
    76c2:	b5e0      	push	{r5, r6, r7, lr}
    76c4:	b093      	sub	sp, #76	; 0x4c
    76c6:	9201      	str	r2, [sp, #4]
    76c8:	469a      	mov	sl, r3
  uint32_t  address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    76ca:	4c46      	ldr	r4, [pc, #280]	; (77e4 <D_Nv_Write_Impl+0x12c>)
    76cc:	190c      	adds	r4, r1, r4
    76ce:	0340      	lsls	r0, r0, #13
    76d0:	1825      	adds	r5, r4, r0
  assert(numberOfBytes);
    76d2:	2b00      	cmp	r3, #0
    76d4:	d047      	beq.n	7766 <D_Nv_Write_Impl+0xae>
  assert(address <= D_NV_MEMORY_END);
    76d6:	4b44      	ldr	r3, [pc, #272]	; (77e8 <D_Nv_Write_Impl+0x130>)
    76d8:	1e5a      	subs	r2, r3, #1
    76da:	4295      	cmp	r5, r2
    76dc:	d849      	bhi.n	7772 <D_Nv_Write_Impl+0xba>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    76de:	4652      	mov	r2, sl
    76e0:	1952      	adds	r2, r2, r5
    76e2:	4293      	cmp	r3, r2
    76e4:	d34b      	bcc.n	777e <D_Nv_Write_Impl+0xc6>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    76e6:	46d3      	mov	fp, sl
    76e8:	4451      	add	r1, sl
    76ea:	2380      	movs	r3, #128	; 0x80
    76ec:	019b      	lsls	r3, r3, #6
    76ee:	4299      	cmp	r1, r3
    76f0:	d84b      	bhi.n	778a <D_Nv_Write_Impl+0xd2>
  if (s_pfSystemCheckCallback != NULL)
    76f2:	4b3e      	ldr	r3, [pc, #248]	; (77ec <D_Nv_Write_Impl+0x134>)
    76f4:	681b      	ldr	r3, [r3, #0]
    76f6:	2b00      	cmp	r3, #0
    76f8:	d000      	beq.n	76fc <D_Nv_Write_Impl+0x44>
    s_pfSystemCheckCallback();
    76fa:	4798      	blx	r3
  pageOffset = address % NVMCTRL_PAGE_SIZE;
    76fc:	273f      	movs	r7, #63	; 0x3f
    76fe:	402f      	ands	r7, r5
  pageStart = address - pageOffset;
    7700:	1bec      	subs	r4, r5, r7
  numberOfPageBytes = MIN((NVMCTRL_PAGE_SIZE - pageOffset), numberOfBytes);
    7702:	2640      	movs	r6, #64	; 0x40
    7704:	1bf6      	subs	r6, r6, r7
    7706:	455e      	cmp	r6, fp
    7708:	dd00      	ble.n	770c <D_Nv_Write_Impl+0x54>
    770a:	4656      	mov	r6, sl
    770c:	b2b3      	uxth	r3, r6
    770e:	469b      	mov	fp, r3
  memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    7710:	2240      	movs	r2, #64	; 0x40
    7712:	21ff      	movs	r1, #255	; 0xff
    7714:	a802      	add	r0, sp, #8
    7716:	4b36      	ldr	r3, [pc, #216]	; (77f0 <D_Nv_Write_Impl+0x138>)
    7718:	4798      	blx	r3
  memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    771a:	003b      	movs	r3, r7
    771c:	aa02      	add	r2, sp, #8
    771e:	4694      	mov	ip, r2
    7720:	4463      	add	r3, ip
    7722:	9300      	str	r3, [sp, #0]
    7724:	0436      	lsls	r6, r6, #16
    7726:	0c37      	lsrs	r7, r6, #16
    7728:	003a      	movs	r2, r7
    772a:	9901      	ldr	r1, [sp, #4]
    772c:	0018      	movs	r0, r3
    772e:	4b31      	ldr	r3, [pc, #196]	; (77f4 <D_Nv_Write_Impl+0x13c>)
    7730:	4798      	blx	r3
	cpu_irq_enter_critical();
    7732:	4b31      	ldr	r3, [pc, #196]	; (77f8 <D_Nv_Write_Impl+0x140>)
    7734:	4798      	blx	r3
    error_code = nvm_write_buffer(pageStart, page_buf, NVMCTRL_PAGE_SIZE);
    7736:	4e31      	ldr	r6, [pc, #196]	; (77fc <D_Nv_Write_Impl+0x144>)
    7738:	2240      	movs	r2, #64	; 0x40
    773a:	a902      	add	r1, sp, #8
    773c:	0020      	movs	r0, r4
    773e:	47b0      	blx	r6
  } while (error_code == STATUS_BUSY);
    7740:	2805      	cmp	r0, #5
    7742:	d0f9      	beq.n	7738 <D_Nv_Write_Impl+0x80>
	cpu_irq_leave_critical();
    7744:	4b2e      	ldr	r3, [pc, #184]	; (7800 <D_Nv_Write_Impl+0x148>)
    7746:	4798      	blx	r3
  numberOfBytes -= numberOfPageBytes;
    7748:	4653      	mov	r3, sl
    774a:	465a      	mov	r2, fp
    774c:	1a9e      	subs	r6, r3, r2
    774e:	b2b6      	uxth	r6, r6
  address += numberOfPageBytes;
    7750:	19ec      	adds	r4, r5, r7
  pBuffer += numberOfPageBytes;
    7752:	9b01      	ldr	r3, [sp, #4]
    7754:	4699      	mov	r9, r3
    7756:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    7758:	2e00      	cmp	r6, #0
    775a:	d03b      	beq.n	77d4 <D_Nv_Write_Impl+0x11c>
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    775c:	4b24      	ldr	r3, [pc, #144]	; (77f0 <D_Nv_Write_Impl+0x138>)
    775e:	469b      	mov	fp, r3
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    7760:	4b24      	ldr	r3, [pc, #144]	; (77f4 <D_Nv_Write_Impl+0x13c>)
    7762:	4698      	mov	r8, r3
    7764:	e031      	b.n	77ca <D_Nv_Write_Impl+0x112>
  assert(numberOfBytes);
    7766:	4b27      	ldr	r3, [pc, #156]	; (7804 <D_Nv_Write_Impl+0x14c>)
    7768:	4a27      	ldr	r2, [pc, #156]	; (7808 <D_Nv_Write_Impl+0x150>)
    776a:	218a      	movs	r1, #138	; 0x8a
    776c:	4827      	ldr	r0, [pc, #156]	; (780c <D_Nv_Write_Impl+0x154>)
    776e:	4c28      	ldr	r4, [pc, #160]	; (7810 <D_Nv_Write_Impl+0x158>)
    7770:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    7772:	4b28      	ldr	r3, [pc, #160]	; (7814 <D_Nv_Write_Impl+0x15c>)
    7774:	4a24      	ldr	r2, [pc, #144]	; (7808 <D_Nv_Write_Impl+0x150>)
    7776:	218b      	movs	r1, #139	; 0x8b
    7778:	4824      	ldr	r0, [pc, #144]	; (780c <D_Nv_Write_Impl+0x154>)
    777a:	4c25      	ldr	r4, [pc, #148]	; (7810 <D_Nv_Write_Impl+0x158>)
    777c:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    777e:	4b26      	ldr	r3, [pc, #152]	; (7818 <D_Nv_Write_Impl+0x160>)
    7780:	4a21      	ldr	r2, [pc, #132]	; (7808 <D_Nv_Write_Impl+0x150>)
    7782:	218c      	movs	r1, #140	; 0x8c
    7784:	4821      	ldr	r0, [pc, #132]	; (780c <D_Nv_Write_Impl+0x154>)
    7786:	4c22      	ldr	r4, [pc, #136]	; (7810 <D_Nv_Write_Impl+0x158>)
    7788:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    778a:	4b24      	ldr	r3, [pc, #144]	; (781c <D_Nv_Write_Impl+0x164>)
    778c:	4a1e      	ldr	r2, [pc, #120]	; (7808 <D_Nv_Write_Impl+0x150>)
    778e:	218d      	movs	r1, #141	; 0x8d
    7790:	481e      	ldr	r0, [pc, #120]	; (780c <D_Nv_Write_Impl+0x154>)
    7792:	4c1f      	ldr	r4, [pc, #124]	; (7810 <D_Nv_Write_Impl+0x158>)
    7794:	47a0      	blx	r4
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    7796:	b29f      	uxth	r7, r3
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    7798:	2240      	movs	r2, #64	; 0x40
    779a:	21ff      	movs	r1, #255	; 0xff
    779c:	a802      	add	r0, sp, #8
    779e:	47d8      	blx	fp
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    77a0:	003a      	movs	r2, r7
    77a2:	4649      	mov	r1, r9
    77a4:	9800      	ldr	r0, [sp, #0]
    77a6:	47c0      	blx	r8
	cpu_irq_enter_critical();
    77a8:	4b13      	ldr	r3, [pc, #76]	; (77f8 <D_Nv_Write_Impl+0x140>)
    77aa:	4798      	blx	r3
      error_code = nvm_write_buffer(address, page_buf, NVMCTRL_PAGE_SIZE);
    77ac:	4d13      	ldr	r5, [pc, #76]	; (77fc <D_Nv_Write_Impl+0x144>)
    77ae:	2240      	movs	r2, #64	; 0x40
    77b0:	a902      	add	r1, sp, #8
    77b2:	0020      	movs	r0, r4
    77b4:	47a8      	blx	r5
    } while (error_code == STATUS_BUSY);
    77b6:	2805      	cmp	r0, #5
    77b8:	d0f9      	beq.n	77ae <D_Nv_Write_Impl+0xf6>
	cpu_irq_leave_critical();
    77ba:	4b11      	ldr	r3, [pc, #68]	; (7800 <D_Nv_Write_Impl+0x148>)
    77bc:	4798      	blx	r3
    numberOfBytes -= numberOfPageBytes;
    77be:	1bf6      	subs	r6, r6, r7
    77c0:	b2b6      	uxth	r6, r6
    address += numberOfPageBytes;
    77c2:	19e4      	adds	r4, r4, r7
    pBuffer += numberOfPageBytes;
    77c4:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    77c6:	2e00      	cmp	r6, #0
    77c8:	d004      	beq.n	77d4 <D_Nv_Write_Impl+0x11c>
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    77ca:	1c33      	adds	r3, r6, #0
    77cc:	2e40      	cmp	r6, #64	; 0x40
    77ce:	d9e2      	bls.n	7796 <D_Nv_Write_Impl+0xde>
    77d0:	2340      	movs	r3, #64	; 0x40
    77d2:	e7e0      	b.n	7796 <D_Nv_Write_Impl+0xde>
}
    77d4:	b013      	add	sp, #76	; 0x4c
    77d6:	bc3c      	pop	{r2, r3, r4, r5}
    77d8:	4690      	mov	r8, r2
    77da:	4699      	mov	r9, r3
    77dc:	46a2      	mov	sl, r4
    77de:	46ab      	mov	fp, r5
    77e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77e2:	46c0      	nop			; (mov r8, r8)
    77e4:	00000400 	.word	0x00000400
    77e8:	00004400 	.word	0x00004400
    77ec:	20000108 	.word	0x20000108
    77f0:	00014ff5 	.word	0x00014ff5
    77f4:	00014fe3 	.word	0x00014fe3
    77f8:	000044f9 	.word	0x000044f9
    77fc:	00004f9d 	.word	0x00004f9d
    7800:	00004539 	.word	0x00004539
    7804:	000166f4 	.word	0x000166f4
    7808:	000167d8 	.word	0x000167d8
    780c:	00016704 	.word	0x00016704
    7810:	00014f21 	.word	0x00014f21
    7814:	00016748 	.word	0x00016748
    7818:	00016764 	.word	0x00016764
    781c:	00016798 	.word	0x00016798

00007820 <D_Nv_EraseSector_Impl>:
{
    7820:	b570      	push	{r4, r5, r6, lr}
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE;
    7822:	0344      	lsls	r4, r0, #13
    7824:	480c      	ldr	r0, [pc, #48]	; (7858 <D_Nv_EraseSector_Impl+0x38>)
    7826:	1824      	adds	r4, r4, r0
  address &= ~(NVMCTRL_ROW_SIZE - 1);
    7828:	23ff      	movs	r3, #255	; 0xff
    782a:	439c      	bics	r4, r3
  assert(address <= D_NV_MEMORY_END);
    782c:	4b0b      	ldr	r3, [pc, #44]	; (785c <D_Nv_EraseSector_Impl+0x3c>)
    782e:	3b01      	subs	r3, #1
    7830:	2280      	movs	r2, #128	; 0x80
    7832:	0192      	lsls	r2, r2, #6
    7834:	18a6      	adds	r6, r4, r2
    7836:	429c      	cmp	r4, r3
    7838:	d807      	bhi.n	784a <D_Nv_EraseSector_Impl+0x2a>
    nvm_erase_row (address);
    783a:	4d09      	ldr	r5, [pc, #36]	; (7860 <D_Nv_EraseSector_Impl+0x40>)
    783c:	0020      	movs	r0, r4
    783e:	47a8      	blx	r5
    address += NVMCTRL_ROW_SIZE;
    7840:	3401      	adds	r4, #1
    7842:	34ff      	adds	r4, #255	; 0xff
  for (uint8_t i = 0U; i < (D_NV_SECTOR_SIZE / NVMCTRL_ROW_SIZE); i++)
    7844:	42b4      	cmp	r4, r6
    7846:	d1f9      	bne.n	783c <D_Nv_EraseSector_Impl+0x1c>
}
    7848:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    784a:	4b06      	ldr	r3, [pc, #24]	; (7864 <D_Nv_EraseSector_Impl+0x44>)
    784c:	4a06      	ldr	r2, [pc, #24]	; (7868 <D_Nv_EraseSector_Impl+0x48>)
    784e:	21c2      	movs	r1, #194	; 0xc2
    7850:	4806      	ldr	r0, [pc, #24]	; (786c <D_Nv_EraseSector_Impl+0x4c>)
    7852:	4c07      	ldr	r4, [pc, #28]	; (7870 <D_Nv_EraseSector_Impl+0x50>)
    7854:	47a0      	blx	r4
    7856:	46c0      	nop			; (mov r8, r8)
    7858:	00000400 	.word	0x00000400
    785c:	00004400 	.word	0x00004400
    7860:	00005075 	.word	0x00005075
    7864:	00016748 	.word	0x00016748
    7868:	000167e8 	.word	0x000167e8
    786c:	00016704 	.word	0x00016704
    7870:	00014f21 	.word	0x00014f21

00007874 <D_Nv_IsEmpty_Impl>:
    \param numberOfBytes The number of bytes to check
    \returns true if the range is empty, FALSE otherwise.
    \note Sector crossing is not permitted
*/
bool D_Nv_IsEmpty(uint8_t sector, uint16_t offset, D_Nv_Size_t numberOfBytes)
{
    7874:	b510      	push	{r4, lr}
    7876:	0013      	movs	r3, r2
  return CompareData(sector, offset, NULL, numberOfBytes);
    7878:	2200      	movs	r2, #0
    787a:	4c01      	ldr	r4, [pc, #4]	; (7880 <D_Nv_IsEmpty_Impl+0xc>)
    787c:	47a0      	blx	r4
}
    787e:	bd10      	pop	{r4, pc}
    7880:	00007565 	.word	0x00007565

00007884 <D_Nv_IsEqual_Impl>:
    \param[in] pBuffer The start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
bool D_Nv_IsEqual(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    7884:	b510      	push	{r4, lr}
  return CompareData(sector, offset, pBuffer, numberOfBytes);
    7886:	4c01      	ldr	r4, [pc, #4]	; (788c <D_Nv_IsEqual_Impl+0x8>)
    7888:	47a0      	blx	r4
}
    788a:	bd10      	pop	{r4, pc}
    788c:	00007565 	.word	0x00007565

00007890 <PowerSupplyTooLow>:
/** Check the power supply.
    \returns TRUE if the power supply is too low, FALSE when the the power
             supply is OK or when there is no callback installed.
*/
static bool PowerSupplyTooLow()
{
    7890:	b510      	push	{r4, lr}
    bool result = false;
    if ( s_powerSupplyCheckingFunction != NULL )
    7892:	4b05      	ldr	r3, [pc, #20]	; (78a8 <PowerSupplyTooLow+0x18>)
    7894:	681b      	ldr	r3, [r3, #0]
    7896:	2b00      	cmp	r3, #0
    7898:	d004      	beq.n	78a4 <PowerSupplyTooLow+0x14>
    {
        if ( !s_powerSupplyCheckingFunction() )
    789a:	4798      	blx	r3
    789c:	2301      	movs	r3, #1
    789e:	4058      	eors	r0, r3
    78a0:	b2c0      	uxtb	r0, r0
        {
            result = true;
        }
    }
    return result;
}
    78a2:	bd10      	pop	{r4, pc}
    bool result = false;
    78a4:	2000      	movs	r0, #0
    78a6:	e7fc      	b.n	78a2 <PowerSupplyTooLow+0x12>
    78a8:	20000274 	.word	0x20000274

000078ac <UpdateSectorHead>:
*/

static void UpdateSectorHead(uint16_t increment, ItemAlignment_t itemAlignment )
{
    // Adjust the sector head according to the increment and alignment given
    switch(itemAlignment)
    78ac:	2901      	cmp	r1, #1
    78ae:	d009      	beq.n	78c4 <UpdateSectorHead+0x18>
    78b0:	2900      	cmp	r1, #0
    78b2:	d002      	beq.n	78ba <UpdateSectorHead+0xe>
    78b4:	2902      	cmp	r1, #2
    78b6:	d00d      	beq.n	78d4 <UpdateSectorHead+0x28>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
           break;
        default:
           break;
    }
}
    78b8:	4770      	bx	lr
           s_sectorHead = (s_sectorHead + increment);
    78ba:	4b0a      	ldr	r3, [pc, #40]	; (78e4 <UpdateSectorHead+0x38>)
    78bc:	881a      	ldrh	r2, [r3, #0]
    78be:	1880      	adds	r0, r0, r2
    78c0:	8018      	strh	r0, [r3, #0]
           break;
    78c2:	e7f9      	b.n	78b8 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x000Fu) & 0xFFF0u;
    78c4:	4a07      	ldr	r2, [pc, #28]	; (78e4 <UpdateSectorHead+0x38>)
    78c6:	8813      	ldrh	r3, [r2, #0]
    78c8:	330f      	adds	r3, #15
    78ca:	18c0      	adds	r0, r0, r3
    78cc:	230f      	movs	r3, #15
    78ce:	4398      	bics	r0, r3
    78d0:	8010      	strh	r0, [r2, #0]
           break;
    78d2:	e7f1      	b.n	78b8 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
    78d4:	4a03      	ldr	r2, [pc, #12]	; (78e4 <UpdateSectorHead+0x38>)
    78d6:	8813      	ldrh	r3, [r2, #0]
    78d8:	333f      	adds	r3, #63	; 0x3f
    78da:	18c0      	adds	r0, r0, r3
    78dc:	233f      	movs	r3, #63	; 0x3f
    78de:	4398      	bics	r0, r3
    78e0:	8010      	strh	r0, [r2, #0]
}
    78e2:	e7e9      	b.n	78b8 <UpdateSectorHead+0xc>
    78e4:	2000027a 	.word	0x2000027a

000078e8 <ComputeCrc>:
    // item not found
    return 0x0000u;
}

static uint16_t ComputeCrc(uint8_t* pData, uint16_t length, uint16_t crc)
{
    78e8:	b530      	push	{r4, r5, lr}
    for ( /* empty */ ; length != 0u; length-- )
    78ea:	2900      	cmp	r1, #0
    78ec:	d019      	beq.n	7922 <ComputeCrc+0x3a>
    {
        uint8_t x;
        uint8_t data;

        if (pData == NULL)
            data = 0xFF;
    78ee:	24ff      	movs	r4, #255	; 0xff
    78f0:	e013      	b.n	791a <ComputeCrc+0x32>
    78f2:	0023      	movs	r3, r4
        else
            data = *pData;

        x = (uint8_t) ((crc >> 8) ^ data);
    78f4:	0a15      	lsrs	r5, r2, #8
    78f6:	406b      	eors	r3, r5
        x = x ^ (x >> 4);
    78f8:	091d      	lsrs	r5, r3, #4
    78fa:	406b      	eors	r3, r5
        crc = (crc << 8) ^ ((uint16_t) x << 12) ^ ((uint16_t) x << 5) ^ (uint16_t) x;
    78fc:	0212      	lsls	r2, r2, #8
    78fe:	405a      	eors	r2, r3
    7900:	031d      	lsls	r5, r3, #12
    7902:	406a      	eors	r2, r5
    7904:	015b      	lsls	r3, r3, #5
    7906:	405a      	eors	r2, r3
    7908:	b292      	uxth	r2, r2

        if ( pData != NULL )
          pData++;
    790a:	0003      	movs	r3, r0
    790c:	1e5d      	subs	r5, r3, #1
    790e:	41ab      	sbcs	r3, r5
    7910:	18c0      	adds	r0, r0, r3
    for ( /* empty */ ; length != 0u; length-- )
    7912:	3901      	subs	r1, #1
    7914:	b289      	uxth	r1, r1
    7916:	2900      	cmp	r1, #0
    7918:	d003      	beq.n	7922 <ComputeCrc+0x3a>
        if (pData == NULL)
    791a:	2800      	cmp	r0, #0
    791c:	d0e9      	beq.n	78f2 <ComputeCrc+0xa>
            data = *pData;
    791e:	7803      	ldrb	r3, [r0, #0]
    7920:	e7e8      	b.n	78f4 <ComputeCrc+0xc>
    }

    return crc;
}
    7922:	0010      	movs	r0, r2
    7924:	bd30      	pop	{r4, r5, pc}
    7926:	Address 0x00007926 is out of bounds.


00007928 <GatherData>:
       be copied to the flash memory \ref s_sectorHead in sector \ref s_sector.

*/

static bool GatherData(uint8_t sourceSector, uint16_t lastBlockPointer, uint16_t offset, uint16_t length, void* pData)
{
    7928:	b5f0      	push	{r4, r5, r6, r7, lr}
    792a:	46de      	mov	lr, fp
    792c:	4657      	mov	r7, sl
    792e:	b580      	push	{r7, lr}
    7930:	b089      	sub	sp, #36	; 0x24
    7932:	9001      	str	r0, [sp, #4]
    7934:	9102      	str	r1, [sp, #8]
    7936:	4693      	mov	fp, r2
    uint16_t blockStart;
    uint16_t blockEnd;
    uint16_t count;

    // prepare the correct pointer
    if ( pData != NULL )
    7938:	9a10      	ldr	r2, [sp, #64]	; 0x40
    793a:	2a00      	cmp	r2, #0
    793c:	d00d      	beq.n	795a <GatherData+0x32>
    {
        pDestination = (uint8_t*) pData + length;
    793e:	4692      	mov	sl, r2
    7940:	449a      	add	sl, r3

    // [readStart, readEnd> is the range of data that can be read during the current
    // pass over the blocks (the range includes readStart, but not readEnd).
    // it is initialized with the requested range
    uint16_t readStart = offset;
    uint16_t readEnd = offset + length;
    7942:	445b      	add	r3, fp
    7944:	b29d      	uxth	r5, r3

    // continue until we have all the data that was requested
    while ( readStart != readEnd )
    7946:	465e      	mov	r6, fp
    7948:	9c02      	ldr	r4, [sp, #8]
            sourcePointer -= count;
            pDestination -= count;
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
        }
    }
    return true;
    794a:	2001      	movs	r0, #1
    while ( readStart != readEnd )
    794c:	45ab      	cmp	fp, r5
    794e:	d03e      	beq.n	79ce <GatherData+0xa6>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    7950:	4f22      	ldr	r7, [pc, #136]	; (79dc <GatherData+0xb4>)
            if ( currentBlockPointer == 0x0000u )
    7952:	2c00      	cmp	r4, #0
    7954:	d108      	bne.n	7968 <GatherData+0x40>
                return false;
    7956:	2000      	movs	r0, #0
    7958:	e039      	b.n	79ce <GatherData+0xa6>
    uint8_t* pDestination = NULL;
    795a:	2200      	movs	r2, #0
    795c:	4692      	mov	sl, r2
    795e:	e7f0      	b.n	7942 <GatherData+0x1a>
            currentBlockPointer = blockHeader.previousBlock;
    7960:	ab04      	add	r3, sp, #16
    7962:	895c      	ldrh	r4, [r3, #10]
            if ( currentBlockPointer == 0x0000u )
    7964:	2c00      	cmp	r4, #0
    7966:	d031      	beq.n	79cc <GatherData+0xa4>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    7968:	2310      	movs	r3, #16
    796a:	aa04      	add	r2, sp, #16
    796c:	0021      	movs	r1, r4
    796e:	9801      	ldr	r0, [sp, #4]
    7970:	47b8      	blx	r7
            blockStart = blockHeader.blockOffset;
    7972:	ab04      	add	r3, sp, #16
    7974:	889a      	ldrh	r2, [r3, #4]
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    7976:	42aa      	cmp	r2, r5
    7978:	d2f2      	bcs.n	7960 <GatherData+0x38>
            blockEnd = blockHeader.blockOffset + blockHeader.blockLength;
    797a:	88db      	ldrh	r3, [r3, #6]
    797c:	18d3      	adds	r3, r2, r3
    797e:	b29b      	uxth	r3, r3
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    7980:	42b3      	cmp	r3, r6
    7982:	d9ed      	bls.n	7960 <GatherData+0x38>
            else if ( readEnd > blockEnd )
    7984:	42ab      	cmp	r3, r5
    7986:	d201      	bcs.n	798c <GatherData+0x64>
                readStart = blockEnd;
    7988:	001e      	movs	r6, r3
    798a:	e7e9      	b.n	7960 <GatherData+0x38>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    798c:	1aa9      	subs	r1, r5, r2
    798e:	b289      	uxth	r1, r1
        if ( readStart < blockStart )
    7990:	42b2      	cmp	r2, r6
    7992:	d915      	bls.n	79c0 <GatherData+0x98>
            currentBlockPointer = blockHeader.previousBlock;
    7994:	ab04      	add	r3, sp, #16
    7996:	895b      	ldrh	r3, [r3, #10]
    7998:	9303      	str	r3, [sp, #12]
            count = readEnd - blockStart;
    799a:	000b      	movs	r3, r1
        readEnd -= count;
    799c:	1aed      	subs	r5, r5, r3
    799e:	b2ad      	uxth	r5, r5
        if ( pDestination != NULL)
    79a0:	4652      	mov	r2, sl
    79a2:	2a00      	cmp	r2, #0
    79a4:	d008      	beq.n	79b8 <GatherData+0x90>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    79a6:	3410      	adds	r4, #16
    79a8:	1909      	adds	r1, r1, r4
            pDestination -= count;
    79aa:	1ad2      	subs	r2, r2, r3
    79ac:	4692      	mov	sl, r2
            sourcePointer -= count;
    79ae:	1ac9      	subs	r1, r1, r3
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
    79b0:	b289      	uxth	r1, r1
    79b2:	9801      	ldr	r0, [sp, #4]
    79b4:	4c09      	ldr	r4, [pc, #36]	; (79dc <GatherData+0xb4>)
    79b6:	47a0      	blx	r4
    while ( readStart != readEnd )
    79b8:	42ae      	cmp	r6, r5
    79ba:	d00d      	beq.n	79d8 <GatherData+0xb0>
    79bc:	9c03      	ldr	r4, [sp, #12]
    79be:	e7c8      	b.n	7952 <GatherData+0x2a>
            count = readEnd - readStart;
    79c0:	1bab      	subs	r3, r5, r6
    79c2:	b29b      	uxth	r3, r3
            readStart = offset;
    79c4:	465e      	mov	r6, fp
            currentBlockPointer = lastBlockPointer;
    79c6:	9a02      	ldr	r2, [sp, #8]
    79c8:	9203      	str	r2, [sp, #12]
    79ca:	e7e7      	b.n	799c <GatherData+0x74>
                return false;
    79cc:	2000      	movs	r0, #0
}
    79ce:	b009      	add	sp, #36	; 0x24
    79d0:	bc0c      	pop	{r2, r3}
    79d2:	4692      	mov	sl, r2
    79d4:	469b      	mov	fp, r3
    79d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    79d8:	2001      	movs	r0, #1
    79da:	e7f8      	b.n	79ce <GatherData+0xa6>
    79dc:	00007641 	.word	0x00007641

000079e0 <ComputeDataCrc>:
{
    79e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    79e2:	46de      	mov	lr, fp
    79e4:	4647      	mov	r7, r8
    79e6:	b580      	push	{r7, lr}
    79e8:	b087      	sub	sp, #28
    79ea:	9004      	str	r0, [sp, #16]
    79ec:	9105      	str	r1, [sp, #20]
    length = pBlockHeader->blockLength;
    79ee:	7995      	ldrb	r5, [r2, #6]
    79f0:	79d3      	ldrb	r3, [r2, #7]
    79f2:	021b      	lsls	r3, r3, #8
    79f4:	431d      	orrs	r5, r3
    offset = pBlockHeader->blockOffset;
    79f6:	7917      	ldrb	r7, [r2, #4]
    79f8:	7953      	ldrb	r3, [r2, #5]
    79fa:	021b      	lsls	r3, r3, #8
    79fc:	431f      	orrs	r7, r3
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    79fe:	0a2c      	lsrs	r4, r5, #8
    7a00:	b264      	sxtb	r4, r4
    7a02:	2c00      	cmp	r4, #0
    7a04:	db2f      	blt.n	7a66 <ComputeDataCrc+0x86>
    7a06:	4b1c      	ldr	r3, [pc, #112]	; (7a78 <ComputeDataCrc+0x98>)
    7a08:	9303      	str	r3, [sp, #12]
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    7a0a:	4b1c      	ldr	r3, [pc, #112]	; (7a7c <ComputeDataCrc+0x9c>)
    7a0c:	4698      	mov	r8, r3
    7a0e:	e011      	b.n	7a34 <ComputeDataCrc+0x54>
        if (dataLength == 0)
    7a10:	2d00      	cmp	r5, #0
    7a12:	d02a      	beq.n	7a6a <ComputeDataCrc+0x8a>
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    7a14:	4b1a      	ldr	r3, [pc, #104]	; (7a80 <ComputeDataCrc+0xa0>)
    7a16:	9300      	str	r3, [sp, #0]
    7a18:	002b      	movs	r3, r5
    7a1a:	003a      	movs	r2, r7
    7a1c:	9905      	ldr	r1, [sp, #20]
    7a1e:	9804      	ldr	r0, [sp, #16]
    7a20:	4e18      	ldr	r6, [pc, #96]	; (7a84 <ComputeDataCrc+0xa4>)
    7a22:	47b0      	blx	r6
    7a24:	2800      	cmp	r0, #0
    7a26:	d020      	beq.n	7a6a <ComputeDataCrc+0x8a>
    7a28:	0029      	movs	r1, r5
    7a2a:	e015      	b.n	7a58 <ComputeDataCrc+0x78>
    7a2c:	3c01      	subs	r4, #1
    7a2e:	b264      	sxtb	r4, r4
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    7a30:	1c63      	adds	r3, r4, #1
    7a32:	d01a      	beq.n	7a6a <ComputeDataCrc+0x8a>
        if (i)
    7a34:	2c00      	cmp	r4, #0
    7a36:	d0eb      	beq.n	7a10 <ComputeDataCrc+0x30>
            length = length - sizeof(dataBlock);
    7a38:	3d01      	subs	r5, #1
    7a3a:	3dff      	subs	r5, #255	; 0xff
    7a3c:	b2ad      	uxth	r5, r5
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    7a3e:	4b10      	ldr	r3, [pc, #64]	; (7a80 <ComputeDataCrc+0xa0>)
    7a40:	9300      	str	r3, [sp, #0]
    7a42:	2380      	movs	r3, #128	; 0x80
    7a44:	005b      	lsls	r3, r3, #1
    7a46:	003a      	movs	r2, r7
    7a48:	9905      	ldr	r1, [sp, #20]
    7a4a:	9804      	ldr	r0, [sp, #16]
    7a4c:	4e0d      	ldr	r6, [pc, #52]	; (7a84 <ComputeDataCrc+0xa4>)
    7a4e:	47b0      	blx	r6
    7a50:	2800      	cmp	r0, #0
    7a52:	d0eb      	beq.n	7a2c <ComputeDataCrc+0x4c>
            dataLength = sizeof(dataBlock);
    7a54:	2180      	movs	r1, #128	; 0x80
    7a56:	0049      	lsls	r1, r1, #1
            offset = offset+dataLength;
    7a58:	187f      	adds	r7, r7, r1
    7a5a:	b2bf      	uxth	r7, r7
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    7a5c:	9a03      	ldr	r2, [sp, #12]
    7a5e:	4808      	ldr	r0, [pc, #32]	; (7a80 <ComputeDataCrc+0xa0>)
    7a60:	47c0      	blx	r8
    7a62:	9003      	str	r0, [sp, #12]
    7a64:	e7e2      	b.n	7a2c <ComputeDataCrc+0x4c>
    uint16_t crc = 0xFFFFu;
    7a66:	4b04      	ldr	r3, [pc, #16]	; (7a78 <ComputeDataCrc+0x98>)
    7a68:	9303      	str	r3, [sp, #12]
}
    7a6a:	9803      	ldr	r0, [sp, #12]
    7a6c:	b007      	add	sp, #28
    7a6e:	bc0c      	pop	{r2, r3}
    7a70:	4690      	mov	r8, r2
    7a72:	469b      	mov	fp, r3
    7a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a76:	46c0      	nop			; (mov r8, r8)
    7a78:	0000ffff 	.word	0x0000ffff
    7a7c:	000078e9 	.word	0x000078e9
    7a80:	2000013c 	.word	0x2000013c
    7a84:	00007929 	.word	0x00007929

00007a88 <FindItemCache>:
{
    7a88:	b570      	push	{r4, r5, r6, lr}
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    7a8a:	4b16      	ldr	r3, [pc, #88]	; (7ae4 <FindItemCache+0x5c>)
    7a8c:	781c      	ldrb	r4, [r3, #0]
    7a8e:	2c00      	cmp	r4, #0
    7a90:	d026      	beq.n	7ae0 <FindItemCache+0x58>
        if ( cache->id == id )
    7a92:	4b15      	ldr	r3, [pc, #84]	; (7ae8 <FindItemCache+0x60>)
    7a94:	881b      	ldrh	r3, [r3, #0]
    7a96:	4283      	cmp	r3, r0
    7a98:	d016      	beq.n	7ac8 <FindItemCache+0x40>
    7a9a:	2301      	movs	r3, #1
    7a9c:	4e12      	ldr	r6, [pc, #72]	; (7ae8 <FindItemCache+0x60>)
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    7a9e:	b2da      	uxtb	r2, r3
    7aa0:	4294      	cmp	r4, r2
    7aa2:	d91b      	bls.n	7adc <FindItemCache+0x54>
        Item_t *cache = &s_itemCache[cacheIndex];
    7aa4:	001d      	movs	r5, r3
        if ( cache->id == id )
    7aa6:	1c59      	adds	r1, r3, #1
    7aa8:	009a      	lsls	r2, r3, #2
    7aaa:	5ab2      	ldrh	r2, [r6, r2]
    7aac:	4282      	cmp	r2, r0
    7aae:	d001      	beq.n	7ab4 <FindItemCache+0x2c>
    7ab0:	000b      	movs	r3, r1
    7ab2:	e7f4      	b.n	7a9e <FindItemCache+0x16>
        Item_t *cache = &s_itemCache[cacheIndex];
    7ab4:	009b      	lsls	r3, r3, #2
    7ab6:	480c      	ldr	r0, [pc, #48]	; (7ae8 <FindItemCache+0x60>)
    7ab8:	18c0      	adds	r0, r0, r3
            assert(cache->lastBlock != 0x0000);
    7aba:	00ad      	lsls	r5, r5, #2
    7abc:	4b0a      	ldr	r3, [pc, #40]	; (7ae8 <FindItemCache+0x60>)
    7abe:	195d      	adds	r5, r3, r5
    7ac0:	886b      	ldrh	r3, [r5, #2]
    7ac2:	2b00      	cmp	r3, #0
    7ac4:	d003      	beq.n	7ace <FindItemCache+0x46>
}
    7ac6:	bd70      	pop	{r4, r5, r6, pc}
        Item_t *cache = &s_itemCache[cacheIndex];
    7ac8:	4807      	ldr	r0, [pc, #28]	; (7ae8 <FindItemCache+0x60>)
    7aca:	2500      	movs	r5, #0
    7acc:	e7f5      	b.n	7aba <FindItemCache+0x32>
            assert(cache->lastBlock != 0x0000);
    7ace:	4b07      	ldr	r3, [pc, #28]	; (7aec <FindItemCache+0x64>)
    7ad0:	4a07      	ldr	r2, [pc, #28]	; (7af0 <FindItemCache+0x68>)
    7ad2:	218c      	movs	r1, #140	; 0x8c
    7ad4:	31ff      	adds	r1, #255	; 0xff
    7ad6:	4807      	ldr	r0, [pc, #28]	; (7af4 <FindItemCache+0x6c>)
    7ad8:	4c07      	ldr	r4, [pc, #28]	; (7af8 <FindItemCache+0x70>)
    7ada:	47a0      	blx	r4
    return NULL;
    7adc:	2000      	movs	r0, #0
    7ade:	e7f2      	b.n	7ac6 <FindItemCache+0x3e>
    7ae0:	2000      	movs	r0, #0
    7ae2:	e7f0      	b.n	7ac6 <FindItemCache+0x3e>
    7ae4:	20000270 	.word	0x20000270
    7ae8:	20000254 	.word	0x20000254
    7aec:	00016860 	.word	0x00016860
    7af0:	0001694c 	.word	0x0001694c
    7af4:	0001687c 	.word	0x0001687c
    7af8:	00014f21 	.word	0x00014f21

00007afc <FindItem>:
{
    7afc:	b510      	push	{r4, lr}
    Item_t *cache = FindItemCache(id);
    7afe:	4b05      	ldr	r3, [pc, #20]	; (7b14 <FindItem+0x18>)
    7b00:	4798      	blx	r3
    if (cache)
    7b02:	2800      	cmp	r0, #0
    7b04:	d004      	beq.n	7b10 <FindItem+0x14>
        return cache->lastBlock;
    7b06:	7883      	ldrb	r3, [r0, #2]
    7b08:	78c0      	ldrb	r0, [r0, #3]
    7b0a:	0200      	lsls	r0, r0, #8
    7b0c:	4318      	orrs	r0, r3
}
    7b0e:	bd10      	pop	{r4, pc}
    return 0x0000u;
    7b10:	2000      	movs	r0, #0
    7b12:	e7fc      	b.n	7b0e <FindItem+0x12>
    7b14:	00007a89 	.word	0x00007a89

00007b18 <CreateItemCache>:
{
    7b18:	b510      	push	{r4, lr}
    7b1a:	0004      	movs	r4, r0
    assert(FindItemCache(id) == NULL);
    7b1c:	4b0e      	ldr	r3, [pc, #56]	; (7b58 <CreateItemCache+0x40>)
    7b1e:	4798      	blx	r3
    7b20:	2800      	cmp	r0, #0
    7b22:	d10b      	bne.n	7b3c <CreateItemCache+0x24>
    assert(s_itemCount < MAX_ITEM_COUNT);
    7b24:	4b0d      	ldr	r3, [pc, #52]	; (7b5c <CreateItemCache+0x44>)
    7b26:	781b      	ldrb	r3, [r3, #0]
    7b28:	2b06      	cmp	r3, #6
    7b2a:	d80e      	bhi.n	7b4a <CreateItemCache+0x32>
    Item_t *cache = &s_itemCache[s_itemCount++];
    7b2c:	1c59      	adds	r1, r3, #1
    7b2e:	4a0b      	ldr	r2, [pc, #44]	; (7b5c <CreateItemCache+0x44>)
    7b30:	7011      	strb	r1, [r2, #0]
    cache->id = id;
    7b32:	480b      	ldr	r0, [pc, #44]	; (7b60 <CreateItemCache+0x48>)
    7b34:	009b      	lsls	r3, r3, #2
    7b36:	521c      	strh	r4, [r3, r0]
    Item_t *cache = &s_itemCache[s_itemCount++];
    7b38:	18c0      	adds	r0, r0, r3
}
    7b3a:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) == NULL);
    7b3c:	4b09      	ldr	r3, [pc, #36]	; (7b64 <CreateItemCache+0x4c>)
    7b3e:	4a0a      	ldr	r2, [pc, #40]	; (7b68 <CreateItemCache+0x50>)
    7b40:	21cc      	movs	r1, #204	; 0xcc
    7b42:	0049      	lsls	r1, r1, #1
    7b44:	4809      	ldr	r0, [pc, #36]	; (7b6c <CreateItemCache+0x54>)
    7b46:	4c0a      	ldr	r4, [pc, #40]	; (7b70 <CreateItemCache+0x58>)
    7b48:	47a0      	blx	r4
    assert(s_itemCount < MAX_ITEM_COUNT);
    7b4a:	4b0a      	ldr	r3, [pc, #40]	; (7b74 <CreateItemCache+0x5c>)
    7b4c:	4a06      	ldr	r2, [pc, #24]	; (7b68 <CreateItemCache+0x50>)
    7b4e:	219a      	movs	r1, #154	; 0x9a
    7b50:	31ff      	adds	r1, #255	; 0xff
    7b52:	4806      	ldr	r0, [pc, #24]	; (7b6c <CreateItemCache+0x54>)
    7b54:	4c06      	ldr	r4, [pc, #24]	; (7b70 <CreateItemCache+0x58>)
    7b56:	47a0      	blx	r4
    7b58:	00007a89 	.word	0x00007a89
    7b5c:	20000270 	.word	0x20000270
    7b60:	20000254 	.word	0x20000254
    7b64:	00016824 	.word	0x00016824
    7b68:	0001695c 	.word	0x0001695c
    7b6c:	0001687c 	.word	0x0001687c
    7b70:	00014f21 	.word	0x00014f21
    7b74:	00016840 	.word	0x00016840

00007b78 <EraseSector>:

static bool EraseSector(void)
{
    7b78:	b510      	push	{r4, lr}
    // Erase the sector
    D_Nv_EraseSector(s_sector);
    7b7a:	4c08      	ldr	r4, [pc, #32]	; (7b9c <EraseSector+0x24>)
    7b7c:	7820      	ldrb	r0, [r4, #0]
    7b7e:	4b08      	ldr	r3, [pc, #32]	; (7ba0 <EraseSector+0x28>)
    7b80:	4798      	blx	r3
    // check if the erase succeeded
    if ( !D_Nv_IsEmpty(s_sector, 0u, SECTOR_SIZE) )
    7b82:	7820      	ldrb	r0, [r4, #0]
    7b84:	2280      	movs	r2, #128	; 0x80
    7b86:	0192      	lsls	r2, r2, #6
    7b88:	2100      	movs	r1, #0
    7b8a:	4b06      	ldr	r3, [pc, #24]	; (7ba4 <EraseSector+0x2c>)
    7b8c:	4798      	blx	r3
    7b8e:	2800      	cmp	r0, #0
    7b90:	d003      	beq.n	7b9a <EraseSector+0x22>
    {
        return false;
    }
    s_sectorHead =  ITEMS_AREA_START_ADDRESS;
    7b92:	2280      	movs	r2, #128	; 0x80
    7b94:	0052      	lsls	r2, r2, #1
    7b96:	4b04      	ldr	r3, [pc, #16]	; (7ba8 <EraseSector+0x30>)
    7b98:	801a      	strh	r2, [r3, #0]

    return true;
}
    7b9a:	bd10      	pop	{r4, pc}
    7b9c:	20000278 	.word	0x20000278
    7ba0:	00007821 	.word	0x00007821
    7ba4:	00007875 	.word	0x00007875
    7ba8:	2000027a 	.word	0x2000027a

00007bac <WriteAndCheck>:
{
    7bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bae:	b083      	sub	sp, #12
    7bb0:	9001      	str	r0, [sp, #4]
    7bb2:	000d      	movs	r5, r1
    7bb4:	0016      	movs	r6, r2
    D_Nv_Write(s_sector, offset, pData, length);
    7bb6:	4f07      	ldr	r7, [pc, #28]	; (7bd4 <WriteAndCheck+0x28>)
    7bb8:	7838      	ldrb	r0, [r7, #0]
    7bba:	0013      	movs	r3, r2
    7bbc:	000a      	movs	r2, r1
    7bbe:	9901      	ldr	r1, [sp, #4]
    7bc0:	4c05      	ldr	r4, [pc, #20]	; (7bd8 <WriteAndCheck+0x2c>)
    7bc2:	47a0      	blx	r4
    return D_Nv_IsEqual(s_sector, offset, pData, length);
    7bc4:	7838      	ldrb	r0, [r7, #0]
    7bc6:	0033      	movs	r3, r6
    7bc8:	002a      	movs	r2, r5
    7bca:	9901      	ldr	r1, [sp, #4]
    7bcc:	4c03      	ldr	r4, [pc, #12]	; (7bdc <WriteAndCheck+0x30>)
    7bce:	47a0      	blx	r4
}
    7bd0:	b003      	add	sp, #12
    7bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bd4:	20000278 	.word	0x20000278
    7bd8:	000076b9 	.word	0x000076b9
    7bdc:	00007885 	.word	0x00007885

00007be0 <WriteSectorHeader>:

static bool WriteSectorHeader(uint32_t sequenceNumber)
{
    7be0:	b510      	push	{r4, lr}
    7be2:	b086      	sub	sp, #24
    // write sector header
    SectorHeader_t sectorHeader;
    sectorHeader.signature[0] = (uint8_t) 'A';
    7be4:	ac01      	add	r4, sp, #4
    7be6:	2341      	movs	r3, #65	; 0x41
    7be8:	70a3      	strb	r3, [r4, #2]
    sectorHeader.signature[1] = (uint8_t) 'T';
    7bea:	3313      	adds	r3, #19
    7bec:	70e3      	strb	r3, [r4, #3]
    sectorHeader.signature[2] = (uint8_t) 'S';
    7bee:	3b01      	subs	r3, #1
    7bf0:	7123      	strb	r3, [r4, #4]
    sectorHeader.signature[3] = (uint8_t) 'N';
    7bf2:	3b05      	subs	r3, #5
    7bf4:	7163      	strb	r3, [r4, #5]
    sectorHeader.signature[4] = (uint8_t) 'v';
    7bf6:	3328      	adds	r3, #40	; 0x28
    7bf8:	71a3      	strb	r3, [r4, #6]
    sectorHeader.signature[5] = (uint8_t) '2';
    7bfa:	3b44      	subs	r3, #68	; 0x44
    7bfc:	71e3      	strb	r3, [r4, #7]
    sectorHeader.sequenceNumber = sequenceNumber;
    7bfe:	9003      	str	r0, [sp, #12]
    sectorHeader.sequenceParity = sequenceNumber ^ 0xFFFFFFFFuL;
    7c00:	43c0      	mvns	r0, r0
    7c02:	9004      	str	r0, [sp, #16]
    sectorHeader.nextPageAddressAfterCompact = s_nextPageAddressAfterCompact;
    7c04:	4b08      	ldr	r3, [pc, #32]	; (7c28 <WriteSectorHeader+0x48>)
    7c06:	881b      	ldrh	r3, [r3, #0]
    7c08:	8223      	strh	r3, [r4, #16]
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    7c0a:	4a08      	ldr	r2, [pc, #32]	; (7c2c <WriteSectorHeader+0x4c>)
    7c0c:	2110      	movs	r1, #16
    7c0e:	466b      	mov	r3, sp
    7c10:	1d98      	adds	r0, r3, #6
    7c12:	4b07      	ldr	r3, [pc, #28]	; (7c30 <WriteSectorHeader+0x50>)
    7c14:	4798      	blx	r3
    sectorHeader.headerCrc = ComputeSectorHeaderCrc(&sectorHeader);
    7c16:	8020      	strh	r0, [r4, #0]
    if ( !WriteAndCheck(0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE) )
    7c18:	2212      	movs	r2, #18
    7c1a:	0021      	movs	r1, r4
    7c1c:	2000      	movs	r0, #0
    7c1e:	4b05      	ldr	r3, [pc, #20]	; (7c34 <WriteSectorHeader+0x54>)
    7c20:	4798      	blx	r3
    {
        return false;
    }
    return true;
}
    7c22:	b006      	add	sp, #24
    7c24:	bd10      	pop	{r4, pc}
    7c26:	46c0      	nop			; (mov r8, r8)
    7c28:	20000272 	.word	0x20000272
    7c2c:	0000ffff 	.word	0x0000ffff
    7c30:	000078e9 	.word	0x000078e9
    7c34:	00007bad 	.word	0x00007bad

00007c38 <SmartCompacting>:
 * without following any alignements as normal item updates.Items are filled into
  256 byte buffer(= row size), committed in shot which takes 4 page writs maximum
 */

static bool SmartCompacting(uint8_t* compactBlock, uint16_t curItemLength)
{
    7c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c3a:	0004      	movs	r4, r0
    7c3c:	000d      	movs	r5, r1
    //manupulate the current compact length
    currentCompactLength += curItemLength;
    7c3e:	4a21      	ldr	r2, [pc, #132]	; (7cc4 <SmartCompacting+0x8c>)
    7c40:	8813      	ldrh	r3, [r2, #0]
    7c42:	18cb      	adds	r3, r1, r3
    7c44:	b29b      	uxth	r3, r3
    7c46:	8013      	strh	r3, [r2, #0]

    // if the complete buffer cannot be filled with the current item
    if ( currentCompactLength < ROW_SIZE)
    7c48:	2bff      	cmp	r3, #255	; 0xff
    7c4a:	d92e      	bls.n	7caa <SmartCompacting+0x72>
    else  //(currentCompactLength >= ROW_SIZE) cases
    {
        uint16_t dataBlockOffset = 0;


        memcpy(compactBlock + compactBlockOffset, dataBlock, (ROW_SIZE - compactBlockOffset));
    7c4c:	4b1e      	ldr	r3, [pc, #120]	; (7cc8 <SmartCompacting+0x90>)
    7c4e:	881a      	ldrh	r2, [r3, #0]
    7c50:	1880      	adds	r0, r0, r2
    7c52:	2580      	movs	r5, #128	; 0x80
    7c54:	006d      	lsls	r5, r5, #1
    7c56:	1aaa      	subs	r2, r5, r2
    7c58:	491c      	ldr	r1, [pc, #112]	; (7ccc <SmartCompacting+0x94>)
    7c5a:	4b1d      	ldr	r3, [pc, #116]	; (7cd0 <SmartCompacting+0x98>)
    7c5c:	4798      	blx	r3
        if ( !WriteAndCheck(s_sectorHead, compactBlock, ROW_SIZE ))
    7c5e:	4b1d      	ldr	r3, [pc, #116]	; (7cd4 <SmartCompacting+0x9c>)
    7c60:	8818      	ldrh	r0, [r3, #0]
    7c62:	002a      	movs	r2, r5
    7c64:	0021      	movs	r1, r4
    7c66:	4b1c      	ldr	r3, [pc, #112]	; (7cd8 <SmartCompacting+0xa0>)
    7c68:	4798      	blx	r3
    7c6a:	1e05      	subs	r5, r0, #0
    7c6c:	d027      	beq.n	7cbe <SmartCompacting+0x86>
        {
            return false;
        }
        UpdateSectorHead(ROW_SIZE, ITEM_NO_ALIGNMENT);
    7c6e:	2100      	movs	r1, #0
    7c70:	2080      	movs	r0, #128	; 0x80
    7c72:	0040      	lsls	r0, r0, #1
    7c74:	4b19      	ldr	r3, [pc, #100]	; (7cdc <SmartCompacting+0xa4>)
    7c76:	4798      	blx	r3
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    7c78:	4b13      	ldr	r3, [pc, #76]	; (7cc8 <SmartCompacting+0x90>)
    7c7a:	8818      	ldrh	r0, [r3, #0]
        compactBlockOffset = 0;
    7c7c:	2200      	movs	r2, #0
    7c7e:	801a      	strh	r2, [r3, #0]
        currentCompactLength -= ROW_SIZE;
    7c80:	4b10      	ldr	r3, [pc, #64]	; (7cc4 <SmartCompacting+0x8c>)
    7c82:	881e      	ldrh	r6, [r3, #0]
    7c84:	3e01      	subs	r6, #1
    7c86:	3eff      	subs	r6, #255	; 0xff
    7c88:	b2b6      	uxth	r6, r6
    7c8a:	801e      	strh	r6, [r3, #0]
        if (currentCompactLength)
    7c8c:	2e00      	cmp	r6, #0
    7c8e:	d016      	beq.n	7cbe <SmartCompacting+0x86>
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    7c90:	2180      	movs	r1, #128	; 0x80
    7c92:	0049      	lsls	r1, r1, #1
    7c94:	1a09      	subs	r1, r1, r0
        {
            memcpy(compactBlock, dataBlock + dataBlockOffset, currentCompactLength);
    7c96:	b289      	uxth	r1, r1
    7c98:	4b0c      	ldr	r3, [pc, #48]	; (7ccc <SmartCompacting+0x94>)
    7c9a:	1859      	adds	r1, r3, r1
    7c9c:	0032      	movs	r2, r6
    7c9e:	0020      	movs	r0, r4
    7ca0:	4b0b      	ldr	r3, [pc, #44]	; (7cd0 <SmartCompacting+0x98>)
    7ca2:	4798      	blx	r3
            compactBlockOffset = currentCompactLength;
    7ca4:	4b08      	ldr	r3, [pc, #32]	; (7cc8 <SmartCompacting+0x90>)
    7ca6:	801e      	strh	r6, [r3, #0]
    7ca8:	e009      	b.n	7cbe <SmartCompacting+0x86>
        memcpy(compactBlock + compactBlockOffset, dataBlock, curItemLength);
    7caa:	4e07      	ldr	r6, [pc, #28]	; (7cc8 <SmartCompacting+0x90>)
    7cac:	8837      	ldrh	r7, [r6, #0]
    7cae:	19c0      	adds	r0, r0, r7
    7cb0:	000a      	movs	r2, r1
    7cb2:	4906      	ldr	r1, [pc, #24]	; (7ccc <SmartCompacting+0x94>)
    7cb4:	4b06      	ldr	r3, [pc, #24]	; (7cd0 <SmartCompacting+0x98>)
    7cb6:	4798      	blx	r3
        compactBlockOffset += curItemLength;
    7cb8:	19ed      	adds	r5, r5, r7
    7cba:	8035      	strh	r5, [r6, #0]
        return true;
    7cbc:	2501      	movs	r5, #1
        }
    }

    return true;

}
    7cbe:	0028      	movs	r0, r5
    7cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7cc2:	46c0      	nop			; (mov r8, r8)
    7cc4:	20000138 	.word	0x20000138
    7cc8:	2000010c 	.word	0x2000010c
    7ccc:	2000013c 	.word	0x2000013c
    7cd0:	00014fe3 	.word	0x00014fe3
    7cd4:	2000027a 	.word	0x2000027a
    7cd8:	00007bad 	.word	0x00007bad
    7cdc:	000078ad 	.word	0x000078ad

00007ce0 <CompactSector>:
 * This is because the itemCache, sector head and sector selector will
 * be messed up.
 */

static bool CompactSector(void)
{
    7ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ce2:	46de      	mov	lr, fp
    7ce4:	4657      	mov	r7, sl
    7ce6:	464e      	mov	r6, r9
    7ce8:	4645      	mov	r5, r8
    7cea:	b5e0      	push	{r5, r6, r7, lr}
    7cec:	b0d5      	sub	sp, #340	; 0x154
    PRINTA(("CompactSector(s=%X)", s_sector));
#endif
    uint8_t compactBlock[ROW_SIZE];

    // stop timer for preemptive compact sector as this will not be needed any more
    SYS_TimerStop(&compactSectorTimer);
    7cee:	487b      	ldr	r0, [pc, #492]	; (7edc <CompactSector+0x1fc>)
    7cf0:	4b7b      	ldr	r3, [pc, #492]	; (7ee0 <CompactSector+0x200>)
    7cf2:	4798      	blx	r3

    // stop the compact item as a compact sector will compact all items
    s_compactItemId = 0u;
    7cf4:	2300      	movs	r3, #0
    7cf6:	4a7b      	ldr	r2, [pc, #492]	; (7ee4 <CompactSector+0x204>)
    7cf8:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    7cfa:	4a7b      	ldr	r2, [pc, #492]	; (7ee8 <CompactSector+0x208>)
    7cfc:	8013      	strh	r3, [r2, #0]

    compactBlockOffset = 0;
    7cfe:	4a7b      	ldr	r2, [pc, #492]	; (7eec <CompactSector+0x20c>)
    7d00:	8013      	strh	r3, [r2, #0]
    currentCompactLength = 0;
    7d02:	4a7b      	ldr	r2, [pc, #492]	; (7ef0 <CompactSector+0x210>)
    7d04:	8013      	strh	r3, [r2, #0]

    uint8_t sourceSector = s_sector;
    7d06:	4b7b      	ldr	r3, [pc, #492]	; (7ef4 <CompactSector+0x214>)
    7d08:	781b      	ldrb	r3, [r3, #0]
    7d0a:	001f      	movs	r7, r3
    7d0c:	9303      	str	r3, [sp, #12]

    // get the sector header for the source sector
    SectorHeader_t sectorHeader;
    D_Nv_Read(sourceSector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    7d0e:	2312      	movs	r3, #18
    7d10:	aa0f      	add	r2, sp, #60	; 0x3c
    7d12:	2100      	movs	r1, #0
    7d14:	0038      	movs	r0, r7
    7d16:	4c78      	ldr	r4, [pc, #480]	; (7ef8 <CompactSector+0x218>)
    7d18:	47a0      	blx	r4

    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    7d1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7d1c:	9309      	str	r3, [sp, #36]	; 0x24

    // find and prepare a destination sector
    do
    {
        s_sector++;
    7d1e:	4c75      	ldr	r4, [pc, #468]	; (7ef4 <CompactSector+0x214>)
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
        {
            s_sector = FIRST_SECTOR;
    7d20:	0025      	movs	r5, r4
        s_sector++;
    7d22:	0026      	movs	r6, r4
    7d24:	e008      	b.n	7d38 <CompactSector+0x58>
    7d26:	7033      	strb	r3, [r6, #0]
        }

        if ( s_sector == sourceSector )
    7d28:	4b72      	ldr	r3, [pc, #456]	; (7ef4 <CompactSector+0x214>)
    7d2a:	781b      	ldrb	r3, [r3, #0]
    7d2c:	42bb      	cmp	r3, r7
    7d2e:	d00b      	beq.n	7d48 <CompactSector+0x68>
        {
            // all sector failed to initialize
            assert(false);
        }
    }
    while ( !EraseSector());
    7d30:	4b72      	ldr	r3, [pc, #456]	; (7efc <CompactSector+0x21c>)
    7d32:	4798      	blx	r3
    7d34:	2800      	cmp	r0, #0
    7d36:	d10d      	bne.n	7d54 <CompactSector+0x74>
        s_sector++;
    7d38:	7823      	ldrb	r3, [r4, #0]
    7d3a:	3301      	adds	r3, #1
    7d3c:	b2db      	uxtb	r3, r3
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    7d3e:	2b01      	cmp	r3, #1
    7d40:	d9f1      	bls.n	7d26 <CompactSector+0x46>
            s_sector = FIRST_SECTOR;
    7d42:	2300      	movs	r3, #0
    7d44:	702b      	strb	r3, [r5, #0]
    7d46:	e7ef      	b.n	7d28 <CompactSector+0x48>
            assert(false);
    7d48:	4b6d      	ldr	r3, [pc, #436]	; (7f00 <CompactSector+0x220>)
    7d4a:	4a6e      	ldr	r2, [pc, #440]	; (7f04 <CompactSector+0x224>)
    7d4c:	496e      	ldr	r1, [pc, #440]	; (7f08 <CompactSector+0x228>)
    7d4e:	486f      	ldr	r0, [pc, #444]	; (7f0c <CompactSector+0x22c>)
    7d50:	4c6f      	ldr	r4, [pc, #444]	; (7f10 <CompactSector+0x230>)
    7d52:	47a0      	blx	r4

    // Traverse the item cache, writing all items to the new sector
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    7d54:	4b6f      	ldr	r3, [pc, #444]	; (7f14 <CompactSector+0x234>)
    7d56:	781b      	ldrb	r3, [r3, #0]
    7d58:	2b00      	cmp	r3, #0
    7d5a:	d06a      	beq.n	7e32 <CompactSector+0x152>
    7d5c:	2300      	movs	r3, #0
    7d5e:	9306      	str	r3, [sp, #24]

        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);

        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);

        memset(dataBlock, 0xFF, sizeof(dataBlock));
    7d60:	3301      	adds	r3, #1
    7d62:	33ff      	adds	r3, #255	; 0xff
    7d64:	4699      	mov	r9, r3
            uint16_t bytesToGather;
            uint16_t inDataOffset = 0;

            do
            {
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    7d66:	466a      	mov	r2, sp
    7d68:	82d3      	strh	r3, [r2, #22]
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    7d6a:	4b6b      	ldr	r3, [pc, #428]	; (7f18 <CompactSector+0x238>)
    7d6c:	3310      	adds	r3, #16
    7d6e:	9308      	str	r3, [sp, #32]
        Item_t *cache = &s_itemCache[cacheIndex];
    7d70:	9b06      	ldr	r3, [sp, #24]
    7d72:	9307      	str	r3, [sp, #28]
        uint16_t lastBlockPointer = cache->lastBlock;
    7d74:	009f      	lsls	r7, r3, #2
    7d76:	4b69      	ldr	r3, [pc, #420]	; (7f1c <CompactSector+0x23c>)
    7d78:	469c      	mov	ip, r3
    7d7a:	4467      	add	r7, ip
    7d7c:	887b      	ldrh	r3, [r7, #2]
    7d7e:	001d      	movs	r5, r3
    7d80:	9304      	str	r3, [sp, #16]
        D_Nv_Read(sourceSector, lastBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    7d82:	2310      	movs	r3, #16
    7d84:	aa0b      	add	r2, sp, #44	; 0x2c
    7d86:	0029      	movs	r1, r5
    7d88:	9803      	ldr	r0, [sp, #12]
    7d8a:	4680      	mov	r8, r0
    7d8c:	4c5a      	ldr	r4, [pc, #360]	; (7ef8 <CompactSector+0x218>)
    7d8e:	47a0      	blx	r4
        blockHeader.blockOffset = 0x0000u;
    7d90:	ae0b      	add	r6, sp, #44	; 0x2c
    7d92:	2300      	movs	r3, #0
    7d94:	80b3      	strh	r3, [r6, #4]
        blockHeader.blockLength = blockHeader.itemLength;
    7d96:	8934      	ldrh	r4, [r6, #8]
    7d98:	80f4      	strh	r4, [r6, #6]
        blockHeader.previousBlock = 0x0000u;
    7d9a:	8173      	strh	r3, [r6, #10]
        blockHeader.writeCount = 0u;
    7d9c:	81b3      	strh	r3, [r6, #12]
        uint16_t currLength = BLOCK_HEADER_SIZE + blockHeader.itemLength;
    7d9e:	3410      	adds	r4, #16
    7da0:	b2a4      	uxth	r4, r4
        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);
    7da2:	0032      	movs	r2, r6
    7da4:	0029      	movs	r1, r5
    7da6:	4640      	mov	r0, r8
    7da8:	4b5d      	ldr	r3, [pc, #372]	; (7f20 <CompactSector+0x240>)
    7daa:	4798      	blx	r3
    7dac:	8030      	strh	r0, [r6, #0]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    7dae:	4a5d      	ldr	r2, [pc, #372]	; (7f24 <CompactSector+0x244>)
    7db0:	210e      	movs	r1, #14
    7db2:	a80b      	add	r0, sp, #44	; 0x2c
    7db4:	4b5c      	ldr	r3, [pc, #368]	; (7f28 <CompactSector+0x248>)
    7db6:	4798      	blx	r3
        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);
    7db8:	81f0      	strh	r0, [r6, #14]
        memset(dataBlock, 0xFF, sizeof(dataBlock));
    7dba:	4d57      	ldr	r5, [pc, #348]	; (7f18 <CompactSector+0x238>)
    7dbc:	464a      	mov	r2, r9
    7dbe:	21ff      	movs	r1, #255	; 0xff
    7dc0:	0028      	movs	r0, r5
    7dc2:	4b5a      	ldr	r3, [pc, #360]	; (7f2c <CompactSector+0x24c>)
    7dc4:	4798      	blx	r3
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    7dc6:	002b      	movs	r3, r5
    7dc8:	ce07      	ldmia	r6!, {r0, r1, r2}
    7dca:	c307      	stmia	r3!, {r0, r1, r2}
    7dcc:	6832      	ldr	r2, [r6, #0]
    7dce:	601a      	str	r2, [r3, #0]
        cache->lastBlock = s_sectorHead  + compactBlockOffset;
    7dd0:	4b57      	ldr	r3, [pc, #348]	; (7f30 <CompactSector+0x250>)
    7dd2:	881b      	ldrh	r3, [r3, #0]
    7dd4:	4a45      	ldr	r2, [pc, #276]	; (7eec <CompactSector+0x20c>)
    7dd6:	8812      	ldrh	r2, [r2, #0]
    7dd8:	189b      	adds	r3, r3, r2
    7dda:	807b      	strh	r3, [r7, #2]
        if (currLength <= ROW_SIZE)
    7ddc:	454c      	cmp	r4, r9
    7dde:	d904      	bls.n	7dea <CompactSector+0x10a>
    7de0:	2600      	movs	r6, #0
    7de2:	2310      	movs	r3, #16
              
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    7de4:	4a4c      	ldr	r2, [pc, #304]	; (7f18 <CompactSector+0x238>)
    7de6:	4690      	mov	r8, r2
    7de8:	e068      	b.n	7ebc <CompactSector+0x1dc>
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    7dea:	ab0b      	add	r3, sp, #44	; 0x2c
    7dec:	891b      	ldrh	r3, [r3, #8]
    7dee:	9a08      	ldr	r2, [sp, #32]
    7df0:	9200      	str	r2, [sp, #0]
    7df2:	2200      	movs	r2, #0
    7df4:	9904      	ldr	r1, [sp, #16]
    7df6:	9803      	ldr	r0, [sp, #12]
    7df8:	4e4e      	ldr	r6, [pc, #312]	; (7f34 <CompactSector+0x254>)
    7dfa:	47b0      	blx	r6
    7dfc:	2800      	cmp	r0, #0
    7dfe:	d063      	beq.n	7ec8 <CompactSector+0x1e8>
            cache->lastBlock = s_sectorHead  + compactBlockOffset;
    7e00:	9b07      	ldr	r3, [sp, #28]
    7e02:	009d      	lsls	r5, r3, #2
    7e04:	4b45      	ldr	r3, [pc, #276]	; (7f1c <CompactSector+0x23c>)
    7e06:	195d      	adds	r5, r3, r5
    7e08:	4b49      	ldr	r3, [pc, #292]	; (7f30 <CompactSector+0x250>)
    7e0a:	881b      	ldrh	r3, [r3, #0]
    7e0c:	4a37      	ldr	r2, [pc, #220]	; (7eec <CompactSector+0x20c>)
    7e0e:	8812      	ldrh	r2, [r2, #0]
    7e10:	189b      	adds	r3, r3, r2
    7e12:	806b      	strh	r3, [r5, #2]
            if (!SmartCompacting(compactBlock, currLength))
    7e14:	0021      	movs	r1, r4
    7e16:	a814      	add	r0, sp, #80	; 0x50
    7e18:	4b47      	ldr	r3, [pc, #284]	; (7f38 <CompactSector+0x258>)
    7e1a:	4798      	blx	r3
    7e1c:	2800      	cmp	r0, #0
    7e1e:	d053      	beq.n	7ec8 <CompactSector+0x1e8>
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    7e20:	9b06      	ldr	r3, [sp, #24]
    7e22:	3301      	adds	r3, #1
    7e24:	b2db      	uxtb	r3, r3
    7e26:	001a      	movs	r2, r3
    7e28:	9306      	str	r3, [sp, #24]
    7e2a:	4b3a      	ldr	r3, [pc, #232]	; (7f14 <CompactSector+0x234>)
    7e2c:	781b      	ldrb	r3, [r3, #0]
    7e2e:	4293      	cmp	r3, r2
    7e30:	d89e      	bhi.n	7d70 <CompactSector+0x90>

            } while(currLength > 0);
        }
    }
    // if some uncommitted data avaialble, committ it
    if ( currentCompactLength)
    7e32:	4b2f      	ldr	r3, [pc, #188]	; (7ef0 <CompactSector+0x210>)
    7e34:	881a      	ldrh	r2, [r3, #0]
    7e36:	2a00      	cmp	r2, #0
    7e38:	d006      	beq.n	7e48 <CompactSector+0x168>
    {
        if ( !WriteAndCheck(s_sectorHead, compactBlock, currentCompactLength) )
    7e3a:	4b3d      	ldr	r3, [pc, #244]	; (7f30 <CompactSector+0x250>)
    7e3c:	8818      	ldrh	r0, [r3, #0]
    7e3e:	a914      	add	r1, sp, #80	; 0x50
    7e40:	4b3e      	ldr	r3, [pc, #248]	; (7f3c <CompactSector+0x25c>)
    7e42:	4798      	blx	r3
    7e44:	1e04      	subs	r4, r0, #0
    7e46:	d040      	beq.n	7eca <CompactSector+0x1ea>
        {
            return false;
        }
    }
    // Just update sector header as per the the length of the data committed, no alignments
    UpdateSectorHead(currentCompactLength, ITEM_NO_ALIGNMENT);
    7e48:	4b29      	ldr	r3, [pc, #164]	; (7ef0 <CompactSector+0x210>)
    7e4a:	8818      	ldrh	r0, [r3, #0]
    7e4c:	2100      	movs	r1, #0
    7e4e:	4b3c      	ldr	r3, [pc, #240]	; (7f40 <CompactSector+0x260>)
    7e50:	4798      	blx	r3

    s_nextPageAddressAfterCompact = s_sectorHead;
    7e52:	4b37      	ldr	r3, [pc, #220]	; (7f30 <CompactSector+0x250>)
    7e54:	881a      	ldrh	r2, [r3, #0]
    7e56:	4b3b      	ldr	r3, [pc, #236]	; (7f44 <CompactSector+0x264>)
    7e58:	801a      	strh	r2, [r3, #0]
    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    7e5a:	9809      	ldr	r0, [sp, #36]	; 0x24
    7e5c:	3801      	subs	r0, #1
    //SYS_PostEvent(BC_EVENT_UPGRADE_STRUCT_CHANGED_ITEMS, 0U);

    // update nextPageAddressAfterCompact in the sector header
    // All items moved, so now we just need to Write the Sector Header with 
    // nextPageAddressAfterCompact at the end of compact sector operation
    if ( !WriteSectorHeader(nextSequenceNumber))
    7e5e:	4b3a      	ldr	r3, [pc, #232]	; (7f48 <CompactSector+0x268>)
    7e60:	4798      	blx	r3
    7e62:	1e04      	subs	r4, r0, #0
    7e64:	d031      	beq.n	7eca <CompactSector+0x1ea>
    {
        return false;
    }
    // Done with compact sector opration, Set the Sector Head to next page address for normal item update 
    UpdateSectorHead(0, ITEM_64BYTE_ALIGNMENT);
    7e66:	2102      	movs	r1, #2
    7e68:	2000      	movs	r0, #0
    7e6a:	4b35      	ldr	r3, [pc, #212]	; (7f40 <CompactSector+0x260>)
    7e6c:	4798      	blx	r3

    // schedule an erase of the source sector,Restart the timer if it is already running.
    s_sectorToErase = sourceSector;
    7e6e:	4b37      	ldr	r3, [pc, #220]	; (7f4c <CompactSector+0x26c>)
    7e70:	466a      	mov	r2, sp
    7e72:	7b12      	ldrb	r2, [r2, #12]
    7e74:	701a      	strb	r2, [r3, #0]
    SYS_TimerStop(&eraseSectorTimer);
    7e76:	4d36      	ldr	r5, [pc, #216]	; (7f50 <CompactSector+0x270>)
    7e78:	0028      	movs	r0, r5
    7e7a:	4b19      	ldr	r3, [pc, #100]	; (7ee0 <CompactSector+0x200>)
    7e7c:	4798      	blx	r3
    SYS_TimerStart(&eraseSectorTimer);
    7e7e:	0028      	movs	r0, r5
    7e80:	4b34      	ldr	r3, [pc, #208]	; (7f54 <CompactSector+0x274>)
    7e82:	4798      	blx	r3

    return true;
    7e84:	e021      	b.n	7eca <CompactSector+0x1ea>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    7e86:	b2ad      	uxth	r5, r5
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    7e88:	1aef      	subs	r7, r5, r3
    7e8a:	b2ba      	uxth	r2, r7
    7e8c:	4693      	mov	fp, r2
    7e8e:	4443      	add	r3, r8
    7e90:	9300      	str	r3, [sp, #0]
    7e92:	0013      	movs	r3, r2
    7e94:	0032      	movs	r2, r6
    7e96:	9904      	ldr	r1, [sp, #16]
    7e98:	9803      	ldr	r0, [sp, #12]
    7e9a:	4f26      	ldr	r7, [pc, #152]	; (7f34 <CompactSector+0x254>)
    7e9c:	47b8      	blx	r7
    7e9e:	2800      	cmp	r0, #0
    7ea0:	d012      	beq.n	7ec8 <CompactSector+0x1e8>
              if (!SmartCompacting(compactBlock, bytesToGather))
    7ea2:	0029      	movs	r1, r5
    7ea4:	a814      	add	r0, sp, #80	; 0x50
    7ea6:	4b24      	ldr	r3, [pc, #144]	; (7f38 <CompactSector+0x258>)
    7ea8:	4798      	blx	r3
    7eaa:	2800      	cmp	r0, #0
    7eac:	d00c      	beq.n	7ec8 <CompactSector+0x1e8>
              currLength -= bytesToGather;
    7eae:	1b64      	subs	r4, r4, r5
    7eb0:	b2a4      	uxth	r4, r4
              inDataOffset += (bytesToGather - dataBlockOffset);
    7eb2:	445e      	add	r6, fp
    7eb4:	b2b6      	uxth	r6, r6
              dataBlockOffset = 0;
    7eb6:	2300      	movs	r3, #0
            } while(currLength > 0);
    7eb8:	2c00      	cmp	r4, #0
    7eba:	d0b1      	beq.n	7e20 <CompactSector+0x140>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    7ebc:	1c25      	adds	r5, r4, #0
    7ebe:	454c      	cmp	r4, r9
    7ec0:	d9e1      	bls.n	7e86 <CompactSector+0x1a6>
    7ec2:	466a      	mov	r2, sp
    7ec4:	8ad5      	ldrh	r5, [r2, #22]
    7ec6:	e7de      	b.n	7e86 <CompactSector+0x1a6>
                return false;
    7ec8:	2400      	movs	r4, #0
}
    7eca:	0020      	movs	r0, r4
    7ecc:	b055      	add	sp, #340	; 0x154
    7ece:	bc3c      	pop	{r2, r3, r4, r5}
    7ed0:	4690      	mov	r8, r2
    7ed2:	4699      	mov	r9, r3
    7ed4:	46a2      	mov	sl, r4
    7ed6:	46ab      	mov	fp, r5
    7ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7eda:	46c0      	nop			; (mov r8, r8)
    7edc:	20000124 	.word	0x20000124
    7ee0:	0000abcd 	.word	0x0000abcd
    7ee4:	20000250 	.word	0x20000250
    7ee8:	20000252 	.word	0x20000252
    7eec:	2000010c 	.word	0x2000010c
    7ef0:	20000138 	.word	0x20000138
    7ef4:	20000278 	.word	0x20000278
    7ef8:	00007641 	.word	0x00007641
    7efc:	00007b79 	.word	0x00007b79
    7f00:	0001681c 	.word	0x0001681c
    7f04:	0001696c 	.word	0x0001696c
    7f08:	000003d5 	.word	0x000003d5
    7f0c:	0001687c 	.word	0x0001687c
    7f10:	00014f21 	.word	0x00014f21
    7f14:	20000270 	.word	0x20000270
    7f18:	2000013c 	.word	0x2000013c
    7f1c:	20000254 	.word	0x20000254
    7f20:	000079e1 	.word	0x000079e1
    7f24:	0000ffff 	.word	0x0000ffff
    7f28:	000078e9 	.word	0x000078e9
    7f2c:	00014ff5 	.word	0x00014ff5
    7f30:	2000027a 	.word	0x2000027a
    7f34:	00007929 	.word	0x00007929
    7f38:	00007c39 	.word	0x00007c39
    7f3c:	00007bad 	.word	0x00007bad
    7f40:	000078ad 	.word	0x000078ad
    7f44:	20000272 	.word	0x20000272
    7f48:	00007be1 	.word	0x00007be1
    7f4c:	2000000e 	.word	0x2000000e
    7f50:	2000023c 	.word	0x2000023c
    7f54:	0000ac39 	.word	0x0000ac39

00007f58 <compactSectorTimerFired>:
{
    7f58:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow()) {
    7f5a:	4b07      	ldr	r3, [pc, #28]	; (7f78 <compactSectorTimerFired+0x20>)
    7f5c:	4798      	blx	r3
    7f5e:	2800      	cmp	r0, #0
    7f60:	d000      	beq.n	7f64 <compactSectorTimerFired+0xc>
}
    7f62:	bd10      	pop	{r4, pc}
      status = CompactSector();
    7f64:	4b05      	ldr	r3, [pc, #20]	; (7f7c <compactSectorTimerFired+0x24>)
    7f66:	4798      	blx	r3
      assert(false);
    7f68:	4b05      	ldr	r3, [pc, #20]	; (7f80 <compactSectorTimerFired+0x28>)
    7f6a:	4a06      	ldr	r2, [pc, #24]	; (7f84 <compactSectorTimerFired+0x2c>)
    7f6c:	212c      	movs	r1, #44	; 0x2c
    7f6e:	31ff      	adds	r1, #255	; 0xff
    7f70:	4805      	ldr	r0, [pc, #20]	; (7f88 <compactSectorTimerFired+0x30>)
    7f72:	4c06      	ldr	r4, [pc, #24]	; (7f8c <compactSectorTimerFired+0x34>)
    7f74:	47a0      	blx	r4
    7f76:	46c0      	nop			; (mov r8, r8)
    7f78:	00007891 	.word	0x00007891
    7f7c:	00007ce1 	.word	0x00007ce1
    7f80:	0001681c 	.word	0x0001681c
    7f84:	00016934 	.word	0x00016934
    7f88:	0001687c 	.word	0x0001687c
    7f8c:	00014f21 	.word	0x00014f21

00007f90 <CompactSectorIfNeeded>:

static void CompactSectorIfNeeded(uint16_t immediateThreshold)
{
    7f90:	b510      	push	{r4, lr}
    uint16_t freeSpace = SECTOR_SIZE - s_sectorHead;
    7f92:	4b12      	ldr	r3, [pc, #72]	; (7fdc <CompactSectorIfNeeded+0x4c>)
    7f94:	881a      	ldrh	r2, [r3, #0]
    7f96:	2380      	movs	r3, #128	; 0x80
    7f98:	019b      	lsls	r3, r3, #6
    7f9a:	1a9b      	subs	r3, r3, r2
    7f9c:	b29b      	uxth	r3, r3

    if ( freeSpace < immediateThreshold )
    7f9e:	4283      	cmp	r3, r0
    7fa0:	d303      	bcc.n	7faa <CompactSectorIfNeeded+0x1a>
        {
            assert(false);
        }
        return;
    }
    if ( freeSpace < PREEMPTIVE_COMPACT_SECTOR_THRESHOLD )
    7fa2:	4a0f      	ldr	r2, [pc, #60]	; (7fe0 <CompactSectorIfNeeded+0x50>)
    7fa4:	4293      	cmp	r3, r2
    7fa6:	d90a      	bls.n	7fbe <CompactSectorIfNeeded+0x2e>
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
        //TODO: check timer to be started or not
        //SYS_StartTimer(&compactSectorTimer);
        }
    }
}
    7fa8:	bd10      	pop	{r4, pc}
        if ( !CompactSector() )
    7faa:	4b0e      	ldr	r3, [pc, #56]	; (7fe4 <CompactSectorIfNeeded+0x54>)
    7fac:	4798      	blx	r3
    7fae:	2800      	cmp	r0, #0
    7fb0:	d1fa      	bne.n	7fa8 <CompactSectorIfNeeded+0x18>
            assert(false);
    7fb2:	4b0d      	ldr	r3, [pc, #52]	; (7fe8 <CompactSectorIfNeeded+0x58>)
    7fb4:	4a0d      	ldr	r2, [pc, #52]	; (7fec <CompactSectorIfNeeded+0x5c>)
    7fb6:	490e      	ldr	r1, [pc, #56]	; (7ff0 <CompactSectorIfNeeded+0x60>)
    7fb8:	480e      	ldr	r0, [pc, #56]	; (7ff4 <CompactSectorIfNeeded+0x64>)
    7fba:	4c0f      	ldr	r4, [pc, #60]	; (7ff8 <CompactSectorIfNeeded+0x68>)
    7fbc:	47a0      	blx	r4
        if (!SYS_TimerStarted(&compactSectorTimer))
    7fbe:	480f      	ldr	r0, [pc, #60]	; (7ffc <CompactSectorIfNeeded+0x6c>)
    7fc0:	4b0f      	ldr	r3, [pc, #60]	; (8000 <CompactSectorIfNeeded+0x70>)
    7fc2:	4798      	blx	r3
    7fc4:	2800      	cmp	r0, #0
    7fc6:	d1ef      	bne.n	7fa8 <CompactSectorIfNeeded+0x18>
        compactSectorTimer.handler = compactSectorTimerFired;
    7fc8:	4b0c      	ldr	r3, [pc, #48]	; (7ffc <CompactSectorIfNeeded+0x6c>)
    7fca:	4a0e      	ldr	r2, [pc, #56]	; (8004 <CompactSectorIfNeeded+0x74>)
    7fcc:	611a      	str	r2, [r3, #16]
        compactSectorTimer.timeout = COMPACT_SECTOR_DELAY_MS;
    7fce:	4a0e      	ldr	r2, [pc, #56]	; (8008 <CompactSectorIfNeeded+0x78>)
    7fd0:	605a      	str	r2, [r3, #4]
        compactSectorTimer.interval = COMPACT_SECTOR_DELAY_MS;
    7fd2:	609a      	str	r2, [r3, #8]
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    7fd4:	2200      	movs	r2, #0
    7fd6:	731a      	strb	r2, [r3, #12]
    7fd8:	e7e6      	b.n	7fa8 <CompactSectorIfNeeded+0x18>
    7fda:	46c0      	nop			; (mov r8, r8)
    7fdc:	2000027a 	.word	0x2000027a
    7fe0:	0000080f 	.word	0x0000080f
    7fe4:	00007ce1 	.word	0x00007ce1
    7fe8:	0001681c 	.word	0x0001681c
    7fec:	0001697c 	.word	0x0001697c
    7ff0:	0000044e 	.word	0x0000044e
    7ff4:	0001687c 	.word	0x0001687c
    7ff8:	00014f21 	.word	0x00014f21
    7ffc:	20000124 	.word	0x20000124
    8000:	0000ac0d 	.word	0x0000ac0d
    8004:	00007f59 	.word	0x00007f59
    8008:	00002710 	.word	0x00002710

0000800c <CompactItem>:

static S_Nv_ReturnValue_t CompactItem(void)
{
    800c:	b5f0      	push	{r4, r5, r6, r7, lr}
    800e:	46de      	mov	lr, fp
    8010:	4657      	mov	r7, sl
    8012:	464e      	mov	r6, r9
    8014:	4645      	mov	r5, r8
    8016:	b5e0      	push	{r5, r6, r7, lr}
    8018:	b08b      	sub	sp, #44	; 0x2c
#if defined(ENABLE_NV_COMPACT_LOGGING)
    PRINTA(("CompactItem(id=%X)", s_compactItemId));
#endif

    if ( PowerSupplyTooLow() )
    801a:	4b77      	ldr	r3, [pc, #476]	; (81f8 <CompactItem+0x1ec>)
    801c:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    801e:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    8020:	2800      	cmp	r0, #0
    8022:	d007      	beq.n	8034 <CompactItem+0x28>
    s_compactItemLength = 0u;

    cache->lastBlock = lastBlock;

    return S_Nv_ReturnValue_Ok;
}
    8024:	0018      	movs	r0, r3
    8026:	b00b      	add	sp, #44	; 0x2c
    8028:	bc3c      	pop	{r2, r3, r4, r5}
    802a:	4690      	mov	r8, r2
    802c:	4699      	mov	r9, r3
    802e:	46a2      	mov	sl, r4
    8030:	46ab      	mov	fp, r5
    8032:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (s_compactItemLength == 0u) && ( s_compactItemId == 0u ) )
    8034:	4b71      	ldr	r3, [pc, #452]	; (81fc <CompactItem+0x1f0>)
    8036:	8818      	ldrh	r0, [r3, #0]
    8038:	2800      	cmp	r0, #0
    803a:	d146      	bne.n	80ca <CompactItem+0xbe>
    803c:	4b70      	ldr	r3, [pc, #448]	; (8200 <CompactItem+0x1f4>)
    803e:	881b      	ldrh	r3, [r3, #0]
    8040:	2b00      	cmp	r3, #0
    8042:	d100      	bne.n	8046 <CompactItem+0x3a>
    8044:	e0d0      	b.n	81e8 <CompactItem+0x1dc>
    Item_t *cache = FindItemCache(s_compactItemId);
    8046:	4b6e      	ldr	r3, [pc, #440]	; (8200 <CompactItem+0x1f4>)
    8048:	8818      	ldrh	r0, [r3, #0]
    804a:	4b6e      	ldr	r3, [pc, #440]	; (8204 <CompactItem+0x1f8>)
    804c:	4798      	blx	r3
    804e:	4683      	mov	fp, r0
    if ( cache == NULL )
    8050:	2800      	cmp	r0, #0
    8052:	d100      	bne.n	8056 <CompactItem+0x4a>
    8054:	e0ca      	b.n	81ec <CompactItem+0x1e0>
    uint16_t blockPointer = cache->lastBlock;
    8056:	7882      	ldrb	r2, [r0, #2]
    8058:	78c3      	ldrb	r3, [r0, #3]
    805a:	021b      	lsls	r3, r3, #8
    805c:	4313      	orrs	r3, r2
    805e:	0019      	movs	r1, r3
    8060:	9303      	str	r3, [sp, #12]
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8062:	4b69      	ldr	r3, [pc, #420]	; (8208 <CompactItem+0x1fc>)
    8064:	7818      	ldrb	r0, [r3, #0]
    8066:	2310      	movs	r3, #16
    8068:	aa06      	add	r2, sp, #24
    806a:	4c68      	ldr	r4, [pc, #416]	; (820c <CompactItem+0x200>)
    806c:	47a0      	blx	r4
    if (s_compactItemLength == 0)
    806e:	4b63      	ldr	r3, [pc, #396]	; (81fc <CompactItem+0x1f0>)
    8070:	881a      	ldrh	r2, [r3, #0]
    8072:	2a00      	cmp	r2, #0
    8074:	d02e      	beq.n	80d4 <CompactItem+0xc8>
    uint16_t lastBlock = s_sectorHead;
    8076:	4b66      	ldr	r3, [pc, #408]	; (8210 <CompactItem+0x204>)
    8078:	881b      	ldrh	r3, [r3, #0]
    807a:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    807c:	ab06      	add	r3, sp, #24
    807e:	891b      	ldrh	r3, [r3, #8]
        blockHeader.itemLength = s_compactItemLength;
    8080:	a906      	add	r1, sp, #24
    8082:	810a      	strh	r2, [r1, #8]
    8084:	1c19      	adds	r1, r3, #0
    8086:	4293      	cmp	r3, r2
    8088:	d900      	bls.n	808c <CompactItem+0x80>
    808a:	1c11      	adds	r1, r2, #0
    808c:	b28b      	uxth	r3, r1
    blockHeader.blockOffset = 0u;
    808e:	aa06      	add	r2, sp, #24
    8090:	2100      	movs	r1, #0
    8092:	8091      	strh	r1, [r2, #4]
    blockHeader.blockLength = blockHeader.itemLength;
    8094:	8910      	ldrh	r0, [r2, #8]
    8096:	80d0      	strh	r0, [r2, #6]
    blockHeader.previousBlock = 0x0000u;
    8098:	8151      	strh	r1, [r2, #10]
    blockHeader.writeCount = 0u;
    809a:	8191      	strh	r1, [r2, #12]
    uint16_t currLength = BLOCK_HEADER_SIZE + bytesToGather;
    809c:	001c      	movs	r4, r3
    809e:	3410      	adds	r4, #16
    80a0:	b2a4      	uxth	r4, r4
    memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    80a2:	495c      	ldr	r1, [pc, #368]	; (8214 <CompactItem+0x208>)
    80a4:	ca61      	ldmia	r2!, {r0, r5, r6}
    80a6:	c161      	stmia	r1!, {r0, r5, r6}
    80a8:	6812      	ldr	r2, [r2, #0]
    80aa:	600a      	str	r2, [r1, #0]
    if (currLength <= ROW_SIZE)
    80ac:	2280      	movs	r2, #128	; 0x80
    80ae:	0052      	lsls	r2, r2, #1
    80b0:	4294      	cmp	r4, r2
    80b2:	d939      	bls.n	8128 <CompactItem+0x11c>
    80b4:	2600      	movs	r6, #0
    80b6:	2310      	movs	r3, #16
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    80b8:	2280      	movs	r2, #128	; 0x80
    80ba:	0052      	lsls	r2, r2, #1
    80bc:	4691      	mov	r9, r2
    80be:	4669      	mov	r1, sp
    80c0:	824a      	strh	r2, [r1, #18]
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    80c2:	4a51      	ldr	r2, [pc, #324]	; (8208 <CompactItem+0x1fc>)
    80c4:	4692      	mov	sl, r2
    80c6:	001a      	movs	r2, r3
    80c8:	e088      	b.n	81dc <CompactItem+0x1d0>
        CompactSectorIfNeeded(s_compactItemLength + BLOCK_HEADER_SIZE);
    80ca:	3010      	adds	r0, #16
    80cc:	b280      	uxth	r0, r0
    80ce:	4b52      	ldr	r3, [pc, #328]	; (8218 <CompactItem+0x20c>)
    80d0:	4798      	blx	r3
    80d2:	e7b8      	b.n	8046 <CompactItem+0x3a>
        CompactSectorIfNeeded(blockHeader.itemLength + BLOCK_HEADER_SIZE);
    80d4:	ab06      	add	r3, sp, #24
    80d6:	8918      	ldrh	r0, [r3, #8]
    80d8:	3010      	adds	r0, #16
    80da:	b280      	uxth	r0, r0
    80dc:	4b4e      	ldr	r3, [pc, #312]	; (8218 <CompactItem+0x20c>)
    80de:	4798      	blx	r3
        cache = FindItemCache(s_compactItemId);
    80e0:	4b47      	ldr	r3, [pc, #284]	; (8200 <CompactItem+0x1f4>)
    80e2:	8818      	ldrh	r0, [r3, #0]
    80e4:	4b47      	ldr	r3, [pc, #284]	; (8204 <CompactItem+0x1f8>)
    80e6:	4798      	blx	r3
    80e8:	4683      	mov	fp, r0
        assert(cache != NULL);
    80ea:	2800      	cmp	r0, #0
    80ec:	d015      	beq.n	811a <CompactItem+0x10e>
        blockPointer = cache->lastBlock;
    80ee:	7882      	ldrb	r2, [r0, #2]
    80f0:	78c3      	ldrb	r3, [r0, #3]
    80f2:	021b      	lsls	r3, r3, #8
    80f4:	4313      	orrs	r3, r2
    80f6:	0019      	movs	r1, r3
    80f8:	9303      	str	r3, [sp, #12]
        D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    80fa:	ac06      	add	r4, sp, #24
    80fc:	4b42      	ldr	r3, [pc, #264]	; (8208 <CompactItem+0x1fc>)
    80fe:	7818      	ldrb	r0, [r3, #0]
    8100:	2310      	movs	r3, #16
    8102:	0022      	movs	r2, r4
    8104:	4d41      	ldr	r5, [pc, #260]	; (820c <CompactItem+0x200>)
    8106:	47a8      	blx	r5
    uint16_t lastBlock = s_sectorHead;
    8108:	4b41      	ldr	r3, [pc, #260]	; (8210 <CompactItem+0x204>)
    810a:	881b      	ldrh	r3, [r3, #0]
    810c:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    810e:	8923      	ldrh	r3, [r4, #8]
    if ( s_compactItemLength != 0u )
    8110:	4a3a      	ldr	r2, [pc, #232]	; (81fc <CompactItem+0x1f0>)
    8112:	8812      	ldrh	r2, [r2, #0]
    8114:	2a00      	cmp	r2, #0
    8116:	d0ba      	beq.n	808e <CompactItem+0x82>
    8118:	e7b2      	b.n	8080 <CompactItem+0x74>
        assert(cache != NULL);
    811a:	4b40      	ldr	r3, [pc, #256]	; (821c <CompactItem+0x210>)
    811c:	4a40      	ldr	r2, [pc, #256]	; (8220 <CompactItem+0x214>)
    811e:	2191      	movs	r1, #145	; 0x91
    8120:	00c9      	lsls	r1, r1, #3
    8122:	4840      	ldr	r0, [pc, #256]	; (8224 <CompactItem+0x218>)
    8124:	4c40      	ldr	r4, [pc, #256]	; (8228 <CompactItem+0x21c>)
    8126:	47a0      	blx	r4
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    8128:	4a37      	ldr	r2, [pc, #220]	; (8208 <CompactItem+0x1fc>)
    812a:	7810      	ldrb	r0, [r2, #0]
    812c:	4a39      	ldr	r2, [pc, #228]	; (8214 <CompactItem+0x208>)
    812e:	3210      	adds	r2, #16
    8130:	9200      	str	r2, [sp, #0]
    8132:	2200      	movs	r2, #0
    8134:	9903      	ldr	r1, [sp, #12]
    8136:	4c3d      	ldr	r4, [pc, #244]	; (822c <CompactItem+0x220>)
    8138:	47a0      	blx	r4
            return S_Nv_ReturnValue_Failure;
    813a:	2301      	movs	r3, #1
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    813c:	2800      	cmp	r0, #0
    813e:	d100      	bne.n	8142 <CompactItem+0x136>
    8140:	e770      	b.n	8024 <CompactItem+0x18>
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    8142:	4934      	ldr	r1, [pc, #208]	; (8214 <CompactItem+0x208>)
    8144:	ab06      	add	r3, sp, #24
    8146:	000a      	movs	r2, r1
    8148:	0018      	movs	r0, r3
    814a:	c870      	ldmia	r0!, {r4, r5, r6}
    814c:	c270      	stmia	r2!, {r4, r5, r6}
    814e:	6800      	ldr	r0, [r0, #0]
    8150:	6010      	str	r0, [r2, #0]
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    8152:	88da      	ldrh	r2, [r3, #6]
    8154:	3210      	adds	r2, #16
    8156:	b292      	uxth	r2, r2
    8158:	4b2d      	ldr	r3, [pc, #180]	; (8210 <CompactItem+0x204>)
    815a:	8818      	ldrh	r0, [r3, #0]
    815c:	4b34      	ldr	r3, [pc, #208]	; (8230 <CompactItem+0x224>)
    815e:	4798      	blx	r3
            return false;
    8160:	2300      	movs	r3, #0
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    8162:	2800      	cmp	r0, #0
    8164:	d100      	bne.n	8168 <CompactItem+0x15c>
    8166:	e75d      	b.n	8024 <CompactItem+0x18>
        UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_64BYTE_ALIGNMENT);
    8168:	ab06      	add	r3, sp, #24
    816a:	88d8      	ldrh	r0, [r3, #6]
    816c:	3010      	adds	r0, #16
    816e:	b280      	uxth	r0, r0
    8170:	2102      	movs	r1, #2
    8172:	4b30      	ldr	r3, [pc, #192]	; (8234 <CompactItem+0x228>)
    8174:	4798      	blx	r3
    s_compactItemId = 0u;
    8176:	2300      	movs	r3, #0
    8178:	4a21      	ldr	r2, [pc, #132]	; (8200 <CompactItem+0x1f4>)
    817a:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    817c:	4a1f      	ldr	r2, [pc, #124]	; (81fc <CompactItem+0x1f0>)
    817e:	8013      	strh	r3, [r2, #0]
    cache->lastBlock = lastBlock;
    8180:	465b      	mov	r3, fp
    8182:	9905      	ldr	r1, [sp, #20]
    8184:	7099      	strb	r1, [r3, #2]
    8186:	0a0b      	lsrs	r3, r1, #8
    8188:	465a      	mov	r2, fp
    818a:	70d3      	strb	r3, [r2, #3]
    return S_Nv_ReturnValue_Ok;
    818c:	2300      	movs	r3, #0
    818e:	e749      	b.n	8024 <CompactItem+0x18>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    8190:	b2ad      	uxth	r5, r5
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    8192:	1aaf      	subs	r7, r5, r2
    8194:	b2bb      	uxth	r3, r7
    8196:	0019      	movs	r1, r3
    8198:	4653      	mov	r3, sl
    819a:	7818      	ldrb	r0, [r3, #0]
    819c:	4b1d      	ldr	r3, [pc, #116]	; (8214 <CompactItem+0x208>)
    819e:	189b      	adds	r3, r3, r2
    81a0:	9300      	str	r3, [sp, #0]
    81a2:	9102      	str	r1, [sp, #8]
    81a4:	000b      	movs	r3, r1
    81a6:	0032      	movs	r2, r6
    81a8:	9903      	ldr	r1, [sp, #12]
    81aa:	4f20      	ldr	r7, [pc, #128]	; (822c <CompactItem+0x220>)
    81ac:	47b8      	blx	r7
    81ae:	2800      	cmp	r0, #0
    81b0:	d01e      	beq.n	81f0 <CompactItem+0x1e4>
            if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToGatherAndCommit) )
    81b2:	4b17      	ldr	r3, [pc, #92]	; (8210 <CompactItem+0x204>)
    81b4:	8818      	ldrh	r0, [r3, #0]
    81b6:	002a      	movs	r2, r5
    81b8:	4916      	ldr	r1, [pc, #88]	; (8214 <CompactItem+0x208>)
    81ba:	4b1d      	ldr	r3, [pc, #116]	; (8230 <CompactItem+0x224>)
    81bc:	4798      	blx	r3
    81be:	2800      	cmp	r0, #0
    81c0:	d018      	beq.n	81f4 <CompactItem+0x1e8>
            UpdateSectorHead(bytesToGatherAndCommit, ITEM_64BYTE_ALIGNMENT);
    81c2:	2102      	movs	r1, #2
    81c4:	0028      	movs	r0, r5
    81c6:	4b1b      	ldr	r3, [pc, #108]	; (8234 <CompactItem+0x228>)
    81c8:	4798      	blx	r3
            currLength -= bytesToGatherAndCommit;
    81ca:	1b64      	subs	r4, r4, r5
    81cc:	b2a4      	uxth	r4, r4
            inDataOffset += (bytesToGatherAndCommit - dataBlockOffset);
    81ce:	9902      	ldr	r1, [sp, #8]
    81d0:	468c      	mov	ip, r1
    81d2:	4466      	add	r6, ip
    81d4:	b2b6      	uxth	r6, r6
            dataBlockOffset = 0;
    81d6:	2200      	movs	r2, #0
        } while(currLength > 0);
    81d8:	2c00      	cmp	r4, #0
    81da:	d0cc      	beq.n	8176 <CompactItem+0x16a>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    81dc:	1c25      	adds	r5, r4, #0
    81de:	454c      	cmp	r4, r9
    81e0:	d9d6      	bls.n	8190 <CompactItem+0x184>
    81e2:	466b      	mov	r3, sp
    81e4:	8a5d      	ldrh	r5, [r3, #18]
    81e6:	e7d3      	b.n	8190 <CompactItem+0x184>
        return S_Nv_ReturnValue_Ok;
    81e8:	2300      	movs	r3, #0
    81ea:	e71b      	b.n	8024 <CompactItem+0x18>
        return S_Nv_ReturnValue_Ok;
    81ec:	2300      	movs	r3, #0
    81ee:	e719      	b.n	8024 <CompactItem+0x18>
                return S_Nv_ReturnValue_Failure;
    81f0:	2301      	movs	r3, #1
    81f2:	e717      	b.n	8024 <CompactItem+0x18>
                return false;
    81f4:	2300      	movs	r3, #0
    81f6:	e715      	b.n	8024 <CompactItem+0x18>
    81f8:	00007891 	.word	0x00007891
    81fc:	20000252 	.word	0x20000252
    8200:	20000250 	.word	0x20000250
    8204:	00007a89 	.word	0x00007a89
    8208:	20000278 	.word	0x20000278
    820c:	00007641 	.word	0x00007641
    8210:	2000027a 	.word	0x2000027a
    8214:	2000013c 	.word	0x2000013c
    8218:	00007f91 	.word	0x00007f91
    821c:	0001680c 	.word	0x0001680c
    8220:	00016994 	.word	0x00016994
    8224:	0001687c 	.word	0x0001687c
    8228:	00014f21 	.word	0x00014f21
    822c:	00007929 	.word	0x00007929
    8230:	00007bad 	.word	0x00007bad
    8234:	000078ad 	.word	0x000078ad

00008238 <compactItemTimerFired>:
{
    8238:	b510      	push	{r4, lr}
    (void)CompactItem();
    823a:	4b01      	ldr	r3, [pc, #4]	; (8240 <compactItemTimerFired+0x8>)
    823c:	4798      	blx	r3
}
    823e:	bd10      	pop	{r4, pc}
    8240:	0000800d 	.word	0x0000800d

00008244 <WriteDataBlockAndHeader>:
{
    8244:	b5f0      	push	{r4, r5, r6, r7, lr}
    8246:	46de      	mov	lr, fp
    8248:	4657      	mov	r7, sl
    824a:	464e      	mov	r6, r9
    824c:	4645      	mov	r5, r8
    824e:	b5e0      	push	{r5, r6, r7, lr}
    8250:	b083      	sub	sp, #12
    8252:	0004      	movs	r4, r0
    8254:	468a      	mov	sl, r1
    memset(dataBlock, 0xFF, sizeof(dataBlock));
    8256:	4d46      	ldr	r5, [pc, #280]	; (8370 <WriteDataBlockAndHeader+0x12c>)
    8258:	2280      	movs	r2, #128	; 0x80
    825a:	0052      	lsls	r2, r2, #1
    825c:	21ff      	movs	r1, #255	; 0xff
    825e:	0028      	movs	r0, r5
    8260:	4b44      	ldr	r3, [pc, #272]	; (8374 <WriteDataBlockAndHeader+0x130>)
    8262:	4798      	blx	r3
    pBlockHeader->dataCrc = ComputeCrc(pData, pBlockHeader->blockLength, 0xFFFF);
    8264:	4e44      	ldr	r6, [pc, #272]	; (8378 <WriteDataBlockAndHeader+0x134>)
    8266:	79a3      	ldrb	r3, [r4, #6]
    8268:	79e1      	ldrb	r1, [r4, #7]
    826a:	0209      	lsls	r1, r1, #8
    826c:	4319      	orrs	r1, r3
    826e:	0032      	movs	r2, r6
    8270:	4650      	mov	r0, sl
    8272:	4f42      	ldr	r7, [pc, #264]	; (837c <WriteDataBlockAndHeader+0x138>)
    8274:	47b8      	blx	r7
    8276:	7020      	strb	r0, [r4, #0]
    8278:	0a00      	lsrs	r0, r0, #8
    827a:	7060      	strb	r0, [r4, #1]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    827c:	0032      	movs	r2, r6
    827e:	210e      	movs	r1, #14
    8280:	0020      	movs	r0, r4
    8282:	47b8      	blx	r7
    pBlockHeader->headerCrc = ComputeHeaderCrc(pBlockHeader);
    8284:	73a0      	strb	r0, [r4, #14]
    8286:	0a00      	lsrs	r0, r0, #8
    8288:	73e0      	strb	r0, [r4, #15]
    memcpy(dataBlock, pBlockHeader, BLOCK_HEADER_SIZE);
    828a:	2210      	movs	r2, #16
    828c:	0021      	movs	r1, r4
    828e:	0028      	movs	r0, r5
    8290:	4b3b      	ldr	r3, [pc, #236]	; (8380 <WriteDataBlockAndHeader+0x13c>)
    8292:	4798      	blx	r3
    currentLength = pBlockHeader->blockLength + BLOCK_HEADER_SIZE;
    8294:	79a3      	ldrb	r3, [r4, #6]
    8296:	79e2      	ldrb	r2, [r4, #7]
    8298:	0212      	lsls	r2, r2, #8
    829a:	431a      	orrs	r2, r3
    829c:	0015      	movs	r5, r2
    829e:	3510      	adds	r5, #16
    82a0:	b2ad      	uxth	r5, r5
    if (pData != NULL )
    82a2:	4653      	mov	r3, sl
    82a4:	2b00      	cmp	r3, #0
    82a6:	d012      	beq.n	82ce <WriteDataBlockAndHeader+0x8a>
        if(currentLength <= ROW_SIZE)
    82a8:	2380      	movs	r3, #128	; 0x80
    82aa:	005b      	lsls	r3, r3, #1
    82ac:	429d      	cmp	r5, r3
    82ae:	d909      	bls.n	82c4 <WriteDataBlockAndHeader+0x80>
    82b0:	2600      	movs	r6, #0
    82b2:	2710      	movs	r7, #16
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    82b4:	2380      	movs	r3, #128	; 0x80
    82b6:	005b      	lsls	r3, r3, #1
    82b8:	469b      	mov	fp, r3
    82ba:	466a      	mov	r2, sp
    82bc:	80d3      	strh	r3, [r2, #6]
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    82be:	4b2c      	ldr	r3, [pc, #176]	; (8370 <WriteDataBlockAndHeader+0x12c>)
    82c0:	4699      	mov	r9, r3
    82c2:	e045      	b.n	8350 <WriteDataBlockAndHeader+0x10c>
            memcpy(dataBlock + BLOCK_HEADER_SIZE , pData, pBlockHeader->blockLength);
    82c4:	4651      	mov	r1, sl
    82c6:	482a      	ldr	r0, [pc, #168]	; (8370 <WriteDataBlockAndHeader+0x12c>)
    82c8:	3010      	adds	r0, #16
    82ca:	4b2d      	ldr	r3, [pc, #180]	; (8380 <WriteDataBlockAndHeader+0x13c>)
    82cc:	4798      	blx	r3
    if ( !WriteAndCheck(s_sectorHead, dataBlock, MIN((BLOCK_HEADER_SIZE + pBlockHeader->blockLength), ROW_SIZE)) )
    82ce:	79a3      	ldrb	r3, [r4, #6]
    82d0:	79e2      	ldrb	r2, [r4, #7]
    82d2:	0212      	lsls	r2, r2, #8
    82d4:	431a      	orrs	r2, r3
    82d6:	3210      	adds	r2, #16
    82d8:	2380      	movs	r3, #128	; 0x80
    82da:	005b      	lsls	r3, r3, #1
    82dc:	429a      	cmp	r2, r3
    82de:	dd00      	ble.n	82e2 <WriteDataBlockAndHeader+0x9e>
    82e0:	001a      	movs	r2, r3
    82e2:	b292      	uxth	r2, r2
    82e4:	4b27      	ldr	r3, [pc, #156]	; (8384 <WriteDataBlockAndHeader+0x140>)
    82e6:	8818      	ldrh	r0, [r3, #0]
    82e8:	4921      	ldr	r1, [pc, #132]	; (8370 <WriteDataBlockAndHeader+0x12c>)
    82ea:	4b27      	ldr	r3, [pc, #156]	; (8388 <WriteDataBlockAndHeader+0x144>)
    82ec:	4798      	blx	r3
    82ee:	4680      	mov	r8, r0
    82f0:	2800      	cmp	r0, #0
    82f2:	d033      	beq.n	835c <WriteDataBlockAndHeader+0x118>
    UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT );
    82f4:	79a3      	ldrb	r3, [r4, #6]
    82f6:	79e0      	ldrb	r0, [r4, #7]
    82f8:	0200      	lsls	r0, r0, #8
    82fa:	4318      	orrs	r0, r3
    82fc:	3010      	adds	r0, #16
    82fe:	b280      	uxth	r0, r0
    8300:	2102      	movs	r1, #2
    8302:	4b22      	ldr	r3, [pc, #136]	; (838c <WriteDataBlockAndHeader+0x148>)
    8304:	4798      	blx	r3
}
    8306:	4640      	mov	r0, r8
    8308:	b003      	add	sp, #12
    830a:	bc3c      	pop	{r2, r3, r4, r5}
    830c:	4690      	mov	r8, r2
    830e:	4699      	mov	r9, r3
    8310:	46a2      	mov	sl, r4
    8312:	46ab      	mov	fp, r5
    8314:	bdf0      	pop	{r4, r5, r6, r7, pc}
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8316:	b2a4      	uxth	r4, r4
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    8318:	464b      	mov	r3, r9
    831a:	19d8      	adds	r0, r3, r7
    831c:	1be2      	subs	r2, r4, r7
    831e:	4653      	mov	r3, sl
    8320:	1999      	adds	r1, r3, r6
    8322:	4b17      	ldr	r3, [pc, #92]	; (8380 <WriteDataBlockAndHeader+0x13c>)
    8324:	4798      	blx	r3
                if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToCommit))
    8326:	4b17      	ldr	r3, [pc, #92]	; (8384 <WriteDataBlockAndHeader+0x140>)
    8328:	8818      	ldrh	r0, [r3, #0]
    832a:	0022      	movs	r2, r4
    832c:	4649      	mov	r1, r9
    832e:	4b16      	ldr	r3, [pc, #88]	; (8388 <WriteDataBlockAndHeader+0x144>)
    8330:	4798      	blx	r3
    8332:	4680      	mov	r8, r0
    8334:	2800      	cmp	r0, #0
    8336:	d0e6      	beq.n	8306 <WriteDataBlockAndHeader+0xc2>
                UpdateSectorHead(bytesToCommit, ITEM_64BYTE_ALIGNMENT);
    8338:	2102      	movs	r1, #2
    833a:	0020      	movs	r0, r4
    833c:	4b13      	ldr	r3, [pc, #76]	; (838c <WriteDataBlockAndHeader+0x148>)
    833e:	4798      	blx	r3
                currentLength -= bytesToCommit;
    8340:	1b2d      	subs	r5, r5, r4
    8342:	b2ad      	uxth	r5, r5
                inDataOffset += (bytesToCommit - dataBlockOffset);
    8344:	1be4      	subs	r4, r4, r7
    8346:	1936      	adds	r6, r6, r4
    8348:	b2b6      	uxth	r6, r6
                dataBlockOffset = 0;
    834a:	2700      	movs	r7, #0
            } while(currentLength > 0);
    834c:	2d00      	cmp	r5, #0
    834e:	d0da      	beq.n	8306 <WriteDataBlockAndHeader+0xc2>
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8350:	1c2c      	adds	r4, r5, #0
    8352:	455d      	cmp	r5, fp
    8354:	d9df      	bls.n	8316 <WriteDataBlockAndHeader+0xd2>
    8356:	466b      	mov	r3, sp
    8358:	88dc      	ldrh	r4, [r3, #6]
    835a:	e7dc      	b.n	8316 <WriteDataBlockAndHeader+0xd2>
        UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT);
    835c:	79a3      	ldrb	r3, [r4, #6]
    835e:	79e0      	ldrb	r0, [r4, #7]
    8360:	0200      	lsls	r0, r0, #8
    8362:	4318      	orrs	r0, r3
    8364:	3010      	adds	r0, #16
    8366:	b280      	uxth	r0, r0
    8368:	2102      	movs	r1, #2
    836a:	4b08      	ldr	r3, [pc, #32]	; (838c <WriteDataBlockAndHeader+0x148>)
    836c:	4798      	blx	r3
        return false;
    836e:	e7ca      	b.n	8306 <WriteDataBlockAndHeader+0xc2>
    8370:	2000013c 	.word	0x2000013c
    8374:	00014ff5 	.word	0x00014ff5
    8378:	0000ffff 	.word	0x0000ffff
    837c:	000078e9 	.word	0x000078e9
    8380:	00014fe3 	.word	0x00014fe3
    8384:	2000027a 	.word	0x2000027a
    8388:	00007bad 	.word	0x00007bad
    838c:	000078ad 	.word	0x000078ad

00008390 <S_Nv_Write_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Write_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Write_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    8390:	b5f0      	push	{r4, r5, r6, r7, lr}
    8392:	46ce      	mov	lr, r9
    8394:	4647      	mov	r7, r8
    8396:	b580      	push	{r7, lr}
    8398:	b087      	sub	sp, #28
    839a:	0004      	movs	r4, r0
    839c:	9101      	str	r1, [sp, #4]
    839e:	0015      	movs	r5, r2
    83a0:	001f      	movs	r7, r3
    assert((id != 0u) && (pData != NULL));
    83a2:	2800      	cmp	r0, #0
    83a4:	d00c      	beq.n	83c0 <S_Nv_Write_Impl+0x30>
    83a6:	2b00      	cmp	r3, #0
    83a8:	d00a      	beq.n	83c0 <S_Nv_Write_Impl+0x30>

    if ( PowerSupplyTooLow() )
    83aa:	4b35      	ldr	r3, [pc, #212]	; (8480 <S_Nv_Write_Impl+0xf0>)
    83ac:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    83ae:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    83b0:	2800      	cmp	r0, #0
    83b2:	d00b      	beq.n	83cc <S_Nv_Write_Impl+0x3c>
        //SYS_StartTimer(&compactItemTimer);
        }
    }

    return S_Nv_ReturnValue_Ok;
}
    83b4:	0018      	movs	r0, r3
    83b6:	b007      	add	sp, #28
    83b8:	bc0c      	pop	{r2, r3}
    83ba:	4690      	mov	r8, r2
    83bc:	4699      	mov	r9, r3
    83be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    83c0:	4b30      	ldr	r3, [pc, #192]	; (8484 <S_Nv_Write_Impl+0xf4>)
    83c2:	4a31      	ldr	r2, [pc, #196]	; (8488 <S_Nv_Write_Impl+0xf8>)
    83c4:	4931      	ldr	r1, [pc, #196]	; (848c <S_Nv_Write_Impl+0xfc>)
    83c6:	4832      	ldr	r0, [pc, #200]	; (8490 <S_Nv_Write_Impl+0x100>)
    83c8:	4c32      	ldr	r4, [pc, #200]	; (8494 <S_Nv_Write_Impl+0x104>)
    83ca:	47a0      	blx	r4
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + dataLength);
    83cc:	0028      	movs	r0, r5
    83ce:	3010      	adds	r0, #16
    83d0:	b280      	uxth	r0, r0
    83d2:	4b31      	ldr	r3, [pc, #196]	; (8498 <S_Nv_Write_Impl+0x108>)
    83d4:	4798      	blx	r3
    Item_t *cache = FindItemCache(id);
    83d6:	0020      	movs	r0, r4
    83d8:	4b30      	ldr	r3, [pc, #192]	; (849c <S_Nv_Write_Impl+0x10c>)
    83da:	4798      	blx	r3
    83dc:	0006      	movs	r6, r0
        return S_Nv_ReturnValue_DoesNotExist;
    83de:	2303      	movs	r3, #3
    if ( cache == NULL )
    83e0:	2800      	cmp	r0, #0
    83e2:	d0e7      	beq.n	83b4 <S_Nv_Write_Impl+0x24>
    uint16_t blockPointer = cache->lastBlock;
    83e4:	7883      	ldrb	r3, [r0, #2]
    83e6:	78c4      	ldrb	r4, [r0, #3]
    83e8:	0224      	lsls	r4, r4, #8
    83ea:	431c      	orrs	r4, r3
    83ec:	46a0      	mov	r8, r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    83ee:	4b2c      	ldr	r3, [pc, #176]	; (84a0 <S_Nv_Write_Impl+0x110>)
    83f0:	7818      	ldrb	r0, [r3, #0]
    83f2:	2310      	movs	r3, #16
    83f4:	aa02      	add	r2, sp, #8
    83f6:	0021      	movs	r1, r4
    83f8:	4c2a      	ldr	r4, [pc, #168]	; (84a4 <S_Nv_Write_Impl+0x114>)
    83fa:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    83fc:	ab02      	add	r3, sp, #8
    83fe:	8919      	ldrh	r1, [r3, #8]
    8400:	9b01      	ldr	r3, [sp, #4]
    8402:	195a      	adds	r2, r3, r5
        return S_Nv_ReturnValue_BeyondEnd;
    8404:	2304      	movs	r3, #4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    8406:	428a      	cmp	r2, r1
    8408:	d8d4      	bhi.n	83b4 <S_Nv_Write_Impl+0x24>
    blockHeader.blockOffset = offset;
    840a:	ab02      	add	r3, sp, #8
    840c:	466a      	mov	r2, sp
    840e:	8892      	ldrh	r2, [r2, #4]
    8410:	809a      	strh	r2, [r3, #4]
    blockHeader.blockLength = dataLength;
    8412:	80dd      	strh	r5, [r3, #6]
    blockHeader.previousBlock = blockPointer;
    8414:	4642      	mov	r2, r8
    8416:	815a      	strh	r2, [r3, #10]
    if ( blockHeader.blockLength == blockHeader.itemLength )
    8418:	428d      	cmp	r5, r1
    841a:	d02c      	beq.n	8476 <S_Nv_Write_Impl+0xe6>
        blockHeader.writeCount++;
    841c:	ab02      	add	r3, sp, #8
    841e:	899b      	ldrh	r3, [r3, #12]
    8420:	3301      	adds	r3, #1
    8422:	aa02      	add	r2, sp, #8
    8424:	8193      	strh	r3, [r2, #12]
    uint16_t newBlockPointer = s_sectorHead;
    8426:	4b20      	ldr	r3, [pc, #128]	; (84a8 <S_Nv_Write_Impl+0x118>)
    8428:	881c      	ldrh	r4, [r3, #0]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    842a:	0039      	movs	r1, r7
    842c:	a802      	add	r0, sp, #8
    842e:	4b1f      	ldr	r3, [pc, #124]	; (84ac <S_Nv_Write_Impl+0x11c>)
    8430:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    8432:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    8434:	2800      	cmp	r0, #0
    8436:	d0bd      	beq.n	83b4 <S_Nv_Write_Impl+0x24>
    cache->lastBlock = newBlockPointer;
    8438:	70b4      	strb	r4, [r6, #2]
    843a:	0a24      	lsrs	r4, r4, #8
    843c:	70f4      	strb	r4, [r6, #3]
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    843e:	ab02      	add	r3, sp, #8
    8440:	899a      	ldrh	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    8442:	2300      	movs	r3, #0
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    8444:	2a64      	cmp	r2, #100	; 0x64
    8446:	d9b5      	bls.n	83b4 <S_Nv_Write_Impl+0x24>
        s_compactItemId = blockHeader.id;
    8448:	ab02      	add	r3, sp, #8
    844a:	885a      	ldrh	r2, [r3, #2]
    844c:	4b18      	ldr	r3, [pc, #96]	; (84b0 <S_Nv_Write_Impl+0x120>)
    844e:	801a      	strh	r2, [r3, #0]
        s_compactItemLength = 0u;           // no need to resize this item here
    8450:	2200      	movs	r2, #0
    8452:	4b18      	ldr	r3, [pc, #96]	; (84b4 <S_Nv_Write_Impl+0x124>)
    8454:	801a      	strh	r2, [r3, #0]
        if (!SYS_TimerStarted(&compactItemTimer))
    8456:	4818      	ldr	r0, [pc, #96]	; (84b8 <S_Nv_Write_Impl+0x128>)
    8458:	4b18      	ldr	r3, [pc, #96]	; (84bc <S_Nv_Write_Impl+0x12c>)
    845a:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    845c:	2300      	movs	r3, #0
        if (!SYS_TimerStarted(&compactItemTimer))
    845e:	2800      	cmp	r0, #0
    8460:	d1a8      	bne.n	83b4 <S_Nv_Write_Impl+0x24>
        compactItemTimer.handler = compactItemTimerFired;
    8462:	4b15      	ldr	r3, [pc, #84]	; (84b8 <S_Nv_Write_Impl+0x128>)
    8464:	4a16      	ldr	r2, [pc, #88]	; (84c0 <S_Nv_Write_Impl+0x130>)
    8466:	611a      	str	r2, [r3, #16]
        compactItemTimer.timeout = COMPACT_ITEM_DELAY_MS;
    8468:	4a16      	ldr	r2, [pc, #88]	; (84c4 <S_Nv_Write_Impl+0x134>)
    846a:	605a      	str	r2, [r3, #4]
        compactItemTimer.interval = COMPACT_ITEM_DELAY_MS;
    846c:	609a      	str	r2, [r3, #8]
        compactItemTimer.mode = SYS_TIMER_INTERVAL_MODE;
    846e:	2200      	movs	r2, #0
    8470:	731a      	strb	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    8472:	2300      	movs	r3, #0
    8474:	e79e      	b.n	83b4 <S_Nv_Write_Impl+0x24>
        blockHeader.writeCount = 0u;
    8476:	2300      	movs	r3, #0
    8478:	aa02      	add	r2, sp, #8
    847a:	8193      	strh	r3, [r2, #12]
    847c:	e7d3      	b.n	8426 <S_Nv_Write_Impl+0x96>
    847e:	46c0      	nop			; (mov r8, r8)
    8480:	00007891 	.word	0x00007891
    8484:	00016914 	.word	0x00016914
    8488:	000169b4 	.word	0x000169b4
    848c:	00000596 	.word	0x00000596
    8490:	0001687c 	.word	0x0001687c
    8494:	00014f21 	.word	0x00014f21
    8498:	00007f91 	.word	0x00007f91
    849c:	00007a89 	.word	0x00007a89
    84a0:	20000278 	.word	0x20000278
    84a4:	00007641 	.word	0x00007641
    84a8:	2000027a 	.word	0x2000027a
    84ac:	00008245 	.word	0x00008245
    84b0:	20000250 	.word	0x20000250
    84b4:	20000252 	.word	0x20000252
    84b8:	20000110 	.word	0x20000110
    84bc:	0000ac0d 	.word	0x0000ac0d
    84c0:	00008239 	.word	0x00008239
    84c4:	00000bb8 	.word	0x00000bb8

000084c8 <S_Nv_Read_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Read_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Read_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    84c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    84ca:	b083      	sub	sp, #12
    84cc:	000c      	movs	r4, r1
    84ce:	0015      	movs	r5, r2
    84d0:	001e      	movs	r6, r3
    assert((id != 0u) && (pData != NULL));
    84d2:	2800      	cmp	r0, #0
    84d4:	d009      	beq.n	84ea <S_Nv_Read_Impl+0x22>
    84d6:	2b00      	cmp	r3, #0
    84d8:	d007      	beq.n	84ea <S_Nv_Read_Impl+0x22>

    // get the pointer to the last written block for the item
    uint16_t lastBlockPointer = FindItem(id);
    84da:	4b10      	ldr	r3, [pc, #64]	; (851c <S_Nv_Read_Impl+0x54>)
    84dc:	4798      	blx	r3
    if ( lastBlockPointer == 0x0000u )
    {
        // item does not exist
        return S_Nv_ReturnValue_DoesNotExist;
    84de:	2303      	movs	r3, #3
    if ( lastBlockPointer == 0x0000u )
    84e0:	2800      	cmp	r0, #0
    84e2:	d108      	bne.n	84f6 <S_Nv_Read_Impl+0x2e>
    {
        return S_Nv_ReturnValue_BeyondEnd;
    }

    return S_Nv_ReturnValue_Ok;
}
    84e4:	0018      	movs	r0, r3
    84e6:	b003      	add	sp, #12
    84e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    84ea:	4b0d      	ldr	r3, [pc, #52]	; (8520 <S_Nv_Read_Impl+0x58>)
    84ec:	4a0d      	ldr	r2, [pc, #52]	; (8524 <S_Nv_Read_Impl+0x5c>)
    84ee:	490e      	ldr	r1, [pc, #56]	; (8528 <S_Nv_Read_Impl+0x60>)
    84f0:	480e      	ldr	r0, [pc, #56]	; (852c <S_Nv_Read_Impl+0x64>)
    84f2:	4c0f      	ldr	r4, [pc, #60]	; (8530 <S_Nv_Read_Impl+0x68>)
    84f4:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    84f6:	1962      	adds	r2, r4, r5
    84f8:	490e      	ldr	r1, [pc, #56]	; (8534 <S_Nv_Read_Impl+0x6c>)
        return S_Nv_ReturnValue_BeyondEnd;
    84fa:	3301      	adds	r3, #1
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    84fc:	428a      	cmp	r2, r1
    84fe:	d8f1      	bhi.n	84e4 <S_Nv_Read_Impl+0x1c>
    if ( !GatherData(s_sector, lastBlockPointer, offset, dataLength, pData ))
    8500:	4b0d      	ldr	r3, [pc, #52]	; (8538 <S_Nv_Read_Impl+0x70>)
    8502:	781f      	ldrb	r7, [r3, #0]
    8504:	9600      	str	r6, [sp, #0]
    8506:	002b      	movs	r3, r5
    8508:	0022      	movs	r2, r4
    850a:	0001      	movs	r1, r0
    850c:	0038      	movs	r0, r7
    850e:	4c0b      	ldr	r4, [pc, #44]	; (853c <S_Nv_Read_Impl+0x74>)
    8510:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    8512:	4243      	negs	r3, r0
    8514:	4143      	adcs	r3, r0
    8516:	009b      	lsls	r3, r3, #2
    8518:	e7e4      	b.n	84e4 <S_Nv_Read_Impl+0x1c>
    851a:	46c0      	nop			; (mov r8, r8)
    851c:	00007afd 	.word	0x00007afd
    8520:	00016914 	.word	0x00016914
    8524:	000169c4 	.word	0x000169c4
    8528:	000005ee 	.word	0x000005ee
    852c:	0001687c 	.word	0x0001687c
    8530:	00014f21 	.word	0x00014f21
    8534:	0000ffff 	.word	0x0000ffff
    8538:	20000278 	.word	0x20000278
    853c:	00007929 	.word	0x00007929

00008540 <S_Nv_ItemLength_Impl>:

/** Interface function, see \ref S_Nv_ItemLength. */
uint16_t S_Nv_ItemLength_Impl(S_Nv_ItemId_t id)
{
    8540:	b510      	push	{r4, lr}
    8542:	b084      	sub	sp, #16
    assert(id != 0u);
    8544:	2800      	cmp	r0, #0
    8546:	d005      	beq.n	8554 <S_Nv_ItemLength_Impl+0x14>

    uint16_t blockPointer = FindItem(id);
    8548:	4b0a      	ldr	r3, [pc, #40]	; (8574 <S_Nv_ItemLength_Impl+0x34>)
    854a:	4798      	blx	r3
    854c:	1e01      	subs	r1, r0, #0
    if ( blockPointer == 0x0000u )
    854e:	d107      	bne.n	8560 <S_Nv_ItemLength_Impl+0x20>

    // read last written item block header
    BlockHeader_t blockHeader;
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    return blockHeader.itemLength;
}
    8550:	b004      	add	sp, #16
    8552:	bd10      	pop	{r4, pc}
    assert(id != 0u);
    8554:	4b08      	ldr	r3, [pc, #32]	; (8578 <S_Nv_ItemLength_Impl+0x38>)
    8556:	4a09      	ldr	r2, [pc, #36]	; (857c <S_Nv_ItemLength_Impl+0x3c>)
    8558:	4909      	ldr	r1, [pc, #36]	; (8580 <S_Nv_ItemLength_Impl+0x40>)
    855a:	480a      	ldr	r0, [pc, #40]	; (8584 <S_Nv_ItemLength_Impl+0x44>)
    855c:	4c0a      	ldr	r4, [pc, #40]	; (8588 <S_Nv_ItemLength_Impl+0x48>)
    855e:	47a0      	blx	r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8560:	4b0a      	ldr	r3, [pc, #40]	; (858c <S_Nv_ItemLength_Impl+0x4c>)
    8562:	7818      	ldrb	r0, [r3, #0]
    8564:	2310      	movs	r3, #16
    8566:	466a      	mov	r2, sp
    8568:	4c09      	ldr	r4, [pc, #36]	; (8590 <S_Nv_ItemLength_Impl+0x50>)
    856a:	47a0      	blx	r4
    return blockHeader.itemLength;
    856c:	466b      	mov	r3, sp
    856e:	8918      	ldrh	r0, [r3, #8]
    8570:	e7ee      	b.n	8550 <S_Nv_ItemLength_Impl+0x10>
    8572:	46c0      	nop			; (mov r8, r8)
    8574:	00007afd 	.word	0x00007afd
    8578:	00016908 	.word	0x00016908
    857c:	000169d4 	.word	0x000169d4
    8580:	0000060b 	.word	0x0000060b
    8584:	0001687c 	.word	0x0001687c
    8588:	00014f21 	.word	0x00014f21
    858c:	20000278 	.word	0x20000278
    8590:	00007641 	.word	0x00007641

00008594 <S_Nv_ItemInit_Impl>:
{
    8594:	b5f0      	push	{r4, r5, r6, r7, lr}
    8596:	b085      	sub	sp, #20
    8598:	0004      	movs	r4, r0
    859a:	000e      	movs	r6, r1
    859c:	0015      	movs	r5, r2
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    859e:	1e43      	subs	r3, r0, #1
    85a0:	b29b      	uxth	r3, r3
    85a2:	4a2e      	ldr	r2, [pc, #184]	; (865c <S_Nv_ItemInit_Impl+0xc8>)
    85a4:	4293      	cmp	r3, r2
    85a6:	d81e      	bhi.n	85e6 <S_Nv_ItemInit_Impl+0x52>
    85a8:	2380      	movs	r3, #128	; 0x80
    85aa:	011b      	lsls	r3, r3, #4
    85ac:	4299      	cmp	r1, r3
    85ae:	d81a      	bhi.n	85e6 <S_Nv_ItemInit_Impl+0x52>
    if ( FindItem(id) != 0x0000u )
    85b0:	4b2b      	ldr	r3, [pc, #172]	; (8660 <S_Nv_ItemInit_Impl+0xcc>)
    85b2:	4798      	blx	r3
    85b4:	2800      	cmp	r0, #0
    85b6:	d01d      	beq.n	85f4 <S_Nv_ItemInit_Impl+0x60>
        uint16_t oldItemLength = S_Nv_ItemLength(id);
    85b8:	0020      	movs	r0, r4
    85ba:	4b2a      	ldr	r3, [pc, #168]	; (8664 <S_Nv_ItemInit_Impl+0xd0>)
    85bc:	4798      	blx	r3
        if ( oldItemLength != itemLength )
    85be:	4286      	cmp	r6, r0
    85c0:	d007      	beq.n	85d2 <S_Nv_ItemInit_Impl+0x3e>
            s_compactItemId = id;
    85c2:	4b29      	ldr	r3, [pc, #164]	; (8668 <S_Nv_ItemInit_Impl+0xd4>)
    85c4:	801c      	strh	r4, [r3, #0]
            s_compactItemLength = itemLength;
    85c6:	4b29      	ldr	r3, [pc, #164]	; (866c <S_Nv_ItemInit_Impl+0xd8>)
    85c8:	801e      	strh	r6, [r3, #0]
            S_Nv_ReturnValue_t resizeResult = CompactItem();
    85ca:	4b29      	ldr	r3, [pc, #164]	; (8670 <S_Nv_ItemInit_Impl+0xdc>)
    85cc:	4798      	blx	r3
    85ce:	1e03      	subs	r3, r0, #0
            if ( resizeResult != S_Nv_ReturnValue_Ok )
    85d0:	d115      	bne.n	85fe <S_Nv_ItemInit_Impl+0x6a>
        if (pDefaultData != NULL)
    85d2:	2d00      	cmp	r5, #0
    85d4:	d040      	beq.n	8658 <S_Nv_ItemInit_Impl+0xc4>
            return S_Nv_Read(id, 0u, itemLength, pDefaultData);
    85d6:	002b      	movs	r3, r5
    85d8:	0032      	movs	r2, r6
    85da:	2100      	movs	r1, #0
    85dc:	0020      	movs	r0, r4
    85de:	4c25      	ldr	r4, [pc, #148]	; (8674 <S_Nv_ItemInit_Impl+0xe0>)
    85e0:	47a0      	blx	r4
    85e2:	0003      	movs	r3, r0
    85e4:	e00b      	b.n	85fe <S_Nv_ItemInit_Impl+0x6a>
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    85e6:	4b24      	ldr	r3, [pc, #144]	; (8678 <S_Nv_ItemInit_Impl+0xe4>)
    85e8:	4a24      	ldr	r2, [pc, #144]	; (867c <S_Nv_ItemInit_Impl+0xe8>)
    85ea:	21aa      	movs	r1, #170	; 0xaa
    85ec:	00c9      	lsls	r1, r1, #3
    85ee:	4824      	ldr	r0, [pc, #144]	; (8680 <S_Nv_ItemInit_Impl+0xec>)
    85f0:	4c24      	ldr	r4, [pc, #144]	; (8684 <S_Nv_ItemInit_Impl+0xf0>)
    85f2:	47a0      	blx	r4
    if ( PowerSupplyTooLow() )
    85f4:	4b24      	ldr	r3, [pc, #144]	; (8688 <S_Nv_ItemInit_Impl+0xf4>)
    85f6:	4798      	blx	r3
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    85f8:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    85fa:	2800      	cmp	r0, #0
    85fc:	d002      	beq.n	8604 <S_Nv_ItemInit_Impl+0x70>
}
    85fe:	0018      	movs	r0, r3
    8600:	b005      	add	sp, #20
    8602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + itemLength);
    8604:	0030      	movs	r0, r6
    8606:	3010      	adds	r0, #16
    8608:	b280      	uxth	r0, r0
    860a:	4b20      	ldr	r3, [pc, #128]	; (868c <S_Nv_ItemInit_Impl+0xf8>)
    860c:	4798      	blx	r3
    assert(s_itemCount < MAX_ITEM_COUNT);
    860e:	4b20      	ldr	r3, [pc, #128]	; (8690 <S_Nv_ItemInit_Impl+0xfc>)
    8610:	781b      	ldrb	r3, [r3, #0]
    8612:	2b06      	cmp	r3, #6
    8614:	d819      	bhi.n	864a <S_Nv_ItemInit_Impl+0xb6>
    uint16_t newItemPointer = s_sectorHead;
    8616:	4b1f      	ldr	r3, [pc, #124]	; (8694 <S_Nv_ItemInit_Impl+0x100>)
    8618:	881f      	ldrh	r7, [r3, #0]
    blockHeader.id = newItemId;
    861a:	466b      	mov	r3, sp
    861c:	805c      	strh	r4, [r3, #2]
    blockHeader.blockOffset = 0x0000u;
    861e:	2300      	movs	r3, #0
    8620:	466a      	mov	r2, sp
    8622:	8093      	strh	r3, [r2, #4]
    blockHeader.blockLength = itemLength;
    8624:	80d6      	strh	r6, [r2, #6]
    blockHeader.itemLength = itemLength;
    8626:	8116      	strh	r6, [r2, #8]
    blockHeader.previousBlock = 0x0000u;
    8628:	8153      	strh	r3, [r2, #10]
    blockHeader.writeCount = 0u;
    862a:	8193      	strh	r3, [r2, #12]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    862c:	0029      	movs	r1, r5
    862e:	4668      	mov	r0, sp
    8630:	4b19      	ldr	r3, [pc, #100]	; (8698 <S_Nv_ItemInit_Impl+0x104>)
    8632:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    8634:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    8636:	2800      	cmp	r0, #0
    8638:	d0e1      	beq.n	85fe <S_Nv_ItemInit_Impl+0x6a>
    Item_t *newItemCache = CreateItemCache(newItemId);
    863a:	0020      	movs	r0, r4
    863c:	4b17      	ldr	r3, [pc, #92]	; (869c <S_Nv_ItemInit_Impl+0x108>)
    863e:	4798      	blx	r3
    newItemCache->lastBlock = newItemPointer;
    8640:	7087      	strb	r7, [r0, #2]
    8642:	0a3f      	lsrs	r7, r7, #8
    8644:	70c7      	strb	r7, [r0, #3]
    return S_Nv_ReturnValue_DidNotExist;
    8646:	2302      	movs	r3, #2
    8648:	e7d9      	b.n	85fe <S_Nv_ItemInit_Impl+0x6a>
    assert(s_itemCount < MAX_ITEM_COUNT);
    864a:	4b15      	ldr	r3, [pc, #84]	; (86a0 <S_Nv_ItemInit_Impl+0x10c>)
    864c:	4a0b      	ldr	r2, [pc, #44]	; (867c <S_Nv_ItemInit_Impl+0xe8>)
    864e:	21af      	movs	r1, #175	; 0xaf
    8650:	00c9      	lsls	r1, r1, #3
    8652:	480b      	ldr	r0, [pc, #44]	; (8680 <S_Nv_ItemInit_Impl+0xec>)
    8654:	4c0b      	ldr	r4, [pc, #44]	; (8684 <S_Nv_ItemInit_Impl+0xf0>)
    8656:	47a0      	blx	r4
            return S_Nv_ReturnValue_Ok;
    8658:	2300      	movs	r3, #0
    865a:	e7d0      	b.n	85fe <S_Nv_ItemInit_Impl+0x6a>
    865c:	0000effe 	.word	0x0000effe
    8660:	00007afd 	.word	0x00007afd
    8664:	00008541 	.word	0x00008541
    8668:	20000250 	.word	0x20000250
    866c:	20000252 	.word	0x20000252
    8670:	0000800d 	.word	0x0000800d
    8674:	000084c9 	.word	0x000084c9
    8678:	000168c8 	.word	0x000168c8
    867c:	000169a0 	.word	0x000169a0
    8680:	0001687c 	.word	0x0001687c
    8684:	00014f21 	.word	0x00014f21
    8688:	00007891 	.word	0x00007891
    868c:	00007f91 	.word	0x00007f91
    8690:	20000270 	.word	0x20000270
    8694:	2000027a 	.word	0x2000027a
    8698:	00008245 	.word	0x00008245
    869c:	00007b19 	.word	0x00007b19
    86a0:	00016840 	.word	0x00016840

000086a4 <S_Nv_IsItemAvailable_Impl>:
/** Interface function, see \ref S_Nv_IsItemAvailable.
 *
 * Important: This will check whether the item is found in the storage area
 */
bool S_Nv_IsItemAvailable_Impl(S_Nv_ItemId_t id)
{
    86a4:	b510      	push	{r4, lr}
  return ( FindItem(id) != 0x0000u );
    86a6:	4b03      	ldr	r3, [pc, #12]	; (86b4 <S_Nv_IsItemAvailable_Impl+0x10>)
    86a8:	4798      	blx	r3
    86aa:	1e43      	subs	r3, r0, #1
    86ac:	4198      	sbcs	r0, r3
    86ae:	b2c0      	uxtb	r0, r0
}
    86b0:	bd10      	pop	{r4, pc}
    86b2:	46c0      	nop			; (mov r8, r8)
    86b4:	00007afd 	.word	0x00007afd

000086b8 <pdsInitItemMask>:
\param[in] itemMask - itemMask to be initialized

\return true itemMask is initialized, false otherwise
******************************************************************************/
static bool pdsInitItemMask(S_Nv_ItemId_t memoryId, uint8_t *itemMask)
{
    86b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    86ba:	46d6      	mov	lr, sl
    86bc:	4647      	mov	r7, r8
    86be:	b580      	push	{r7, lr}
    86c0:	b087      	sub	sp, #28
    86c2:	000f      	movs	r7, r1
  if (PDS_ALL_EXISTENT_MEMORY == memoryId)
    86c4:	4b20      	ldr	r3, [pc, #128]	; (8748 <pdsInitItemMask+0x90>)
    86c6:	4298      	cmp	r0, r3
    86c8:	d012      	beq.n	86f0 <pdsInitItemMask+0x38>
  {
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    itemMask[0] &= 0xFEU;
  }
  else if (PDS_DIRECTORY_MASK & memoryId)
    86ca:	0443      	lsls	r3, r0, #17
    86cc:	d415      	bmi.n	86fa <pdsInitItemMask+0x42>
    else
      return false;
  }
  else
  {
    itemMask[memoryId / 8] |= 1 << (memoryId % 8);
    86ce:	08c3      	lsrs	r3, r0, #3
    86d0:	18cf      	adds	r7, r1, r3
    86d2:	2307      	movs	r3, #7
    86d4:	4018      	ands	r0, r3
    86d6:	3b06      	subs	r3, #6
    86d8:	4083      	lsls	r3, r0
    86da:	783a      	ldrb	r2, [r7, #0]
    86dc:	4313      	orrs	r3, r2
    86de:	703b      	strb	r3, [r7, #0]
  }

  return true;
    86e0:	2301      	movs	r3, #1
    86e2:	9301      	str	r3, [sp, #4]
}
    86e4:	9801      	ldr	r0, [sp, #4]
    86e6:	b007      	add	sp, #28
    86e8:	bc0c      	pop	{r2, r3}
    86ea:	4690      	mov	r8, r2
    86ec:	469a      	mov	sl, r3
    86ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    itemMask[0] &= 0xFEU;
    86f0:	23fe      	movs	r3, #254	; 0xfe
    86f2:	700b      	strb	r3, [r1, #0]
  return true;
    86f4:	3bfd      	subs	r3, #253	; 0xfd
    86f6:	9301      	str	r3, [sp, #4]
    86f8:	e7f4      	b.n	86e4 <pdsInitItemMask+0x2c>
    if (pdsGetDirDescr(memoryId, &dirDescr))
    86fa:	a904      	add	r1, sp, #16
    86fc:	4b13      	ldr	r3, [pc, #76]	; (874c <pdsInitItemMask+0x94>)
    86fe:	4798      	blx	r3
    8700:	9001      	str	r0, [sp, #4]
    8702:	2800      	cmp	r0, #0
    8704:	d0ee      	beq.n	86e4 <pdsInitItemMask+0x2c>
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    8706:	ab04      	add	r3, sp, #16
    8708:	889b      	ldrh	r3, [r3, #4]
    870a:	4698      	mov	r8, r3
    870c:	2b00      	cmp	r3, #0
    870e:	d0e9      	beq.n	86e4 <pdsInitItemMask+0x2c>
    8710:	2400      	movs	r4, #0
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    8712:	ab02      	add	r3, sp, #8
    8714:	1d9d      	adds	r5, r3, #6
    8716:	4b0e      	ldr	r3, [pc, #56]	; (8750 <pdsInitItemMask+0x98>)
    8718:	469a      	mov	sl, r3
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    871a:	2607      	movs	r6, #7
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    871c:	0061      	lsls	r1, r4, #1
    871e:	9b04      	ldr	r3, [sp, #16]
    8720:	469c      	mov	ip, r3
    8722:	4461      	add	r1, ip
    8724:	2202      	movs	r2, #2
    8726:	0028      	movs	r0, r5
    8728:	47d0      	blx	sl
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    872a:	8829      	ldrh	r1, [r5, #0]
    872c:	08ca      	lsrs	r2, r1, #3
    872e:	18ba      	adds	r2, r7, r2
    8730:	4031      	ands	r1, r6
    8732:	2301      	movs	r3, #1
    8734:	408b      	lsls	r3, r1
    8736:	7811      	ldrb	r1, [r2, #0]
    8738:	430b      	orrs	r3, r1
    873a:	7013      	strb	r3, [r2, #0]
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    873c:	3401      	adds	r4, #1
    873e:	b2e4      	uxtb	r4, r4
    8740:	b2a3      	uxth	r3, r4
    8742:	4543      	cmp	r3, r8
    8744:	d3ea      	bcc.n	871c <pdsInitItemMask+0x64>
    8746:	e7cd      	b.n	86e4 <pdsInitItemMask+0x2c>
    8748:	00004002 	.word	0x00004002
    874c:	00008965 	.word	0x00008965
    8750:	00014fe3 	.word	0x00014fe3

00008754 <PDS_Store>:
{
    8754:	b510      	push	{r4, lr}
  if (!pdsInitItemMask(memoryId, itemsToStore))
    8756:	4905      	ldr	r1, [pc, #20]	; (876c <PDS_Store+0x18>)
    8758:	4b05      	ldr	r3, [pc, #20]	; (8770 <PDS_Store+0x1c>)
    875a:	4798      	blx	r3
    875c:	1e04      	subs	r4, r0, #0
    875e:	d101      	bne.n	8764 <PDS_Store+0x10>
}
    8760:	0020      	movs	r0, r4
    8762:	bd10      	pop	{r4, pc}
  pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    8764:	2000      	movs	r0, #0
    8766:	4b03      	ldr	r3, [pc, #12]	; (8774 <PDS_Store+0x20>)
    8768:	4798      	blx	r3
  return true;
    876a:	e7f9      	b.n	8760 <PDS_Store+0xc>
    876c:	20000280 	.word	0x20000280
    8770:	000086b9 	.word	0x000086b9
    8774:	000088b5 	.word	0x000088b5

00008778 <pdsStoreItemTaskHandler>:
{
    8778:	b5f0      	push	{r4, r5, r6, r7, lr}
    877a:	b085      	sub	sp, #20
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    877c:	4b3e      	ldr	r3, [pc, #248]	; (8878 <pdsStoreItemTaskHandler+0x100>)
    877e:	781b      	ldrb	r3, [r3, #0]
    8780:	3301      	adds	r3, #1
      bit_index %= 8;
    8782:	2207      	movs	r2, #7
    8784:	4013      	ands	r3, r2
      if (itemsToStore[byte_index] & (1U << bit_index))
    8786:	4a3d      	ldr	r2, [pc, #244]	; (887c <pdsStoreItemTaskHandler+0x104>)
    8788:	7817      	ldrb	r7, [r2, #0]
    878a:	0038      	movs	r0, r7
    878c:	001e      	movs	r6, r3
    878e:	003a      	movs	r2, r7
    8790:	40da      	lsrs	r2, r3
    8792:	07d2      	lsls	r2, r2, #31
    8794:	d431      	bmi.n	87fa <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    8796:	3301      	adds	r3, #1
    8798:	b2db      	uxtb	r3, r3
    879a:	2207      	movs	r2, #7
      bit_index %= 8;
    879c:	2507      	movs	r5, #7
      if (itemsToStore[byte_index] & (1U << bit_index))
    879e:	2401      	movs	r4, #1
      bit_index %= 8;
    87a0:	402b      	ands	r3, r5
      if (itemsToStore[byte_index] & (1U << bit_index))
    87a2:	001e      	movs	r6, r3
    87a4:	0001      	movs	r1, r0
    87a6:	40d9      	lsrs	r1, r3
    87a8:	420c      	tst	r4, r1
    87aa:	d126      	bne.n	87fa <pdsStoreItemTaskHandler+0x82>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    87ac:	3301      	adds	r3, #1
    87ae:	b2db      	uxtb	r3, r3
    87b0:	3a01      	subs	r2, #1
    87b2:	b2d2      	uxtb	r2, r2
    87b4:	2a00      	cmp	r2, #0
    87b6:	d1f3      	bne.n	87a0 <pdsStoreItemTaskHandler+0x28>
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    87b8:	2401      	movs	r4, #1
  if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)byte_index << 3U) + bit_index))
    87ba:	00e4      	lsls	r4, r4, #3
    87bc:	18e4      	adds	r4, r4, r3
    87be:	0020      	movs	r0, r4
    87c0:	4b2f      	ldr	r3, [pc, #188]	; (8880 <pdsStoreItemTaskHandler+0x108>)
    87c2:	4798      	blx	r3
    87c4:	2800      	cmp	r0, #0
    87c6:	d124      	bne.n	8812 <pdsStoreItemTaskHandler+0x9a>
    if(pdsGetItemDescr(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, &itemDescr))
    87c8:	4669      	mov	r1, sp
    87ca:	0020      	movs	r0, r4
    87cc:	4b2d      	ldr	r3, [pc, #180]	; (8884 <pdsStoreItemTaskHandler+0x10c>)
    87ce:	4798      	blx	r3
    87d0:	2800      	cmp	r0, #0
    87d2:	d038      	beq.n	8846 <pdsStoreItemTaskHandler+0xce>
      if (itemDescr.filler)
    87d4:	9b02      	ldr	r3, [sp, #8]
    87d6:	2b00      	cmp	r3, #0
    87d8:	d000      	beq.n	87dc <pdsStoreItemTaskHandler+0x64>
        itemDescr.filler();
    87da:	4798      	blx	r3
      ret = S_Nv_ItemInit(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, itemDescr.itemSize, itemDescr.itemData);
    87dc:	9a01      	ldr	r2, [sp, #4]
    87de:	466b      	mov	r3, sp
    87e0:	8859      	ldrh	r1, [r3, #2]
    87e2:	0020      	movs	r0, r4
    87e4:	4b28      	ldr	r3, [pc, #160]	; (8888 <pdsStoreItemTaskHandler+0x110>)
    87e6:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    87e8:	23fd      	movs	r3, #253	; 0xfd
    87ea:	4218      	tst	r0, r3
    87ec:	d02b      	beq.n	8846 <pdsStoreItemTaskHandler+0xce>
    87ee:	4b27      	ldr	r3, [pc, #156]	; (888c <pdsStoreItemTaskHandler+0x114>)
    87f0:	4a27      	ldr	r2, [pc, #156]	; (8890 <pdsStoreItemTaskHandler+0x118>)
    87f2:	21ea      	movs	r1, #234	; 0xea
    87f4:	4827      	ldr	r0, [pc, #156]	; (8894 <pdsStoreItemTaskHandler+0x11c>)
    87f6:	4c28      	ldr	r4, [pc, #160]	; (8898 <pdsStoreItemTaskHandler+0x120>)
    87f8:	47a0      	blx	r4
        itemsToStore[byte_index] &= ~(1U << bit_index);
    87fa:	2201      	movs	r2, #1
    87fc:	40b2      	lsls	r2, r6
    87fe:	4397      	bics	r7, r2
    8800:	4a1e      	ldr	r2, [pc, #120]	; (887c <pdsStoreItemTaskHandler+0x104>)
    8802:	7017      	strb	r7, [r2, #0]
        i_found = byte_index;
    8804:	2100      	movs	r1, #0
    8806:	4a25      	ldr	r2, [pc, #148]	; (889c <pdsStoreItemTaskHandler+0x124>)
    8808:	7011      	strb	r1, [r2, #0]
        j_found = bit_index;
    880a:	4a1b      	ldr	r2, [pc, #108]	; (8878 <pdsStoreItemTaskHandler+0x100>)
    880c:	7013      	strb	r3, [r2, #0]
    byte_index %= PDS_ITEM_MASK_SIZE;
    880e:	2400      	movs	r4, #0
    8810:	e7d3      	b.n	87ba <pdsStoreItemTaskHandler+0x42>
  if (pdsGetItemDescr(id, &itemDescr))
    8812:	4669      	mov	r1, sp
    8814:	0020      	movs	r0, r4
    8816:	4b1b      	ldr	r3, [pc, #108]	; (8884 <pdsStoreItemTaskHandler+0x10c>)
    8818:	4798      	blx	r3
    881a:	2800      	cmp	r0, #0
    881c:	d013      	beq.n	8846 <pdsStoreItemTaskHandler+0xce>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    881e:	466b      	mov	r3, sp
    8820:	885b      	ldrh	r3, [r3, #2]
    8822:	2b00      	cmp	r3, #0
    8824:	d015      	beq.n	8852 <pdsStoreItemTaskHandler+0xda>
    8826:	9b01      	ldr	r3, [sp, #4]
    8828:	2b00      	cmp	r3, #0
    882a:	d012      	beq.n	8852 <pdsStoreItemTaskHandler+0xda>
    if (itemDescr.filler)
    882c:	9b02      	ldr	r3, [sp, #8]
    882e:	2b00      	cmp	r3, #0
    8830:	d000      	beq.n	8834 <pdsStoreItemTaskHandler+0xbc>
      itemDescr.filler();
    8832:	4798      	blx	r3
      ret = S_Nv_Write(id, 0U, itemDescr.itemSize, itemDescr.itemData);
    8834:	9b01      	ldr	r3, [sp, #4]
    8836:	466a      	mov	r2, sp
    8838:	8852      	ldrh	r2, [r2, #2]
    883a:	2100      	movs	r1, #0
    883c:	0020      	movs	r0, r4
    883e:	4c18      	ldr	r4, [pc, #96]	; (88a0 <pdsStoreItemTaskHandler+0x128>)
    8840:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    8842:	2800      	cmp	r0, #0
    8844:	d10c      	bne.n	8860 <pdsStoreItemTaskHandler+0xe8>
    if (itemsToStore[i])
    8846:	4b0d      	ldr	r3, [pc, #52]	; (887c <pdsStoreItemTaskHandler+0x104>)
    8848:	781b      	ldrb	r3, [r3, #0]
    884a:	2b00      	cmp	r3, #0
    884c:	d10f      	bne.n	886e <pdsStoreItemTaskHandler+0xf6>
}
    884e:	b005      	add	sp, #20
    8850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    8852:	4b14      	ldr	r3, [pc, #80]	; (88a4 <pdsStoreItemTaskHandler+0x12c>)
    8854:	4a14      	ldr	r2, [pc, #80]	; (88a8 <pdsStoreItemTaskHandler+0x130>)
    8856:	2134      	movs	r1, #52	; 0x34
    8858:	31ff      	adds	r1, #255	; 0xff
    885a:	480e      	ldr	r0, [pc, #56]	; (8894 <pdsStoreItemTaskHandler+0x11c>)
    885c:	4c0e      	ldr	r4, [pc, #56]	; (8898 <pdsStoreItemTaskHandler+0x120>)
    885e:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    8860:	4b12      	ldr	r3, [pc, #72]	; (88ac <pdsStoreItemTaskHandler+0x134>)
    8862:	4a11      	ldr	r2, [pc, #68]	; (88a8 <pdsStoreItemTaskHandler+0x130>)
    8864:	2142      	movs	r1, #66	; 0x42
    8866:	31ff      	adds	r1, #255	; 0xff
    8868:	480a      	ldr	r0, [pc, #40]	; (8894 <pdsStoreItemTaskHandler+0x11c>)
    886a:	4c0b      	ldr	r4, [pc, #44]	; (8898 <pdsStoreItemTaskHandler+0x120>)
    886c:	47a0      	blx	r4
      pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    886e:	2000      	movs	r0, #0
    8870:	4b0f      	ldr	r3, [pc, #60]	; (88b0 <pdsStoreItemTaskHandler+0x138>)
    8872:	4798      	blx	r3
}
    8874:	e7eb      	b.n	884e <pdsStoreItemTaskHandler+0xd6>
    8876:	46c0      	nop			; (mov r8, r8)
    8878:	20000281 	.word	0x20000281
    887c:	20000280 	.word	0x20000280
    8880:	000086a5 	.word	0x000086a5
    8884:	00008909 	.word	0x00008909
    8888:	00008595 	.word	0x00008595
    888c:	00016a78 	.word	0x00016a78
    8890:	00016ac0 	.word	0x00016ac0
    8894:	00016a28 	.word	0x00016a28
    8898:	00014f21 	.word	0x00014f21
    889c:	2000027c 	.word	0x2000027c
    88a0:	00008391 	.word	0x00008391
    88a4:	000169ec 	.word	0x000169ec
    88a8:	00016ad8 	.word	0x00016ad8
    88ac:	00016ae8 	.word	0x00016ae8
    88b0:	000088b5 	.word	0x000088b5

000088b4 <pdsPostTask>:
\param[in] taskId - id of a task
******************************************************************************/

void pdsPostTask(PdsTaskId_t taskId)
{
  pendingTasks |= (1U << taskId);
    88b4:	4a03      	ldr	r2, [pc, #12]	; (88c4 <pdsPostTask+0x10>)
    88b6:	2301      	movs	r3, #1
    88b8:	4083      	lsls	r3, r0
    88ba:	7811      	ldrb	r1, [r2, #0]
    88bc:	430b      	orrs	r3, r1
    88be:	7013      	strb	r3, [r2, #0]
//  SYS_PostTask(PDS_TASK_ID);
}
    88c0:	4770      	bx	lr
    88c2:	46c0      	nop			; (mov r8, r8)
    88c4:	20000282 	.word	0x20000282

000088c8 <PDS_TaskHandler>:

/******************************************************************************
\brief General PDS task handler
******************************************************************************/
void PDS_TaskHandler(void)
{
    88c8:	b570      	push	{r4, r5, r6, lr}
  if (pendingTasks)
    88ca:	4b0d      	ldr	r3, [pc, #52]	; (8900 <PDS_TaskHandler+0x38>)
    88cc:	781d      	ldrb	r5, [r3, #0]
    88ce:	2d00      	cmp	r5, #0
    88d0:	d012      	beq.n	88f8 <PDS_TaskHandler+0x30>
  {
    uint8_t taskId = 0U;

    while (!(pendingTasks & (1U << taskId)))
    88d2:	0028      	movs	r0, r5
    88d4:	07eb      	lsls	r3, r5, #31
    88d6:	d410      	bmi.n	88fa <PDS_TaskHandler+0x32>
    88d8:	2300      	movs	r3, #0
    88da:	2401      	movs	r4, #1
      taskId++;
    88dc:	3301      	adds	r3, #1
    88de:	b2db      	uxtb	r3, r3
    while (!(pendingTasks & (1U << taskId)))
    88e0:	0019      	movs	r1, r3
    88e2:	0002      	movs	r2, r0
    88e4:	40da      	lsrs	r2, r3
    88e6:	4214      	tst	r4, r2
    88e8:	d0f8      	beq.n	88dc <PDS_TaskHandler+0x14>

    pendingTasks ^= (1U << taskId);
    88ea:	2301      	movs	r3, #1
    88ec:	408b      	lsls	r3, r1
    88ee:	405d      	eors	r5, r3
    88f0:	4b03      	ldr	r3, [pc, #12]	; (8900 <PDS_TaskHandler+0x38>)
    88f2:	701d      	strb	r5, [r3, #0]
    pdsTaskHandlers[taskId]();
    88f4:	4b03      	ldr	r3, [pc, #12]	; (8904 <PDS_TaskHandler+0x3c>)
    88f6:	4798      	blx	r3
   
  }
}
    88f8:	bd70      	pop	{r4, r5, r6, pc}
    while (!(pendingTasks & (1U << taskId)))
    88fa:	2100      	movs	r1, #0
    88fc:	e7f5      	b.n	88ea <PDS_TaskHandler+0x22>
    88fe:	46c0      	nop			; (mov r8, r8)
    8900:	20000282 	.word	0x20000282
    8904:	00008779 	.word	0x00008779

00008908 <pdsGetItemDescr>:
\param[in] itemDescrToGet    - pointer to item descriptor to be loaded;

returns true if descriptor is found out for the given item ID, false - otherwise
******************************************************************************/
bool pdsGetItemDescr(S_Nv_ItemId_t itemId, ItemIdToMemoryMapping_t *itemDescrToGet )
{
    8908:	b5f0      	push	{r4, r5, r6, r7, lr}
    890a:	b087      	sub	sp, #28
    890c:	9101      	str	r1, [sp, #4]
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
  {
    ItemIdToMemoryMapping_t itemDescr;

    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    890e:	aa02      	add	r2, sp, #8
    8910:	4b10      	ldr	r3, [pc, #64]	; (8954 <pdsGetItemDescr+0x4c>)
    8912:	0011      	movs	r1, r2
    8914:	cb70      	ldmia	r3!, {r4, r5, r6}
    8916:	c170      	stmia	r1!, {r4, r5, r6}
    8918:	681b      	ldr	r3, [r3, #0]
    891a:	600b      	str	r3, [r1, #0]

    if(itemDescr.itemId == itemId)
    891c:	8813      	ldrh	r3, [r2, #0]
    891e:	4283      	cmp	r3, r0
    8920:	d011      	beq.n	8946 <pdsGetItemDescr+0x3e>
    {
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
      return true;
    }
    itemDescrPtr++;
    8922:	4b0d      	ldr	r3, [pc, #52]	; (8958 <pdsGetItemDescr+0x50>)
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    8924:	aa02      	add	r2, sp, #8
    8926:	0011      	movs	r1, r2
    8928:	001c      	movs	r4, r3
    892a:	cce0      	ldmia	r4!, {r5, r6, r7}
    892c:	c1e0      	stmia	r1!, {r5, r6, r7}
    892e:	6824      	ldr	r4, [r4, #0]
    8930:	600c      	str	r4, [r1, #0]
    if(itemDescr.itemId == itemId)
    8932:	8811      	ldrh	r1, [r2, #0]
    8934:	4281      	cmp	r1, r0
    8936:	d006      	beq.n	8946 <pdsGetItemDescr+0x3e>
    itemDescrPtr++;
    8938:	3310      	adds	r3, #16
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    893a:	4908      	ldr	r1, [pc, #32]	; (895c <pdsGetItemDescr+0x54>)
    893c:	428b      	cmp	r3, r1
    893e:	d1f2      	bne.n	8926 <pdsGetItemDescr+0x1e>

  }
  return false;
    8940:	2000      	movs	r0, #0
}
    8942:	b007      	add	sp, #28
    8944:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
    8946:	2210      	movs	r2, #16
    8948:	a902      	add	r1, sp, #8
    894a:	9801      	ldr	r0, [sp, #4]
    894c:	4b04      	ldr	r3, [pc, #16]	; (8960 <pdsGetItemDescr+0x58>)
    894e:	4798      	blx	r3
      return true;
    8950:	2001      	movs	r0, #1
    8952:	e7f6      	b.n	8942 <pdsGetItemDescr+0x3a>
    8954:	00004400 	.word	0x00004400
    8958:	00004410 	.word	0x00004410
    895c:	00004470 	.word	0x00004470
    8960:	00014fe3 	.word	0x00014fe3

00008964 <pdsGetDirDescr>:
\param[in] dirDescrToGet    - pointer to dir descriptor to be loaded;

returns true if descriptor is found out for the given dir ID, false - otherwise
******************************************************************************/
bool pdsGetDirDescr(S_Nv_ItemId_t itemId, PDS_DirDescr_t *dirDescrToGet )
{
    8964:	b570      	push	{r4, r5, r6, lr}
    8966:	b082      	sub	sp, #8
    8968:	000c      	movs	r4, r1
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_DIRECTORIES_AMOUNT; fileIdx++)
  {
    PDS_DirDescr_t dirDescr;

    memcpy(&dirDescr, (void const *)dirDescrPtr, sizeof(PDS_DirDescr_t));
    896a:	466b      	mov	r3, sp
    896c:	4a08      	ldr	r2, [pc, #32]	; (8990 <pdsGetDirDescr+0x2c>)
    896e:	4669      	mov	r1, sp
    8970:	ca60      	ldmia	r2!, {r5, r6}
    8972:	c160      	stmia	r1!, {r5, r6}
    if(dirDescr.memoryId == itemId)
    8974:	88da      	ldrh	r2, [r3, #6]
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
      return true;
    }
    dirDescrPtr++;
  }
  return false;
    8976:	2300      	movs	r3, #0
    if(dirDescr.memoryId == itemId)
    8978:	4282      	cmp	r2, r0
    897a:	d002      	beq.n	8982 <pdsGetDirDescr+0x1e>
}
    897c:	0018      	movs	r0, r3
    897e:	b002      	add	sp, #8
    8980:	bd70      	pop	{r4, r5, r6, pc}
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
    8982:	2208      	movs	r2, #8
    8984:	4669      	mov	r1, sp
    8986:	0020      	movs	r0, r4
    8988:	4b02      	ldr	r3, [pc, #8]	; (8994 <pdsGetDirDescr+0x30>)
    898a:	4798      	blx	r3
      return true;
    898c:	2301      	movs	r3, #1
    898e:	e7f5      	b.n	897c <pdsGetDirDescr+0x18>
    8990:	00004400 	.word	0x00004400
    8994:	00014fe3 	.word	0x00014fe3

00008998 <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PanId)
{
    8998:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    899a:	7802      	ldrb	r2, [r0, #0]
    899c:	4b08      	ldr	r3, [pc, #32]	; (89c0 <MiMAC_SetAltAddress+0x28>)
    899e:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    89a0:	7842      	ldrb	r2, [r0, #1]
    89a2:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    89a4:	780a      	ldrb	r2, [r1, #0]
    89a6:	4c07      	ldr	r4, [pc, #28]	; (89c4 <MiMAC_SetAltAddress+0x2c>)
    89a8:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    89aa:	784a      	ldrb	r2, [r1, #1]
    89ac:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    89ae:	8818      	ldrh	r0, [r3, #0]
    89b0:	4b05      	ldr	r3, [pc, #20]	; (89c8 <MiMAC_SetAltAddress+0x30>)
    89b2:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    89b4:	8820      	ldrh	r0, [r4, #0]
    89b6:	4b05      	ldr	r3, [pc, #20]	; (89cc <MiMAC_SetAltAddress+0x34>)
    89b8:	4798      	blx	r3
	return true;
}
    89ba:	2001      	movs	r0, #1
    89bc:	bd10      	pop	{r4, pc}
    89be:	46c0      	nop			; (mov r8, r8)
    89c0:	20002018 	.word	0x20002018
    89c4:	2000208c 	.word	0x2000208c
    89c8:	00009c75 	.word	0x00009c75
    89cc:	00009c61 	.word	0x00009c61

000089d0 <mic_generator>:

#if defined (ENABLE_SECURITY)
uint8_t addr[8] = {0xda , 0x98 , 0x22 , 0xfe , 0xff , 0xa3 , 0x04 , 0x00};
void mic_generator (uint8_t *Payloadinfo, uint8_t len , uint8_t frame_control ,  API_UINT32_UNION FrameCounter ,  uint8_t *SourceIEEEAddress)
{
    89d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    89d2:	46c6      	mov	lr, r8
    89d4:	b500      	push	{lr}
    89d6:	b0c6      	sub	sp, #280	; 0x118
    89d8:	0006      	movs	r6, r0
    89da:	000c      	movs	r4, r1
    89dc:	469c      	mov	ip, r3
    89de:	994c      	ldr	r1, [sp, #304]	; 0x130
	uint16_t i ;										
	uint8_t j , iterations  , copy_packet1[255] , cbc_header_with_padding[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = len/16;
    89e0:	0925      	lsrs	r5, r4, #4
	if (len % 16 != 0) iterations++;
    89e2:	0723      	lsls	r3, r4, #28
    89e4:	d000      	beq.n	89e8 <mic_generator+0x18>
    89e6:	3501      	adds	r5, #1
	InitVect_in[0] = 0x49;//frame_control;
    89e8:	2049      	movs	r0, #73	; 0x49
    89ea:	4b40      	ldr	r3, [pc, #256]	; (8aec <mic_generator+0x11c>)
    89ec:	7018      	strb	r0, [r3, #0]
	cbc_header_with_padding[0] = 0x00;  // l(a)
    89ee:	2300      	movs	r3, #0
    89f0:	a802      	add	r0, sp, #8
    89f2:	7003      	strb	r3, [r0, #0]
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
    89f4:	330d      	adds	r3, #13
    89f6:	7043      	strb	r3, [r0, #1]
	cbc_header_with_padding[2] = frame_control;  //frame_control;  //byte 1
    89f8:	7082      	strb	r2, [r0, #2]
    89fa:	2200      	movs	r2, #0
	for (i=0;i<8;i++)
	{
		InitVect_in[i+1] =  SourceIEEEAddress[i];
    89fc:	4b3b      	ldr	r3, [pc, #236]	; (8aec <mic_generator+0x11c>)
    89fe:	5c8f      	ldrb	r7, [r1, r2]
    8a00:	18d0      	adds	r0, r2, r3
    8a02:	7047      	strb	r7, [r0, #1]
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
    8a04:	0010      	movs	r0, r2
    8a06:	af02      	add	r7, sp, #8
    8a08:	46b8      	mov	r8, r7
    8a0a:	4440      	add	r0, r8
    8a0c:	5c8f      	ldrb	r7, [r1, r2]
    8a0e:	71c7      	strb	r7, [r0, #7]
    8a10:	3201      	adds	r2, #1
	for (i=0;i<8;i++)
    8a12:	2a08      	cmp	r2, #8
    8a14:	d1f3      	bne.n	89fe <mic_generator+0x2e>
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
    8a16:	4663      	mov	r3, ip
    8a18:	466a      	mov	r2, sp
    8a1a:	71d3      	strb	r3, [r2, #7]
    8a1c:	79d3      	ldrb	r3, [r2, #7]
    8a1e:	4833      	ldr	r0, [pc, #204]	; (8aec <mic_generator+0x11c>)
    8a20:	7243      	strb	r3, [r0, #9]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    8a22:	4642      	mov	r2, r8
    8a24:	70d3      	strb	r3, [r2, #3]
		InitVect_in[i+9] = FrameCounter.v[i];
    8a26:	4663      	mov	r3, ip
    8a28:	041b      	lsls	r3, r3, #16
    8a2a:	0e1b      	lsrs	r3, r3, #24
    8a2c:	7283      	strb	r3, [r0, #10]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    8a2e:	7113      	strb	r3, [r2, #4]
		InitVect_in[i+9] = FrameCounter.v[i];
    8a30:	4663      	mov	r3, ip
    8a32:	021b      	lsls	r3, r3, #8
    8a34:	0e1b      	lsrs	r3, r3, #24
    8a36:	72c3      	strb	r3, [r0, #11]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    8a38:	7153      	strb	r3, [r2, #5]
		InitVect_in[i+9] = FrameCounter.v[i];
    8a3a:	4663      	mov	r3, ip
    8a3c:	0e1b      	lsrs	r3, r3, #24
    8a3e:	7303      	strb	r3, [r0, #12]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    8a40:	7193      	strb	r3, [r2, #6]
	}
	//cbc_header_with_padding[14] = 0x00;  // Padding
	cbc_header_with_padding[15] = 0x00;   // Padding
    8a42:	2300      	movs	r3, #0
    8a44:	73d3      	strb	r3, [r2, #15]
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    8a46:	2204      	movs	r2, #4
    8a48:	7342      	strb	r2, [r0, #13]
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
    8a4a:	7383      	strb	r3, [r0, #14]
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    8a4c:	73c4      	strb	r4, [r0, #15]
	PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    8a4e:	4928      	ldr	r1, [pc, #160]	; (8af0 <mic_generator+0x120>)
    8a50:	4b28      	ldr	r3, [pc, #160]	; (8af4 <mic_generator+0x124>)
    8a52:	4798      	blx	r3
    8a54:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		copy_packet1[i] = cbc_header_with_padding[i];
    8a56:	a906      	add	r1, sp, #24
    8a58:	aa02      	add	r2, sp, #8
    8a5a:	5c9a      	ldrb	r2, [r3, r2]
    8a5c:	545a      	strb	r2, [r3, r1]
    8a5e:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    8a60:	2b10      	cmp	r3, #16
    8a62:	d1f9      	bne.n	8a58 <mic_generator+0x88>
	}
	// Copy the Payload and Do the padding
	for (i=16;i<len+16;i++)
    8a64:	0027      	movs	r7, r4
    8a66:	3710      	adds	r7, #16
    8a68:	2f10      	cmp	r7, #16
    8a6a:	dd0a      	ble.n	8a82 <mic_generator+0xb2>
    8a6c:	2010      	movs	r0, #16
	{
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
    8a6e:	a906      	add	r1, sp, #24
    8a70:	18f2      	adds	r2, r6, r3
    8a72:	3a10      	subs	r2, #16
    8a74:	7812      	ldrb	r2, [r2, #0]
    8a76:	540a      	strb	r2, [r1, r0]
	for (i=16;i<len+16;i++)
    8a78:	3301      	adds	r3, #1
    8a7a:	b29b      	uxth	r3, r3
    8a7c:	0018      	movs	r0, r3
    8a7e:	42bb      	cmp	r3, r7
    8a80:	dbf6      	blt.n	8a70 <mic_generator+0xa0>
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    8a82:	0023      	movs	r3, r4
    8a84:	3310      	adds	r3, #16
    8a86:	001a      	movs	r2, r3
    8a88:	3501      	adds	r5, #1
    8a8a:	0129      	lsls	r1, r5, #4
    8a8c:	428b      	cmp	r3, r1
    8a8e:	da07      	bge.n	8aa0 <mic_generator+0xd0>
	{
		copy_packet1[i] = 0; // Padding
    8a90:	ac06      	add	r4, sp, #24
    8a92:	2000      	movs	r0, #0
    8a94:	54a0      	strb	r0, [r4, r2]
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    8a96:	3301      	adds	r3, #1
    8a98:	b29b      	uxth	r3, r3
    8a9a:	001a      	movs	r2, r3
    8a9c:	428b      	cmp	r3, r1
    8a9e:	dbf9      	blt.n	8a94 <mic_generator+0xc4>
	}
	for (i=0;i<iterations+1;i++)
    8aa0:	2200      	movs	r2, #0
    8aa2:	2700      	movs	r7, #0
    8aa4:	2d00      	cmp	r5, #0
    8aa6:	dd15      	ble.n	8ad4 <mic_generator+0x104>
	{
		for (j=0;j<16;j++)
		{
			InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
    8aa8:	4e10      	ldr	r6, [pc, #64]	; (8aec <mic_generator+0x11c>)
    8aaa:	0112      	lsls	r2, r2, #4
    8aac:	2300      	movs	r3, #0
    8aae:	a906      	add	r1, sp, #24
    8ab0:	188c      	adds	r4, r1, r2
    8ab2:	1999      	adds	r1, r3, r6
    8ab4:	5ce2      	ldrb	r2, [r4, r3]
    8ab6:	7808      	ldrb	r0, [r1, #0]
    8ab8:	4042      	eors	r2, r0
    8aba:	700a      	strb	r2, [r1, #0]
    8abc:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    8abe:	2b10      	cmp	r3, #16
    8ac0:	d1f7      	bne.n	8ab2 <mic_generator+0xe2>
		}
		PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    8ac2:	490b      	ldr	r1, [pc, #44]	; (8af0 <mic_generator+0x120>)
    8ac4:	4809      	ldr	r0, [pc, #36]	; (8aec <mic_generator+0x11c>)
    8ac6:	4b0b      	ldr	r3, [pc, #44]	; (8af4 <mic_generator+0x124>)
    8ac8:	4798      	blx	r3
	for (i=0;i<iterations+1;i++)
    8aca:	3701      	adds	r7, #1
    8acc:	b2bf      	uxth	r7, r7
    8ace:	003a      	movs	r2, r7
    8ad0:	42af      	cmp	r7, r5
    8ad2:	dbea      	blt.n	8aaa <mic_generator+0xda>
    8ad4:	2300      	movs	r3, #0
	}
	for (i=0;i<16;i++)
	{
		CBC_mic[i] = InitVect_in[i];
    8ad6:	4808      	ldr	r0, [pc, #32]	; (8af8 <mic_generator+0x128>)
    8ad8:	4904      	ldr	r1, [pc, #16]	; (8aec <mic_generator+0x11c>)
    8ada:	5cca      	ldrb	r2, [r1, r3]
    8adc:	54c2      	strb	r2, [r0, r3]
    8ade:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    8ae0:	2b10      	cmp	r3, #16
    8ae2:	d1fa      	bne.n	8ada <mic_generator+0x10a>
	}

}
    8ae4:	b046      	add	sp, #280	; 0x118
    8ae6:	bc04      	pop	{r2}
    8ae8:	4690      	mov	r8, r2
    8aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8aec:	20002028 	.word	0x20002028
    8af0:	00016b04 	.word	0x00016b04
    8af4:	00009e11 	.word	0x00009e11
    8af8:	2000206c 	.word	0x2000206c

00008afc <DataEncrypt>:
 *
 *****************************************************************************************/

bool DataEncrypt(uint8_t *Payloadinfo, uint8_t *Payload_len, API_UINT32_UNION FrameCounter,
uint8_t FrameControl)
{
    8afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8afe:	46de      	mov	lr, fp
    8b00:	4657      	mov	r7, sl
    8b02:	464e      	mov	r6, r9
    8b04:	4645      	mov	r5, r8
    8b06:	b5e0      	push	{r5, r6, r7, lr}
    8b08:	b08d      	sub	sp, #52	; 0x34
    8b0a:	4680      	mov	r8, r0
    8b0c:	000e      	movs	r6, r1
    8b0e:	0014      	movs	r4, r2
    8b10:	001a      	movs	r2, r3
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *Payload_len/16;
    8b12:	7809      	ldrb	r1, [r1, #0]
    8b14:	090d      	lsrs	r5, r1, #4
	if (*Payload_len % 16 != 0) iterations++;
    8b16:	070b      	lsls	r3, r1, #28
    8b18:	d000      	beq.n	8b1c <DataEncrypt+0x20>
    8b1a:	3501      	adds	r5, #1

	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);
    8b1c:	4b37      	ldr	r3, [pc, #220]	; (8bfc <DataEncrypt+0x100>)
    8b1e:	685b      	ldr	r3, [r3, #4]
    8b20:	9300      	str	r3, [sp, #0]
    8b22:	0023      	movs	r3, r4
    8b24:	4640      	mov	r0, r8
    8b26:	4f36      	ldr	r7, [pc, #216]	; (8c00 <DataEncrypt+0x104>)
    8b28:	47b8      	blx	r7

	for (i=*Payload_len;i<iterations *16 ; i++ )
    8b2a:	7831      	ldrb	r1, [r6, #0]
    8b2c:	b28b      	uxth	r3, r1
    8b2e:	002e      	movs	r6, r5
    8b30:	012d      	lsls	r5, r5, #4
    8b32:	42a9      	cmp	r1, r5
    8b34:	da07      	bge.n	8b46 <DataEncrypt+0x4a>
	{
		Payloadinfo[i] = 0; // Padding
    8b36:	2100      	movs	r1, #0
    8b38:	4642      	mov	r2, r8
    8b3a:	54d1      	strb	r1, [r2, r3]
	for (i=*Payload_len;i<iterations *16 ; i++ )
    8b3c:	3301      	adds	r3, #1
    8b3e:	b29b      	uxth	r3, r3
    8b40:	42ab      	cmp	r3, r5
    8b42:	dbfa      	blt.n	8b3a <DataEncrypt+0x3e>
    8b44:	4690      	mov	r8, r2
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    8b46:	2201      	movs	r2, #1
    8b48:	ab04      	add	r3, sp, #16
    8b4a:	701a      	strb	r2, [r3, #0]
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    8b4c:	4b2b      	ldr	r3, [pc, #172]	; (8bfc <DataEncrypt+0x100>)
    8b4e:	6858      	ldr	r0, [r3, #4]
    8b50:	2300      	movs	r3, #0
    8b52:	aa04      	add	r2, sp, #16
    8b54:	18d2      	adds	r2, r2, r3
    8b56:	5cc1      	ldrb	r1, [r0, r3]
    8b58:	7051      	strb	r1, [r2, #1]
    8b5a:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    8b5c:	2b08      	cmp	r3, #8
    8b5e:	d1f8      	bne.n	8b52 <DataEncrypt+0x56>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    8b60:	ab04      	add	r3, sp, #16
    8b62:	725c      	strb	r4, [r3, #9]
    8b64:	0a22      	lsrs	r2, r4, #8
    8b66:	729a      	strb	r2, [r3, #10]
    8b68:	0c22      	lsrs	r2, r4, #16
    8b6a:	72da      	strb	r2, [r3, #11]
    8b6c:	0e24      	lsrs	r4, r4, #24
    8b6e:	731c      	strb	r4, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    8b70:	2204      	movs	r2, #4
    8b72:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    8b74:	2200      	movs	r2, #0
    8b76:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    8b78:	73da      	strb	r2, [r3, #15]

	for (i=0;i<iterations+1;i++)
    8b7a:	1c73      	adds	r3, r6, #1
    8b7c:	4699      	mov	r9, r3
    8b7e:	2300      	movs	r3, #0
    8b80:	469b      	mov	fp, r3
    8b82:	9303      	str	r3, [sp, #12]
    8b84:	464b      	mov	r3, r9
    8b86:	2b00      	cmp	r3, #0
    8b88:	dd2f      	ble.n	8bea <DataEncrypt+0xee>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    8b8a:	ac08      	add	r4, sp, #32
    8b8c:	ad04      	add	r5, sp, #16
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    8b8e:	4b1d      	ldr	r3, [pc, #116]	; (8c04 <DataEncrypt+0x108>)
    8b90:	469a      	mov	sl, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    8b92:	4e1d      	ldr	r6, [pc, #116]	; (8c08 <DataEncrypt+0x10c>)
    8b94:	e017      	b.n	8bc6 <DataEncrypt+0xca>
			}
			else
			{
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    8b96:	5d1a      	ldrb	r2, [r3, r4]
    8b98:	5ccf      	ldrb	r7, [r1, r3]
    8b9a:	407a      	eors	r2, r7
    8b9c:	54ca      	strb	r2, [r1, r3]
    8b9e:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    8ba0:	2b10      	cmp	r3, #16
    8ba2:	d007      	beq.n	8bb4 <DataEncrypt+0xb8>
			if (CTR_Nonce_and_Counter[15] == 0)
    8ba4:	2800      	cmp	r0, #0
    8ba6:	d1f6      	bne.n	8b96 <DataEncrypt+0x9a>
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    8ba8:	5d1a      	ldrb	r2, [r3, r4]
    8baa:	4667      	mov	r7, ip
    8bac:	5cff      	ldrb	r7, [r7, r3]
    8bae:	407a      	eors	r2, r7
    8bb0:	54f2      	strb	r2, [r6, r3]
    8bb2:	e7f4      	b.n	8b9e <DataEncrypt+0xa2>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next operation
    8bb4:	3001      	adds	r0, #1
    8bb6:	73e8      	strb	r0, [r5, #15]
	for (i=0;i<iterations+1;i++)
    8bb8:	9f03      	ldr	r7, [sp, #12]
    8bba:	3701      	adds	r7, #1
    8bbc:	b2bb      	uxth	r3, r7
    8bbe:	9303      	str	r3, [sp, #12]
    8bc0:	469b      	mov	fp, r3
    8bc2:	454b      	cmp	r3, r9
    8bc4:	da11      	bge.n	8bea <DataEncrypt+0xee>
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    8bc6:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    8bc8:	5d5a      	ldrb	r2, [r3, r5]
    8bca:	551a      	strb	r2, [r3, r4]
    8bcc:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    8bce:	2b10      	cmp	r3, #16
    8bd0:	d1fa      	bne.n	8bc8 <DataEncrypt+0xcc>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    8bd2:	490e      	ldr	r1, [pc, #56]	; (8c0c <DataEncrypt+0x110>)
    8bd4:	0020      	movs	r0, r4
    8bd6:	47d0      	blx	sl
			if (CTR_Nonce_and_Counter[15] == 0)
    8bd8:	7be8      	ldrb	r0, [r5, #15]
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    8bda:	4659      	mov	r1, fp
    8bdc:	3901      	subs	r1, #1
    8bde:	0109      	lsls	r1, r1, #4
    8be0:	2300      	movs	r3, #0
    8be2:	4441      	add	r1, r8
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    8be4:	4a0a      	ldr	r2, [pc, #40]	; (8c10 <DataEncrypt+0x114>)
    8be6:	4694      	mov	ip, r2
    8be8:	e7dc      	b.n	8ba4 <DataEncrypt+0xa8>
	}
	return true;

}
    8bea:	2001      	movs	r0, #1
    8bec:	b00d      	add	sp, #52	; 0x34
    8bee:	bc3c      	pop	{r2, r3, r4, r5}
    8bf0:	4690      	mov	r8, r2
    8bf2:	4699      	mov	r9, r3
    8bf4:	46a2      	mov	sl, r4
    8bf6:	46ab      	mov	fp, r5
    8bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8bfa:	46c0      	nop			; (mov r8, r8)
    8bfc:	20002020 	.word	0x20002020
    8c00:	000089d1 	.word	0x000089d1
    8c04:	00009e11 	.word	0x00009e11
    8c08:	20002054 	.word	0x20002054
    8c0c:	00016b04 	.word	0x00016b04
    8c10:	2000206c 	.word	0x2000206c

00008c14 <validate_mic>:
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
	/*************************************************************/
	//SECURITY PATCH UPDATE
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    8c14:	4b0e      	ldr	r3, [pc, #56]	; (8c50 <validate_mic+0x3c>)
    8c16:	781a      	ldrb	r2, [r3, #0]
    8c18:	4b0e      	ldr	r3, [pc, #56]	; (8c54 <validate_mic+0x40>)
    8c1a:	781b      	ldrb	r3, [r3, #0]
	/*************************************************************/
	{
		return false;
    8c1c:	2000      	movs	r0, #0
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    8c1e:	429a      	cmp	r2, r3
    8c20:	d000      	beq.n	8c24 <validate_mic+0x10>
	}
	else
	{
		return true;
	}
}
    8c22:	4770      	bx	lr
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    8c24:	4b0a      	ldr	r3, [pc, #40]	; (8c50 <validate_mic+0x3c>)
    8c26:	785a      	ldrb	r2, [r3, #1]
    8c28:	4b0a      	ldr	r3, [pc, #40]	; (8c54 <validate_mic+0x40>)
    8c2a:	785b      	ldrb	r3, [r3, #1]
    8c2c:	429a      	cmp	r2, r3
    8c2e:	d1f8      	bne.n	8c22 <validate_mic+0xe>
    8c30:	4b07      	ldr	r3, [pc, #28]	; (8c50 <validate_mic+0x3c>)
    8c32:	789a      	ldrb	r2, [r3, #2]
    8c34:	4b07      	ldr	r3, [pc, #28]	; (8c54 <validate_mic+0x40>)
    8c36:	789b      	ldrb	r3, [r3, #2]
    8c38:	429a      	cmp	r2, r3
    8c3a:	d1f2      	bne.n	8c22 <validate_mic+0xe>
    8c3c:	4b04      	ldr	r3, [pc, #16]	; (8c50 <validate_mic+0x3c>)
    8c3e:	78d8      	ldrb	r0, [r3, #3]
    8c40:	4b04      	ldr	r3, [pc, #16]	; (8c54 <validate_mic+0x40>)
    8c42:	78db      	ldrb	r3, [r3, #3]
    8c44:	1ac0      	subs	r0, r0, r3
    8c46:	4243      	negs	r3, r0
    8c48:	4158      	adcs	r0, r3
    8c4a:	b2c0      	uxtb	r0, r0
    8c4c:	e7e9      	b.n	8c22 <validate_mic+0xe>
    8c4e:	46c0      	nop			; (mov r8, r8)
    8c50:	20002054 	.word	0x20002054
    8c54:	2000207c 	.word	0x2000207c

00008c58 <DataDecrypt>:
 *      None
 *
 *****************************************************************************************/
bool DataDecrypt(uint8_t *Payload, uint8_t *PayloadLen, uint8_t *SourceIEEEAddress,
API_UINT32_UNION FrameCounter, uint8_t FrameControl)
{
    8c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c5a:	46de      	mov	lr, fp
    8c5c:	4657      	mov	r7, sl
    8c5e:	464e      	mov	r6, r9
    8c60:	4645      	mov	r5, r8
    8c62:	b5e0      	push	{r5, r6, r7, lr}
    8c64:	b091      	sub	sp, #68	; 0x44
    8c66:	4681      	mov	r9, r0
    8c68:	9106      	str	r1, [sp, #24]
    8c6a:	9204      	str	r2, [sp, #16]
    8c6c:	9305      	str	r3, [sp, #20]
    8c6e:	ab1a      	add	r3, sp, #104	; 0x68
    8c70:	781b      	ldrb	r3, [r3, #0]
    8c72:	9307      	str	r3, [sp, #28]
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *PayloadLen/16;
    8c74:	7809      	ldrb	r1, [r1, #0]
    8c76:	090a      	lsrs	r2, r1, #4
	if (*PayloadLen % 16 != 0) iterations++;
    8c78:	070b      	lsls	r3, r1, #28
    8c7a:	d000      	beq.n	8c7e <DataDecrypt+0x26>
    8c7c:	3201      	adds	r2, #1

	//mic_generator(&Payloadinfo[0] , *Payload_len);

	for (i=*PayloadLen;i<iterations *16 ; i++ )
    8c7e:	b28b      	uxth	r3, r1
    8c80:	0010      	movs	r0, r2
    8c82:	0112      	lsls	r2, r2, #4
    8c84:	4291      	cmp	r1, r2
    8c86:	da07      	bge.n	8c98 <DataDecrypt+0x40>
	{
		Payload[i] = 0; // Padding
    8c88:	2100      	movs	r1, #0
    8c8a:	464c      	mov	r4, r9
    8c8c:	54e1      	strb	r1, [r4, r3]
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    8c8e:	3301      	adds	r3, #1
    8c90:	b29b      	uxth	r3, r3
    8c92:	4293      	cmp	r3, r2
    8c94:	dbfa      	blt.n	8c8c <DataDecrypt+0x34>
    8c96:	46a1      	mov	r9, r4
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    8c98:	2201      	movs	r2, #1
    8c9a:	ab08      	add	r3, sp, #32
    8c9c:	701a      	strb	r2, [r3, #0]
    8c9e:	2300      	movs	r3, #0
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
    8ca0:	9c04      	ldr	r4, [sp, #16]
    8ca2:	aa08      	add	r2, sp, #32
    8ca4:	18d2      	adds	r2, r2, r3
    8ca6:	5ce1      	ldrb	r1, [r4, r3]
    8ca8:	7051      	strb	r1, [r2, #1]
    8caa:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    8cac:	2b08      	cmp	r3, #8
    8cae:	d1f8      	bne.n	8ca2 <DataDecrypt+0x4a>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    8cb0:	ab08      	add	r3, sp, #32
    8cb2:	9905      	ldr	r1, [sp, #20]
    8cb4:	7259      	strb	r1, [r3, #9]
    8cb6:	0a0a      	lsrs	r2, r1, #8
    8cb8:	729a      	strb	r2, [r3, #10]
    8cba:	0c0a      	lsrs	r2, r1, #16
    8cbc:	72da      	strb	r2, [r3, #11]
    8cbe:	0e0a      	lsrs	r2, r1, #24
    8cc0:	731a      	strb	r2, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    8cc2:	2204      	movs	r2, #4
    8cc4:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    8cc6:	2200      	movs	r2, #0
    8cc8:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    8cca:	73da      	strb	r2, [r3, #15]


	for (i=0;i<iterations+1;i++)
    8ccc:	1c43      	adds	r3, r0, #1
    8cce:	469a      	mov	sl, r3
    8cd0:	2500      	movs	r5, #0
    8cd2:	2300      	movs	r3, #0
    8cd4:	4698      	mov	r8, r3
    8cd6:	4653      	mov	r3, sl
    8cd8:	2b00      	cmp	r3, #0
    8cda:	dd2e      	ble.n	8d3a <DataDecrypt+0xe2>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    8cdc:	ac0c      	add	r4, sp, #48	; 0x30
    8cde:	ae08      	add	r6, sp, #32
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    8ce0:	4b26      	ldr	r3, [pc, #152]	; (8d7c <DataDecrypt+0x124>)
    8ce2:	469b      	mov	fp, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    8ce4:	4f26      	ldr	r7, [pc, #152]	; (8d80 <DataDecrypt+0x128>)
    8ce6:	4643      	mov	r3, r8
    8ce8:	9303      	str	r3, [sp, #12]
    8cea:	46a8      	mov	r8, r5
    8cec:	e014      	b.n	8d18 <DataDecrypt+0xc0>
			}
			else
			{
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    8cee:	5d1a      	ldrb	r2, [r3, r4]
    8cf0:	5ce9      	ldrb	r1, [r5, r3]
    8cf2:	404a      	eors	r2, r1
    8cf4:	54ea      	strb	r2, [r5, r3]
    8cf6:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    8cf8:	2b10      	cmp	r3, #16
    8cfa:	d004      	beq.n	8d06 <DataDecrypt+0xae>
			if (CTR_Nonce_and_Counter[15] == 0)
    8cfc:	2800      	cmp	r0, #0
    8cfe:	d1f6      	bne.n	8cee <DataDecrypt+0x96>
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    8d00:	5d1a      	ldrb	r2, [r3, r4]
    8d02:	54fa      	strb	r2, [r7, r3]
    8d04:	e7f7      	b.n	8cf6 <DataDecrypt+0x9e>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    8d06:	3001      	adds	r0, #1
    8d08:	73f0      	strb	r0, [r6, #15]
	for (i=0;i<iterations+1;i++)
    8d0a:	9d03      	ldr	r5, [sp, #12]
    8d0c:	3501      	adds	r5, #1
    8d0e:	b2ab      	uxth	r3, r5
    8d10:	9303      	str	r3, [sp, #12]
    8d12:	4698      	mov	r8, r3
    8d14:	4553      	cmp	r3, sl
    8d16:	da10      	bge.n	8d3a <DataDecrypt+0xe2>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    8d18:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    8d1a:	5d9a      	ldrb	r2, [r3, r6]
    8d1c:	551a      	strb	r2, [r3, r4]
    8d1e:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    8d20:	2b10      	cmp	r3, #16
    8d22:	d1fa      	bne.n	8d1a <DataDecrypt+0xc2>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    8d24:	4917      	ldr	r1, [pc, #92]	; (8d84 <DataDecrypt+0x12c>)
    8d26:	0020      	movs	r0, r4
    8d28:	47d8      	blx	fp
			if (CTR_Nonce_and_Counter[15] == 0)
    8d2a:	7bf0      	ldrb	r0, [r6, #15]
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    8d2c:	4642      	mov	r2, r8
    8d2e:	3a01      	subs	r2, #1
    8d30:	0112      	lsls	r2, r2, #4
    8d32:	2300      	movs	r3, #0
    8d34:	444a      	add	r2, r9
    8d36:	0015      	movs	r5, r2
    8d38:	e7e0      	b.n	8cfc <DataDecrypt+0xa4>
	}
	*PayloadLen = *PayloadLen-4;
    8d3a:	9b06      	ldr	r3, [sp, #24]
    8d3c:	7819      	ldrb	r1, [r3, #0]
    8d3e:	3904      	subs	r1, #4
    8d40:	b2c9      	uxtb	r1, r1
    8d42:	7019      	strb	r1, [r3, #0]
	mic_generator(&Payload[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
    8d44:	9b04      	ldr	r3, [sp, #16]
    8d46:	9300      	str	r3, [sp, #0]
    8d48:	9b05      	ldr	r3, [sp, #20]
    8d4a:	9a07      	ldr	r2, [sp, #28]
    8d4c:	4648      	mov	r0, r9
    8d4e:	4c0e      	ldr	r4, [pc, #56]	; (8d88 <DataDecrypt+0x130>)
    8d50:	47a0      	blx	r4
    8d52:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    8d54:	4d0d      	ldr	r5, [pc, #52]	; (8d8c <DataDecrypt+0x134>)
    8d56:	4c0a      	ldr	r4, [pc, #40]	; (8d80 <DataDecrypt+0x128>)
    8d58:	480d      	ldr	r0, [pc, #52]	; (8d90 <DataDecrypt+0x138>)
    8d5a:	5ce2      	ldrb	r2, [r4, r3]
    8d5c:	5cc1      	ldrb	r1, [r0, r3]
    8d5e:	404a      	eors	r2, r1
    8d60:	54ea      	strb	r2, [r5, r3]
    8d62:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    8d64:	2b10      	cmp	r3, #16
    8d66:	d1f8      	bne.n	8d5a <DataDecrypt+0x102>
	}
	return validate_mic();
    8d68:	4b0a      	ldr	r3, [pc, #40]	; (8d94 <DataDecrypt+0x13c>)
    8d6a:	4798      	blx	r3

}
    8d6c:	b011      	add	sp, #68	; 0x44
    8d6e:	bc3c      	pop	{r2, r3, r4, r5}
    8d70:	4690      	mov	r8, r2
    8d72:	4699      	mov	r9, r3
    8d74:	46a2      	mov	sl, r4
    8d76:	46ab      	mov	fp, r5
    8d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d7a:	46c0      	nop			; (mov r8, r8)
    8d7c:	00009e11 	.word	0x00009e11
    8d80:	20002044 	.word	0x20002044
    8d84:	00016b04 	.word	0x00016b04
    8d88:	000089d1 	.word	0x000089d1
    8d8c:	20002054 	.word	0x20002054
    8d90:	2000206c 	.word	0x2000206c
    8d94:	00008c15 	.word	0x00008c15

00008d98 <MiMAC_PowerState>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_PowerState(INPUT uint8_t PowerState)
{
    8d98:	b510      	push	{r4, lr}
    switch (PowerState)
    8d9a:	2800      	cmp	r0, #0
    8d9c:	d003      	beq.n	8da6 <MiMAC_PowerState+0xe>
    8d9e:	28ff      	cmp	r0, #255	; 0xff
    8da0:	d005      	beq.n	8dae <MiMAC_PowerState+0x16>
			PHY_Wakeup();
        }
            break;

        default:
            return false;
    8da2:	2000      	movs	r0, #0
    8da4:	e002      	b.n	8dac <MiMAC_PowerState+0x14>
			PHY_Sleep();
    8da6:	4b04      	ldr	r3, [pc, #16]	; (8db8 <MiMAC_PowerState+0x20>)
    8da8:	4798      	blx	r3
    }
    return true;
    8daa:	2001      	movs	r0, #1
}
    8dac:	bd10      	pop	{r4, pc}
			PHY_Wakeup();
    8dae:	4b03      	ldr	r3, [pc, #12]	; (8dbc <MiMAC_PowerState+0x24>)
    8db0:	4798      	blx	r3
    return true;
    8db2:	2001      	movs	r0, #1
            break;
    8db4:	e7fa      	b.n	8dac <MiMAC_PowerState+0x14>
    8db6:	46c0      	nop			; (mov r8, r8)
    8db8:	00009cd1 	.word	0x00009cd1
    8dbc:	00009d0d 	.word	0x00009d0d

00008dc0 <MiMAC_Set>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
bool MiMAC_Set(mac_set_params_t id, uint8_t *value)
{
    8dc0:	b510      	push	{r4, lr}
    switch(id)
    8dc2:	2800      	cmp	r0, #0
    8dc4:	d109      	bne.n	8dda <MiMAC_Set+0x1a>
    {
      case MAC_CHANNEL:
      {
         if(*value > LAST_CHANNEL_NUM) //26 // TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    8dc6:	780b      	ldrb	r3, [r1, #0]
    8dc8:	2b19      	cmp	r3, #25
    8dca:	d807      	bhi.n	8ddc <MiMAC_Set+0x1c>
         {
           return false;
         }
          MACCurrentChannel = *value;
    8dcc:	4a04      	ldr	r2, [pc, #16]	; (8de0 <MiMAC_Set+0x20>)
    8dce:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    8dd0:	0018      	movs	r0, r3
    8dd2:	4b04      	ldr	r3, [pc, #16]	; (8de4 <MiMAC_Set+0x24>)
    8dd4:	4798      	blx	r3
          return true;
    8dd6:	2001      	movs	r0, #1
    8dd8:	e000      	b.n	8ddc <MiMAC_Set+0x1c>
      break;

     default:
     break;
    }
    return false;
    8dda:	2000      	movs	r0, #0
}
    8ddc:	bd10      	pop	{r4, pc}
    8dde:	46c0      	nop			; (mov r8, r8)
    8de0:	2000208e 	.word	0x2000208e
    8de4:	00009d5d 	.word	0x00009d5d

00008de8 <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    8de8:	b530      	push	{r4, r5, lr}
    8dea:	b083      	sub	sp, #12
    8dec:	466c      	mov	r4, sp
    8dee:	9000      	str	r0, [sp, #0]
    8df0:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    8df2:	4b10      	ldr	r3, [pc, #64]	; (8e34 <MiMAC_Init+0x4c>)
    8df4:	4798      	blx	r3
	MACInitParams = initValue;
    8df6:	4d10      	ldr	r5, [pc, #64]	; (8e38 <MiMAC_Init+0x50>)
    8df8:	002b      	movs	r3, r5
    8dfa:	cc06      	ldmia	r4!, {r1, r2}
    8dfc:	c306      	stmia	r3!, {r1, r2}
	uint16_t x =  PHY_RandomReq();
    8dfe:	4b0f      	ldr	r3, [pc, #60]	; (8e3c <MiMAC_Init+0x54>)
    8e00:	4798      	blx	r3
    8e02:	0004      	movs	r4, r0
	// Set RF mode
	PHY_SetRxState(true);
    8e04:	2001      	movs	r0, #1
    8e06:	4b0e      	ldr	r3, [pc, #56]	; (8e40 <MiMAC_Init+0x58>)
    8e08:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    8e0a:	4b0e      	ldr	r3, [pc, #56]	; (8e44 <MiMAC_Init+0x5c>)
    8e0c:	701c      	strb	r4, [r3, #0]

	// Set Node Address
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    8e0e:	6868      	ldr	r0, [r5, #4]
    8e10:	4b0d      	ldr	r3, [pc, #52]	; (8e48 <MiMAC_Init+0x60>)
    8e12:	4798      	blx	r3

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    8e14:	4b0d      	ldr	r3, [pc, #52]	; (8e4c <MiMAC_Init+0x64>)
    8e16:	2200      	movs	r2, #0
    8e18:	701a      	strb	r2, [r3, #0]
    8e1a:	2102      	movs	r1, #2
    8e1c:	31ff      	adds	r1, #255	; 0xff
    8e1e:	545a      	strb	r2, [r3, r1]
    8e20:	490b      	ldr	r1, [pc, #44]	; (8e50 <MiMAC_Init+0x68>)
    8e22:	545a      	strb	r2, [r3, r1]
    8e24:	490b      	ldr	r1, [pc, #44]	; (8e54 <MiMAC_Init+0x6c>)
    8e26:	545a      	strb	r2, [r3, r1]
				OutgoingFrameCounter.Val = 0;
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
				OutgoingFrameCounter.Val = 1;
			}
		#else
			OutgoingFrameCounter.Val = 1;
    8e28:	3201      	adds	r2, #1
    8e2a:	4b0b      	ldr	r3, [pc, #44]	; (8e58 <MiMAC_Init+0x70>)
    8e2c:	601a      	str	r2, [r3, #0]
		#endif
	#endif

	return true;
}
    8e2e:	2001      	movs	r0, #1
    8e30:	b003      	add	sp, #12
    8e32:	bd30      	pop	{r4, r5, pc}
    8e34:	00009c21 	.word	0x00009c21
    8e38:	20002020 	.word	0x20002020
    8e3c:	00009df9 	.word	0x00009df9
    8e40:	00009c55 	.word	0x00009c55
    8e44:	20001f15 	.word	0x20001f15
    8e48:	00009e1d 	.word	0x00009e1d
    8e4c:	20002198 	.word	0x20002198
    8e50:	00000202 	.word	0x00000202
    8e54:	00000303 	.word	0x00000303
    8e58:	20002068 	.word	0x20002068

00008e5c <MiMAC_SendPacket>:

bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen, uint8_t msghandle,
         DataConf_callback_t ConfCallback)
{
    8e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e5e:	46de      	mov	lr, fp
    8e60:	4657      	mov	r7, sl
    8e62:	464e      	mov	r6, r9
    8e64:	4645      	mov	r5, r8
    8e66:	b5e0      	push	{r5, r6, r7, lr}
    8e68:	b087      	sub	sp, #28
    8e6a:	af03      	add	r7, sp, #12
    8e6c:	1c04      	adds	r4, r0, #0
    8e6e:	9003      	str	r0, [sp, #12]
    8e70:	0008      	movs	r0, r1
    8e72:	9104      	str	r1, [sp, #16]
    8e74:	0015      	movs	r5, r2
    8e76:	0a2d      	lsrs	r5, r5, #8
    8e78:	9205      	str	r2, [sp, #20]
    8e7a:	9300      	str	r3, [sp, #0]
    8e7c:	ab11      	add	r3, sp, #68	; 0x44
    8e7e:	781b      	ldrb	r3, [r3, #0]
    8e80:	469a      	mov	sl, r3
    8e82:	b2e4      	uxtb	r4, r4
    8e84:	06a6      	lsls	r6, r4, #26
    8e86:	0ff6      	lsrs	r6, r6, #31
    8e88:	9002      	str	r0, [sp, #8]
    8e8a:	b2d3      	uxtb	r3, r2
    8e8c:	469c      	mov	ip, r3
    8e8e:	b2ed      	uxtb	r5, r5
    uint8_t headerLength;
    uint8_t loc = 0;
    uint8_t i = 0;

	uint8_t frameControl = 0;
	dataConfAvailable = false;
    8e90:	2200      	movs	r2, #0
    8e92:	4bc4      	ldr	r3, [pc, #784]	; (91a4 <MiMAC_SendPacket+0x348>)
    8e94:	701a      	strb	r2, [r3, #0]
	#ifndef TARGET_SMALL
		bool IntraPAN;
	#endif
	
	MACdatatransParam = transParam;
    8e96:	4bc4      	ldr	r3, [pc, #784]	; (91a8 <MiMAC_SendPacket+0x34c>)
    8e98:	cf07      	ldmia	r7!, {r0, r1, r2}
    8e9a:	c307      	stmia	r3!, {r0, r1, r2}

    if (transParam.flags.bits.broadcast)
    8e9c:	0763      	lsls	r3, r4, #29
    8e9e:	d501      	bpl.n	8ea4 <MiMAC_SendPacket+0x48>
    {
        transParam.altDestAddr = true;
    8ea0:	2301      	movs	r3, #1
    8ea2:	469c      	mov	ip, r3
    }

    if (transParam.flags.bits.secEn)
    8ea4:	2308      	movs	r3, #8
    8ea6:	4023      	ands	r3, r4
    8ea8:	001a      	movs	r2, r3
    {
        transParam.altSrcAddr = false;
    8eaa:	4253      	negs	r3, r2
    8eac:	4153      	adcs	r3, r2
    8eae:	425b      	negs	r3, r3
    8eb0:	401d      	ands	r5, r3
    }

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    8eb2:	2303      	movs	r3, #3
    8eb4:	4023      	ands	r3, r4
    8eb6:	2b01      	cmp	r3, #1
    8eb8:	d04d      	beq.n	8f56 <MiMAC_SendPacket+0xfa>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    {
        frameControl = 0x01;
    8eba:	2201      	movs	r2, #1
    8ebc:	4691      	mov	r9, r2
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    8ebe:	2b00      	cmp	r3, #0
    8ec0:	d004      	beq.n	8ecc <MiMAC_SendPacket+0x70>
    }
	else if (transParam.flags.bits.packetType == PACKET_TYPE_ACK)
    {
        frameControl = 0x02;
    8ec2:	1e9a      	subs	r2, r3, #2
    8ec4:	4251      	negs	r1, r2
    8ec6:	4151      	adcs	r1, r2
    8ec8:	004a      	lsls	r2, r1, #1
    8eca:	4691      	mov	r9, r2
    }
    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    8ecc:	aa03      	add	r2, sp, #12
    8ece:	8952      	ldrh	r2, [r2, #10]
    8ed0:	48b6      	ldr	r0, [pc, #728]	; (91ac <MiMAC_SendPacket+0x350>)
    8ed2:	8800      	ldrh	r0, [r0, #0]
    8ed4:	4290      	cmp	r0, r2
    8ed6:	d041      	beq.n	8f5c <MiMAC_SendPacket+0x100>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    8ed8:	2200      	movs	r2, #0
    8eda:	4693      	mov	fp, r2
        headerLength = 7;
    8edc:	3207      	adds	r2, #7
    }
#endif

    if (transParam.altDestAddr)
    8ede:	46e0      	mov	r8, ip
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    8ee0:	0017      	movs	r7, r2
    8ee2:	3708      	adds	r7, #8
    if (transParam.altDestAddr)
    8ee4:	4661      	mov	r1, ip
    8ee6:	2900      	cmp	r1, #0
    8ee8:	d000      	beq.n	8eec <MiMAC_SendPacket+0x90>
        headerLength += 2;
    8eea:	1c97      	adds	r7, r2, #2
    }

    if (transParam.altSrcAddr)
    8eec:	2d00      	cmp	r5, #0
    8eee:	d044      	beq.n	8f7a <MiMAC_SendPacket+0x11e>
    {
        headerLength += 2;
    8ef0:	3702      	adds	r7, #2
    8ef2:	b2fa      	uxtb	r2, r7
    8ef4:	9201      	str	r2, [sp, #4]
    } else
    {
        headerLength += 8;
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    8ef6:	2224      	movs	r2, #36	; 0x24
    8ef8:	4014      	ands	r4, r2
    8efa:	2c20      	cmp	r4, #32
    8efc:	d041      	beq.n	8f82 <MiMAC_SendPacket+0x126>
    {
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    8efe:	2b03      	cmp	r3, #3
    8f00:	d044      	beq.n	8f8c <MiMAC_SendPacket+0x130>
        IntraPAN = false;
#endif
        transParam.altSrcAddr = true;
        transParam.flags.bits.ackReq = false;
    }
	if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND) 
    8f02:	aa03      	add	r2, sp, #12
    8f04:	0171      	lsls	r1, r6, #5
    8f06:	7813      	ldrb	r3, [r2, #0]
    8f08:	2020      	movs	r0, #32
    8f0a:	4383      	bics	r3, r0
    8f0c:	430b      	orrs	r3, r1
    8f0e:	7013      	strb	r3, [r2, #0]
    8f10:	2203      	movs	r2, #3
    8f12:	4013      	ands	r3, r2
    8f14:	2b01      	cmp	r3, #1
    8f16:	d041      	beq.n	8f9c <MiMAC_SendPacket+0x140>
    {
        transParam.flags.bits.ackReq = false;
    }

#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn)
    8f18:	ab03      	add	r3, sp, #12
    8f1a:	0172      	lsls	r2, r6, #5
    8f1c:	781c      	ldrb	r4, [r3, #0]
    8f1e:	2120      	movs	r1, #32
    8f20:	438c      	bics	r4, r1
    8f22:	4314      	orrs	r4, r2
    8f24:	701c      	strb	r4, [r3, #0]
    8f26:	b2e4      	uxtb	r4, r4
    8f28:	0723      	lsls	r3, r4, #28
    8f2a:	d439      	bmi.n	8fa0 <MiMAC_SendPacket+0x144>
		// 4 byte mic and 5 byte outgoing frame counter
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    8f2c:	ab10      	add	r3, sp, #64	; 0x40
    8f2e:	781b      	ldrb	r3, [r3, #0]
    8f30:	9a01      	ldr	r2, [sp, #4]
    8f32:	18d7      	adds	r7, r2, r3
    8f34:	4b9e      	ldr	r3, [pc, #632]	; (91b0 <MiMAC_SendPacket+0x354>)
    8f36:	701f      	strb	r7, [r3, #0]
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    8f38:	4b9d      	ldr	r3, [pc, #628]	; (91b0 <MiMAC_SendPacket+0x354>)
    8f3a:	464a      	mov	r2, r9
    8f3c:	705a      	strb	r2, [r3, #1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    8f3e:	43e3      	mvns	r3, r4
    8f40:	079b      	lsls	r3, r3, #30
    8f42:	d040      	beq.n	8fc6 <MiMAC_SendPacket+0x16a>
		packet[loc++] = 0x80;
        // sequence number
		packet[loc++] = IEEESeqNum++;
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    8f44:	4643      	mov	r3, r8
    8f46:	2b00      	cmp	r3, #0
    8f48:	d05f      	beq.n	900a <MiMAC_SendPacket+0x1ae>
    8f4a:	2d00      	cmp	r5, #0
    8f4c:	d045      	beq.n	8fda <MiMAC_SendPacket+0x17e>
        {
			packet[loc++] = 0x88;
    8f4e:	2288      	movs	r2, #136	; 0x88
    8f50:	4b97      	ldr	r3, [pc, #604]	; (91b0 <MiMAC_SendPacket+0x354>)
    8f52:	709a      	strb	r2, [r3, #2]
    8f54:	e044      	b.n	8fe0 <MiMAC_SendPacket+0x184>
        frameControl = 0x03;
    8f56:	2203      	movs	r2, #3
    8f58:	4691      	mov	r9, r2
    8f5a:	e7b7      	b.n	8ecc <MiMAC_SendPacket+0x70>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    8f5c:	4895      	ldr	r0, [pc, #596]	; (91b4 <MiMAC_SendPacket+0x358>)
    8f5e:	4282      	cmp	r2, r0
    8f60:	d007      	beq.n	8f72 <MiMAC_SendPacket+0x116>
        frameControl |= 0x40;
    8f62:	2240      	movs	r2, #64	; 0x40
    8f64:	4649      	mov	r1, r9
    8f66:	4311      	orrs	r1, r2
    8f68:	4689      	mov	r9, r1
        IntraPAN = true;
    8f6a:	3a3f      	subs	r2, #63	; 0x3f
    8f6c:	4693      	mov	fp, r2
        headerLength = 5;
    8f6e:	3204      	adds	r2, #4
        IntraPAN = true;
    8f70:	e7b5      	b.n	8ede <MiMAC_SendPacket+0x82>
        IntraPAN = false;
    8f72:	2200      	movs	r2, #0
    8f74:	4693      	mov	fp, r2
        headerLength = 7;
    8f76:	3207      	adds	r2, #7
    8f78:	e7b1      	b.n	8ede <MiMAC_SendPacket+0x82>
        headerLength += 8;
    8f7a:	3708      	adds	r7, #8
    8f7c:	b2fa      	uxtb	r2, r7
    8f7e:	9201      	str	r2, [sp, #4]
    8f80:	e7b9      	b.n	8ef6 <MiMAC_SendPacket+0x9a>
        frameControl |= 0x20;
    8f82:	3a04      	subs	r2, #4
    8f84:	4649      	mov	r1, r9
    8f86:	4311      	orrs	r1, r2
    8f88:	4689      	mov	r9, r1
    8f8a:	e7b8      	b.n	8efe <MiMAC_SendPacket+0xa2>
        transParam.altSrcAddr = true;
    8f8c:	2501      	movs	r5, #1
        transParam.flags.bits.ackReq = false;
    8f8e:	2600      	movs	r6, #0
        IntraPAN = false;
    8f90:	2300      	movs	r3, #0
    8f92:	469b      	mov	fp, r3
        frameControl = 0x00;
    8f94:	4699      	mov	r9, r3
        headerLength = 7;
    8f96:	3307      	adds	r3, #7
    8f98:	9301      	str	r3, [sp, #4]
    8f9a:	e7b2      	b.n	8f02 <MiMAC_SendPacket+0xa6>
        transParam.flags.bits.ackReq = false;
    8f9c:	2600      	movs	r6, #0
    8f9e:	e7bb      	b.n	8f18 <MiMAC_SendPacket+0xbc>
        frameControl |= 0x08;
    8fa0:	2308      	movs	r3, #8
    8fa2:	464a      	mov	r2, r9
    8fa4:	431a      	orrs	r2, r3
    8fa6:	4691      	mov	r9, r2
		DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    8fa8:	4b83      	ldr	r3, [pc, #524]	; (91b8 <MiMAC_SendPacket+0x35c>)
    8faa:	681a      	ldr	r2, [r3, #0]
    8fac:	464b      	mov	r3, r9
    8fae:	a910      	add	r1, sp, #64	; 0x40
    8fb0:	9800      	ldr	r0, [sp, #0]
    8fb2:	4f82      	ldr	r7, [pc, #520]	; (91bc <MiMAC_SendPacket+0x360>)
    8fb4:	47b8      	blx	r7
		packet[loc++] = MACPayloadLen+headerLength+9;
    8fb6:	ab10      	add	r3, sp, #64	; 0x40
    8fb8:	781b      	ldrb	r3, [r3, #0]
    8fba:	3309      	adds	r3, #9
    8fbc:	9a01      	ldr	r2, [sp, #4]
    8fbe:	18d7      	adds	r7, r2, r3
    8fc0:	4b7b      	ldr	r3, [pc, #492]	; (91b0 <MiMAC_SendPacket+0x354>)
    8fc2:	701f      	strb	r7, [r3, #0]
    8fc4:	e7b8      	b.n	8f38 <MiMAC_SendPacket+0xdc>
		packet[loc++] = 0x80;
    8fc6:	4b7a      	ldr	r3, [pc, #488]	; (91b0 <MiMAC_SendPacket+0x354>)
    8fc8:	2280      	movs	r2, #128	; 0x80
    8fca:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    8fcc:	497c      	ldr	r1, [pc, #496]	; (91c0 <MiMAC_SendPacket+0x364>)
    8fce:	780a      	ldrb	r2, [r1, #0]
    8fd0:	1c50      	adds	r0, r2, #1
    8fd2:	7008      	strb	r0, [r1, #0]
    8fd4:	70da      	strb	r2, [r3, #3]
    8fd6:	2204      	movs	r2, #4
    8fd8:	e03e      	b.n	9058 <MiMAC_SendPacket+0x1fc>

        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
        {
			packet[loc++] = 0xC8;
    8fda:	22c8      	movs	r2, #200	; 0xc8
    8fdc:	4b74      	ldr	r3, [pc, #464]	; (91b0 <MiMAC_SendPacket+0x354>)
    8fde:	709a      	strb	r2, [r3, #2]
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    8fe0:	4b77      	ldr	r3, [pc, #476]	; (91c0 <MiMAC_SendPacket+0x364>)
    8fe2:	781a      	ldrb	r2, [r3, #0]
    8fe4:	1c51      	adds	r1, r2, #1
    8fe6:	7019      	strb	r1, [r3, #0]
    8fe8:	4b71      	ldr	r3, [pc, #452]	; (91b0 <MiMAC_SendPacket+0x354>)
    8fea:	70da      	strb	r2, [r3, #3]

        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    8fec:	aa03      	add	r2, sp, #12
    8fee:	7a91      	ldrb	r1, [r2, #10]
    8ff0:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    8ff2:	7ad2      	ldrb	r2, [r2, #11]
    8ff4:	715a      	strb	r2, [r3, #5]

        // destination address
        if (transParam.flags.bits.broadcast)
    8ff6:	0763      	lsls	r3, r4, #29
    8ff8:	d429      	bmi.n	904e <MiMAC_SendPacket+0x1f2>
			packet[loc++] = 0xFF;
        } else
        {
            if (transParam.altDestAddr)
            {
				packet[loc++] = transParam.DestAddress[0];
    8ffa:	9902      	ldr	r1, [sp, #8]
    8ffc:	780a      	ldrb	r2, [r1, #0]
    8ffe:	4b6c      	ldr	r3, [pc, #432]	; (91b0 <MiMAC_SendPacket+0x354>)
    9000:	719a      	strb	r2, [r3, #6]
				packet[loc++] = transParam.DestAddress[1];
    9002:	784a      	ldrb	r2, [r1, #1]
    9004:	71da      	strb	r2, [r3, #7]
    9006:	2208      	movs	r2, #8
    9008:	e026      	b.n	9058 <MiMAC_SendPacket+0x1fc>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    900a:	2d00      	cmp	r5, #0
    900c:	d00f      	beq.n	902e <MiMAC_SendPacket+0x1d2>
			packet[loc++] = 0x8C;
    900e:	4b68      	ldr	r3, [pc, #416]	; (91b0 <MiMAC_SendPacket+0x354>)
    9010:	228c      	movs	r2, #140	; 0x8c
    9012:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9014:	496a      	ldr	r1, [pc, #424]	; (91c0 <MiMAC_SendPacket+0x364>)
    9016:	780a      	ldrb	r2, [r1, #0]
    9018:	1c50      	adds	r0, r2, #1
    901a:	7008      	strb	r0, [r1, #0]
    901c:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    901e:	aa03      	add	r2, sp, #12
    9020:	7a91      	ldrb	r1, [r2, #10]
    9022:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9024:	7ad2      	ldrb	r2, [r2, #11]
    9026:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    9028:	0763      	lsls	r3, r4, #29
    902a:	d410      	bmi.n	904e <MiMAC_SendPacket+0x1f2>
    902c:	e099      	b.n	9162 <MiMAC_SendPacket+0x306>
			packet[loc++] = 0xCC;
    902e:	4b60      	ldr	r3, [pc, #384]	; (91b0 <MiMAC_SendPacket+0x354>)
    9030:	22cc      	movs	r2, #204	; 0xcc
    9032:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    9034:	4962      	ldr	r1, [pc, #392]	; (91c0 <MiMAC_SendPacket+0x364>)
    9036:	780a      	ldrb	r2, [r1, #0]
    9038:	1c50      	adds	r0, r2, #1
    903a:	7008      	strb	r0, [r1, #0]
    903c:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    903e:	aa03      	add	r2, sp, #12
    9040:	7a91      	ldrb	r1, [r2, #10]
    9042:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    9044:	7ad2      	ldrb	r2, [r2, #11]
    9046:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    9048:	0763      	lsls	r3, r4, #29
    904a:	d400      	bmi.n	904e <MiMAC_SendPacket+0x1f2>
    904c:	e085      	b.n	915a <MiMAC_SendPacket+0x2fe>
			packet[loc++] = 0xFF;
    904e:	4b58      	ldr	r3, [pc, #352]	; (91b0 <MiMAC_SendPacket+0x354>)
    9050:	22ff      	movs	r2, #255	; 0xff
    9052:	719a      	strb	r2, [r3, #6]
			packet[loc++] = 0xFF;
    9054:	71da      	strb	r2, [r3, #7]
    9056:	3af7      	subs	r2, #247	; 0xf7
                }
            }
        }
    }
	
	if(transParam.flags.bits.ackReq)
    9058:	a903      	add	r1, sp, #12
    905a:	0170      	lsls	r0, r6, #5
    905c:	780b      	ldrb	r3, [r1, #0]
    905e:	2420      	movs	r4, #32
    9060:	43a3      	bics	r3, r4
    9062:	4303      	orrs	r3, r0
    9064:	700b      	strb	r3, [r1, #0]
    9066:	069b      	lsls	r3, r3, #26
    9068:	d400      	bmi.n	906c <MiMAC_SendPacket+0x210>
    906a:	e085      	b.n	9178 <MiMAC_SendPacket+0x31c>
	{
	 	AckSeqNum = IEEESeqNum-1;
    906c:	4b54      	ldr	r3, [pc, #336]	; (91c0 <MiMAC_SendPacket+0x364>)
    906e:	781b      	ldrb	r3, [r3, #0]
    9070:	3b01      	subs	r3, #1
    9072:	4954      	ldr	r1, [pc, #336]	; (91c4 <MiMAC_SendPacket+0x368>)
    9074:	700b      	strb	r3, [r1, #0]
		 AckReqData = 1;
    9076:	2101      	movs	r1, #1
    9078:	4b53      	ldr	r3, [pc, #332]	; (91c8 <MiMAC_SendPacket+0x36c>)
    907a:	7019      	strb	r1, [r3, #0]
	{
		AckReqData = 0;
	}
#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    907c:	465b      	mov	r3, fp
    907e:	2b00      	cmp	r3, #0
    9080:	d109      	bne.n	9096 <MiMAC_SendPacket+0x23a>
    {
		packet[loc++] = MAC_PANID.v[0];
    9082:	1c53      	adds	r3, r2, #1
    9084:	b2db      	uxtb	r3, r3
    9086:	494a      	ldr	r1, [pc, #296]	; (91b0 <MiMAC_SendPacket+0x354>)
    9088:	4848      	ldr	r0, [pc, #288]	; (91ac <MiMAC_SendPacket+0x350>)
    908a:	7804      	ldrb	r4, [r0, #0]
    908c:	548c      	strb	r4, [r1, r2]
		packet[loc++] = MAC_PANID.v[1];
    908e:	3202      	adds	r2, #2
    9090:	b2d2      	uxtb	r2, r2
    9092:	7840      	ldrb	r0, [r0, #1]
    9094:	54c8      	strb	r0, [r1, r3]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    9096:	2d00      	cmp	r5, #0
    9098:	d100      	bne.n	909c <MiMAC_SendPacket+0x240>
    909a:	e071      	b.n	9180 <MiMAC_SendPacket+0x324>
    {
		packet[loc++] = myNetworkAddress.v[0];
    909c:	4944      	ldr	r1, [pc, #272]	; (91b0 <MiMAC_SendPacket+0x354>)
    909e:	484b      	ldr	r0, [pc, #300]	; (91cc <MiMAC_SendPacket+0x370>)
    90a0:	7803      	ldrb	r3, [r0, #0]
    90a2:	548b      	strb	r3, [r1, r2]
		packet[loc++] = myNetworkAddress.v[1];
    90a4:	1c93      	adds	r3, r2, #2
    90a6:	b2db      	uxtb	r3, r3
		packet[loc++] = myNetworkAddress.v[0];
    90a8:	3201      	adds	r2, #1
		packet[loc++] = myNetworkAddress.v[1];
    90aa:	b2d2      	uxtb	r2, r2
    90ac:	7840      	ldrb	r0, [r0, #1]
    90ae:	5488      	strb	r0, [r1, r2]
        {
			packet[loc++] = MACInitParams.PAddress[i];
        }
    }
#ifdef ENABLE_SECURITY
if (transParam.flags.bits.secEn)
    90b0:	aa03      	add	r2, sp, #12
    90b2:	0171      	lsls	r1, r6, #5
    90b4:	7816      	ldrb	r6, [r2, #0]
    90b6:	2020      	movs	r0, #32
    90b8:	4386      	bics	r6, r0
    90ba:	430e      	orrs	r6, r1
    90bc:	7016      	strb	r6, [r2, #0]
    90be:	0732      	lsls	r2, r6, #28
    90c0:	d515      	bpl.n	90ee <MiMAC_SendPacket+0x292>
    90c2:	0019      	movs	r1, r3
    90c4:	2200      	movs	r2, #0
{
	// fill the additional security aux header
	for (i = 0; i < 4; i++)
	{
		packet[loc++] = OutgoingFrameCounter.v[i];
    90c6:	4e3a      	ldr	r6, [pc, #232]	; (91b0 <MiMAC_SendPacket+0x354>)
    90c8:	4d3b      	ldr	r5, [pc, #236]	; (91b8 <MiMAC_SendPacket+0x35c>)
    90ca:	1c48      	adds	r0, r1, #1
    90cc:	5cac      	ldrb	r4, [r5, r2]
    90ce:	5474      	strb	r4, [r6, r1]
    90d0:	3201      	adds	r2, #1
    90d2:	b2c1      	uxtb	r1, r0
	for (i = 0; i < 4; i++)
    90d4:	2a04      	cmp	r2, #4
    90d6:	d1f8      	bne.n	90ca <MiMAC_SendPacket+0x26e>
    90d8:	1d1a      	adds	r2, r3, #4
    90da:	b2d2      	uxtb	r2, r2
	}
	OutgoingFrameCounter.Val++;
    90dc:	4836      	ldr	r0, [pc, #216]	; (91b8 <MiMAC_SendPacket+0x35c>)
    90de:	6801      	ldr	r1, [r0, #0]
    90e0:	3101      	adds	r1, #1
    90e2:	6001      	str	r1, [r0, #0]
	{
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
	}
	#endif
	//copy myKeySequenceNumber
	packet[loc++] = myKeySequenceNumber;
    90e4:	3305      	adds	r3, #5
    90e6:	b2db      	uxtb	r3, r3
    90e8:	2000      	movs	r0, #0
    90ea:	4931      	ldr	r1, [pc, #196]	; (91b0 <MiMAC_SendPacket+0x354>)
    90ec:	5488      	strb	r0, [r1, r2]
    {
		packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    90ee:	aa10      	add	r2, sp, #64	; 0x40
    90f0:	7816      	ldrb	r6, [r2, #0]
    90f2:	2e00      	cmp	r6, #0
    90f4:	d053      	beq.n	919e <MiMAC_SendPacket+0x342>
    90f6:	9a00      	ldr	r2, [sp, #0]
    90f8:	18f1      	adds	r1, r6, r3
    90fa:	b2c9      	uxtb	r1, r1
    {
	    packet[loc++] = MACPayload[i];
    90fc:	4d2c      	ldr	r5, [pc, #176]	; (91b0 <MiMAC_SendPacket+0x354>)
    90fe:	1c58      	adds	r0, r3, #1
    9100:	7814      	ldrb	r4, [r2, #0]
    9102:	54ec      	strb	r4, [r5, r3]
    9104:	3201      	adds	r2, #1
    9106:	b2c3      	uxtb	r3, r0
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    9108:	428b      	cmp	r3, r1
    910a:	d1f8      	bne.n	90fe <MiMAC_SendPacket+0x2a2>
    }
	packet[loc++] = final_mic_value[0];
    910c:	4828      	ldr	r0, [pc, #160]	; (91b0 <MiMAC_SendPacket+0x354>)
    910e:	4b30      	ldr	r3, [pc, #192]	; (91d0 <MiMAC_SendPacket+0x374>)
    9110:	781a      	ldrb	r2, [r3, #0]
    9112:	5442      	strb	r2, [r0, r1]
    9114:	1c4a      	adds	r2, r1, #1
	packet[loc++] = final_mic_value[1];
    9116:	b2d2      	uxtb	r2, r2
    9118:	785c      	ldrb	r4, [r3, #1]
    911a:	5484      	strb	r4, [r0, r2]
    911c:	1c8a      	adds	r2, r1, #2
	packet[loc++] = final_mic_value[2];
    911e:	b2d2      	uxtb	r2, r2
    9120:	789c      	ldrb	r4, [r3, #2]
    9122:	5484      	strb	r4, [r0, r2]
    9124:	3103      	adds	r1, #3
	packet[loc++] = final_mic_value[3];
    9126:	b2c9      	uxtb	r1, r1
    9128:	78db      	ldrb	r3, [r3, #3]
    912a:	5443      	strb	r3, [r0, r1]
    } else
    {
        i = 0x01;
    }

    dataPointer = MACPayload;
    912c:	4b29      	ldr	r3, [pc, #164]	; (91d4 <MiMAC_SendPacket+0x378>)
    912e:	9a00      	ldr	r2, [sp, #0]
    9130:	601a      	str	r2, [r3, #0]
	dataConfCallback = ConfCallback;
    9132:	4b29      	ldr	r3, [pc, #164]	; (91d8 <MiMAC_SendPacket+0x37c>)
    9134:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9136:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    9138:	4b28      	ldr	r3, [pc, #160]	; (91dc <MiMAC_SendPacket+0x380>)
    913a:	4652      	mov	r2, sl
    913c:	701a      	strb	r2, [r3, #0]
	MACdataPayloadLen = MACPayloadLen;
    913e:	4b28      	ldr	r3, [pc, #160]	; (91e0 <MiMAC_SendPacket+0x384>)
    9140:	701e      	strb	r6, [r3, #0]
	//DataRetryCount = 0;

    // Now Trigger the Transmission of packet
    return PHY_DataReq(packet);					
    9142:	4b28      	ldr	r3, [pc, #160]	; (91e4 <MiMAC_SendPacket+0x388>)
    9144:	4798      	blx	r3
    9146:	1e43      	subs	r3, r0, #1
    9148:	4198      	sbcs	r0, r3
    914a:	b2c0      	uxtb	r0, r0
}
    914c:	b007      	add	sp, #28
    914e:	bc3c      	pop	{r2, r3, r4, r5}
    9150:	4690      	mov	r8, r2
    9152:	4699      	mov	r9, r3
    9154:	46a2      	mov	sl, r4
    9156:	46ab      	mov	fp, r5
    9158:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (transParam.altDestAddr)
    915a:	4643      	mov	r3, r8
    915c:	2b00      	cmp	r3, #0
    915e:	d000      	beq.n	9162 <MiMAC_SendPacket+0x306>
    9160:	e74b      	b.n	8ffa <MiMAC_SendPacket+0x19e>
        transParam.flags.bits.ackReq = false;
    9162:	2300      	movs	r3, #0
					packet[loc++] = transParam.DestAddress[i];
    9164:	4812      	ldr	r0, [pc, #72]	; (91b0 <MiMAC_SendPacket+0x354>)
    9166:	9c02      	ldr	r4, [sp, #8]
    9168:	5ce1      	ldrb	r1, [r4, r3]
    916a:	181a      	adds	r2, r3, r0
    916c:	7191      	strb	r1, [r2, #6]
    916e:	3301      	adds	r3, #1
                for (i = 0; i < 8; i++)
    9170:	2b08      	cmp	r3, #8
    9172:	d1f9      	bne.n	9168 <MiMAC_SendPacket+0x30c>
					packet[loc++] = transParam.DestAddress[i];
    9174:	220e      	movs	r2, #14
    9176:	e76f      	b.n	9058 <MiMAC_SendPacket+0x1fc>
		AckReqData = 0;
    9178:	2100      	movs	r1, #0
    917a:	4b13      	ldr	r3, [pc, #76]	; (91c8 <MiMAC_SendPacket+0x36c>)
    917c:	7019      	strb	r1, [r3, #0]
    917e:	e77d      	b.n	907c <MiMAC_SendPacket+0x220>
			packet[loc++] = MACInitParams.PAddress[i];
    9180:	4b19      	ldr	r3, [pc, #100]	; (91e8 <MiMAC_SendPacket+0x38c>)
    9182:	6859      	ldr	r1, [r3, #4]
    9184:	0014      	movs	r4, r2
    9186:	3408      	adds	r4, #8
    9188:	b2e4      	uxtb	r4, r4
    918a:	4d09      	ldr	r5, [pc, #36]	; (91b0 <MiMAC_SendPacket+0x354>)
    918c:	1c53      	adds	r3, r2, #1
    918e:	b2db      	uxtb	r3, r3
    9190:	7808      	ldrb	r0, [r1, #0]
    9192:	54a8      	strb	r0, [r5, r2]
    9194:	3101      	adds	r1, #1
    9196:	001a      	movs	r2, r3
        for (i = 0; i < 8; i++)
    9198:	429c      	cmp	r4, r3
    919a:	d1f7      	bne.n	918c <MiMAC_SendPacket+0x330>
    919c:	e788      	b.n	90b0 <MiMAC_SendPacket+0x254>
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    919e:	0019      	movs	r1, r3
    91a0:	e7b4      	b.n	910c <MiMAC_SendPacket+0x2b0>
    91a2:	46c0      	nop			; (mov r8, r8)
    91a4:	20000286 	.word	0x20000286
    91a8:	20002038 	.word	0x20002038
    91ac:	2000208c 	.word	0x2000208c
    91b0:	20001f18 	.word	0x20001f18
    91b4:	0000ffff 	.word	0x0000ffff
    91b8:	20002068 	.word	0x20002068
    91bc:	00008afd 	.word	0x00008afd
    91c0:	20001f15 	.word	0x20001f15
    91c4:	20001f14 	.word	0x20001f14
    91c8:	20000283 	.word	0x20000283
    91cc:	20002018 	.word	0x20002018
    91d0:	20002054 	.word	0x20002054
    91d4:	20000290 	.word	0x20000290
    91d8:	20000288 	.word	0x20000288
    91dc:	2000028c 	.word	0x2000028c
    91e0:	20000285 	.word	0x20000285
    91e4:	00009d89 	.word	0x00009d89
    91e8:	20002020 	.word	0x20002020

000091ec <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable buffer for next packets
	if (BankIndex < BANK_SIZE)
    91ec:	4b04      	ldr	r3, [pc, #16]	; (9200 <MiMAC_DiscardPacket+0x14>)
    91ee:	781b      	ldrb	r3, [r3, #0]
    91f0:	2b03      	cmp	r3, #3
    91f2:	d804      	bhi.n	91fe <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    91f4:	021a      	lsls	r2, r3, #8
    91f6:	18d3      	adds	r3, r2, r3
    91f8:	2100      	movs	r1, #0
    91fa:	4a02      	ldr	r2, [pc, #8]	; (9204 <MiMAC_DiscardPacket+0x18>)
    91fc:	5499      	strb	r1, [r3, r2]
	}
}
    91fe:	4770      	bx	lr
    9200:	2000000f 	.word	0x2000000f
    9204:	20002198 	.word	0x20002198

00009208 <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	DataRetryCount = 0;
    9208:	2200      	movs	r2, #0
    920a:	4b04      	ldr	r3, [pc, #16]	; (921c <PHY_DataConf+0x14>)
    920c:	701a      	strb	r2, [r3, #0]
	dataStatus = (miwi_status_t)status;
    920e:	4b04      	ldr	r3, [pc, #16]	; (9220 <PHY_DataConf+0x18>)
    9210:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    9212:	3201      	adds	r2, #1
    9214:	4b03      	ldr	r3, [pc, #12]	; (9224 <PHY_DataConf+0x1c>)
    9216:	701a      	strb	r2, [r3, #0]
}
    9218:	4770      	bx	lr
    921a:	46c0      	nop			; (mov r8, r8)
    921c:	20000284 	.word	0x20000284
    9220:	20002064 	.word	0x20002064
    9224:	20000286 	.word	0x20000286

00009228 <MiMAC_RetryPacket>:
{
    9228:	b510      	push	{r4, lr}
	DataRetryCount++;
    922a:	4a04      	ldr	r2, [pc, #16]	; (923c <MiMAC_RetryPacket+0x14>)
    922c:	7813      	ldrb	r3, [r2, #0]
    922e:	3301      	adds	r3, #1
    9230:	7013      	strb	r3, [r2, #0]
		PHY_DataConf(NO_ACK); // No Ack response
    9232:	2003      	movs	r0, #3
    9234:	4b02      	ldr	r3, [pc, #8]	; (9240 <MiMAC_RetryPacket+0x18>)
    9236:	4798      	blx	r3
}
    9238:	2000      	movs	r0, #0
    923a:	bd10      	pop	{r4, pc}
    923c:	20000284 	.word	0x20000284
    9240:	00009209 	.word	0x00009209

00009244 <MiMAC_ReceivedPacket>:
{
    9244:	b5f0      	push	{r4, r5, r6, r7, lr}
    9246:	46d6      	mov	lr, sl
    9248:	464f      	mov	r7, r9
    924a:	4646      	mov	r6, r8
    924c:	b5c0      	push	{r6, r7, lr}
    924e:	b088      	sub	sp, #32
	BankIndex = 0xFF;
    9250:	22ff      	movs	r2, #255	; 0xff
    9252:	4bd1      	ldr	r3, [pc, #836]	; (9598 <MiMAC_ReceivedPacket+0x354>)
    9254:	701a      	strb	r2, [r3, #0]
		if (RxBuffer[i].PayloadLen > 0)
    9256:	4bd1      	ldr	r3, [pc, #836]	; (959c <MiMAC_ReceivedPacket+0x358>)
    9258:	781b      	ldrb	r3, [r3, #0]
    925a:	2b00      	cmp	r3, #0
    925c:	d000      	beq.n	9260 <MiMAC_ReceivedPacket+0x1c>
    925e:	e35e      	b.n	991e <MiMAC_ReceivedPacket+0x6da>
    9260:	2302      	movs	r3, #2
    9262:	33ff      	adds	r3, #255	; 0xff
    9264:	4acd      	ldr	r2, [pc, #820]	; (959c <MiMAC_ReceivedPacket+0x358>)
    9266:	5cd3      	ldrb	r3, [r2, r3]
    9268:	2b00      	cmp	r3, #0
    926a:	d110      	bne.n	928e <MiMAC_ReceivedPacket+0x4a>
    926c:	4bcc      	ldr	r3, [pc, #816]	; (95a0 <MiMAC_ReceivedPacket+0x35c>)
    926e:	5cd3      	ldrb	r3, [r2, r3]
    9270:	2b00      	cmp	r3, #0
    9272:	d142      	bne.n	92fa <MiMAC_ReceivedPacket+0xb6>
    9274:	4bcb      	ldr	r3, [pc, #812]	; (95a4 <MiMAC_ReceivedPacket+0x360>)
    9276:	5cd3      	ldrb	r3, [r2, r3]
	return false;
    9278:	2400      	movs	r4, #0
	for (i = 0; i < BANK_SIZE; i++)
    927a:	2203      	movs	r2, #3
		if (RxBuffer[i].PayloadLen > 0)
    927c:	2b00      	cmp	r3, #0
    927e:	d107      	bne.n	9290 <MiMAC_ReceivedPacket+0x4c>
}
    9280:	0020      	movs	r0, r4
    9282:	b008      	add	sp, #32
    9284:	bc1c      	pop	{r2, r3, r4}
    9286:	4690      	mov	r8, r2
    9288:	4699      	mov	r9, r3
    928a:	46a2      	mov	sl, r4
    928c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < BANK_SIZE; i++)
    928e:	2201      	movs	r2, #1
			BankIndex = i;
    9290:	4bc1      	ldr	r3, [pc, #772]	; (9598 <MiMAC_ReceivedPacket+0x354>)
    9292:	701a      	strb	r2, [r3, #0]
	return false;
    9294:	2400      	movs	r4, #0
	if (BankIndex < BANK_SIZE)
    9296:	2a03      	cmp	r2, #3
    9298:	d8f2      	bhi.n	9280 <MiMAC_ReceivedPacket+0x3c>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    929a:	0010      	movs	r0, r2
    929c:	0211      	lsls	r1, r2, #8
    929e:	1889      	adds	r1, r1, r2
    92a0:	4bbe      	ldr	r3, [pc, #760]	; (959c <MiMAC_ReceivedPacket+0x358>)
    92a2:	185b      	adds	r3, r3, r1
    92a4:	789d      	ldrb	r5, [r3, #2]
    92a6:	2440      	movs	r4, #64	; 0x40
    92a8:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    92aa:	49bf      	ldr	r1, [pc, #764]	; (95a8 <MiMAC_ReceivedPacket+0x364>)
    92ac:	2400      	movs	r4, #0
    92ae:	700c      	strb	r4, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    92b0:	73cc      	strb	r4, [r1, #15]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    92b2:	78db      	ldrb	r3, [r3, #3]
    92b4:	2133      	movs	r1, #51	; 0x33
    92b6:	438b      	bics	r3, r1
		switch (addrMode)
    92b8:	b2d9      	uxtb	r1, r3
    92ba:	2988      	cmp	r1, #136	; 0x88
    92bc:	d100      	bne.n	92c0 <MiMAC_ReceivedPacket+0x7c>
    92be:	e136      	b.n	952e <MiMAC_ReceivedPacket+0x2ea>
    92c0:	d91d      	bls.n	92fe <MiMAC_ReceivedPacket+0xba>
    92c2:	b2d9      	uxtb	r1, r3
    92c4:	29c8      	cmp	r1, #200	; 0xc8
    92c6:	d06f      	beq.n	93a8 <MiMAC_ReceivedPacket+0x164>
    92c8:	29cc      	cmp	r1, #204	; 0xcc
    92ca:	d100      	bne.n	92ce <MiMAC_ReceivedPacket+0x8a>
    92cc:	e0b9      	b.n	9442 <MiMAC_ReceivedPacket+0x1fe>
    92ce:	298c      	cmp	r1, #140	; 0x8c
    92d0:	d100      	bne.n	92d4 <MiMAC_ReceivedPacket+0x90>
    92d2:	e1b2      	b.n	963a <MiMAC_ReceivedPacket+0x3f6>
			MiMAC_DiscardPacket();
    92d4:	4bb5      	ldr	r3, [pc, #724]	; (95ac <MiMAC_ReceivedPacket+0x368>)
    92d6:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    92d8:	4baf      	ldr	r3, [pc, #700]	; (9598 <MiMAC_ReceivedPacket+0x354>)
    92da:	781a      	ldrb	r2, [r3, #0]
    92dc:	0213      	lsls	r3, r2, #8
    92de:	189a      	adds	r2, r3, r2
    92e0:	4bae      	ldr	r3, [pc, #696]	; (959c <MiMAC_ReceivedPacket+0x358>)
    92e2:	189b      	adds	r3, r3, r2
    92e4:	789b      	ldrb	r3, [r3, #2]
			return false;
    92e6:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    92e8:	069b      	lsls	r3, r3, #26
    92ea:	d5c9      	bpl.n	9280 <MiMAC_ReceivedPacket+0x3c>
				MiRadioReceiveParam.action = RECEIVE_START;					
    92ec:	a807      	add	r0, sp, #28
    92ee:	2300      	movs	r3, #0
    92f0:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    92f2:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    92f4:	4bae      	ldr	r3, [pc, #696]	; (95b0 <MiMAC_ReceivedPacket+0x36c>)
    92f6:	4798      	blx	r3
    92f8:	e7c2      	b.n	9280 <MiMAC_ReceivedPacket+0x3c>
	for (i = 0; i < BANK_SIZE; i++)
    92fa:	2202      	movs	r2, #2
    92fc:	e7c8      	b.n	9290 <MiMAC_ReceivedPacket+0x4c>
		switch (addrMode)
    92fe:	2b08      	cmp	r3, #8
    9300:	d100      	bne.n	9304 <MiMAC_ReceivedPacket+0xc0>
    9302:	e1e9      	b.n	96d8 <MiMAC_ReceivedPacket+0x494>
    9304:	2980      	cmp	r1, #128	; 0x80
    9306:	d1e5      	bne.n	92d4 <MiMAC_ReceivedPacket+0x90>
				MACRxPacket.flags.bits.broadcast = 1;
    9308:	4ba7      	ldr	r3, [pc, #668]	; (95a8 <MiMAC_ReceivedPacket+0x364>)
    930a:	7819      	ldrb	r1, [r3, #0]
    930c:	2404      	movs	r4, #4
    930e:	4321      	orrs	r1, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    9310:	2480      	movs	r4, #128	; 0x80
    9312:	4264      	negs	r4, r4
    9314:	4321      	orrs	r1, r4
    9316:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    9318:	2101      	movs	r1, #1
    931a:	73d9      	strb	r1, [r3, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    931c:	4c9f      	ldr	r4, [pc, #636]	; (959c <MiMAC_ReceivedPacket+0x358>)
    931e:	0211      	lsls	r1, r2, #8
    9320:	1888      	adds	r0, r1, r2
    9322:	1821      	adds	r1, r4, r0
    9324:	794d      	ldrb	r5, [r1, #5]
    9326:	741d      	strb	r5, [r3, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    9328:	7989      	ldrb	r1, [r1, #6]
    932a:	7459      	strb	r1, [r3, #17]
    932c:	0211      	lsls	r1, r2, #8
    932e:	188a      	adds	r2, r1, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    9330:	1dd1      	adds	r1, r2, #7
    9332:	1909      	adds	r1, r1, r4
    9334:	6059      	str	r1, [r3, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    9336:	5d01      	ldrb	r1, [r0, r4]
    9338:	390b      	subs	r1, #11
    933a:	7319      	strb	r1, [r3, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    933c:	3209      	adds	r2, #9
    933e:	1912      	adds	r2, r2, r4
    9340:	609a      	str	r2, [r3, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    9342:	4b95      	ldr	r3, [pc, #596]	; (9598 <MiMAC_ReceivedPacket+0x354>)
    9344:	781a      	ldrb	r2, [r3, #0]
    9346:	0213      	lsls	r3, r2, #8
    9348:	189a      	adds	r2, r3, r2
    934a:	4b94      	ldr	r3, [pc, #592]	; (959c <MiMAC_ReceivedPacket+0x358>)
    934c:	189b      	adds	r3, r3, r2
    934e:	789b      	ldrb	r3, [r3, #2]
    9350:	071b      	lsls	r3, r3, #28
    9352:	d500      	bpl.n	9356 <MiMAC_ReceivedPacket+0x112>
    9354:	e1e1      	b.n	971a <MiMAC_ReceivedPacket+0x4d6>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    9356:	4b90      	ldr	r3, [pc, #576]	; (9598 <MiMAC_ReceivedPacket+0x354>)
    9358:	7818      	ldrb	r0, [r3, #0]
    935a:	0202      	lsls	r2, r0, #8
    935c:	1812      	adds	r2, r2, r0
    935e:	4b8f      	ldr	r3, [pc, #572]	; (959c <MiMAC_ReceivedPacket+0x358>)
    9360:	189b      	adds	r3, r3, r2
    9362:	7899      	ldrb	r1, [r3, #2]
    9364:	2307      	movs	r3, #7
    9366:	400b      	ands	r3, r1
    9368:	2b01      	cmp	r3, #1
    936a:	d100      	bne.n	936e <MiMAC_ReceivedPacket+0x12a>
    936c:	e256      	b.n	981c <MiMAC_ReceivedPacket+0x5d8>
    936e:	2b00      	cmp	r3, #0
    9370:	d100      	bne.n	9374 <MiMAC_ReceivedPacket+0x130>
    9372:	e28b      	b.n	988c <MiMAC_ReceivedPacket+0x648>
    9374:	2b02      	cmp	r3, #2
    9376:	d100      	bne.n	937a <MiMAC_ReceivedPacket+0x136>
    9378:	e28e      	b.n	9898 <MiMAC_ReceivedPacket+0x654>
    937a:	2b03      	cmp	r3, #3
    937c:	d100      	bne.n	9380 <MiMAC_ReceivedPacket+0x13c>
    937e:	e27d      	b.n	987c <MiMAC_ReceivedPacket+0x638>
			MiMAC_DiscardPacket();
    9380:	4b8a      	ldr	r3, [pc, #552]	; (95ac <MiMAC_ReceivedPacket+0x368>)
    9382:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9384:	4b84      	ldr	r3, [pc, #528]	; (9598 <MiMAC_ReceivedPacket+0x354>)
    9386:	781a      	ldrb	r2, [r3, #0]
    9388:	0213      	lsls	r3, r2, #8
    938a:	189a      	adds	r2, r3, r2
    938c:	4b83      	ldr	r3, [pc, #524]	; (959c <MiMAC_ReceivedPacket+0x358>)
    938e:	189b      	adds	r3, r3, r2
    9390:	789b      	ldrb	r3, [r3, #2]
			return false;
    9392:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9394:	069b      	lsls	r3, r3, #26
    9396:	d400      	bmi.n	939a <MiMAC_ReceivedPacket+0x156>
    9398:	e772      	b.n	9280 <MiMAC_ReceivedPacket+0x3c>
				MiRadioReceiveParam.action = RECEIVE_START;	
    939a:	a807      	add	r0, sp, #28
    939c:	2300      	movs	r3, #0
    939e:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    93a0:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    93a2:	4b83      	ldr	r3, [pc, #524]	; (95b0 <MiMAC_ReceivedPacket+0x36c>)
    93a4:	4798      	blx	r3
    93a6:	e76b      	b.n	9280 <MiMAC_ReceivedPacket+0x3c>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    93a8:	0211      	lsls	r1, r2, #8
    93aa:	1889      	adds	r1, r1, r2
    93ac:	4b7b      	ldr	r3, [pc, #492]	; (959c <MiMAC_ReceivedPacket+0x358>)
    93ae:	185b      	adds	r3, r3, r1
    93b0:	79dc      	ldrb	r4, [r3, #7]
    93b2:	2cff      	cmp	r4, #255	; 0xff
    93b4:	d01e      	beq.n	93f4 <MiMAC_ReceivedPacket+0x1b0>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    93b6:	497c      	ldr	r1, [pc, #496]	; (95a8 <MiMAC_ReceivedPacket+0x364>)
    93b8:	780e      	ldrb	r6, [r1, #0]
    93ba:	2380      	movs	r3, #128	; 0x80
    93bc:	425b      	negs	r3, r3
    93be:	4333      	orrs	r3, r6
    93c0:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    93c2:	2d00      	cmp	r5, #0
    93c4:	d000      	beq.n	93c8 <MiMAC_ReceivedPacket+0x184>
    93c6:	e285      	b.n	98d4 <MiMAC_ReceivedPacket+0x690>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    93c8:	4977      	ldr	r1, [pc, #476]	; (95a8 <MiMAC_ReceivedPacket+0x364>)
    93ca:	4c74      	ldr	r4, [pc, #464]	; (959c <MiMAC_ReceivedPacket+0x358>)
    93cc:	0203      	lsls	r3, r0, #8
    93ce:	1818      	adds	r0, r3, r0
    93d0:	1823      	adds	r3, r4, r0
    93d2:	7a5d      	ldrb	r5, [r3, #9]
    93d4:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    93d6:	7a9b      	ldrb	r3, [r3, #10]
    93d8:	744b      	strb	r3, [r1, #17]
    93da:	0213      	lsls	r3, r2, #8
    93dc:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    93de:	0013      	movs	r3, r2
    93e0:	330b      	adds	r3, #11
    93e2:	191b      	adds	r3, r3, r4
    93e4:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    93e6:	5d03      	ldrb	r3, [r0, r4]
    93e8:	3b15      	subs	r3, #21
    93ea:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    93ec:	3213      	adds	r2, #19
    93ee:	1912      	adds	r2, r2, r4
    93f0:	608a      	str	r2, [r1, #8]
    93f2:	e043      	b.n	947c <MiMAC_ReceivedPacket+0x238>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    93f4:	0211      	lsls	r1, r2, #8
    93f6:	1889      	adds	r1, r1, r2
    93f8:	4b68      	ldr	r3, [pc, #416]	; (959c <MiMAC_ReceivedPacket+0x358>)
    93fa:	185b      	adds	r3, r3, r1
    93fc:	7a1b      	ldrb	r3, [r3, #8]
    93fe:	2bff      	cmp	r3, #255	; 0xff
    9400:	d1d9      	bne.n	93b6 <MiMAC_ReceivedPacket+0x172>
				MACRxPacket.flags.bits.broadcast = 1;
    9402:	4969      	ldr	r1, [pc, #420]	; (95a8 <MiMAC_ReceivedPacket+0x364>)
    9404:	780b      	ldrb	r3, [r1, #0]
    9406:	2404      	movs	r4, #4
    9408:	4323      	orrs	r3, r4
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    940a:	2480      	movs	r4, #128	; 0x80
    940c:	4264      	negs	r4, r4
    940e:	4323      	orrs	r3, r4
    9410:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    9412:	2d00      	cmp	r5, #0
    9414:	d000      	beq.n	9418 <MiMAC_ReceivedPacket+0x1d4>
    9416:	e26c      	b.n	98f2 <MiMAC_ReceivedPacket+0x6ae>
    9418:	e7d6      	b.n	93c8 <MiMAC_ReceivedPacket+0x184>
					MiMAC_DiscardPacket();
    941a:	4b64      	ldr	r3, [pc, #400]	; (95ac <MiMAC_ReceivedPacket+0x368>)
    941c:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    941e:	4b5e      	ldr	r3, [pc, #376]	; (9598 <MiMAC_ReceivedPacket+0x354>)
    9420:	781a      	ldrb	r2, [r3, #0]
    9422:	0213      	lsls	r3, r2, #8
    9424:	189a      	adds	r2, r3, r2
    9426:	4b5d      	ldr	r3, [pc, #372]	; (959c <MiMAC_ReceivedPacket+0x358>)
    9428:	189b      	adds	r3, r3, r2
    942a:	789b      	ldrb	r3, [r3, #2]
					return false;
    942c:	2400      	movs	r4, #0
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    942e:	069b      	lsls	r3, r3, #26
    9430:	d400      	bmi.n	9434 <MiMAC_ReceivedPacket+0x1f0>
    9432:	e725      	b.n	9280 <MiMAC_ReceivedPacket+0x3c>
						MiRadioReceiveParam.action = RECEIVE_START;					
    9434:	a807      	add	r0, sp, #28
    9436:	2300      	movs	r3, #0
    9438:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    943a:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    943c:	4b5c      	ldr	r3, [pc, #368]	; (95b0 <MiMAC_ReceivedPacket+0x36c>)
    943e:	4798      	blx	r3
    9440:	e71e      	b.n	9280 <MiMAC_ReceivedPacket+0x3c>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    9442:	4959      	ldr	r1, [pc, #356]	; (95a8 <MiMAC_ReceivedPacket+0x364>)
    9444:	780c      	ldrb	r4, [r1, #0]
    9446:	2380      	movs	r3, #128	; 0x80
    9448:	425b      	negs	r3, r3
    944a:	4323      	orrs	r3, r4
    944c:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    944e:	2d00      	cmp	r5, #0
    9450:	d13a      	bne.n	94c8 <MiMAC_ReceivedPacket+0x284>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    9452:	4955      	ldr	r1, [pc, #340]	; (95a8 <MiMAC_ReceivedPacket+0x364>)
    9454:	4c51      	ldr	r4, [pc, #324]	; (959c <MiMAC_ReceivedPacket+0x358>)
    9456:	0213      	lsls	r3, r2, #8
    9458:	1898      	adds	r0, r3, r2
    945a:	1823      	adds	r3, r4, r0
    945c:	7bdd      	ldrb	r5, [r3, #15]
    945e:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    9460:	7c1b      	ldrb	r3, [r3, #16]
    9462:	744b      	strb	r3, [r1, #17]
    9464:	0213      	lsls	r3, r2, #8
    9466:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    9468:	0013      	movs	r3, r2
    946a:	3311      	adds	r3, #17
    946c:	191b      	adds	r3, r3, r4
    946e:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    9470:	5d03      	ldrb	r3, [r0, r4]
    9472:	3b1b      	subs	r3, #27
    9474:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    9476:	3219      	adds	r2, #25
    9478:	1912      	adds	r2, r2, r4
    947a:	608a      	str	r2, [r1, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    947c:	4b46      	ldr	r3, [pc, #280]	; (9598 <MiMAC_ReceivedPacket+0x354>)
    947e:	781a      	ldrb	r2, [r3, #0]
    9480:	0213      	lsls	r3, r2, #8
    9482:	189a      	adds	r2, r3, r2
    9484:	4b45      	ldr	r3, [pc, #276]	; (959c <MiMAC_ReceivedPacket+0x358>)
    9486:	189b      	adds	r3, r3, r2
    9488:	789b      	ldrb	r3, [r3, #2]
    948a:	071b      	lsls	r3, r3, #28
    948c:	d400      	bmi.n	9490 <MiMAC_ReceivedPacket+0x24c>
    948e:	e762      	b.n	9356 <MiMAC_ReceivedPacket+0x112>
			FrameCounter.v[0] = MACRxPacket.Payload[0];
    9490:	4b45      	ldr	r3, [pc, #276]	; (95a8 <MiMAC_ReceivedPacket+0x364>)
    9492:	689b      	ldr	r3, [r3, #8]
			FrameCounter.v[1] = MACRxPacket.Payload[1];
    9494:	785a      	ldrb	r2, [r3, #1]
    9496:	0212      	lsls	r2, r2, #8
    9498:	7819      	ldrb	r1, [r3, #0]
    949a:	4311      	orrs	r1, r2
    949c:	468a      	mov	sl, r1
			FrameCounter.v[2] = MACRxPacket.Payload[2];
    949e:	789a      	ldrb	r2, [r3, #2]
    94a0:	0412      	lsls	r2, r2, #16
    94a2:	4944      	ldr	r1, [pc, #272]	; (95b4 <MiMAC_ReceivedPacket+0x370>)
    94a4:	4650      	mov	r0, sl
    94a6:	4001      	ands	r1, r0
    94a8:	4311      	orrs	r1, r2
			FrameCounter.v[3] = MACRxPacket.Payload[3];
    94aa:	78db      	ldrb	r3, [r3, #3]
    94ac:	061b      	lsls	r3, r3, #24
    94ae:	020a      	lsls	r2, r1, #8
    94b0:	0a12      	lsrs	r2, r2, #8
    94b2:	431a      	orrs	r2, r3
    94b4:	4692      	mov	sl, r2
    94b6:	4e40      	ldr	r6, [pc, #256]	; (95b8 <MiMAC_ReceivedPacket+0x374>)
    94b8:	2500      	movs	r5, #0
			for (i = 0; i < CONNECTION_SIZE; i++)
    94ba:	2400      	movs	r4, #0
				if ((ConnectionTable[i].status.bits.isValid) &&
    94bc:	0037      	movs	r7, r6
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    94be:	4b3a      	ldr	r3, [pc, #232]	; (95a8 <MiMAC_ReceivedPacket+0x364>)
    94c0:	4699      	mov	r9, r3
    94c2:	4b3e      	ldr	r3, [pc, #248]	; (95bc <MiMAC_ReceivedPacket+0x378>)
    94c4:	4698      	mov	r8, r3
    94c6:	e142      	b.n	974e <MiMAC_ReceivedPacket+0x50a>
				if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    94c8:	0211      	lsls	r1, r2, #8
    94ca:	1889      	adds	r1, r1, r2
    94cc:	3107      	adds	r1, #7
    94ce:	4b33      	ldr	r3, [pc, #204]	; (959c <MiMAC_ReceivedPacket+0x358>)
    94d0:	18c9      	adds	r1, r1, r3
    94d2:	483b      	ldr	r0, [pc, #236]	; (95c0 <MiMAC_ReceivedPacket+0x37c>)
    94d4:	4b39      	ldr	r3, [pc, #228]	; (95bc <MiMAC_ReceivedPacket+0x378>)
    94d6:	4798      	blx	r3
    94d8:	1e04      	subs	r4, r0, #0
    94da:	d015      	beq.n	9508 <MiMAC_ReceivedPacket+0x2c4>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    94dc:	4b2e      	ldr	r3, [pc, #184]	; (9598 <MiMAC_ReceivedPacket+0x354>)
    94de:	7818      	ldrb	r0, [r3, #0]
    94e0:	4a31      	ldr	r2, [pc, #196]	; (95a8 <MiMAC_ReceivedPacket+0x364>)
    94e2:	492e      	ldr	r1, [pc, #184]	; (959c <MiMAC_ReceivedPacket+0x358>)
    94e4:	0203      	lsls	r3, r0, #8
    94e6:	181b      	adds	r3, r3, r0
    94e8:	18c8      	adds	r0, r1, r3
    94ea:	7944      	ldrb	r4, [r0, #5]
    94ec:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    94ee:	7980      	ldrb	r0, [r0, #6]
    94f0:	7450      	strb	r0, [r2, #17]
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    94f2:	0018      	movs	r0, r3
    94f4:	300f      	adds	r0, #15
    94f6:	1840      	adds	r0, r0, r1
    94f8:	6050      	str	r0, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    94fa:	5c58      	ldrb	r0, [r3, r1]
    94fc:	3819      	subs	r0, #25
    94fe:	7310      	strb	r0, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    9500:	3317      	adds	r3, #23
    9502:	185b      	adds	r3, r3, r1
    9504:	6093      	str	r3, [r2, #8]
    9506:	e7b9      	b.n	947c <MiMAC_ReceivedPacket+0x238>
					MiMAC_DiscardPacket();
    9508:	4b28      	ldr	r3, [pc, #160]	; (95ac <MiMAC_ReceivedPacket+0x368>)
    950a:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    950c:	4b22      	ldr	r3, [pc, #136]	; (9598 <MiMAC_ReceivedPacket+0x354>)
    950e:	781a      	ldrb	r2, [r3, #0]
    9510:	0213      	lsls	r3, r2, #8
    9512:	189a      	adds	r2, r3, r2
    9514:	4b21      	ldr	r3, [pc, #132]	; (959c <MiMAC_ReceivedPacket+0x358>)
    9516:	189b      	adds	r3, r3, r2
    9518:	789b      	ldrb	r3, [r3, #2]
    951a:	069b      	lsls	r3, r3, #26
    951c:	d400      	bmi.n	9520 <MiMAC_ReceivedPacket+0x2dc>
    951e:	e6af      	b.n	9280 <MiMAC_ReceivedPacket+0x3c>
						MiRadioReceiveParam.action = RECEIVE_START;					
    9520:	a807      	add	r0, sp, #28
    9522:	2300      	movs	r3, #0
    9524:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    9526:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    9528:	4b21      	ldr	r3, [pc, #132]	; (95b0 <MiMAC_ReceivedPacket+0x36c>)
    952a:	4798      	blx	r3
    952c:	e6a8      	b.n	9280 <MiMAC_ReceivedPacket+0x3c>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    952e:	0211      	lsls	r1, r2, #8
    9530:	1889      	adds	r1, r1, r2
    9532:	4b1a      	ldr	r3, [pc, #104]	; (959c <MiMAC_ReceivedPacket+0x358>)
    9534:	185b      	adds	r3, r3, r1
    9536:	79dc      	ldrb	r4, [r3, #7]
    9538:	2cff      	cmp	r4, #255	; 0xff
    953a:	d01f      	beq.n	957c <MiMAC_ReceivedPacket+0x338>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    953c:	4b1a      	ldr	r3, [pc, #104]	; (95a8 <MiMAC_ReceivedPacket+0x364>)
    953e:	781e      	ldrb	r6, [r3, #0]
    9540:	2180      	movs	r1, #128	; 0x80
    9542:	4249      	negs	r1, r1
    9544:	4331      	orrs	r1, r6
    9546:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    9548:	2101      	movs	r1, #1
    954a:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN == false)
    954c:	2d00      	cmp	r5, #0
    954e:	d139      	bne.n	95c4 <MiMAC_ReceivedPacket+0x380>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    9550:	0019      	movs	r1, r3
    9552:	4c12      	ldr	r4, [pc, #72]	; (959c <MiMAC_ReceivedPacket+0x358>)
    9554:	0203      	lsls	r3, r0, #8
    9556:	1818      	adds	r0, r3, r0
    9558:	1823      	adds	r3, r4, r0
    955a:	7a5d      	ldrb	r5, [r3, #9]
    955c:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    955e:	7a9b      	ldrb	r3, [r3, #10]
    9560:	744b      	strb	r3, [r1, #17]
    9562:	0213      	lsls	r3, r2, #8
    9564:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    9566:	0013      	movs	r3, r2
    9568:	330b      	adds	r3, #11
    956a:	191b      	adds	r3, r3, r4
    956c:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    956e:	5d03      	ldrb	r3, [r0, r4]
    9570:	3b0f      	subs	r3, #15
    9572:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    9574:	320d      	adds	r2, #13
    9576:	1912      	adds	r2, r2, r4
    9578:	608a      	str	r2, [r1, #8]
    957a:	e6e2      	b.n	9342 <MiMAC_ReceivedPacket+0xfe>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    957c:	0211      	lsls	r1, r2, #8
    957e:	1889      	adds	r1, r1, r2
    9580:	4b06      	ldr	r3, [pc, #24]	; (959c <MiMAC_ReceivedPacket+0x358>)
    9582:	185b      	adds	r3, r3, r1
    9584:	7a1b      	ldrb	r3, [r3, #8]
    9586:	2bff      	cmp	r3, #255	; 0xff
    9588:	d1d8      	bne.n	953c <MiMAC_ReceivedPacket+0x2f8>
					MACRxPacket.flags.bits.broadcast = 1;
    958a:	4907      	ldr	r1, [pc, #28]	; (95a8 <MiMAC_ReceivedPacket+0x364>)
    958c:	780b      	ldrb	r3, [r1, #0]
    958e:	2604      	movs	r6, #4
    9590:	4333      	orrs	r3, r6
    9592:	700b      	strb	r3, [r1, #0]
    9594:	e7d2      	b.n	953c <MiMAC_ReceivedPacket+0x2f8>
    9596:	46c0      	nop			; (mov r8, r8)
    9598:	2000000f 	.word	0x2000000f
    959c:	20002198 	.word	0x20002198
    95a0:	00000202 	.word	0x00000202
    95a4:	00000303 	.word	0x00000303
    95a8:	20002f70 	.word	0x20002f70
    95ac:	000091ed 	.word	0x000091ed
    95b0:	0000dd29 	.word	0x0000dd29
    95b4:	ff00ffff 	.word	0xff00ffff
    95b8:	200025a8 	.word	0x200025a8
    95bc:	0000a011 	.word	0x0000a011
    95c0:	20002190 	.word	0x20002190
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    95c4:	0201      	lsls	r1, r0, #8
    95c6:	1809      	adds	r1, r1, r0
    95c8:	4bd7      	ldr	r3, [pc, #860]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    95ca:	185b      	adds	r3, r3, r1
    95cc:	7a1b      	ldrb	r3, [r3, #8]
    95ce:	2cff      	cmp	r4, #255	; 0xff
    95d0:	d117      	bne.n	9602 <MiMAC_ReceivedPacket+0x3be>
    95d2:	2bff      	cmp	r3, #255	; 0xff
    95d4:	d115      	bne.n	9602 <MiMAC_ReceivedPacket+0x3be>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    95d6:	49d5      	ldr	r1, [pc, #852]	; (992c <MiMAC_ReceivedPacket+0x6e8>)
    95d8:	4cd3      	ldr	r4, [pc, #844]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    95da:	0203      	lsls	r3, r0, #8
    95dc:	1818      	adds	r0, r3, r0
    95de:	1823      	adds	r3, r4, r0
    95e0:	795d      	ldrb	r5, [r3, #5]
    95e2:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    95e4:	799b      	ldrb	r3, [r3, #6]
    95e6:	744b      	strb	r3, [r1, #17]
    95e8:	0213      	lsls	r3, r2, #8
    95ea:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    95ec:	0013      	movs	r3, r2
    95ee:	3309      	adds	r3, #9
    95f0:	191b      	adds	r3, r3, r4
    95f2:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    95f4:	5d03      	ldrb	r3, [r0, r4]
    95f6:	3b0d      	subs	r3, #13
    95f8:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    95fa:	320b      	adds	r2, #11
    95fc:	1912      	adds	r2, r2, r4
    95fe:	608a      	str	r2, [r1, #8]
    9600:	e69f      	b.n	9342 <MiMAC_ReceivedPacket+0xfe>
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    9602:	49cb      	ldr	r1, [pc, #812]	; (9930 <MiMAC_ReceivedPacket+0x6ec>)
    9604:	7809      	ldrb	r1, [r1, #0]
    9606:	42a1      	cmp	r1, r4
    9608:	d103      	bne.n	9612 <MiMAC_ReceivedPacket+0x3ce>
    960a:	49c9      	ldr	r1, [pc, #804]	; (9930 <MiMAC_ReceivedPacket+0x6ec>)
    960c:	7849      	ldrb	r1, [r1, #1]
    960e:	4299      	cmp	r1, r3
    9610:	d0e1      	beq.n	95d6 <MiMAC_ReceivedPacket+0x392>
						MiMAC_DiscardPacket();
    9612:	4bc8      	ldr	r3, [pc, #800]	; (9934 <MiMAC_ReceivedPacket+0x6f0>)
    9614:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9616:	4bc8      	ldr	r3, [pc, #800]	; (9938 <MiMAC_ReceivedPacket+0x6f4>)
    9618:	781a      	ldrb	r2, [r3, #0]
    961a:	0213      	lsls	r3, r2, #8
    961c:	189a      	adds	r2, r3, r2
    961e:	4bc2      	ldr	r3, [pc, #776]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    9620:	189b      	adds	r3, r3, r2
    9622:	789b      	ldrb	r3, [r3, #2]
						return false;
    9624:	2400      	movs	r4, #0
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    9626:	069b      	lsls	r3, r3, #26
    9628:	d400      	bmi.n	962c <MiMAC_ReceivedPacket+0x3e8>
    962a:	e629      	b.n	9280 <MiMAC_ReceivedPacket+0x3c>
							MiRadioReceiveParam.action = RECEIVE_START;	
    962c:	a807      	add	r0, sp, #28
    962e:	2300      	movs	r3, #0
    9630:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    9632:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    9634:	4bc1      	ldr	r3, [pc, #772]	; (993c <MiMAC_ReceivedPacket+0x6f8>)
    9636:	4798      	blx	r3
    9638:	e622      	b.n	9280 <MiMAC_ReceivedPacket+0x3c>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    963a:	4bbc      	ldr	r3, [pc, #752]	; (992c <MiMAC_ReceivedPacket+0x6e8>)
    963c:	781c      	ldrb	r4, [r3, #0]
    963e:	2180      	movs	r1, #128	; 0x80
    9640:	4249      	negs	r1, r1
    9642:	4321      	orrs	r1, r4
    9644:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    9646:	2101      	movs	r1, #1
    9648:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    964a:	2d00      	cmp	r5, #0
    964c:	d115      	bne.n	967a <MiMAC_ReceivedPacket+0x436>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    964e:	49b7      	ldr	r1, [pc, #732]	; (992c <MiMAC_ReceivedPacket+0x6e8>)
    9650:	4cb5      	ldr	r4, [pc, #724]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    9652:	0213      	lsls	r3, r2, #8
    9654:	1898      	adds	r0, r3, r2
    9656:	1823      	adds	r3, r4, r0
    9658:	7b9d      	ldrb	r5, [r3, #14]
    965a:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    965c:	7bdb      	ldrb	r3, [r3, #15]
    965e:	744b      	strb	r3, [r1, #17]
    9660:	0213      	lsls	r3, r2, #8
    9662:	189a      	adds	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    9664:	0013      	movs	r3, r2
    9666:	3310      	adds	r3, #16
    9668:	191b      	adds	r3, r3, r4
    966a:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    966c:	5d03      	ldrb	r3, [r0, r4]
    966e:	3b15      	subs	r3, #21
    9670:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    9672:	3213      	adds	r2, #19
    9674:	1912      	adds	r2, r2, r4
    9676:	608a      	str	r2, [r1, #8]
    9678:	e663      	b.n	9342 <MiMAC_ReceivedPacket+0xfe>
					if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    967a:	0211      	lsls	r1, r2, #8
    967c:	1889      	adds	r1, r1, r2
    967e:	3107      	adds	r1, #7
    9680:	4ba9      	ldr	r3, [pc, #676]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    9682:	18c9      	adds	r1, r1, r3
    9684:	48ae      	ldr	r0, [pc, #696]	; (9940 <MiMAC_ReceivedPacket+0x6fc>)
    9686:	4baf      	ldr	r3, [pc, #700]	; (9944 <MiMAC_ReceivedPacket+0x700>)
    9688:	4798      	blx	r3
    968a:	1e04      	subs	r4, r0, #0
    968c:	d011      	beq.n	96b2 <MiMAC_ReceivedPacket+0x46e>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    968e:	4baa      	ldr	r3, [pc, #680]	; (9938 <MiMAC_ReceivedPacket+0x6f4>)
    9690:	7818      	ldrb	r0, [r3, #0]
    9692:	4aa6      	ldr	r2, [pc, #664]	; (992c <MiMAC_ReceivedPacket+0x6e8>)
    9694:	49a4      	ldr	r1, [pc, #656]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    9696:	0203      	lsls	r3, r0, #8
    9698:	181b      	adds	r3, r3, r0
    969a:	18c8      	adds	r0, r1, r3
    969c:	7944      	ldrb	r4, [r0, #5]
    969e:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    96a0:	7980      	ldrb	r0, [r0, #6]
    96a2:	7450      	strb	r0, [r2, #17]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    96a4:	5c58      	ldrb	r0, [r3, r1]
    96a6:	3813      	subs	r0, #19
    96a8:	7310      	strb	r0, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    96aa:	3311      	adds	r3, #17
    96ac:	185b      	adds	r3, r3, r1
    96ae:	6093      	str	r3, [r2, #8]
    96b0:	e647      	b.n	9342 <MiMAC_ReceivedPacket+0xfe>
						MiMAC_DiscardPacket();
    96b2:	4ba0      	ldr	r3, [pc, #640]	; (9934 <MiMAC_ReceivedPacket+0x6f0>)
    96b4:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    96b6:	4ba0      	ldr	r3, [pc, #640]	; (9938 <MiMAC_ReceivedPacket+0x6f4>)
    96b8:	781a      	ldrb	r2, [r3, #0]
    96ba:	0213      	lsls	r3, r2, #8
    96bc:	189a      	adds	r2, r3, r2
    96be:	4b9a      	ldr	r3, [pc, #616]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    96c0:	189b      	adds	r3, r3, r2
    96c2:	789b      	ldrb	r3, [r3, #2]
    96c4:	069b      	lsls	r3, r3, #26
    96c6:	d400      	bmi.n	96ca <MiMAC_ReceivedPacket+0x486>
    96c8:	e5da      	b.n	9280 <MiMAC_ReceivedPacket+0x3c>
							MiRadioReceiveParam.action = RECEIVE_START;	
    96ca:	a807      	add	r0, sp, #28
    96cc:	2300      	movs	r3, #0
    96ce:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    96d0:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    96d2:	4b9a      	ldr	r3, [pc, #616]	; (993c <MiMAC_ReceivedPacket+0x6f8>)
    96d4:	4798      	blx	r3
    96d6:	e5d3      	b.n	9280 <MiMAC_ReceivedPacket+0x3c>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    96d8:	0211      	lsls	r1, r2, #8
    96da:	1889      	adds	r1, r1, r2
    96dc:	4b92      	ldr	r3, [pc, #584]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    96de:	185b      	adds	r3, r3, r1
    96e0:	79db      	ldrb	r3, [r3, #7]
    96e2:	2bff      	cmp	r3, #255	; 0xff
    96e4:	d00c      	beq.n	9700 <MiMAC_ReceivedPacket+0x4bc>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    96e6:	4991      	ldr	r1, [pc, #580]	; (992c <MiMAC_ReceivedPacket+0x6e8>)
    96e8:	4c8f      	ldr	r4, [pc, #572]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    96ea:	0203      	lsls	r3, r0, #8
    96ec:	1818      	adds	r0, r3, r0
    96ee:	5d03      	ldrb	r3, [r0, r4]
    96f0:	3b0a      	subs	r3, #10
    96f2:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    96f4:	0213      	lsls	r3, r2, #8
    96f6:	189a      	adds	r2, r3, r2
    96f8:	3209      	adds	r2, #9
    96fa:	1912      	adds	r2, r2, r4
    96fc:	608a      	str	r2, [r1, #8]
			break;
    96fe:	e620      	b.n	9342 <MiMAC_ReceivedPacket+0xfe>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    9700:	0211      	lsls	r1, r2, #8
    9702:	1889      	adds	r1, r1, r2
    9704:	4b88      	ldr	r3, [pc, #544]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    9706:	185b      	adds	r3, r3, r1
    9708:	7a1b      	ldrb	r3, [r3, #8]
    970a:	2bff      	cmp	r3, #255	; 0xff
    970c:	d1eb      	bne.n	96e6 <MiMAC_ReceivedPacket+0x4a2>
					MACRxPacket.flags.bits.broadcast = 1;
    970e:	4987      	ldr	r1, [pc, #540]	; (992c <MiMAC_ReceivedPacket+0x6e8>)
    9710:	780b      	ldrb	r3, [r1, #0]
    9712:	2404      	movs	r4, #4
    9714:	4323      	orrs	r3, r4
    9716:	700b      	strb	r3, [r1, #0]
    9718:	e7e5      	b.n	96e6 <MiMAC_ReceivedPacket+0x4a2>
				MiMAC_DiscardPacket();
    971a:	4b86      	ldr	r3, [pc, #536]	; (9934 <MiMAC_ReceivedPacket+0x6f0>)
    971c:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    971e:	4b86      	ldr	r3, [pc, #536]	; (9938 <MiMAC_ReceivedPacket+0x6f4>)
    9720:	781a      	ldrb	r2, [r3, #0]
    9722:	0213      	lsls	r3, r2, #8
    9724:	189a      	adds	r2, r3, r2
    9726:	4b80      	ldr	r3, [pc, #512]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    9728:	189b      	adds	r3, r3, r2
    972a:	789b      	ldrb	r3, [r3, #2]
    972c:	069b      	lsls	r3, r3, #26
    972e:	d401      	bmi.n	9734 <MiMAC_ReceivedPacket+0x4f0>
				return false;
    9730:	2400      	movs	r4, #0
    9732:	e5a5      	b.n	9280 <MiMAC_ReceivedPacket+0x3c>
					MiRadioReceiveParam.action = RECEIVE_START;					
    9734:	a807      	add	r0, sp, #28
    9736:	2300      	movs	r3, #0
    9738:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    973a:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    973c:	4b7f      	ldr	r3, [pc, #508]	; (993c <MiMAC_ReceivedPacket+0x6f8>)
    973e:	4798      	blx	r3
    9740:	e7f6      	b.n	9730 <MiMAC_ReceivedPacket+0x4ec>
			for (i = 0; i < CONNECTION_SIZE; i++)
    9742:	3401      	adds	r4, #1
    9744:	b2e4      	uxtb	r4, r4
    9746:	3501      	adds	r5, #1
    9748:	360a      	adds	r6, #10
    974a:	2cfa      	cmp	r4, #250	; 0xfa
    974c:	d013      	beq.n	9776 <MiMAC_ReceivedPacket+0x532>
				if ((ConnectionTable[i].status.bits.isValid) &&
    974e:	00ab      	lsls	r3, r5, #2
    9750:	195b      	adds	r3, r3, r5
    9752:	005b      	lsls	r3, r3, #1
    9754:	18fb      	adds	r3, r7, r3
    9756:	7a1b      	ldrb	r3, [r3, #8]
    9758:	09db      	lsrs	r3, r3, #7
    975a:	d0f2      	beq.n	9742 <MiMAC_ReceivedPacket+0x4fe>
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    975c:	464b      	mov	r3, r9
    975e:	6859      	ldr	r1, [r3, #4]
    9760:	0030      	movs	r0, r6
    9762:	47c0      	blx	r8
				if ((ConnectionTable[i].status.bits.isValid) &&
    9764:	2800      	cmp	r0, #0
    9766:	d0ec      	beq.n	9742 <MiMAC_ReceivedPacket+0x4fe>
			if (i < CONNECTION_SIZE)
    9768:	2cf9      	cmp	r4, #249	; 0xf9
    976a:	d804      	bhi.n	9776 <MiMAC_ReceivedPacket+0x532>
				if (IncomingFrameCounter[i].Val >= FrameCounter.Val)	// drop the packet if saved frame counter (IncomingFrameCounter) is equal or greater than the lastest received packet (FrameCounter.Val)
    976c:	00a3      	lsls	r3, r4, #2
    976e:	4a76      	ldr	r2, [pc, #472]	; (9948 <MiMAC_ReceivedPacket+0x704>)
    9770:	589b      	ldr	r3, [r3, r2]
    9772:	4553      	cmp	r3, sl
    9774:	d22e      	bcs.n	97d4 <MiMAC_ReceivedPacket+0x590>
			MACRxPacket.PayloadLen -= 5;  // used to 5 for frame counter now -4 also added for MIC integrity
    9776:	496d      	ldr	r1, [pc, #436]	; (992c <MiMAC_ReceivedPacket+0x6e8>)
    9778:	7b0b      	ldrb	r3, [r1, #12]
    977a:	3b05      	subs	r3, #5
    977c:	b2db      	uxtb	r3, r3
    977e:	730b      	strb	r3, [r1, #12]
			received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen+1];
    9780:	6888      	ldr	r0, [r1, #8]
    9782:	18c3      	adds	r3, r0, r3
    9784:	785d      	ldrb	r5, [r3, #1]
    9786:	4a71      	ldr	r2, [pc, #452]	; (994c <MiMAC_ReceivedPacket+0x708>)
    9788:	7015      	strb	r5, [r2, #0]
			received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen+2];
    978a:	789d      	ldrb	r5, [r3, #2]
    978c:	7055      	strb	r5, [r2, #1]
			received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen+3];
    978e:	78dd      	ldrb	r5, [r3, #3]
    9790:	7095      	strb	r5, [r2, #2]
			received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen+4];
    9792:	791b      	ldrb	r3, [r3, #4]
    9794:	70d3      	strb	r3, [r2, #3]
			if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0]))
    9796:	684a      	ldr	r2, [r1, #4]
    9798:	310c      	adds	r1, #12
    979a:	3005      	adds	r0, #5
    979c:	4b66      	ldr	r3, [pc, #408]	; (9938 <MiMAC_ReceivedPacket+0x6f4>)
    979e:	781d      	ldrb	r5, [r3, #0]
    97a0:	022b      	lsls	r3, r5, #8
    97a2:	195d      	adds	r5, r3, r5
    97a4:	4b60      	ldr	r3, [pc, #384]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    97a6:	195b      	adds	r3, r3, r5
    97a8:	789b      	ldrb	r3, [r3, #2]
    97aa:	9300      	str	r3, [sp, #0]
    97ac:	4653      	mov	r3, sl
    97ae:	4d68      	ldr	r5, [pc, #416]	; (9950 <MiMAC_ReceivedPacket+0x70c>)
    97b0:	47a8      	blx	r5
    97b2:	2800      	cmp	r0, #0
    97b4:	d020      	beq.n	97f8 <MiMAC_ReceivedPacket+0x5b4>
			if (i < CONNECTION_SIZE)
    97b6:	2cf9      	cmp	r4, #249	; 0xf9
    97b8:	d803      	bhi.n	97c2 <MiMAC_ReceivedPacket+0x57e>
				IncomingFrameCounter[i].Val = FrameCounter.Val;
    97ba:	00a4      	lsls	r4, r4, #2
    97bc:	4b62      	ldr	r3, [pc, #392]	; (9948 <MiMAC_ReceivedPacket+0x704>)
    97be:	4652      	mov	r2, sl
    97c0:	50e2      	str	r2, [r4, r3]
			MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    97c2:	4b5a      	ldr	r3, [pc, #360]	; (992c <MiMAC_ReceivedPacket+0x6e8>)
    97c4:	689a      	ldr	r2, [r3, #8]
    97c6:	3205      	adds	r2, #5
    97c8:	609a      	str	r2, [r3, #8]
			MACRxPacket.flags.bits.secEn = 1;
    97ca:	781a      	ldrb	r2, [r3, #0]
    97cc:	2108      	movs	r1, #8
    97ce:	430a      	orrs	r2, r1
    97d0:	701a      	strb	r2, [r3, #0]
    97d2:	e5c0      	b.n	9356 <MiMAC_ReceivedPacket+0x112>
					MiMAC_DiscardPacket();
    97d4:	4b57      	ldr	r3, [pc, #348]	; (9934 <MiMAC_ReceivedPacket+0x6f0>)
    97d6:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    97d8:	4b57      	ldr	r3, [pc, #348]	; (9938 <MiMAC_ReceivedPacket+0x6f4>)
    97da:	781a      	ldrb	r2, [r3, #0]
    97dc:	0213      	lsls	r3, r2, #8
    97de:	189a      	adds	r2, r3, r2
    97e0:	4b51      	ldr	r3, [pc, #324]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    97e2:	189b      	adds	r3, r3, r2
    97e4:	789b      	ldrb	r3, [r3, #2]
    97e6:	069b      	lsls	r3, r3, #26
    97e8:	d5a2      	bpl.n	9730 <MiMAC_ReceivedPacket+0x4ec>
						MiRadioReceiveParam.action = RECEIVE_START;					
    97ea:	a807      	add	r0, sp, #28
    97ec:	2300      	movs	r3, #0
    97ee:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    97f0:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    97f2:	4b52      	ldr	r3, [pc, #328]	; (993c <MiMAC_ReceivedPacket+0x6f8>)
    97f4:	4798      	blx	r3
    97f6:	e79b      	b.n	9730 <MiMAC_ReceivedPacket+0x4ec>
				MiMAC_DiscardPacket();
    97f8:	4b4e      	ldr	r3, [pc, #312]	; (9934 <MiMAC_ReceivedPacket+0x6f0>)
    97fa:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    97fc:	4b4e      	ldr	r3, [pc, #312]	; (9938 <MiMAC_ReceivedPacket+0x6f4>)
    97fe:	781a      	ldrb	r2, [r3, #0]
    9800:	0213      	lsls	r3, r2, #8
    9802:	189a      	adds	r2, r3, r2
    9804:	4b48      	ldr	r3, [pc, #288]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    9806:	189b      	adds	r3, r3, r2
    9808:	789b      	ldrb	r3, [r3, #2]
    980a:	069b      	lsls	r3, r3, #26
    980c:	d590      	bpl.n	9730 <MiMAC_ReceivedPacket+0x4ec>
					MiRadioReceiveParam.action = RECEIVE_START;					
    980e:	a807      	add	r0, sp, #28
    9810:	2300      	movs	r3, #0
    9812:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    9814:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    9816:	4b49      	ldr	r3, [pc, #292]	; (993c <MiMAC_ReceivedPacket+0x6f8>)
    9818:	4798      	blx	r3
    981a:	e789      	b.n	9730 <MiMAC_ReceivedPacket+0x4ec>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    981c:	4a43      	ldr	r2, [pc, #268]	; (992c <MiMAC_ReceivedPacket+0x6e8>)
    981e:	7813      	ldrb	r3, [r2, #0]
    9820:	2403      	movs	r4, #3
    9822:	43a3      	bics	r3, r4
    9824:	7013      	strb	r3, [r2, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    9826:	4c41      	ldr	r4, [pc, #260]	; (992c <MiMAC_ReceivedPacket+0x6e8>)
    9828:	4b3f      	ldr	r3, [pc, #252]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    982a:	0202      	lsls	r2, r0, #8
    982c:	1812      	adds	r2, r2, r0
    982e:	5cd5      	ldrb	r5, [r2, r3]
    9830:	189b      	adds	r3, r3, r2
    9832:	5d5a      	ldrb	r2, [r3, r5]
    9834:	73a2      	strb	r2, [r4, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].radioRSSI;				
    9836:	785b      	ldrb	r3, [r3, #1]
    9838:	7363      	strb	r3, [r4, #13]
		return true;
    983a:	2401      	movs	r4, #1
		if(RxBuffer[BankIndex].Payload[0] & 0x20)
    983c:	068b      	lsls	r3, r1, #26
    983e:	d400      	bmi.n	9842 <MiMAC_ReceivedPacket+0x5fe>
    9840:	e51e      	b.n	9280 <MiMAC_ReceivedPacket+0x3c>
			    tParamAck.flags.Val = 0;
    9842:	aa04      	add	r2, sp, #16
    9844:	2400      	movs	r4, #0
			    tParamAck.altSrcAddr = 0;
    9846:	7254      	strb	r4, [r2, #9]
			    tParamAck.altDestAddr = false;
    9848:	7214      	strb	r4, [r2, #8]
 			    tParamAck.flags.bits.sourcePrsnt = 1;
    984a:	233e      	movs	r3, #62	; 0x3e
    984c:	425b      	negs	r3, r3
    984e:	7013      	strb	r3, [r2, #0]
			    tParamAck.DestAddress = MACRxPacket.SourceAddress;
    9850:	4b36      	ldr	r3, [pc, #216]	; (992c <MiMAC_ReceivedPacket+0x6e8>)
    9852:	6859      	ldr	r1, [r3, #4]
    9854:	9105      	str	r1, [sp, #20]
			    tParamAck.DestPANID.Val = MACRxPacket.SourcePANID.Val;
    9856:	8a1b      	ldrh	r3, [r3, #16]
    9858:	8153      	strh	r3, [r2, #10]
			AckBuffer[0] = RxBuffer[BankIndex].Payload[2];	
    985a:	4b3e      	ldr	r3, [pc, #248]	; (9954 <MiMAC_ReceivedPacket+0x710>)
    985c:	0205      	lsls	r5, r0, #8
    985e:	182d      	adds	r5, r5, r0
    9860:	4831      	ldr	r0, [pc, #196]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    9862:	1940      	adds	r0, r0, r5
    9864:	7900      	ldrb	r0, [r0, #4]
    9866:	7018      	strb	r0, [r3, #0]
			MiMAC_SendPacket(tParamAck, AckBuffer, 1, 0, NULL);
    9868:	9402      	str	r4, [sp, #8]
    986a:	9401      	str	r4, [sp, #4]
    986c:	2001      	movs	r0, #1
    986e:	9000      	str	r0, [sp, #0]
    9870:	9804      	ldr	r0, [sp, #16]
    9872:	9a06      	ldr	r2, [sp, #24]
    9874:	4c38      	ldr	r4, [pc, #224]	; (9958 <MiMAC_ReceivedPacket+0x714>)
    9876:	47a0      	blx	r4
		return true;
    9878:	2401      	movs	r4, #1
    987a:	e501      	b.n	9280 <MiMAC_ReceivedPacket+0x3c>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    987c:	4a2b      	ldr	r2, [pc, #172]	; (992c <MiMAC_ReceivedPacket+0x6e8>)
    987e:	7813      	ldrb	r3, [r2, #0]
    9880:	2403      	movs	r4, #3
    9882:	43a3      	bics	r3, r4
    9884:	2401      	movs	r4, #1
    9886:	4323      	orrs	r3, r4
    9888:	7013      	strb	r3, [r2, #0]
			break;
    988a:	e7cc      	b.n	9826 <MiMAC_ReceivedPacket+0x5e2>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    988c:	4a27      	ldr	r2, [pc, #156]	; (992c <MiMAC_ReceivedPacket+0x6e8>)
    988e:	7813      	ldrb	r3, [r2, #0]
    9890:	2403      	movs	r4, #3
    9892:	4323      	orrs	r3, r4
    9894:	7013      	strb	r3, [r2, #0]
			break;
    9896:	e7c6      	b.n	9826 <MiMAC_ReceivedPacket+0x5e2>
				MACRxPacket.flags.bits.packetType = PACKET_TYPE_ACK;
    9898:	4a24      	ldr	r2, [pc, #144]	; (992c <MiMAC_ReceivedPacket+0x6e8>)
    989a:	7813      	ldrb	r3, [r2, #0]
    989c:	2103      	movs	r1, #3
    989e:	438b      	bics	r3, r1
    98a0:	2102      	movs	r1, #2
    98a2:	430b      	orrs	r3, r1
    98a4:	7013      	strb	r3, [r2, #0]
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    98a6:	6893      	ldr	r3, [r2, #8]
    98a8:	781a      	ldrb	r2, [r3, #0]
    98aa:	4b2c      	ldr	r3, [pc, #176]	; (995c <MiMAC_ReceivedPacket+0x718>)
    98ac:	781b      	ldrb	r3, [r3, #0]
    98ae:	429a      	cmp	r2, r3
    98b0:	d003      	beq.n	98ba <MiMAC_ReceivedPacket+0x676>
				MiMAC_DiscardPacket();
    98b2:	4b20      	ldr	r3, [pc, #128]	; (9934 <MiMAC_ReceivedPacket+0x6f0>)
    98b4:	4798      	blx	r3
				return false;
    98b6:	2400      	movs	r4, #0
    98b8:	e4e2      	b.n	9280 <MiMAC_ReceivedPacket+0x3c>
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    98ba:	4b29      	ldr	r3, [pc, #164]	; (9960 <MiMAC_ReceivedPacket+0x71c>)
    98bc:	781b      	ldrb	r3, [r3, #0]
    98be:	2b00      	cmp	r3, #0
    98c0:	d0f7      	beq.n	98b2 <MiMAC_ReceivedPacket+0x66e>
					DataTxAckTimer.Val = 0;
    98c2:	2400      	movs	r4, #0
    98c4:	4b27      	ldr	r3, [pc, #156]	; (9964 <MiMAC_ReceivedPacket+0x720>)
    98c6:	601c      	str	r4, [r3, #0]
					PHY_DataConf(SUCCESS); 
    98c8:	2000      	movs	r0, #0
    98ca:	4b27      	ldr	r3, [pc, #156]	; (9968 <MiMAC_ReceivedPacket+0x724>)
    98cc:	4798      	blx	r3
					AckReqData = 0;
    98ce:	4b24      	ldr	r3, [pc, #144]	; (9960 <MiMAC_ReceivedPacket+0x71c>)
    98d0:	701c      	strb	r4, [r3, #0]
    98d2:	e7ee      	b.n	98b2 <MiMAC_ReceivedPacket+0x66e>
				if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    98d4:	0201      	lsls	r1, r0, #8
    98d6:	1809      	adds	r1, r1, r0
    98d8:	4b13      	ldr	r3, [pc, #76]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    98da:	185b      	adds	r3, r3, r1
    98dc:	4914      	ldr	r1, [pc, #80]	; (9930 <MiMAC_ReceivedPacket+0x6ec>)
    98de:	7849      	ldrb	r1, [r1, #1]
    98e0:	7a1b      	ldrb	r3, [r3, #8]
    98e2:	4299      	cmp	r1, r3
    98e4:	d000      	beq.n	98e8 <MiMAC_ReceivedPacket+0x6a4>
    98e6:	e598      	b.n	941a <MiMAC_ReceivedPacket+0x1d6>
    98e8:	4b11      	ldr	r3, [pc, #68]	; (9930 <MiMAC_ReceivedPacket+0x6ec>)
    98ea:	781b      	ldrb	r3, [r3, #0]
    98ec:	42a3      	cmp	r3, r4
    98ee:	d000      	beq.n	98f2 <MiMAC_ReceivedPacket+0x6ae>
    98f0:	e593      	b.n	941a <MiMAC_ReceivedPacket+0x1d6>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    98f2:	490e      	ldr	r1, [pc, #56]	; (992c <MiMAC_ReceivedPacket+0x6e8>)
    98f4:	4c0c      	ldr	r4, [pc, #48]	; (9928 <MiMAC_ReceivedPacket+0x6e4>)
    98f6:	0203      	lsls	r3, r0, #8
    98f8:	1818      	adds	r0, r3, r0
    98fa:	1823      	adds	r3, r4, r0
    98fc:	795d      	ldrb	r5, [r3, #5]
    98fe:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    9900:	799b      	ldrb	r3, [r3, #6]
    9902:	744b      	strb	r3, [r1, #17]
    9904:	0213      	lsls	r3, r2, #8
    9906:	189a      	adds	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    9908:	0013      	movs	r3, r2
    990a:	3309      	adds	r3, #9
    990c:	191b      	adds	r3, r3, r4
    990e:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    9910:	5d03      	ldrb	r3, [r0, r4]
    9912:	3b13      	subs	r3, #19
    9914:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    9916:	3211      	adds	r2, #17
    9918:	1912      	adds	r2, r2, r4
    991a:	608a      	str	r2, [r1, #8]
    991c:	e5ae      	b.n	947c <MiMAC_ReceivedPacket+0x238>
			BankIndex = i;
    991e:	2200      	movs	r2, #0
    9920:	4b05      	ldr	r3, [pc, #20]	; (9938 <MiMAC_ReceivedPacket+0x6f4>)
    9922:	701a      	strb	r2, [r3, #0]
    9924:	e4b9      	b.n	929a <MiMAC_ReceivedPacket+0x56>
    9926:	46c0      	nop			; (mov r8, r8)
    9928:	20002198 	.word	0x20002198
    992c:	20002f70 	.word	0x20002f70
    9930:	200025a0 	.word	0x200025a0
    9934:	000091ed 	.word	0x000091ed
    9938:	2000000f 	.word	0x2000000f
    993c:	0000dd29 	.word	0x0000dd29
    9940:	20002190 	.word	0x20002190
    9944:	0000a011 	.word	0x0000a011
    9948:	20002f94 	.word	0x20002f94
    994c:	2000207c 	.word	0x2000207c
    9950:	00008c59 	.word	0x00008c59
    9954:	20002080 	.word	0x20002080
    9958:	00008e5d 	.word	0x00008e5d
    995c:	20001f14 	.word	0x20001f14
    9960:	20000283 	.word	0x20000283
    9964:	2000339c 	.word	0x2000339c
    9968:	00009209 	.word	0x00009209

0000996c <MiMAC_Task>:

void MiMAC_Task(void)
{
    996c:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    996e:	4b0b      	ldr	r3, [pc, #44]	; (999c <MiMAC_Task+0x30>)
    9970:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    9972:	4b0b      	ldr	r3, [pc, #44]	; (99a0 <MiMAC_Task+0x34>)
    9974:	681b      	ldr	r3, [r3, #0]
    9976:	2b00      	cmp	r3, #0
    9978:	d003      	beq.n	9982 <MiMAC_Task+0x16>
    997a:	4a0a      	ldr	r2, [pc, #40]	; (99a4 <MiMAC_Task+0x38>)
    997c:	7812      	ldrb	r2, [r2, #0]
    997e:	2a00      	cmp	r2, #0
    9980:	d100      	bne.n	9984 <MiMAC_Task+0x18>
  {
	  dataConfAvailable = false;
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
  }
}
    9982:	bd10      	pop	{r4, pc}
	  dataConfAvailable = false;
    9984:	2100      	movs	r1, #0
    9986:	4a07      	ldr	r2, [pc, #28]	; (99a4 <MiMAC_Task+0x38>)
    9988:	7011      	strb	r1, [r2, #0]
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    998a:	4a07      	ldr	r2, [pc, #28]	; (99a8 <MiMAC_Task+0x3c>)
    998c:	6812      	ldr	r2, [r2, #0]
    998e:	4907      	ldr	r1, [pc, #28]	; (99ac <MiMAC_Task+0x40>)
    9990:	7809      	ldrb	r1, [r1, #0]
    9992:	4807      	ldr	r0, [pc, #28]	; (99b0 <MiMAC_Task+0x44>)
    9994:	7800      	ldrb	r0, [r0, #0]
    9996:	4798      	blx	r3
}
    9998:	e7f3      	b.n	9982 <MiMAC_Task+0x16>
    999a:	46c0      	nop			; (mov r8, r8)
    999c:	00009e31 	.word	0x00009e31
    99a0:	20000288 	.word	0x20000288
    99a4:	20000286 	.word	0x20000286
    99a8:	20000290 	.word	0x20000290
    99ac:	20002064 	.word	0x20002064
    99b0:	2000028c 	.word	0x2000028c

000099b4 <phySetChannel>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
    99b4:	b500      	push	{lr}
    99b6:	b083      	sub	sp, #12
	uint32_t frequncy_set;
	if(phyChannel) // Based on channel we need to set frequency 
    99b8:	4b2f      	ldr	r3, [pc, #188]	; (9a78 <phySetChannel+0xc4>)
    99ba:	781b      	ldrb	r3, [r3, #0]
    99bc:	2b00      	cmp	r3, #0
    99be:	d007      	beq.n	99d0 <phySetChannel+0x1c>
	{
		switch(phyChannel)
    99c0:	2b19      	cmp	r3, #25
    99c2:	d856      	bhi.n	9a72 <phySetChannel+0xbe>
    99c4:	009b      	lsls	r3, r3, #2
    99c6:	4a2d      	ldr	r2, [pc, #180]	; (9a7c <phySetChannel+0xc8>)
    99c8:	58d3      	ldr	r3, [r2, r3]
    99ca:	469f      	mov	pc, r3
				//break;
			//case 8:
				//frequncy_set = FREQ_786000KHZ;
				//break;
			case 0:
				frequncy_set = FREQ_862000KHZ;
    99cc:	4b2c      	ldr	r3, [pc, #176]	; (9a80 <phySetChannel+0xcc>)
    99ce:	9301      	str	r3, [sp, #4]
				break;				
																									
		}
	}
		
	if(RADIO_SetAttr(CHANNEL_FREQUENCY,(void *)&frequncy_set) == 0)  
    99d0:	a901      	add	r1, sp, #4
    99d2:	2001      	movs	r0, #1
    99d4:	4b2b      	ldr	r3, [pc, #172]	; (9a84 <phySetChannel+0xd0>)
    99d6:	4798      	blx	r3
	{
	}
}
    99d8:	b003      	add	sp, #12
    99da:	bd00      	pop	{pc}
				frequncy_set = FREQ_863000KHZ;
    99dc:	4b2a      	ldr	r3, [pc, #168]	; (9a88 <phySetChannel+0xd4>)
    99de:	9301      	str	r3, [sp, #4]
				break;
    99e0:	e7f6      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_865000KHZ;
    99e2:	4b2a      	ldr	r3, [pc, #168]	; (9a8c <phySetChannel+0xd8>)
    99e4:	9301      	str	r3, [sp, #4]
				break;
    99e6:	e7f3      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_866550KHZ;
    99e8:	4b29      	ldr	r3, [pc, #164]	; (9a90 <phySetChannel+0xdc>)
    99ea:	9301      	str	r3, [sp, #4]
				break;
    99ec:	e7f0      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_867000KHZ;
    99ee:	4b29      	ldr	r3, [pc, #164]	; (9a94 <phySetChannel+0xe0>)
    99f0:	9301      	str	r3, [sp, #4]
				break;			
    99f2:	e7ed      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    99f4:	4b28      	ldr	r3, [pc, #160]	; (9a98 <phySetChannel+0xe4>)
    99f6:	9301      	str	r3, [sp, #4]
				break;
    99f8:	e7ea      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_869525KHZ;
    99fa:	4b28      	ldr	r3, [pc, #160]	; (9a9c <phySetChannel+0xe8>)
    99fc:	9301      	str	r3, [sp, #4]
				break;			
    99fe:	e7e7      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_870000KHZ;
    9a00:	4b27      	ldr	r3, [pc, #156]	; (9aa0 <phySetChannel+0xec>)
    9a02:	9301      	str	r3, [sp, #4]
				break;
    9a04:	e7e4      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_902300KHZ;
    9a06:	4b27      	ldr	r3, [pc, #156]	; (9aa4 <phySetChannel+0xf0>)
    9a08:	9301      	str	r3, [sp, #4]
				break;
    9a0a:	e7e1      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_903000KHZ;
    9a0c:	4b26      	ldr	r3, [pc, #152]	; (9aa8 <phySetChannel+0xf4>)
    9a0e:	9301      	str	r3, [sp, #4]
				break;
    9a10:	e7de      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_915000KHZ;
    9a12:	4b26      	ldr	r3, [pc, #152]	; (9aac <phySetChannel+0xf8>)
    9a14:	9301      	str	r3, [sp, #4]
				break;
    9a16:	e7db      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_915200KHZ;
    9a18:	4b25      	ldr	r3, [pc, #148]	; (9ab0 <phySetChannel+0xfc>)
    9a1a:	9301      	str	r3, [sp, #4]
				break;
    9a1c:	e7d8      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_915900KHZ;
    9a1e:	4b25      	ldr	r3, [pc, #148]	; (9ab4 <phySetChannel+0x100>)
    9a20:	9301      	str	r3, [sp, #4]
				break;
    9a22:	e7d5      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_920000KHZ;
    9a24:	4b24      	ldr	r3, [pc, #144]	; (9ab8 <phySetChannel+0x104>)
    9a26:	9301      	str	r3, [sp, #4]
				break;
    9a28:	e7d2      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_920900KHZ;
    9a2a:	4b24      	ldr	r3, [pc, #144]	; (9abc <phySetChannel+0x108>)
    9a2c:	9301      	str	r3, [sp, #4]
				break;
    9a2e:	e7cf      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_921900KHZ;
    9a30:	4b23      	ldr	r3, [pc, #140]	; (9ac0 <phySetChannel+0x10c>)
    9a32:	9301      	str	r3, [sp, #4]
				break;
    9a34:	e7cc      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_922000KHZ;
    9a36:	4b23      	ldr	r3, [pc, #140]	; (9ac4 <phySetChannel+0x110>)
    9a38:	9301      	str	r3, [sp, #4]
				break;
    9a3a:	e7c9      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_922100KHZ;
    9a3c:	4b22      	ldr	r3, [pc, #136]	; (9ac8 <phySetChannel+0x114>)
    9a3e:	9301      	str	r3, [sp, #4]
				break;
    9a40:	e7c6      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_923000KHZ;
    9a42:	4b22      	ldr	r3, [pc, #136]	; (9acc <phySetChannel+0x118>)
    9a44:	9301      	str	r3, [sp, #4]
				break;
    9a46:	e7c3      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_923200KHZ;
    9a48:	4b21      	ldr	r3, [pc, #132]	; (9ad0 <phySetChannel+0x11c>)
    9a4a:	9301      	str	r3, [sp, #4]
				break;
    9a4c:	e7c0      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_923300KHZ;
    9a4e:	4b21      	ldr	r3, [pc, #132]	; (9ad4 <phySetChannel+0x120>)
    9a50:	9301      	str	r3, [sp, #4]
				break;
    9a52:	e7bd      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_925000KHZ;
    9a54:	4b20      	ldr	r3, [pc, #128]	; (9ad8 <phySetChannel+0x124>)
    9a56:	9301      	str	r3, [sp, #4]
				break;		
    9a58:	e7ba      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_927500KHZ;
    9a5a:	4b20      	ldr	r3, [pc, #128]	; (9adc <phySetChannel+0x128>)
    9a5c:	9301      	str	r3, [sp, #4]
				break;
    9a5e:	e7b7      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_928000KHZ;
    9a60:	4b1f      	ldr	r3, [pc, #124]	; (9ae0 <phySetChannel+0x12c>)
    9a62:	9301      	str	r3, [sp, #4]
				break;
    9a64:	e7b4      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_928500KHZ;
    9a66:	4b1f      	ldr	r3, [pc, #124]	; (9ae4 <phySetChannel+0x130>)
    9a68:	9301      	str	r3, [sp, #4]
				break;
    9a6a:	e7b1      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_1020000KHZ;
    9a6c:	4b1e      	ldr	r3, [pc, #120]	; (9ae8 <phySetChannel+0x134>)
    9a6e:	9301      	str	r3, [sp, #4]
				break;
    9a70:	e7ae      	b.n	99d0 <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    9a72:	4b09      	ldr	r3, [pc, #36]	; (9a98 <phySetChannel+0xe4>)
    9a74:	9301      	str	r3, [sp, #4]
				break;				
    9a76:	e7ab      	b.n	99d0 <phySetChannel+0x1c>
    9a78:	20000294 	.word	0x20000294
    9a7c:	00016b14 	.word	0x00016b14
    9a80:	33611380 	.word	0x33611380
    9a84:	0000cb1d 	.word	0x0000cb1d
    9a88:	337055c0 	.word	0x337055c0
    9a8c:	338eda40 	.word	0x338eda40
    9a90:	33a680f0 	.word	0x33a680f0
    9a94:	33ad5ec0 	.word	0x33ad5ec0
    9a98:	33be27a0 	.word	0x33be27a0
    9a9c:	33d3e608 	.word	0x33d3e608
    9aa0:	33db2580 	.word	0x33db2580
    9aa4:	35c80160 	.word	0x35c80160
    9aa8:	35d2afc0 	.word	0x35d2afc0
    9aac:	3689cac0 	.word	0x3689cac0
    9ab0:	368cd800 	.word	0x368cd800
    9ab4:	36978660 	.word	0x36978660
    9ab8:	36d61600 	.word	0x36d61600
    9abc:	36e3d1a0 	.word	0x36e3d1a0
    9ac0:	36f313e0 	.word	0x36f313e0
    9ac4:	36f49a80 	.word	0x36f49a80
    9ac8:	36f62120 	.word	0x36f62120
    9acc:	3703dcc0 	.word	0x3703dcc0
    9ad0:	3706ea00 	.word	0x3706ea00
    9ad4:	370870a0 	.word	0x370870a0
    9ad8:	37226140 	.word	0x37226140
    9adc:	374886e0 	.word	0x374886e0
    9ae0:	37502800 	.word	0x37502800
    9ae4:	3757c920 	.word	0x3757c920
    9ae8:	3ccbf700 	.word	0x3ccbf700

00009aec <radioCallback>:
{
    9aec:	b570      	push	{r4, r5, r6, lr}
    9aee:	b082      	sub	sp, #8
    9af0:	0004      	movs	r4, r0
    9af2:	000d      	movs	r5, r1
	callbackBackup = callback;
    9af4:	4b3e      	ldr	r3, [pc, #248]	; (9bf0 <radioCallback+0x104>)
    9af6:	7018      	strb	r0, [r3, #0]
	int16_t rssi_readVal=0;
    9af8:	466b      	mov	r3, sp
    9afa:	1c98      	adds	r0, r3, #2
    9afc:	2300      	movs	r3, #0
    9afe:	8003      	strh	r3, [r0, #0]
	Radio_ReadRssi(&rssi_readVal);
    9b00:	4b3c      	ldr	r3, [pc, #240]	; (9bf4 <radioCallback+0x108>)
    9b02:	4798      	blx	r3
	switch (callback)
    9b04:	2c10      	cmp	r4, #16
    9b06:	d853      	bhi.n	9bb0 <radioCallback+0xc4>
    9b08:	00a4      	lsls	r4, r4, #2
    9b0a:	4b3b      	ldr	r3, [pc, #236]	; (9bf8 <radioCallback+0x10c>)
    9b0c:	591b      	ldr	r3, [r3, r4]
    9b0e:	469f      	mov	pc, r3
					if (RxBuffer[i].PayloadLen == 0)
    9b10:	4b3a      	ldr	r3, [pc, #232]	; (9bfc <radioCallback+0x110>)
    9b12:	781a      	ldrb	r2, [r3, #0]
    9b14:	2a00      	cmp	r2, #0
    9b16:	d00e      	beq.n	9b36 <radioCallback+0x4a>
    9b18:	2302      	movs	r3, #2
    9b1a:	33ff      	adds	r3, #255	; 0xff
    9b1c:	4a37      	ldr	r2, [pc, #220]	; (9bfc <radioCallback+0x110>)
    9b1e:	5cd3      	ldrb	r3, [r2, r3]
    9b20:	2b00      	cmp	r3, #0
    9b22:	d04e      	beq.n	9bc2 <radioCallback+0xd6>
    9b24:	4b36      	ldr	r3, [pc, #216]	; (9c00 <radioCallback+0x114>)
    9b26:	5cd3      	ldrb	r3, [r2, r3]
    9b28:	2b00      	cmp	r3, #0
    9b2a:	d04c      	beq.n	9bc6 <radioCallback+0xda>
    9b2c:	4b35      	ldr	r3, [pc, #212]	; (9c04 <radioCallback+0x118>)
    9b2e:	5cd3      	ldrb	r3, [r2, r3]
	uint8_t i,RxBank=0xFF;
    9b30:	22ff      	movs	r2, #255	; 0xff
					if (RxBuffer[i].PayloadLen == 0)
    9b32:	2b00      	cmp	r3, #0
    9b34:	d043      	beq.n	9bbe <radioCallback+0xd2>
				RxBuffer[RxBank].PayloadLen = callbackRx->RX.bufferLength;
    9b36:	0016      	movs	r6, r2
    9b38:	7a2c      	ldrb	r4, [r5, #8]
    9b3a:	0213      	lsls	r3, r2, #8
    9b3c:	189a      	adds	r2, r3, r2
    9b3e:	4b2f      	ldr	r3, [pc, #188]	; (9bfc <radioCallback+0x110>)
    9b40:	54d4      	strb	r4, [r2, r3]
				if (RxBuffer[RxBank].PayloadLen < (RX_PACKET_SIZE - 4))			
    9b42:	2cfa      	cmp	r4, #250	; 0xfa
    9b44:	d80d      	bhi.n	9b62 <radioCallback+0x76>
    9b46:	2300      	movs	r3, #0
						RxBuffer[RxBank].Payload[i] = callbackRx->RX.buffer[i];
    9b48:	0232      	lsls	r2, r6, #8
    9b4a:	1992      	adds	r2, r2, r6
    9b4c:	482b      	ldr	r0, [pc, #172]	; (9bfc <radioCallback+0x110>)
    9b4e:	1880      	adds	r0, r0, r2
    9b50:	686a      	ldr	r2, [r5, #4]
    9b52:	5cd1      	ldrb	r1, [r2, r3]
    9b54:	18c2      	adds	r2, r0, r3
    9b56:	7091      	strb	r1, [r2, #2]
					for (i = 0; i <= callbackRx->RX.bufferLength; i++)
    9b58:	3301      	adds	r3, #1
    9b5a:	b2db      	uxtb	r3, r3
    9b5c:	7a2a      	ldrb	r2, [r5, #8]
    9b5e:	429a      	cmp	r2, r3
    9b60:	d2f6      	bcs.n	9b50 <radioCallback+0x64>
				RxBuffer[RxBank].PayloadLen +=4;
    9b62:	4b26      	ldr	r3, [pc, #152]	; (9bfc <radioCallback+0x110>)
    9b64:	0232      	lsls	r2, r6, #8
    9b66:	1992      	adds	r2, r2, r6
    9b68:	3404      	adds	r4, #4
    9b6a:	54d4      	strb	r4, [r2, r3]
				rssi_readVal = radioConfiguration.packetRSSI;
    9b6c:	2156      	movs	r1, #86	; 0x56
    9b6e:	4826      	ldr	r0, [pc, #152]	; (9c08 <radioCallback+0x11c>)
    9b70:	5e41      	ldrsh	r1, [r0, r1]
    9b72:	4668      	mov	r0, sp
    9b74:	8041      	strh	r1, [r0, #2]
				RxBuffer[RxBank].radioRSSI = rssi_readVal;						
    9b76:	189b      	adds	r3, r3, r2
    9b78:	7059      	strb	r1, [r3, #1]
				if(RxBuffer[RxBank].Payload[0] & 0x20)
    9b7a:	789b      	ldrb	r3, [r3, #2]
    9b7c:	069b      	lsls	r3, r3, #26
    9b7e:	d524      	bpl.n	9bca <radioCallback+0xde>
					RadioReceiveParam.action = RECEIVE_STOP;					
    9b80:	a801      	add	r0, sp, #4
    9b82:	2301      	movs	r3, #1
    9b84:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    9b86:	2300      	movs	r3, #0
    9b88:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);
    9b8a:	4b20      	ldr	r3, [pc, #128]	; (9c0c <radioCallback+0x120>)
    9b8c:	4798      	blx	r3
    9b8e:	e00f      	b.n	9bb0 <radioCallback+0xc4>
			if((!AckReqData)||(callbackRx->status != ERR_NONE))
    9b90:	4b1f      	ldr	r3, [pc, #124]	; (9c10 <radioCallback+0x124>)
    9b92:	781b      	ldrb	r3, [r3, #0]
    9b94:	2b00      	cmp	r3, #0
    9b96:	d002      	beq.n	9b9e <radioCallback+0xb2>
    9b98:	782b      	ldrb	r3, [r5, #0]
    9b9a:	2b00      	cmp	r3, #0
    9b9c:	d00a      	beq.n	9bb4 <radioCallback+0xc8>
				PHY_DataConf(callbackRx->status); // Need to convert LoRa status to MiWi status
    9b9e:	7828      	ldrb	r0, [r5, #0]
    9ba0:	4b1c      	ldr	r3, [pc, #112]	; (9c14 <radioCallback+0x128>)
    9ba2:	4798      	blx	r3
			RadioReceiveParam.action = RECEIVE_START;
    9ba4:	a801      	add	r0, sp, #4
    9ba6:	2300      	movs	r3, #0
    9ba8:	7003      	strb	r3, [r0, #0]
			RadioReceiveParam.rxWindowSize = 0;
    9baa:	8043      	strh	r3, [r0, #2]
			RADIO_Receive(&RadioReceiveParam);
    9bac:	4b17      	ldr	r3, [pc, #92]	; (9c0c <radioCallback+0x120>)
    9bae:	4798      	blx	r3
}
    9bb0:	b002      	add	sp, #8
    9bb2:	bd70      	pop	{r4, r5, r6, pc}
				DataTxAckTimer.Val = MiWi_TickGet();
    9bb4:	4b18      	ldr	r3, [pc, #96]	; (9c18 <radioCallback+0x12c>)
    9bb6:	4798      	blx	r3
    9bb8:	4b18      	ldr	r3, [pc, #96]	; (9c1c <radioCallback+0x130>)
    9bba:	6018      	str	r0, [r3, #0]
    9bbc:	e7f2      	b.n	9ba4 <radioCallback+0xb8>
				for (i = 0; i < BANK_SIZE; i++)
    9bbe:	3afc      	subs	r2, #252	; 0xfc
    9bc0:	e7b9      	b.n	9b36 <radioCallback+0x4a>
    9bc2:	2201      	movs	r2, #1
    9bc4:	e7b7      	b.n	9b36 <radioCallback+0x4a>
    9bc6:	2202      	movs	r2, #2
    9bc8:	e7b5      	b.n	9b36 <radioCallback+0x4a>
					RadioReceiveParam.action = RECEIVE_START;
    9bca:	a801      	add	r0, sp, #4
    9bcc:	2300      	movs	r3, #0
    9bce:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    9bd0:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);	
    9bd2:	4b0e      	ldr	r3, [pc, #56]	; (9c0c <radioCallback+0x120>)
    9bd4:	4798      	blx	r3
    9bd6:	e7eb      	b.n	9bb0 <radioCallback+0xc4>
				RadioReceiveParam.action = RECEIVE_START;
    9bd8:	ac01      	add	r4, sp, #4
    9bda:	2300      	movs	r3, #0
    9bdc:	7023      	strb	r3, [r4, #0]
				RadioReceiveParam.rxWindowSize = 0;
    9bde:	8063      	strh	r3, [r4, #2]
				PHY_DataConf(FAILURE);											
    9be0:	2001      	movs	r0, #1
    9be2:	4b0c      	ldr	r3, [pc, #48]	; (9c14 <radioCallback+0x128>)
    9be4:	4798      	blx	r3
				RADIO_Receive(&RadioReceiveParam);
    9be6:	0020      	movs	r0, r4
    9be8:	4b08      	ldr	r3, [pc, #32]	; (9c0c <radioCallback+0x120>)
    9bea:	4798      	blx	r3
}
    9bec:	e7e0      	b.n	9bb0 <radioCallback+0xc4>
    9bee:	46c0      	nop			; (mov r8, r8)
    9bf0:	2000218f 	.word	0x2000218f
    9bf4:	0000c3d9 	.word	0x0000c3d9
    9bf8:	00016b7c 	.word	0x00016b7c
    9bfc:	20002198 	.word	0x20002198
    9c00:	00000202 	.word	0x00000202
    9c04:	00000303 	.word	0x00000303
    9c08:	200037b0 	.word	0x200037b0
    9c0c:	0000dd29 	.word	0x0000dd29
    9c10:	20000283 	.word	0x20000283
    9c14:	00009209 	.word	0x00009209
    9c18:	0000ac59 	.word	0x0000ac59
    9c1c:	2000339c 	.word	0x2000339c

00009c20 <PHY_Init>:
{
    9c20:	b510      	push	{r4, lr}
    HAL_RadioInit();
    9c22:	4b06      	ldr	r3, [pc, #24]	; (9c3c <PHY_Init+0x1c>)
    9c24:	4798      	blx	r3
    AESInit();	
    9c26:	4b06      	ldr	r3, [pc, #24]	; (9c40 <PHY_Init+0x20>)
    9c28:	4798      	blx	r3
	RADIO_Init();
    9c2a:	4b06      	ldr	r3, [pc, #24]	; (9c44 <PHY_Init+0x24>)
    9c2c:	4798      	blx	r3
	RADIO_SetAttr(RADIO_CALLBACK, (void *)&radioCallback);
    9c2e:	4906      	ldr	r1, [pc, #24]	; (9c48 <PHY_Init+0x28>)
    9c30:	201a      	movs	r0, #26
    9c32:	4b06      	ldr	r3, [pc, #24]	; (9c4c <PHY_Init+0x2c>)
    9c34:	4798      	blx	r3
   RADIO_InitDefaultAttributes();				
    9c36:	4b06      	ldr	r3, [pc, #24]	; (9c50 <PHY_Init+0x30>)
    9c38:	4798      	blx	r3
}
    9c3a:	bd10      	pop	{r4, pc}
    9c3c:	0000add5 	.word	0x0000add5
    9c40:	0000b89d 	.word	0x0000b89d
    9c44:	0000cd19 	.word	0x0000cd19
    9c48:	00009aed 	.word	0x00009aed
    9c4c:	0000cb1d 	.word	0x0000cb1d
    9c50:	0000db35 	.word	0x0000db35

00009c54 <PHY_SetRxState>:
{
    9c54:	b510      	push	{r4, lr}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
	RADIO_RxHandler();
    9c56:	4b01      	ldr	r3, [pc, #4]	; (9c5c <PHY_SetRxState+0x8>)
    9c58:	4798      	blx	r3
}
    9c5a:	bd10      	pop	{r4, pc}
    9c5c:	0000da1d 	.word	0x0000da1d

00009c60 <PHY_SetPanId>:
{
    9c60:	b082      	sub	sp, #8
	DevPanId[0]=d[0];
    9c62:	b2c2      	uxtb	r2, r0
    9c64:	4b02      	ldr	r3, [pc, #8]	; (9c70 <PHY_SetPanId+0x10>)
    9c66:	701a      	strb	r2, [r3, #0]
	DevPanId[1]=d[1];
    9c68:	0a00      	lsrs	r0, r0, #8
    9c6a:	7058      	strb	r0, [r3, #1]
}
    9c6c:	b002      	add	sp, #8
    9c6e:	4770      	bx	lr
    9c70:	2000259c 	.word	0x2000259c

00009c74 <PHY_SetShortAddr>:
{
    9c74:	b082      	sub	sp, #8
	DevShortAddress[0]=d[0];
    9c76:	b2c2      	uxtb	r2, r0
    9c78:	4b02      	ldr	r3, [pc, #8]	; (9c84 <PHY_SetShortAddr+0x10>)
    9c7a:	701a      	strb	r2, [r3, #0]
	DevShortAddress[1]=d[1];
    9c7c:	0a00      	lsrs	r0, r0, #8
    9c7e:	7058      	strb	r0, [r3, #1]
}
    9c80:	b002      	add	sp, #8
    9c82:	4770      	bx	lr
    9c84:	200025a0 	.word	0x200025a0

00009c88 <PHY_SetTxPower>:
{
    9c88:	b500      	push	{lr}
    9c8a:	b083      	sub	sp, #12
	reg = txPower;
    9c8c:	466b      	mov	r3, sp
    9c8e:	71d8      	strb	r0, [r3, #7]
	if(reg > 15)
    9c90:	280f      	cmp	r0, #15
    9c92:	d813      	bhi.n	9cbc <PHY_SetTxPower+0x34>
		PaBoost = DISABLED;
    9c94:	466b      	mov	r3, sp
    9c96:	1d99      	adds	r1, r3, #6
    9c98:	2300      	movs	r3, #0
    9c9a:	700b      	strb	r3, [r1, #0]
		RADIO_SetAttr(PABOOST, (void *)&PaBoost);
    9c9c:	2008      	movs	r0, #8
    9c9e:	4b0b      	ldr	r3, [pc, #44]	; (9ccc <PHY_SetTxPower+0x44>)
    9ca0:	4798      	blx	r3
		reg &= 0x0F ;
    9ca2:	466b      	mov	r3, sp
    9ca4:	1dda      	adds	r2, r3, #7
    9ca6:	79d9      	ldrb	r1, [r3, #7]
    9ca8:	230f      	movs	r3, #15
    9caa:	400b      	ands	r3, r1
    9cac:	7013      	strb	r3, [r2, #0]
	RADIO_SetAttr(OUTPUT_POWER, &reg);
    9cae:	466b      	mov	r3, sp
    9cb0:	1dd9      	adds	r1, r3, #7
    9cb2:	2004      	movs	r0, #4
    9cb4:	4b05      	ldr	r3, [pc, #20]	; (9ccc <PHY_SetTxPower+0x44>)
    9cb6:	4798      	blx	r3
}
    9cb8:	b003      	add	sp, #12
    9cba:	bd00      	pop	{pc}
		PaBoost = ENABLED;
    9cbc:	466b      	mov	r3, sp
    9cbe:	1d99      	adds	r1, r3, #6
    9cc0:	2301      	movs	r3, #1
    9cc2:	700b      	strb	r3, [r1, #0]
		RADIO_SetAttr(PABOOST, (void *)&PaBoost);
    9cc4:	2008      	movs	r0, #8
    9cc6:	4b01      	ldr	r3, [pc, #4]	; (9ccc <PHY_SetTxPower+0x44>)
    9cc8:	4798      	blx	r3
    9cca:	e7f0      	b.n	9cae <PHY_SetTxPower+0x26>
    9ccc:	0000cb1d 	.word	0x0000cb1d

00009cd0 <PHY_Sleep>:
{
    9cd0:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP != phyState)
    9cd2:	4b09      	ldr	r3, [pc, #36]	; (9cf8 <PHY_Sleep+0x28>)
    9cd4:	781b      	ldrb	r3, [r3, #0]
    9cd6:	2b02      	cmp	r3, #2
    9cd8:	d00d      	beq.n	9cf6 <PHY_Sleep+0x26>
		Radio_WriteMode(MODE_SLEEP, radioConfiguration.modulation, 0);
    9cda:	2334      	movs	r3, #52	; 0x34
    9cdc:	4a07      	ldr	r2, [pc, #28]	; (9cfc <PHY_Sleep+0x2c>)
    9cde:	5cd1      	ldrb	r1, [r2, r3]
    9ce0:	2200      	movs	r2, #0
    9ce2:	2000      	movs	r0, #0
    9ce4:	4b06      	ldr	r3, [pc, #24]	; (9d00 <PHY_Sleep+0x30>)
    9ce6:	4798      	blx	r3
		HAL_TCXOPowerOff();
    9ce8:	4b06      	ldr	r3, [pc, #24]	; (9d04 <PHY_Sleep+0x34>)
    9cea:	4798      	blx	r3
		HAL_RadioDeInit();
    9cec:	4b06      	ldr	r3, [pc, #24]	; (9d08 <PHY_Sleep+0x38>)
    9cee:	4798      	blx	r3
		phyState = PHY_STATE_SLEEP;	
    9cf0:	2202      	movs	r2, #2
    9cf2:	4b01      	ldr	r3, [pc, #4]	; (9cf8 <PHY_Sleep+0x28>)
    9cf4:	701a      	strb	r2, [r3, #0]
}
    9cf6:	bd10      	pop	{r4, pc}
    9cf8:	20000295 	.word	0x20000295
    9cfc:	200037b0 	.word	0x200037b0
    9d00:	0000c215 	.word	0x0000c215
    9d04:	0000b151 	.word	0x0000b151
    9d08:	0000af8d 	.word	0x0000af8d

00009d0c <PHY_Wakeup>:
{
    9d0c:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP == phyState)
    9d0e:	4b0c      	ldr	r3, [pc, #48]	; (9d40 <PHY_Wakeup+0x34>)
    9d10:	781b      	ldrb	r3, [r3, #0]
    9d12:	2b02      	cmp	r3, #2
    9d14:	d000      	beq.n	9d18 <PHY_Wakeup+0xc>
}
    9d16:	bd10      	pop	{r4, pc}
		HAL_TCXOPowerOn();
    9d18:	4b0a      	ldr	r3, [pc, #40]	; (9d44 <PHY_Wakeup+0x38>)
    9d1a:	4798      	blx	r3
		HAL_RadioInit();
    9d1c:	4b0a      	ldr	r3, [pc, #40]	; (9d48 <PHY_Wakeup+0x3c>)
    9d1e:	4798      	blx	r3
		RADIO_Reset();
    9d20:	4b0a      	ldr	r3, [pc, #40]	; (9d4c <PHY_Wakeup+0x40>)
    9d22:	4798      	blx	r3
		Radio_WriteMode(MODE_STANDBY, radioConfiguration.modulation, 0);
    9d24:	2334      	movs	r3, #52	; 0x34
    9d26:	4a0a      	ldr	r2, [pc, #40]	; (9d50 <PHY_Wakeup+0x44>)
    9d28:	5cd1      	ldrb	r1, [r2, r3]
    9d2a:	2200      	movs	r2, #0
    9d2c:	2001      	movs	r0, #1
    9d2e:	4b09      	ldr	r3, [pc, #36]	; (9d54 <PHY_Wakeup+0x48>)
    9d30:	4798      	blx	r3
	RADIO_RxHandler();
    9d32:	4b09      	ldr	r3, [pc, #36]	; (9d58 <PHY_Wakeup+0x4c>)
    9d34:	4798      	blx	r3
	 	phyState = PHY_STATE_IDLE;
    9d36:	2201      	movs	r2, #1
    9d38:	4b01      	ldr	r3, [pc, #4]	; (9d40 <PHY_Wakeup+0x34>)
    9d3a:	701a      	strb	r2, [r3, #0]
}
    9d3c:	e7eb      	b.n	9d16 <PHY_Wakeup+0xa>
    9d3e:	46c0      	nop			; (mov r8, r8)
    9d40:	20000295 	.word	0x20000295
    9d44:	0000b135 	.word	0x0000b135
    9d48:	0000add5 	.word	0x0000add5
    9d4c:	0000afad 	.word	0x0000afad
    9d50:	200037b0 	.word	0x200037b0
    9d54:	0000c215 	.word	0x0000c215
    9d58:	0000da1d 	.word	0x0000da1d

00009d5c <PHY_SetChannel>:
{
    9d5c:	b510      	push	{r4, lr}
	phyChannel = channel;
    9d5e:	4b06      	ldr	r3, [pc, #24]	; (9d78 <PHY_SetChannel+0x1c>)
    9d60:	7018      	strb	r0, [r3, #0]
	if (PHY_STATE_SLEEP == phyState)
    9d62:	4b06      	ldr	r3, [pc, #24]	; (9d7c <PHY_SetChannel+0x20>)
    9d64:	781b      	ldrb	r3, [r3, #0]
    9d66:	2b02      	cmp	r3, #2
    9d68:	d002      	beq.n	9d70 <PHY_SetChannel+0x14>
	phySetChannel();
    9d6a:	4b05      	ldr	r3, [pc, #20]	; (9d80 <PHY_SetChannel+0x24>)
    9d6c:	4798      	blx	r3
}
    9d6e:	bd10      	pop	{r4, pc}
		PHY_Wakeup();
    9d70:	4b04      	ldr	r3, [pc, #16]	; (9d84 <PHY_SetChannel+0x28>)
    9d72:	4798      	blx	r3
    9d74:	e7f9      	b.n	9d6a <PHY_SetChannel+0xe>
    9d76:	46c0      	nop			; (mov r8, r8)
    9d78:	20000294 	.word	0x20000294
    9d7c:	20000295 	.word	0x20000295
    9d80:	000099b5 	.word	0x000099b5
    9d84:	00009d0d 	.word	0x00009d0d

00009d88 <PHY_DataReq>:
{
    9d88:	b500      	push	{lr}
    9d8a:	b085      	sub	sp, #20
		RadioTransmitParam.bufferLen = data[0];
    9d8c:	7803      	ldrb	r3, [r0, #0]
    9d8e:	aa02      	add	r2, sp, #8
    9d90:	7013      	strb	r3, [r2, #0]
		for (count = 0; count < data[0]; count++)
    9d92:	2b00      	cmp	r3, #0
    9d94:	d009      	beq.n	9daa <PHY_DataReq+0x22>
    9d96:	2300      	movs	r3, #0
			DataRequestBuffer[count] = data[1+count];
    9d98:	4912      	ldr	r1, [pc, #72]	; (9de4 <PHY_DataReq+0x5c>)
    9d9a:	18c2      	adds	r2, r0, r3
    9d9c:	7852      	ldrb	r2, [r2, #1]
    9d9e:	54ca      	strb	r2, [r1, r3]
		for (count = 0; count < data[0]; count++)
    9da0:	3301      	adds	r3, #1
    9da2:	b2db      	uxtb	r3, r3
    9da4:	7802      	ldrb	r2, [r0, #0]
    9da6:	429a      	cmp	r2, r3
    9da8:	d8f7      	bhi.n	9d9a <PHY_DataReq+0x12>
		RadioTransmitParam.bufferPtr = (uint8_t *)&DataRequestBuffer;
    9daa:	4b0e      	ldr	r3, [pc, #56]	; (9de4 <PHY_DataReq+0x5c>)
    9dac:	9303      	str	r3, [sp, #12]
		RadioSetState(RADIO_STATE_IDLE);
    9dae:	2001      	movs	r0, #1
    9db0:	4b0d      	ldr	r3, [pc, #52]	; (9de8 <PHY_DataReq+0x60>)
    9db2:	4798      	blx	r3
		phySetChannel();
    9db4:	4b0d      	ldr	r3, [pc, #52]	; (9dec <PHY_DataReq+0x64>)
    9db6:	4798      	blx	r3
		localRadioLBTParams.lbtScanPeriod = 5 ;
    9db8:	2305      	movs	r3, #5
    9dba:	466a      	mov	r2, sp
    9dbc:	8013      	strh	r3, [r2, #0]
		localRadioLBTParams.lbtThreshold = -90 ;
    9dbe:	3b5f      	subs	r3, #95	; 0x5f
    9dc0:	8053      	strh	r3, [r2, #2]
		localRadioLBTParams.lbtNumOfSamples = 5;
    9dc2:	2305      	movs	r3, #5
    9dc4:	7113      	strb	r3, [r2, #4]
		localRadioLBTParams.lbtTransmitOn = 0;
    9dc6:	2300      	movs	r3, #0
    9dc8:	7153      	strb	r3, [r2, #5]
		status = RADIO_SetAttr(RADIO_LBT_PARAMS, &localRadioLBTParams);
    9dca:	4669      	mov	r1, sp
    9dcc:	201d      	movs	r0, #29
    9dce:	4b08      	ldr	r3, [pc, #32]	; (9df0 <PHY_DataReq+0x68>)
    9dd0:	4798      	blx	r3
		status = RADIO_Transmit (&RadioTransmitParam);
    9dd2:	a802      	add	r0, sp, #8
    9dd4:	4b07      	ldr	r3, [pc, #28]	; (9df4 <PHY_DataReq+0x6c>)
    9dd6:	4798      	blx	r3
		return (!status);							
    9dd8:	4243      	negs	r3, r0
    9dda:	4158      	adcs	r0, r3
    9ddc:	b2c0      	uxtb	r0, r0
}
    9dde:	b005      	add	sp, #20
    9de0:	bd00      	pop	{pc}
    9de2:	46c0      	nop			; (mov r8, r8)
    9de4:	20002090 	.word	0x20002090
    9de8:	0000d425 	.word	0x0000d425
    9dec:	000099b5 	.word	0x000099b5
    9df0:	0000cb1d 	.word	0x0000cb1d
    9df4:	0000d44d 	.word	0x0000d44d

00009df8 <PHY_RandomReq>:
{
    9df8:	b510      	push	{r4, lr}
	rnd = RADIO_ReadRandom();
    9dfa:	4b03      	ldr	r3, [pc, #12]	; (9e08 <PHY_RandomReq+0x10>)
    9dfc:	4798      	blx	r3
    9dfe:	0004      	movs	r4, r0
	RADIO_RxHandler();
    9e00:	4b02      	ldr	r3, [pc, #8]	; (9e0c <PHY_RandomReq+0x14>)
    9e02:	4798      	blx	r3
}
    9e04:	0020      	movs	r0, r4
    9e06:	bd10      	pop	{r4, pc}
    9e08:	0000c349 	.word	0x0000c349
    9e0c:	0000da1d 	.word	0x0000da1d

00009e10 <PHY_EncryptReq>:
{	
    9e10:	b510      	push	{r4, lr}
	AESEncode(text,key);
    9e12:	4b01      	ldr	r3, [pc, #4]	; (9e18 <PHY_EncryptReq+0x8>)
    9e14:	4798      	blx	r3
}
    9e16:	bd10      	pop	{r4, pc}
    9e18:	0000b7c1 	.word	0x0000b7c1

00009e1c <PHY_SetIEEEAddr>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    9e1c:	2300      	movs	r3, #0
	uint8_t *ptr_to_reg = ieee_addr;

	for (uint8_t i = 0; i < 8; i++)
	{
		DevIEEEaddr[i] = ptr_to_reg[i];
    9e1e:	4903      	ldr	r1, [pc, #12]	; (9e2c <PHY_SetIEEEAddr+0x10>)
    9e20:	5cc2      	ldrb	r2, [r0, r3]
    9e22:	54ca      	strb	r2, [r1, r3]
    9e24:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 8; i++)
    9e26:	2b08      	cmp	r3, #8
    9e28:	d1fa      	bne.n	9e20 <PHY_SetIEEEAddr+0x4>
	}
}
    9e2a:	4770      	bx	lr
    9e2c:	20002190 	.word	0x20002190

00009e30 <PHY_TaskHandler>:
    if (PHY_STATE_SLEEP == phyState)
    {
        return;
    }
	// Handled in DIO interrupts 
}
    9e30:	4770      	bx	lr
    9e32:	Address 0x00009e32 is out of bounds.


00009e34 <CommandConfCallback>:

bool CheckForData(void);

/************************ FUNCTIONS ********************************/
void CommandConfCallback(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
    9e34:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
		//printf("\r\n  Command Conf : Handle %d & Status %02X  ",msgConfHandle , status );
	#endif
    MiMem_Free(msgPointer);
    9e36:	0010      	movs	r0, r2
    9e38:	4b01      	ldr	r3, [pc, #4]	; (9e40 <CommandConfCallback+0xc>)
    9e3a:	4798      	blx	r3
}
    9e3c:	bd10      	pop	{r4, pc}
    9e3e:	46c0      	nop			; (mov r8, r8)
    9e40:	0000aad5 	.word	0x0000aad5

00009e44 <Total_Connections>:
{
    9e44:	2200      	movs	r2, #0
    uint8_t count=0 , i;
    9e46:	2000      	movs	r0, #0
        if (ConnectionTable[i].status.bits.isValid)
    9e48:	4907      	ldr	r1, [pc, #28]	; (9e68 <Total_Connections+0x24>)
    9e4a:	e002      	b.n	9e52 <Total_Connections+0xe>
    9e4c:	3201      	adds	r2, #1
    for (i=0;i<CONNECTION_SIZE;i++)
    9e4e:	2afa      	cmp	r2, #250	; 0xfa
    9e50:	d009      	beq.n	9e66 <Total_Connections+0x22>
        if (ConnectionTable[i].status.bits.isValid)
    9e52:	0093      	lsls	r3, r2, #2
    9e54:	189b      	adds	r3, r3, r2
    9e56:	005b      	lsls	r3, r3, #1
    9e58:	18cb      	adds	r3, r1, r3
    9e5a:	7a1b      	ldrb	r3, [r3, #8]
    9e5c:	09db      	lsrs	r3, r3, #7
    9e5e:	d0f5      	beq.n	9e4c <Total_Connections+0x8>
            count++;
    9e60:	3001      	adds	r0, #1
    9e62:	b2c0      	uxtb	r0, r0
    9e64:	e7f2      	b.n	9e4c <Total_Connections+0x8>
}
    9e66:	4770      	bx	lr
    9e68:	200025a8 	.word	0x200025a8

00009e6c <SendPacket>:
                    INPUT uint8_t* msgPtr,
                    INPUT uint8_t msghandle,
					INPUT bool ackReq,
                    INPUT DataConf_callback_t ConfCallback)
#endif                                        
{ 
    9e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e6e:	46ce      	mov	lr, r9
    9e70:	4647      	mov	r7, r8
    9e72:	b580      	push	{r7, lr}
    9e74:	b08b      	sub	sp, #44	; 0x2c
    9e76:	0005      	movs	r5, r0
    9e78:	468c      	mov	ip, r1
    9e7a:	9205      	str	r2, [sp, #20]
    9e7c:	a812      	add	r0, sp, #72	; 0x48
    9e7e:	7800      	ldrb	r0, [r0, #0]
    9e80:	ac13      	add	r4, sp, #76	; 0x4c
    9e82:	7826      	ldrb	r6, [r4, #0]
    9e84:	ac15      	add	r4, sp, #84	; 0x54
    9e86:	7827      	ldrb	r7, [r4, #0]
    9e88:	ac16      	add	r4, sp, #88	; 0x58
    9e8a:	7822      	ldrb	r2, [r4, #0]
    MAC_TRANS_PARAM tParam;
    bool status;

    tParam.flags.Val = 0;
    9e8c:	2400      	movs	r4, #0
    9e8e:	46a0      	mov	r8, r4
    9e90:	ac07      	add	r4, sp, #28
    9e92:	4641      	mov	r1, r8
    9e94:	7021      	strb	r1, [r4, #0]
    //tParam.flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
	if(isCommand)
    9e96:	2b00      	cmp	r3, #0
    9e98:	d043      	beq.n	9f22 <SendPacket+0xb6>
		tParam.flags.bits.packetType = PACKET_TYPE_COMMAND;
    9e9a:	0023      	movs	r3, r4
    9e9c:	b2cc      	uxtb	r4, r1
    9e9e:	2103      	movs	r1, #3
    9ea0:	438c      	bics	r4, r1
    9ea2:	2101      	movs	r1, #1
    9ea4:	4688      	mov	r8, r1
    9ea6:	4641      	mov	r1, r8
    9ea8:	430c      	orrs	r4, r1
    9eaa:	701c      	strb	r4, [r3, #0]
	else
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
   // tParam.flags.bits.ackReq = (Broadcast) ? 0 : ackReq;
   if(Broadcast)
    9eac:	2d00      	cmp	r5, #0
    9eae:	d13e      	bne.n	9f2e <SendPacket+0xc2>
   {
	tParam.flags.bits.ackReq = 0;
   }
   else
   {
	   tParam.flags.bits.ackReq = ackReq;
    9eb0:	ac07      	add	r4, sp, #28
    9eb2:	2301      	movs	r3, #1
    9eb4:	4013      	ands	r3, r2
    9eb6:	015a      	lsls	r2, r3, #5
    9eb8:	7823      	ldrb	r3, [r4, #0]
    9eba:	2120      	movs	r1, #32
    9ebc:	438b      	bics	r3, r1
    9ebe:	4313      	orrs	r3, r2
    9ec0:	7023      	strb	r3, [r4, #0]
   }
    tParam.flags.bits.broadcast = Broadcast;
    9ec2:	ac07      	add	r4, sp, #28
    9ec4:	2201      	movs	r2, #1
    9ec6:	0013      	movs	r3, r2
    9ec8:	402b      	ands	r3, r5
    9eca:	009b      	lsls	r3, r3, #2
    9ecc:	4698      	mov	r8, r3
    9ece:	7823      	ldrb	r3, [r4, #0]
    9ed0:	2104      	movs	r1, #4
    9ed2:	438b      	bics	r3, r1
    tParam.flags.bits.secEn = SecurityEnabled;
    9ed4:	4010      	ands	r0, r2
    9ed6:	00c0      	lsls	r0, r0, #3
    9ed8:	4641      	mov	r1, r8
    9eda:	430b      	orrs	r3, r1
    9edc:	2108      	movs	r1, #8
    9ede:	438b      	bics	r3, r1
    #if defined(IEEE_802_15_4)
        tParam.altSrcAddr = 0;
    9ee0:	2100      	movs	r1, #0
    9ee2:	7261      	strb	r1, [r4, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    9ee4:	7225      	strb	r5, [r4, #8]
    #endif
    
    #if defined(INFER_DEST_ADDRESS)
        tParam.flags.bits.destPrsnt = 0;
    #else
        tParam.flags.bits.destPrsnt = (Broadcast) ? 0:1;
    9ee6:	2101      	movs	r1, #1
    9ee8:	4688      	mov	r8, r1
    9eea:	4641      	mov	r1, r8
    9eec:	404d      	eors	r5, r1
    9eee:	4015      	ands	r5, r2
    9ef0:	01ad      	lsls	r5, r5, #6
    9ef2:	4318      	orrs	r0, r3
    9ef4:	2340      	movs	r3, #64	; 0x40
    9ef6:	4398      	bics	r0, r3
        else
        {
            tParam.flags.bits.sourcePrsnt = 0;
        }
    #else
        tParam.flags.bits.sourcePrsnt = 1;
    9ef8:	4328      	orrs	r0, r5
    9efa:	3bc0      	subs	r3, #192	; 0xc0
    9efc:	4318      	orrs	r0, r3
    9efe:	7020      	strb	r0, [r4, #0]
    #endif
    
    tParam.DestAddress = DestinationAddress;

    #if defined(IEEE_802_15_4)
        tParam.DestPANID.Val = DestinationPANID.Val;
    9f00:	4663      	mov	r3, ip
    9f02:	8163      	strh	r3, [r4, #10]
    #endif

    status = MiMAC_SendPacket(tParam, msgPtr, msgLen, msghandle, ConfCallback);
    9f04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f06:	9302      	str	r3, [sp, #8]
    9f08:	9701      	str	r7, [sp, #4]
    9f0a:	9600      	str	r6, [sp, #0]
    9f0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9f0e:	9807      	ldr	r0, [sp, #28]
    9f10:	9905      	ldr	r1, [sp, #20]
    9f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9f14:	4c09      	ldr	r4, [pc, #36]	; (9f3c <SendPacket+0xd0>)
    9f16:	47a0      	blx	r4
    
    return status;
}
    9f18:	b00b      	add	sp, #44	; 0x2c
    9f1a:	bc0c      	pop	{r2, r3}
    9f1c:	4690      	mov	r8, r2
    9f1e:	4699      	mov	r9, r3
    9f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
    9f22:	ab07      	add	r3, sp, #28
    9f24:	781c      	ldrb	r4, [r3, #0]
    9f26:	2103      	movs	r1, #3
    9f28:	438c      	bics	r4, r1
    9f2a:	701c      	strb	r4, [r3, #0]
    9f2c:	e7be      	b.n	9eac <SendPacket+0x40>
	tParam.flags.bits.ackReq = 0;
    9f2e:	ac07      	add	r4, sp, #28
    9f30:	7823      	ldrb	r3, [r4, #0]
    9f32:	2220      	movs	r2, #32
    9f34:	4393      	bics	r3, r2
    9f36:	7023      	strb	r3, [r4, #0]
    9f38:	e7c3      	b.n	9ec2 <SendPacket+0x56>
    9f3a:	46c0      	nop			; (mov r8, r8)
    9f3c:	00008e5d 	.word	0x00008e5d

00009f40 <CheckForData>:
     {
    9f40:	b510      	push	{r4, lr}
    9f42:	b086      	sub	sp, #24
        dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_MAC_DATA_REQUEST));
    9f44:	20e0      	movs	r0, #224	; 0xe0
    9f46:	4b13      	ldr	r3, [pc, #76]	; (9f94 <CheckForData+0x54>)
    9f48:	4798      	blx	r3
        if (NULL == dataPtr)
    9f4a:	2800      	cmp	r0, #0
    9f4c:	d020      	beq.n	9f90 <CheckForData+0x50>
        dataPtr[dataLen++] = CMD_MAC_DATA_REQUEST;
    9f4e:	2304      	movs	r3, #4
    9f50:	7003      	strb	r3, [r0, #0]
                if( SendPacket(false, myPANID, ConnectionTable[0].Address, true, false, 
    9f52:	4b11      	ldr	r3, [pc, #68]	; (9f98 <CheckForData+0x58>)
    9f54:	8819      	ldrh	r1, [r3, #0]
    9f56:	4b11      	ldr	r3, [pc, #68]	; (9f9c <CheckForData+0x5c>)
    9f58:	9305      	str	r3, [sp, #20]
    9f5a:	2201      	movs	r2, #1
    9f5c:	9204      	str	r2, [sp, #16]
    9f5e:	2300      	movs	r3, #0
    9f60:	9303      	str	r3, [sp, #12]
    9f62:	9002      	str	r0, [sp, #8]
    9f64:	9201      	str	r2, [sp, #4]
    9f66:	9300      	str	r3, [sp, #0]
    9f68:	3301      	adds	r3, #1
    9f6a:	4a0d      	ldr	r2, [pc, #52]	; (9fa0 <CheckForData+0x60>)
    9f6c:	2000      	movs	r0, #0
    9f6e:	4c0d      	ldr	r4, [pc, #52]	; (9fa4 <CheckForData+0x64>)
    9f70:	47a0      	blx	r4
    9f72:	1e04      	subs	r4, r0, #0
    9f74:	d102      	bne.n	9f7c <CheckForData+0x3c>
     }
    9f76:	0020      	movs	r0, r4
    9f78:	b006      	add	sp, #24
    9f7a:	bd10      	pop	{r4, pc}
            P2PStatus.bits.DataRequesting = 1; 
    9f7c:	4a0a      	ldr	r2, [pc, #40]	; (9fa8 <CheckForData+0x68>)
    9f7e:	7813      	ldrb	r3, [r2, #0]
    9f80:	2104      	movs	r1, #4
    9f82:	430b      	orrs	r3, r1
    9f84:	7013      	strb	r3, [r2, #0]
            DataRequestTimer.Val = MiWi_TickGet();
    9f86:	4b09      	ldr	r3, [pc, #36]	; (9fac <CheckForData+0x6c>)
    9f88:	4798      	blx	r3
    9f8a:	4b09      	ldr	r3, [pc, #36]	; (9fb0 <CheckForData+0x70>)
    9f8c:	6018      	str	r0, [r3, #0]
            return true;
    9f8e:	e7f2      	b.n	9f76 <CheckForData+0x36>
          return false;
    9f90:	2400      	movs	r4, #0
    9f92:	e7f0      	b.n	9f76 <CheckForData+0x36>
    9f94:	0000aa19 	.word	0x0000aa19
    9f98:	20002f88 	.word	0x20002f88
    9f9c:	00009e35 	.word	0x00009e35
    9fa0:	200025a8 	.word	0x200025a8
    9fa4:	00009e6d 	.word	0x00009e6d
    9fa8:	20003380 	.word	0x20003380
    9fac:	0000ac59 	.word	0x0000ac59
    9fb0:	20003388 	.word	0x20003388

00009fb4 <MiApp_SendData>:
     *      None
     *
     *****************************************************************************************/      
    bool MiApp_SendData(uint8_t addr_len, uint8_t *addr, uint8_t msglen, uint8_t *msgpointer, uint8_t msghandle,
                                                            bool ackReq, DataConf_callback_t ConfCallback)
   {
    9fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9fb6:	b087      	sub	sp, #28
    9fb8:	ac0c      	add	r4, sp, #48	; 0x30
    9fba:	7826      	ldrb	r6, [r4, #0]
    9fbc:	ac0d      	add	r4, sp, #52	; 0x34
    9fbe:	7827      	ldrb	r7, [r4, #0]
	    bool broadcast = false;
		uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);	
    9fc0:	784c      	ldrb	r4, [r1, #1]
    9fc2:	780d      	ldrb	r5, [r1, #0]
    9fc4:	46ac      	mov	ip, r5
	    bool broadcast = false;
    9fc6:	2500      	movs	r5, #0
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    9fc8:	2802      	cmp	r0, #2
    9fca:	d011      	beq.n	9ff0 <MiApp_SendData+0x3c>
            return true;
        }    
    #endif
    
    #if defined(IEEE_802_15_4)
        return SendPacket(broadcast, myPANID, addr, false, true, msglen,
    9fcc:	480d      	ldr	r0, [pc, #52]	; (a004 <MiApp_SendData+0x50>)
    9fce:	8800      	ldrh	r0, [r0, #0]
    9fd0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9fd2:	9405      	str	r4, [sp, #20]
    9fd4:	9704      	str	r7, [sp, #16]
    9fd6:	9603      	str	r6, [sp, #12]
    9fd8:	9302      	str	r3, [sp, #8]
    9fda:	9201      	str	r2, [sp, #4]
    9fdc:	2301      	movs	r3, #1
    9fde:	9300      	str	r3, [sp, #0]
    9fe0:	2300      	movs	r3, #0
    9fe2:	000a      	movs	r2, r1
    9fe4:	1c01      	adds	r1, r0, #0
    9fe6:	0028      	movs	r0, r5
    9fe8:	4c07      	ldr	r4, [pc, #28]	; (a008 <MiApp_SendData+0x54>)
    9fea:	47a0      	blx	r4
		 msgpointer, msghandle, ackReq, ConfCallback);
    #else
        return SendPacket(broadcast, addr, false, true, msglen,
		 msgpointer, msghandle, ackReq, ConfCallback);
    #endif
}
    9fec:	b007      	add	sp, #28
    9fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);	
    9ff0:	0220      	lsls	r0, r4, #8
    9ff2:	4460      	add	r0, ip
		if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    9ff4:	b280      	uxth	r0, r0
    9ff6:	4c05      	ldr	r4, [pc, #20]	; (a00c <MiApp_SendData+0x58>)
    9ff8:	46a4      	mov	ip, r4
    9ffa:	4460      	add	r0, ip
    9ffc:	4244      	negs	r4, r0
    9ffe:	4160      	adcs	r0, r4
    a000:	b2c5      	uxtb	r5, r0
    a002:	e7e3      	b.n	9fcc <MiApp_SendData+0x18>
    a004:	20002f88 	.word	0x20002f88
    a008:	00009e6d 	.word	0x00009e6d
    a00c:	ffff0001 	.word	0xffff0001

0000a010 <isSameAddress>:
 *
 * Side Effects:    
 *
 ********************************************************************/
bool    isSameAddress(INPUT uint8_t *Address1, INPUT uint8_t *Address2)
{
    a010:	b510      	push	{r4, lr}
    uint8_t i;
    
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    {
        if( Address1[i] != Address2[i] )
    a012:	7802      	ldrb	r2, [r0, #0]
    a014:	780b      	ldrb	r3, [r1, #0]
    a016:	429a      	cmp	r2, r3
    a018:	d109      	bne.n	a02e <isSameAddress+0x1e>
    a01a:	2301      	movs	r3, #1
    a01c:	5cc4      	ldrb	r4, [r0, r3]
    a01e:	5cca      	ldrb	r2, [r1, r3]
    a020:	4294      	cmp	r4, r2
    a022:	d106      	bne.n	a032 <isSameAddress+0x22>
    a024:	3301      	adds	r3, #1
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    a026:	2b08      	cmp	r3, #8
    a028:	d1f8      	bne.n	a01c <isSameAddress+0xc>
        {
            return false;
        }
    }
    return true;
    a02a:	2001      	movs	r0, #1
}
    a02c:	bd10      	pop	{r4, pc}
            return false;
    a02e:	2000      	movs	r0, #0
    a030:	e7fc      	b.n	a02c <isSameAddress+0x1c>
    a032:	2000      	movs	r0, #0
    a034:	e7fa      	b.n	a02c <isSameAddress+0x1c>
    a036:	Address 0x0000a036 is out of bounds.


0000a038 <MiApp_Set>:


#endif

bool MiApp_Set(miwi_params_t id, uint8_t *value)
{
    a038:	b510      	push	{r4, lr}
    a03a:	000c      	movs	r4, r1
    switch(id)
    a03c:	2800      	cmp	r0, #0
    a03e:	d001      	beq.n	a044 <MiApp_Set+0xc>
     break;

     default:
     break;
   }
    return false;
    a040:	2000      	movs	r0, #0
}
    a042:	bd10      	pop	{r4, pc}
        if( MiMAC_Set(MAC_CHANNEL, value))
    a044:	4b03      	ldr	r3, [pc, #12]	; (a054 <MiApp_Set+0x1c>)
    a046:	4798      	blx	r3
    a048:	2800      	cmp	r0, #0
    a04a:	d0fa      	beq.n	a042 <MiApp_Set+0xa>
          currentChannel = *value;
    a04c:	7822      	ldrb	r2, [r4, #0]
    a04e:	4b02      	ldr	r3, [pc, #8]	; (a058 <MiApp_Set+0x20>)
    a050:	701a      	strb	r2, [r3, #0]
          return true;
    a052:	e7f6      	b.n	a042 <MiApp_Set+0xa>
    a054:	00008dc1 	.word	0x00008dc1
    a058:	20000011 	.word	0x20000011

0000a05c <MiApp_ProtocolInit>:
{
    a05c:	b500      	push	{lr}
    a05e:	b085      	sub	sp, #20
    P2PStatus.Val = 0;
    a060:	2200      	movs	r2, #0
    a062:	4b1c      	ldr	r3, [pc, #112]	; (a0d4 <MiApp_ProtocolInit+0x78>)
    a064:	701a      	strb	r2, [r3, #0]
    a066:	4b1c      	ldr	r3, [pc, #112]	; (a0d8 <MiApp_ProtocolInit+0x7c>)
    a068:	22fa      	movs	r2, #250	; 0xfa
    a06a:	0092      	lsls	r2, r2, #2
    a06c:	1899      	adds	r1, r3, r2
            IncomingFrameCounter[i].Val = 0;
    a06e:	2200      	movs	r2, #0
    a070:	c304      	stmia	r3!, {r2}
        for(i = 0; i < CONNECTION_SIZE; i++)
    a072:	428b      	cmp	r3, r1
    a074:	d1fc      	bne.n	a070 <MiApp_ProtocolInit+0x14>
            myPANID.Val = MY_PAN_ID; 
    a076:	4a19      	ldr	r2, [pc, #100]	; (a0dc <MiApp_ProtocolInit+0x80>)
    a078:	4b19      	ldr	r3, [pc, #100]	; (a0e0 <MiApp_ProtocolInit+0x84>)
    a07a:	801a      	strh	r2, [r3, #0]
    initValue.PAddress = myLongAddress;
    a07c:	a902      	add	r1, sp, #8
    initValue.actionFlags.bits.CCAEnable = 1;
    a07e:	780b      	ldrb	r3, [r1, #0]
    a080:	2202      	movs	r2, #2
    a082:	4313      	orrs	r3, r2
    initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    a084:	2287      	movs	r2, #135	; 0x87
    a086:	4013      	ands	r3, r2
    a088:	2240      	movs	r2, #64	; 0x40
    a08a:	4313      	orrs	r3, r2
    initValue.actionFlags.bits.RepeaterMode = 0;
    a08c:	22c3      	movs	r2, #195	; 0xc3
    a08e:	4013      	ands	r3, r2
    a090:	3ac2      	subs	r2, #194	; 0xc2
    a092:	4393      	bics	r3, r2
    a094:	700b      	strb	r3, [r1, #0]
    MiMAC_Init(initValue);
    a096:	9802      	ldr	r0, [sp, #8]
    a098:	4912      	ldr	r1, [pc, #72]	; (a0e4 <MiApp_ProtocolInit+0x88>)
    a09a:	4b13      	ldr	r3, [pc, #76]	; (a0e8 <MiApp_ProtocolInit+0x8c>)
    a09c:	4798      	blx	r3
    if (currentChannel != 0xFF)
    a09e:	4b13      	ldr	r3, [pc, #76]	; (a0ec <MiApp_ProtocolInit+0x90>)
    a0a0:	781b      	ldrb	r3, [r3, #0]
    a0a2:	2bff      	cmp	r3, #255	; 0xff
    a0a4:	d003      	beq.n	a0ae <MiApp_ProtocolInit+0x52>
	    MiApp_Set(CHANNEL, &currentChannel);
    a0a6:	4911      	ldr	r1, [pc, #68]	; (a0ec <MiApp_ProtocolInit+0x90>)
    a0a8:	2000      	movs	r0, #0
    a0aa:	4b11      	ldr	r3, [pc, #68]	; (a0f0 <MiApp_ProtocolInit+0x94>)
    a0ac:	4798      	blx	r3
            uint16_t tmp = 0xFFFF;
    a0ae:	466b      	mov	r3, sp
    a0b0:	1d98      	adds	r0, r3, #6
    a0b2:	2301      	movs	r3, #1
    a0b4:	425b      	negs	r3, r3
    a0b6:	8003      	strh	r3, [r0, #0]
            MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    a0b8:	4909      	ldr	r1, [pc, #36]	; (a0e0 <MiApp_ProtocolInit+0x84>)
    a0ba:	4b0e      	ldr	r3, [pc, #56]	; (a0f4 <MiApp_ProtocolInit+0x98>)
    a0bc:	4798      	blx	r3
    P2PCapacityInfo |= (ConnMode << 4);
    a0be:	4b0e      	ldr	r3, [pc, #56]	; (a0f8 <MiApp_ProtocolInit+0x9c>)
    a0c0:	781b      	ldrb	r3, [r3, #0]
    a0c2:	011b      	lsls	r3, r3, #4
    a0c4:	2208      	movs	r2, #8
    a0c6:	4313      	orrs	r3, r2
    a0c8:	4a0c      	ldr	r2, [pc, #48]	; (a0fc <MiApp_ProtocolInit+0xa0>)
    a0ca:	7013      	strb	r3, [r2, #0]
}
    a0cc:	2000      	movs	r0, #0
    a0ce:	b005      	add	sp, #20
    a0d0:	bd00      	pop	{pc}
    a0d2:	46c0      	nop			; (mov r8, r8)
    a0d4:	20003380 	.word	0x20003380
    a0d8:	20002f94 	.word	0x20002f94
    a0dc:	00001234 	.word	0x00001234
    a0e0:	20002f88 	.word	0x20002f88
    a0e4:	20000014 	.word	0x20000014
    a0e8:	00008de9 	.word	0x00008de9
    a0ec:	20000011 	.word	0x20000011
    a0f0:	0000a039 	.word	0x0000a039
    a0f4:	00008999 	.word	0x00008999
    a0f8:	20000010 	.word	0x20000010
    a0fc:	20002f85 	.word	0x20002f85

0000a100 <AddConnection>:
     *                  connection operation ends if an entry is added 
     *                  successfully
     *
     ********************************************************************/
    uint8_t AddConnection(void)
    {
    a100:	b5f0      	push	{r4, r5, r6, r7, lr}
    a102:	46d6      	mov	lr, sl
    a104:	4647      	mov	r7, r8
    a106:	b580      	push	{r7, lr}
    a108:	b083      	sub	sp, #12
        {
            // check if the entry is valid
            if( ConnectionTable[i].status.bits.isValid )
            {
                // check if the entry address matches source address of current received packet
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    a10a:	4b3b      	ldr	r3, [pc, #236]	; (a1f8 <AddConnection+0xf8>)
    a10c:	685b      	ldr	r3, [r3, #4]
    a10e:	9301      	str	r3, [sp, #4]
    a110:	4d3a      	ldr	r5, [pc, #232]	; (a1fc <AddConnection+0xfc>)
    a112:	2400      	movs	r4, #0
        uint8_t connectionSlot = 0xFF;
    a114:	26ff      	movs	r6, #255	; 0xff
            if( ConnectionTable[i].status.bits.isValid )
    a116:	46a8      	mov	r8, r5
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    a118:	4b39      	ldr	r3, [pc, #228]	; (a200 <AddConnection+0x100>)
    a11a:	469a      	mov	sl, r3
    a11c:	e005      	b.n	a12a <AddConnection+0x2a>
                    connectionSlot = i;
                    status = STATUS_EXISTS;
                    break;
                }
            }
            else if( connectionSlot == 0xFF )
    a11e:	2eff      	cmp	r6, #255	; 0xff
    a120:	d054      	beq.n	a1cc <AddConnection+0xcc>
    a122:	3401      	adds	r4, #1
    a124:	350a      	adds	r5, #10
        for(i = 0; i < CONNECTION_SIZE; i++)
    a126:	2cfa      	cmp	r4, #250	; 0xfa
    a128:	d052      	beq.n	a1d0 <AddConnection+0xd0>
    a12a:	b2e7      	uxtb	r7, r4
            if( ConnectionTable[i].status.bits.isValid )
    a12c:	00a3      	lsls	r3, r4, #2
    a12e:	191b      	adds	r3, r3, r4
    a130:	005b      	lsls	r3, r3, #1
    a132:	4443      	add	r3, r8
    a134:	7a1b      	ldrb	r3, [r3, #8]
    a136:	09db      	lsrs	r3, r3, #7
    a138:	d0f1      	beq.n	a11e <AddConnection+0x1e>
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    a13a:	0029      	movs	r1, r5
    a13c:	9801      	ldr	r0, [sp, #4]
    a13e:	47d0      	blx	sl
    a140:	2800      	cmp	r0, #0
    a142:	d0ee      	beq.n	a122 <AddConnection+0x22>
                    status = STATUS_EXISTS;
    a144:	2401      	movs	r4, #1
                // store the first empty slot
                connectionSlot = i;
            }  
        }
            
        if( connectionSlot == 0xFF )
    a146:	2fff      	cmp	r7, #255	; 0xff
    a148:	d04f      	beq.n	a1ea <AddConnection+0xea>
        {
            return STATUS_NOT_ENOUGH_SPACE;
        }
        else 
        {
            if( ConnMode >= ENABLE_PREV_CONN )
    a14a:	4b2e      	ldr	r3, [pc, #184]	; (a204 <AddConnection+0x104>)
    a14c:	781b      	ldrb	r3, [r3, #0]
    a14e:	2b00      	cmp	r3, #0
    a150:	d14c      	bne.n	a1ec <AddConnection+0xec>
            {
                return status;
            }
            MyindexinPC = connectionSlot;    
    a152:	4b2d      	ldr	r3, [pc, #180]	; (a208 <AddConnection+0x108>)
    a154:	701f      	strb	r7, [r3, #0]
    a156:	00b9      	lsls	r1, r7, #2
    a158:	19c9      	adds	r1, r1, r7
    a15a:	0049      	lsls	r1, r1, #1
    a15c:	4b27      	ldr	r3, [pc, #156]	; (a1fc <AddConnection+0xfc>)
    a15e:	18c9      	adds	r1, r1, r3
    a160:	2300      	movs	r3, #0
            // store the source address
            for(i = 0; i < 8; i++)
            {
                ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    a162:	0038      	movs	r0, r7
    a164:	9a01      	ldr	r2, [sp, #4]
    a166:	5cd2      	ldrb	r2, [r2, r3]
    a168:	54ca      	strb	r2, [r1, r3]
    a16a:	3301      	adds	r3, #1
            for(i = 0; i < 8; i++)
    a16c:	2b08      	cmp	r3, #8
    a16e:	d1f9      	bne.n	a164 <AddConnection+0x64>
            }
			ConnectionTable[connectionSlot].status.bits.isValid = 1;
    a170:	0083      	lsls	r3, r0, #2
    a172:	181b      	adds	r3, r3, r0
    a174:	005b      	lsls	r3, r3, #1
    a176:	4a21      	ldr	r2, [pc, #132]	; (a1fc <AddConnection+0xfc>)
    a178:	18d3      	adds	r3, r2, r3
    a17a:	7a19      	ldrb	r1, [r3, #8]
    a17c:	2280      	movs	r2, #128	; 0x80
    a17e:	4252      	negs	r2, r2
    a180:	430a      	orrs	r2, r1
    a182:	721a      	strb	r2, [r3, #8]
			if(rxMessage.Payload[2] & 0x01)
    a184:	4b1c      	ldr	r3, [pc, #112]	; (a1f8 <AddConnection+0xf8>)
    a186:	689b      	ldr	r3, [r3, #8]
    a188:	789a      	ldrb	r2, [r3, #2]
    a18a:	07d2      	lsls	r2, r2, #31
    a18c:	d523      	bpl.n	a1d6 <AddConnection+0xd6>
				{
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 1;
    a18e:	0082      	lsls	r2, r0, #2
    a190:	1812      	adds	r2, r2, r0
    a192:	0052      	lsls	r2, r2, #1
    a194:	4919      	ldr	r1, [pc, #100]	; (a1fc <AddConnection+0xfc>)
    a196:	188a      	adds	r2, r1, r2
    a198:	7a11      	ldrb	r1, [r2, #8]
    a19a:	2501      	movs	r5, #1
    a19c:	4329      	orrs	r1, r5
    a19e:	7211      	strb	r1, [r2, #8]
            //ConnectionTable[connectionSlot].status.Val = temp;
            // store possible additional connection payload
            #if ADDITIONAL_NODE_ID_SIZE > 0
                for(i = 0; i < ADDITIONAL_NODE_ID_SIZE; i++)
                {
                    ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
    a1a0:	78d9      	ldrb	r1, [r3, #3]
    a1a2:	0082      	lsls	r2, r0, #2
    a1a4:	1810      	adds	r0, r2, r0
    a1a6:	0043      	lsls	r3, r0, #1
    a1a8:	4814      	ldr	r0, [pc, #80]	; (a1fc <AddConnection+0xfc>)
    a1aa:	18c0      	adds	r0, r0, r3
    a1ac:	7241      	strb	r1, [r0, #9]
                }
            #endif
    
            #ifdef ENABLE_SECURITY
                // if security is enabled, clear the incoming frame control
                IncomingFrameCounter[connectionSlot].Val = 0;
    a1ae:	2100      	movs	r1, #0
    a1b0:	4b16      	ldr	r3, [pc, #88]	; (a20c <AddConnection+0x10c>)
    a1b2:	50d1      	str	r1, [r2, r3]
            #endif
            LatestConnection = connectionSlot;
    a1b4:	4b16      	ldr	r3, [pc, #88]	; (a210 <AddConnection+0x110>)
    a1b6:	701f      	strb	r7, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
    a1b8:	4a16      	ldr	r2, [pc, #88]	; (a214 <AddConnection+0x114>)
    a1ba:	7813      	ldrb	r3, [r2, #0]
    a1bc:	3110      	adds	r1, #16
    a1be:	438b      	bics	r3, r1
    a1c0:	7013      	strb	r3, [r2, #0]
        }
        conn_size = Total_Connections();
    a1c2:	4b15      	ldr	r3, [pc, #84]	; (a218 <AddConnection+0x118>)
    a1c4:	4798      	blx	r3
    a1c6:	4b15      	ldr	r3, [pc, #84]	; (a21c <AddConnection+0x11c>)
    a1c8:	7018      	strb	r0, [r3, #0]
    #if defined (ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_EDC_ID);
    #endif

        return status;
    a1ca:	e00f      	b.n	a1ec <AddConnection+0xec>
            else if( connectionSlot == 0xFF )
    a1cc:	003e      	movs	r6, r7
    a1ce:	e7a8      	b.n	a122 <AddConnection+0x22>
    a1d0:	0037      	movs	r7, r6
        uint8_t status = STATUS_SUCCESS;
    a1d2:	2400      	movs	r4, #0
    a1d4:	e7b7      	b.n	a146 <AddConnection+0x46>
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 0;
    a1d6:	0082      	lsls	r2, r0, #2
    a1d8:	1812      	adds	r2, r2, r0
    a1da:	0052      	lsls	r2, r2, #1
    a1dc:	4907      	ldr	r1, [pc, #28]	; (a1fc <AddConnection+0xfc>)
    a1de:	188a      	adds	r2, r1, r2
    a1e0:	7a11      	ldrb	r1, [r2, #8]
    a1e2:	2501      	movs	r5, #1
    a1e4:	43a9      	bics	r1, r5
    a1e6:	7211      	strb	r1, [r2, #8]
    a1e8:	e7da      	b.n	a1a0 <AddConnection+0xa0>
            return STATUS_NOT_ENOUGH_SPACE;
    a1ea:	24f1      	movs	r4, #241	; 0xf1
    }
    a1ec:	0020      	movs	r0, r4
    a1ee:	b003      	add	sp, #12
    a1f0:	bc0c      	pop	{r2, r3}
    a1f2:	4690      	mov	r8, r2
    a1f4:	469a      	mov	sl, r3
    a1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a1f8:	2000338c 	.word	0x2000338c
    a1fc:	200025a8 	.word	0x200025a8
    a200:	0000a011 	.word	0x0000a011
    a204:	20000010 	.word	0x20000010
    a208:	2000337c 	.word	0x2000337c
    a20c:	20002f94 	.word	0x20002f94
    a210:	200025a4 	.word	0x200025a4
    a214:	20003380 	.word	0x20003380
    a218:	00009e45 	.word	0x00009e45
    a21c:	20002f91 	.word	0x20002f91

0000a220 <MiApp_ConnectionMode>:
 *      None
 *
 *****************************************************************************************/ 
void MiApp_ConnectionMode(INPUT uint8_t Mode)
{
    if( Mode > 3 )
    a220:	2803      	cmp	r0, #3
    a222:	d808      	bhi.n	a236 <MiApp_ConnectionMode+0x16>
    {
        return;
    }
    ConnMode = Mode;
    a224:	4b04      	ldr	r3, [pc, #16]	; (a238 <MiApp_ConnectionMode+0x18>)
    a226:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    a228:	4a04      	ldr	r2, [pc, #16]	; (a23c <MiApp_ConnectionMode+0x1c>)
    a22a:	7811      	ldrb	r1, [r2, #0]
    a22c:	230f      	movs	r3, #15
    a22e:	400b      	ands	r3, r1
    a230:	0100      	lsls	r0, r0, #4
    a232:	4318      	orrs	r0, r3
    a234:	7010      	strb	r0, [r2, #0]
    
    #if defined(ENABLE_NETWORK_FREEZER)
		PDS_Store(PDS_CONNECTION_MODE_ID);
    #endif
}
    a236:	4770      	bx	lr
    a238:	20000010 	.word	0x20000010
    a23c:	20002f85 	.word	0x20002f85

0000a240 <MiApp_SubscribeDataIndicationCallback>:
 *      None
 *
 *****************************************************************************************/      
bool  MiApp_SubscribeDataIndicationCallback(PacketIndCallback_t callback)
{
    if (NULL != callback)
    a240:	2800      	cmp	r0, #0
    a242:	d003      	beq.n	a24c <MiApp_SubscribeDataIndicationCallback+0xc>
    {
        pktRxcallback = callback;
    a244:	4b02      	ldr	r3, [pc, #8]	; (a250 <MiApp_SubscribeDataIndicationCallback+0x10>)
    a246:	6018      	str	r0, [r3, #0]
        return true;
    a248:	2001      	movs	r0, #1
    }
    return false;
}
    a24a:	4770      	bx	lr
    return false;
    a24c:	2000      	movs	r0, #0
    a24e:	e7fc      	b.n	a24a <MiApp_SubscribeDataIndicationCallback+0xa>
    a250:	2000029c 	.word	0x2000029c

0000a254 <calculate_ToA>:
	}
}
#endif

uint16_t calculate_ToA(uint8_t payload_length)
{
    a254:	b5f0      	push	{r4, r5, r6, r7, lr}
    a256:	46ce      	mov	lr, r9
    a258:	4647      	mov	r7, r8
    a25a:	b580      	push	{r7, lr}
    a25c:	b087      	sub	sp, #28
    a25e:	4680      	mov	r8, r0
	   Rev.7 - May 2020 */
	
	/* Tested only with EU868 channel plan SF = 7 to 12 , BW = 125 kHz */
	 
	    //LoRa Modem Settings
	    uint8_t spreadFactor = 0;
    a260:	ab04      	add	r3, sp, #16
    a262:	1dde      	adds	r6, r3, #7
    a264:	2300      	movs	r3, #0
    a266:	7033      	strb	r3, [r6, #0]
	    uint8_t bandWidth = 125;
	    uint8_t codingRate = 0;
    a268:	aa04      	add	r2, sp, #16
    a26a:	1d97      	adds	r7, r2, #6
    a26c:	7193      	strb	r3, [r2, #6]
	    bool ldro = false;   //LowDataRateOptimize
	    
	    //Packet Configuration
	    uint16_t programmedPreambleLength = 0;
    a26e:	ad05      	add	r5, sp, #20
    a270:	802b      	strh	r3, [r5, #0]
	    bool implicitHeaderMode = 0; //Implicit or Explicit header
	    bool crcEnable = 0; //CRC
    a272:	3303      	adds	r3, #3
    a274:	4694      	mov	ip, r2
    a276:	4463      	add	r3, ip
    a278:	4699      	mov	r9, r3
    a27a:	2300      	movs	r3, #0
    a27c:	464a      	mov	r2, r9
    a27e:	7013      	strb	r3, [r2, #0]
		if(payload_length > 255)
		{
			payload_length = 255;
		}
			    
	    RADIO_GetAttr(SPREADING_FACTOR,(void *)&spreadFactor);
    a280:	0031      	movs	r1, r6
    a282:	2016      	movs	r0, #22
    a284:	4c39      	ldr	r4, [pc, #228]	; (a36c <calculate_ToA+0x118>)
    a286:	47a0      	blx	r4
	    RADIO_GetAttr(PREAMBLE_LEN,(void *)&programmedPreambleLength);
    a288:	0029      	movs	r1, r5
    a28a:	2003      	movs	r0, #3
    a28c:	47a0      	blx	r4
	    RADIO_GetAttr(CRC_ON,(void *)&crcEnable);
    a28e:	4649      	mov	r1, r9
    a290:	2014      	movs	r0, #20
    a292:	47a0      	blx	r4
	    RADIO_GetAttr(ERROR_CODING_RATE,(void *)&codingRate);
    a294:	0039      	movs	r1, r7
    a296:	200b      	movs	r0, #11
    a298:	47a0      	blx	r4


	    symbolRate = (bandWidth * 1000) /  ((float)(1 << spreadFactor));
    a29a:	7836      	ldrb	r6, [r6, #0]
    a29c:	2001      	movs	r0, #1
    a29e:	40b0      	lsls	r0, r6
    a2a0:	4b33      	ldr	r3, [pc, #204]	; (a370 <calculate_ToA+0x11c>)
    a2a2:	4798      	blx	r3
    a2a4:	1c01      	adds	r1, r0, #0
    a2a6:	4c33      	ldr	r4, [pc, #204]	; (a374 <calculate_ToA+0x120>)
    a2a8:	4833      	ldr	r0, [pc, #204]	; (a378 <calculate_ToA+0x124>)
    a2aa:	47a0      	blx	r4
    a2ac:	1c01      	adds	r1, r0, #0
	    symbolTime = 1000 / (symbolRate);
    a2ae:	4833      	ldr	r0, [pc, #204]	; (a37c <calculate_ToA+0x128>)
    a2b0:	47a0      	blx	r4
    a2b2:	1c04      	adds	r4, r0, #0
	    preambleDuration = (programmedPreambleLength + 4.25) * symbolTime;
    a2b4:	8828      	ldrh	r0, [r5, #0]
    a2b6:	4b32      	ldr	r3, [pc, #200]	; (a380 <calculate_ToA+0x12c>)
    a2b8:	4798      	blx	r3
    a2ba:	2200      	movs	r2, #0
    a2bc:	4b31      	ldr	r3, [pc, #196]	; (a384 <calculate_ToA+0x130>)
    a2be:	4d32      	ldr	r5, [pc, #200]	; (a388 <calculate_ToA+0x134>)
    a2c0:	47a8      	blx	r5
    a2c2:	9000      	str	r0, [sp, #0]
    a2c4:	9101      	str	r1, [sp, #4]
    a2c6:	1c20      	adds	r0, r4, #0
    a2c8:	4b30      	ldr	r3, [pc, #192]	; (a38c <calculate_ToA+0x138>)
    a2ca:	4798      	blx	r3
    a2cc:	0002      	movs	r2, r0
    a2ce:	000b      	movs	r3, r1
    a2d0:	9800      	ldr	r0, [sp, #0]
    a2d2:	9901      	ldr	r1, [sp, #4]
    a2d4:	4d2e      	ldr	r5, [pc, #184]	; (a390 <calculate_ToA+0x13c>)
    a2d6:	47a8      	blx	r5
    a2d8:	4b2e      	ldr	r3, [pc, #184]	; (a394 <calculate_ToA+0x140>)
    a2da:	4798      	blx	r3
    a2dc:	9000      	str	r0, [sp, #0]

	    if ( ((spreadFactor == 12) && ((bandWidth == 125) || (bandWidth == 250))) || ((spreadFactor == 11) && (bandWidth == 125)))
    a2de:	2e0c      	cmp	r6, #12
    a2e0:	d040      	beq.n	a364 <calculate_ToA+0x110>
    a2e2:	0033      	movs	r3, r6
    a2e4:	3b0b      	subs	r3, #11
    a2e6:	425a      	negs	r2, r3
    a2e8:	4153      	adcs	r3, r2
    a2ea:	b2db      	uxtb	r3, r3
	    {
		    ldro = false;
	    }
	    
	    ceilValueNumerator = (8 * payload_length - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
	    ceilValueDenominator= (4 * (spreadFactor - 2 * ldro));
    a2ec:	005b      	lsls	r3, r3, #1
    a2ee:	1af3      	subs	r3, r6, r3
    a2f0:	009b      	lsls	r3, r3, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    a2f2:	b2df      	uxtb	r7, r3
	    ceilValueNumerator = (8 * payload_length - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
    a2f4:	4643      	mov	r3, r8
    a2f6:	0058      	lsls	r0, r3, #1
    a2f8:	1b80      	subs	r0, r0, r6
    a2fa:	3007      	adds	r0, #7
    a2fc:	ab04      	add	r3, sp, #16
    a2fe:	3303      	adds	r3, #3
    a300:	781b      	ldrb	r3, [r3, #0]
    a302:	009b      	lsls	r3, r3, #2
    a304:	18c0      	adds	r0, r0, r3
    a306:	0080      	lsls	r0, r0, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    a308:	b280      	uxth	r0, r0
    a30a:	19c0      	adds	r0, r0, r7
    a30c:	4d1c      	ldr	r5, [pc, #112]	; (a380 <calculate_ToA+0x12c>)
    a30e:	47a8      	blx	r5
    a310:	2200      	movs	r2, #0
    a312:	4b21      	ldr	r3, [pc, #132]	; (a398 <calculate_ToA+0x144>)
    a314:	4e21      	ldr	r6, [pc, #132]	; (a39c <calculate_ToA+0x148>)
    a316:	47b0      	blx	r6
    a318:	9002      	str	r0, [sp, #8]
    a31a:	9103      	str	r1, [sp, #12]
    a31c:	0038      	movs	r0, r7
    a31e:	47a8      	blx	r5
    a320:	0002      	movs	r2, r0
    a322:	000b      	movs	r3, r1
    a324:	9802      	ldr	r0, [sp, #8]
    a326:	9903      	ldr	r1, [sp, #12]
    a328:	4e1d      	ldr	r6, [pc, #116]	; (a3a0 <calculate_ToA+0x14c>)
    a32a:	47b0      	blx	r6
    a32c:	4b1d      	ldr	r3, [pc, #116]	; (a3a4 <calculate_ToA+0x150>)
    a32e:	4798      	blx	r3
	    
	    if ((ceilValue * (codingRate + 4)) > 0)
    a330:	b282      	uxth	r2, r0
    a332:	ab04      	add	r3, sp, #16
    a334:	7998      	ldrb	r0, [r3, #6]
    a336:	3004      	adds	r0, #4
    a338:	4350      	muls	r0, r2
    a33a:	2800      	cmp	r0, #0
    a33c:	dd14      	ble.n	a368 <calculate_ToA+0x114>
	    {
		    maxCeilValue = ceilValue * (codingRate + 4);
    a33e:	4b0c      	ldr	r3, [pc, #48]	; (a370 <calculate_ToA+0x11c>)
    a340:	4798      	blx	r3
	    else
	    {
		    maxCeilValue = 0;
	    }

	    numberOfPayloadSymbols = 8 + maxCeilValue;
    a342:	4e19      	ldr	r6, [pc, #100]	; (a3a8 <calculate_ToA+0x154>)
    a344:	2182      	movs	r1, #130	; 0x82
    a346:	05c9      	lsls	r1, r1, #23
    a348:	47b0      	blx	r6
	    payloadDuration = numberOfPayloadSymbols * symbolTime;
    a34a:	1c21      	adds	r1, r4, #0
    a34c:	4b17      	ldr	r3, [pc, #92]	; (a3ac <calculate_ToA+0x158>)
    a34e:	4798      	blx	r3
		
	    totalTimeOnAir = preambleDuration + payloadDuration;
    a350:	9900      	ldr	r1, [sp, #0]
    a352:	47b0      	blx	r6
		
		return ((uint16_t)totalTimeOnAir) ;
    a354:	4b16      	ldr	r3, [pc, #88]	; (a3b0 <calculate_ToA+0x15c>)
    a356:	4798      	blx	r3
    a358:	b280      	uxth	r0, r0
    a35a:	b007      	add	sp, #28
    a35c:	bc0c      	pop	{r2, r3}
    a35e:	4690      	mov	r8, r2
    a360:	4699      	mov	r9, r3
    a362:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    ldro =  true;
    a364:	2301      	movs	r3, #1
    a366:	e7c1      	b.n	a2ec <calculate_ToA+0x98>
		    maxCeilValue = 0;
    a368:	2000      	movs	r0, #0
    a36a:	e7ea      	b.n	a342 <calculate_ToA+0xee>
    a36c:	0000ca2d 	.word	0x0000ca2d
    a370:	000130d9 	.word	0x000130d9
    a374:	00012741 	.word	0x00012741
    a378:	47f42400 	.word	0x47f42400
    a37c:	447a0000 	.word	0x447a0000
    a380:	00014c21 	.word	0x00014c21
    a384:	40110000 	.word	0x40110000
    a388:	00013205 	.word	0x00013205
    a38c:	00014d15 	.word	0x00014d15
    a390:	0001408d 	.word	0x0001408d
    a394:	00014db9 	.word	0x00014db9
    a398:	3ff00000 	.word	0x3ff00000
    a39c:	0001458d 	.word	0x0001458d
    a3a0:	00013825 	.word	0x00013825
    a3a4:	00012221 	.word	0x00012221
    a3a8:	0001241d 	.word	0x0001241d
    a3ac:	00012b21 	.word	0x00012b21
    a3b0:	000121f1 	.word	0x000121f1

0000a3b4 <P2PTasks>:
{
    a3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3b6:	46de      	mov	lr, fp
    a3b8:	4647      	mov	r7, r8
    a3ba:	b580      	push	{r7, lr}
    a3bc:	b08b      	sub	sp, #44	; 0x2c
    MiMAC_Task();
    a3be:	4bc4      	ldr	r3, [pc, #784]	; (a6d0 <P2PTasks+0x31c>)
    a3c0:	4798      	blx	r3
        if( P2PStatus.bits.DataRequesting )
    a3c2:	4bc4      	ldr	r3, [pc, #784]	; (a6d4 <P2PTasks+0x320>)
    a3c4:	781b      	ldrb	r3, [r3, #0]
    a3c6:	075b      	lsls	r3, r3, #29
    a3c8:	d41b      	bmi.n	a402 <P2PTasks+0x4e>
	ack_timeout_variable = calculate_ToA(PACKETLEN_ACK);
    a3ca:	2016      	movs	r0, #22
    a3cc:	4bc2      	ldr	r3, [pc, #776]	; (a6d8 <P2PTasks+0x324>)
    a3ce:	4798      	blx	r3
	ack_timeout_variable = (ack_timeout_variable + TOTAL_ACK_PROCESSING_DELAY) * 1000;
    a3d0:	23fa      	movs	r3, #250	; 0xfa
    a3d2:	009b      	lsls	r3, r3, #2
    a3d4:	4358      	muls	r0, r3
    a3d6:	4bc1      	ldr	r3, [pc, #772]	; (a6dc <P2PTasks+0x328>)
    a3d8:	469c      	mov	ip, r3
    a3da:	4460      	add	r0, ip
    a3dc:	4bc0      	ldr	r3, [pc, #768]	; (a6e0 <P2PTasks+0x32c>)
    a3de:	6018      	str	r0, [r3, #0]
	if((AckReqData) && (DataTxAckTimer.Val)) // AckReqData
    a3e0:	4bc0      	ldr	r3, [pc, #768]	; (a6e4 <P2PTasks+0x330>)
    a3e2:	781b      	ldrb	r3, [r3, #0]
    a3e4:	2b00      	cmp	r3, #0
    a3e6:	d003      	beq.n	a3f0 <P2PTasks+0x3c>
    a3e8:	4bbf      	ldr	r3, [pc, #764]	; (a6e8 <P2PTasks+0x334>)
    a3ea:	681b      	ldr	r3, [r3, #0]
    a3ec:	2b00      	cmp	r3, #0
    a3ee:	d117      	bne.n	a420 <P2PTasks+0x6c>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    a3f0:	4bb8      	ldr	r3, [pc, #736]	; (a6d4 <P2PTasks+0x320>)
    a3f2:	781b      	ldrb	r3, [r3, #0]
    a3f4:	071b      	lsls	r3, r3, #28
    a3f6:	d523      	bpl.n	a440 <P2PTasks+0x8c>
}
    a3f8:	b00b      	add	sp, #44	; 0x2c
    a3fa:	bc0c      	pop	{r2, r3}
    a3fc:	4690      	mov	r8, r2
    a3fe:	469b      	mov	fp, r3
    a400:	bdf0      	pop	{r4, r5, r6, r7, pc}
            tmpTick.Val = MiWi_TickGet();
    a402:	4bba      	ldr	r3, [pc, #744]	; (a6ec <P2PTasks+0x338>)
    a404:	4798      	blx	r3
            if( MiWi_TickGetDiff(tmpTick, DataRequestTimer) > RFD_DATA_WAIT )
    a406:	4bba      	ldr	r3, [pc, #744]	; (a6f0 <P2PTasks+0x33c>)
    a408:	6819      	ldr	r1, [r3, #0]
    a40a:	4bba      	ldr	r3, [pc, #744]	; (a6f4 <P2PTasks+0x340>)
    a40c:	4798      	blx	r3
    a40e:	4bba      	ldr	r3, [pc, #744]	; (a6f8 <P2PTasks+0x344>)
    a410:	4298      	cmp	r0, r3
    a412:	d9da      	bls.n	a3ca <P2PTasks+0x16>
                P2PStatus.bits.DataRequesting = 0;
    a414:	4aaf      	ldr	r2, [pc, #700]	; (a6d4 <P2PTasks+0x320>)
    a416:	7813      	ldrb	r3, [r2, #0]
    a418:	2104      	movs	r1, #4
    a41a:	438b      	bics	r3, r1
    a41c:	7013      	strb	r3, [r2, #0]
    a41e:	e7d4      	b.n	a3ca <P2PTasks+0x16>
		tmpTick.Val = MiWi_TickGet();
    a420:	4bb2      	ldr	r3, [pc, #712]	; (a6ec <P2PTasks+0x338>)
    a422:	4798      	blx	r3
		if( MiWi_TickGetDiff(tmpTick, DataTxAckTimer) > ((ack_timeout_variable) * ACK_TIMEOUT_INTERVAL) )
    a424:	4bb0      	ldr	r3, [pc, #704]	; (a6e8 <P2PTasks+0x334>)
    a426:	6819      	ldr	r1, [r3, #0]
    a428:	4bb2      	ldr	r3, [pc, #712]	; (a6f4 <P2PTasks+0x340>)
    a42a:	4798      	blx	r3
    a42c:	2800      	cmp	r0, #0
    a42e:	d0df      	beq.n	a3f0 <P2PTasks+0x3c>
			DataTxAckTimer.Val =0;
    a430:	2300      	movs	r3, #0
    a432:	4aad      	ldr	r2, [pc, #692]	; (a6e8 <P2PTasks+0x334>)
    a434:	6013      	str	r3, [r2, #0]
			AckReqData = 0;
    a436:	4aab      	ldr	r2, [pc, #684]	; (a6e4 <P2PTasks+0x330>)
    a438:	7013      	strb	r3, [r2, #0]
			MiMAC_RetryPacket();
    a43a:	4bb0      	ldr	r3, [pc, #704]	; (a6fc <P2PTasks+0x348>)
    a43c:	4798      	blx	r3
    a43e:	e7d7      	b.n	a3f0 <P2PTasks+0x3c>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket() )
    a440:	4baf      	ldr	r3, [pc, #700]	; (a700 <P2PTasks+0x34c>)
    a442:	4798      	blx	r3
    a444:	2800      	cmp	r0, #0
    a446:	d0d7      	beq.n	a3f8 <P2PTasks+0x44>
        FW_Stat = false;  // Used for SW_Generated ACK T PAN CO
    a448:	2200      	movs	r2, #0
    a44a:	4bae      	ldr	r3, [pc, #696]	; (a704 <P2PTasks+0x350>)
    a44c:	701a      	strb	r2, [r3, #0]
            temp_bit = MACRxPacket.flags.bits.broadcast;
    a44e:	4bae      	ldr	r3, [pc, #696]	; (a708 <P2PTasks+0x354>)
    a450:	7819      	ldrb	r1, [r3, #0]
    a452:	074b      	lsls	r3, r1, #29
    a454:	0fdb      	lsrs	r3, r3, #31
    a456:	4aad      	ldr	r2, [pc, #692]	; (a70c <P2PTasks+0x358>)
    a458:	7013      	strb	r3, [r2, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    a45a:	2203      	movs	r2, #3
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    a45c:	08cc      	lsrs	r4, r1, #3
    a45e:	2001      	movs	r0, #1
    a460:	4004      	ands	r4, r0
    a462:	00e4      	lsls	r4, r4, #3
    a464:	4013      	ands	r3, r2
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    a466:	400a      	ands	r2, r1
    a468:	3a01      	subs	r2, #1
    a46a:	4255      	negs	r5, r2
    a46c:	416a      	adcs	r2, r5
    a46e:	4002      	ands	r2, r0
    a470:	0152      	lsls	r2, r2, #5
    a472:	4323      	orrs	r3, r4
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    a474:	09cc      	lsrs	r4, r1, #7
    a476:	4020      	ands	r0, r4
    a478:	0180      	lsls	r0, r0, #6
    a47a:	4313      	orrs	r3, r2
    a47c:	4303      	orrs	r3, r0
    a47e:	4aa4      	ldr	r2, [pc, #656]	; (a710 <P2PTasks+0x35c>)
    a480:	7013      	strb	r3, [r2, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    a482:	b249      	sxtb	r1, r1
    a484:	2900      	cmp	r1, #0
    a486:	db19      	blt.n	a4bc <P2PTasks+0x108>
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    a488:	4ba1      	ldr	r3, [pc, #644]	; (a710 <P2PTasks+0x35c>)
    a48a:	4a9f      	ldr	r2, [pc, #636]	; (a708 <P2PTasks+0x354>)
    a48c:	8a11      	ldrh	r1, [r2, #16]
    a48e:	8059      	strh	r1, [r3, #2]
        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    a490:	7b11      	ldrb	r1, [r2, #12]
    a492:	7319      	strb	r1, [r3, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    a494:	6891      	ldr	r1, [r2, #8]
    a496:	6099      	str	r1, [r3, #8]
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    a498:	7b90      	ldrb	r0, [r2, #14]
    a49a:	7398      	strb	r0, [r3, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    a49c:	7b52      	ldrb	r2, [r2, #13]
    a49e:	735a      	strb	r2, [r3, #13]
        if( rxMessage.flags.bits.command )
    a4a0:	781b      	ldrb	r3, [r3, #0]
    a4a2:	069b      	lsls	r3, r3, #26
    a4a4:	d400      	bmi.n	a4a8 <P2PTasks+0xf4>
    a4a6:	e15d      	b.n	a764 <P2PTasks+0x3b0>
            switch( rxMessage.Payload[0] )
    a4a8:	780b      	ldrb	r3, [r1, #0]
    a4aa:	337f      	adds	r3, #127	; 0x7f
    a4ac:	b2da      	uxtb	r2, r3
    a4ae:	2a16      	cmp	r2, #22
    a4b0:	d900      	bls.n	a4b4 <P2PTasks+0x100>
    a4b2:	e0fc      	b.n	a6ae <P2PTasks+0x2fa>
    a4b4:	0093      	lsls	r3, r2, #2
    a4b6:	4a97      	ldr	r2, [pc, #604]	; (a714 <P2PTasks+0x360>)
    a4b8:	58d3      	ldr	r3, [r2, r3]
    a4ba:	469f      	mov	pc, r3
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    a4bc:	4b92      	ldr	r3, [pc, #584]	; (a708 <P2PTasks+0x354>)
    a4be:	685a      	ldr	r2, [r3, #4]
    a4c0:	4b93      	ldr	r3, [pc, #588]	; (a710 <P2PTasks+0x35c>)
    a4c2:	605a      	str	r2, [r3, #4]
    a4c4:	e7e0      	b.n	a488 <P2PTasks+0xd4>
                                MiMAC_DiscardPacket();
    a4c6:	4b94      	ldr	r3, [pc, #592]	; (a718 <P2PTasks+0x364>)
    a4c8:	4798      	blx	r3
                                break;
    a4ca:	e15a      	b.n	a782 <P2PTasks+0x3ce>
                        if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    a4cc:	4b93      	ldr	r3, [pc, #588]	; (a71c <P2PTasks+0x368>)
    a4ce:	781b      	ldrb	r3, [r3, #0]
    a4d0:	2b02      	cmp	r3, #2
    a4d2:	d807      	bhi.n	a4e4 <P2PTasks+0x130>
                            if( currentChannel != rxMessage.Payload[1] )
    a4d4:	784a      	ldrb	r2, [r1, #1]
    a4d6:	4b92      	ldr	r3, [pc, #584]	; (a720 <P2PTasks+0x36c>)
    a4d8:	781b      	ldrb	r3, [r3, #0]
    a4da:	429a      	cmp	r2, r3
    a4dc:	d005      	beq.n	a4ea <P2PTasks+0x136>
                                MiMAC_DiscardPacket();
    a4de:	4b8e      	ldr	r3, [pc, #568]	; (a718 <P2PTasks+0x364>)
    a4e0:	4798      	blx	r3
                                break;
    a4e2:	e14e      	b.n	a782 <P2PTasks+0x3ce>
                                MiMAC_DiscardPacket();
    a4e4:	4b8c      	ldr	r3, [pc, #560]	; (a718 <P2PTasks+0x364>)
    a4e6:	4798      	blx	r3
                                break;
    a4e8:	e14b      	b.n	a782 <P2PTasks+0x3ce>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_ACTIVE_SCAN_RESPONSE));
    a4ea:	2010      	movs	r0, #16
    a4ec:	4b8d      	ldr	r3, [pc, #564]	; (a724 <P2PTasks+0x370>)
    a4ee:	4798      	blx	r3
    a4f0:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    a4f2:	d100      	bne.n	a4f6 <P2PTasks+0x142>
    a4f4:	e780      	b.n	a3f8 <P2PTasks+0x44>
                            dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_RESPONSE;
    a4f6:	2397      	movs	r3, #151	; 0x97
    a4f8:	7003      	strb	r3, [r0, #0]
                            dataPtr[dataLen++] = P2PCapacityInfo;
    a4fa:	4b8b      	ldr	r3, [pc, #556]	; (a728 <P2PTasks+0x374>)
    a4fc:	781b      	ldrb	r3, [r3, #0]
    a4fe:	7043      	strb	r3, [r0, #1]
                                    dataPtr[dataLen++] = (AdditionalNodeID[i]);
    a500:	4b8a      	ldr	r3, [pc, #552]	; (a72c <P2PTasks+0x378>)
    a502:	781b      	ldrb	r3, [r3, #0]
    a504:	7083      	strb	r3, [r0, #2]
                            MiMAC_DiscardPacket();
    a506:	4b84      	ldr	r3, [pc, #528]	; (a718 <P2PTasks+0x364>)
    a508:	4798      	blx	r3
							i = PHY_RandomReq();
    a50a:	4b89      	ldr	r3, [pc, #548]	; (a730 <P2PTasks+0x37c>)
    a50c:	4798      	blx	r3
							delay_ms(i*100);
    a50e:	b2c3      	uxtb	r3, r0
    a510:	2064      	movs	r0, #100	; 0x64
    a512:	4358      	muls	r0, r3
    a514:	2800      	cmp	r0, #0
    a516:	d016      	beq.n	a546 <P2PTasks+0x192>
    a518:	4b86      	ldr	r3, [pc, #536]	; (a734 <P2PTasks+0x380>)
    a51a:	4798      	blx	r3
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    a51c:	4b7c      	ldr	r3, [pc, #496]	; (a710 <P2PTasks+0x35c>)
    a51e:	685a      	ldr	r2, [r3, #4]
    a520:	8859      	ldrh	r1, [r3, #2]
    a522:	4885      	ldr	r0, [pc, #532]	; (a738 <P2PTasks+0x384>)
    a524:	9005      	str	r0, [sp, #20]
    a526:	2001      	movs	r0, #1
    a528:	9004      	str	r0, [sp, #16]
    a52a:	2000      	movs	r0, #0
    a52c:	9003      	str	r0, [sp, #12]
    a52e:	9402      	str	r4, [sp, #8]
    a530:	3003      	adds	r0, #3
    a532:	9001      	str	r0, [sp, #4]
    a534:	781b      	ldrb	r3, [r3, #0]
    a536:	071b      	lsls	r3, r3, #28
    a538:	0fdb      	lsrs	r3, r3, #31
    a53a:	9300      	str	r3, [sp, #0]
    a53c:	2301      	movs	r3, #1
    a53e:	2000      	movs	r0, #0
    a540:	4c7e      	ldr	r4, [pc, #504]	; (a73c <P2PTasks+0x388>)
    a542:	47a0      	blx	r4
                        break;
    a544:	e11d      	b.n	a782 <P2PTasks+0x3ce>
							delay_ms(i*100);
    a546:	2001      	movs	r0, #1
    a548:	4b7d      	ldr	r3, [pc, #500]	; (a740 <P2PTasks+0x38c>)
    a54a:	4798      	blx	r3
    a54c:	e7e6      	b.n	a51c <P2PTasks+0x168>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REMOVAL_RESPONSE));
    a54e:	2010      	movs	r0, #16
    a550:	4b74      	ldr	r3, [pc, #464]	; (a724 <P2PTasks+0x370>)
    a552:	4798      	blx	r3
    a554:	4683      	mov	fp, r0
                            if (NULL == dataPtr)
    a556:	2800      	cmp	r0, #0
    a558:	d100      	bne.n	a55c <P2PTasks+0x1a8>
    a55a:	e74d      	b.n	a3f8 <P2PTasks+0x44>
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    a55c:	2392      	movs	r3, #146	; 0x92
    a55e:	7003      	strb	r3, [r0, #0]
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    a560:	4b6b      	ldr	r3, [pc, #428]	; (a710 <P2PTasks+0x35c>)
    a562:	685b      	ldr	r3, [r3, #4]
    a564:	9307      	str	r3, [sp, #28]
    a566:	4f77      	ldr	r7, [pc, #476]	; (a744 <P2PTasks+0x390>)
    a568:	2400      	movs	r4, #0
                            for(i = 0; i < CONNECTION_SIZE; i++)
    a56a:	2500      	movs	r5, #0
                                if( ConnectionTable[i].status.bits.isValid )
    a56c:	003e      	movs	r6, r7
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    a56e:	4b76      	ldr	r3, [pc, #472]	; (a748 <P2PTasks+0x394>)
    a570:	4698      	mov	r8, r3
    a572:	e006      	b.n	a582 <P2PTasks+0x1ce>
                            for(i = 0; i < CONNECTION_SIZE; i++)
    a574:	3501      	adds	r5, #1
    a576:	b2ed      	uxtb	r5, r5
    a578:	3401      	adds	r4, #1
    a57a:	370a      	adds	r7, #10
    a57c:	2dfa      	cmp	r5, #250	; 0xfa
    a57e:	d100      	bne.n	a582 <P2PTasks+0x1ce>
    a580:	e121      	b.n	a7c6 <P2PTasks+0x412>
                                if( ConnectionTable[i].status.bits.isValid )
    a582:	9406      	str	r4, [sp, #24]
    a584:	00a3      	lsls	r3, r4, #2
    a586:	191b      	adds	r3, r3, r4
    a588:	005b      	lsls	r3, r3, #1
    a58a:	18f3      	adds	r3, r6, r3
    a58c:	7a1b      	ldrb	r3, [r3, #8]
    a58e:	09db      	lsrs	r3, r3, #7
    a590:	d0f0      	beq.n	a574 <P2PTasks+0x1c0>
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    a592:	0039      	movs	r1, r7
    a594:	9807      	ldr	r0, [sp, #28]
    a596:	47c0      	blx	r8
    a598:	2800      	cmp	r0, #0
    a59a:	d0eb      	beq.n	a574 <P2PTasks+0x1c0>
                                        ConnectionTable[i].status.Val = 0;
    a59c:	9a06      	ldr	r2, [sp, #24]
    a59e:	0093      	lsls	r3, r2, #2
    a5a0:	189e      	adds	r6, r3, r2
    a5a2:	0076      	lsls	r6, r6, #1
    a5a4:	4b67      	ldr	r3, [pc, #412]	; (a744 <P2PTasks+0x390>)
    a5a6:	199e      	adds	r6, r3, r6
    a5a8:	2300      	movs	r3, #0
    a5aa:	7233      	strb	r3, [r6, #8]
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    a5ac:	465a      	mov	r2, fp
    a5ae:	7053      	strb	r3, [r2, #1]
                            MiMAC_DiscardPacket();
    a5b0:	4b59      	ldr	r3, [pc, #356]	; (a718 <P2PTasks+0x364>)
    a5b2:	4798      	blx	r3
                            if( i == CONNECTION_SIZE ) 
    a5b4:	2dfa      	cmp	r5, #250	; 0xfa
    a5b6:	d015      	beq.n	a5e4 <P2PTasks+0x230>
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    a5b8:	2402      	movs	r4, #2
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    a5ba:	4b55      	ldr	r3, [pc, #340]	; (a710 <P2PTasks+0x35c>)
    a5bc:	685a      	ldr	r2, [r3, #4]
    a5be:	8859      	ldrh	r1, [r3, #2]
    a5c0:	485d      	ldr	r0, [pc, #372]	; (a738 <P2PTasks+0x384>)
    a5c2:	9005      	str	r0, [sp, #20]
    a5c4:	2001      	movs	r0, #1
    a5c6:	9004      	str	r0, [sp, #16]
    a5c8:	2000      	movs	r0, #0
    a5ca:	9003      	str	r0, [sp, #12]
    a5cc:	4658      	mov	r0, fp
    a5ce:	9002      	str	r0, [sp, #8]
    a5d0:	9401      	str	r4, [sp, #4]
    a5d2:	781b      	ldrb	r3, [r3, #0]
    a5d4:	071b      	lsls	r3, r3, #28
    a5d6:	0fdb      	lsrs	r3, r3, #31
    a5d8:	9300      	str	r3, [sp, #0]
    a5da:	2301      	movs	r3, #1
    a5dc:	2000      	movs	r0, #0
    a5de:	4c57      	ldr	r4, [pc, #348]	; (a73c <P2PTasks+0x388>)
    a5e0:	47a0      	blx	r4
                            break;
    a5e2:	e0ce      	b.n	a782 <P2PTasks+0x3ce>
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    a5e4:	2302      	movs	r3, #2
    a5e6:	e0f1      	b.n	a7cc <P2PTasks+0x418>
                            switch( rxMessage.Payload[1] )
    a5e8:	784b      	ldrb	r3, [r1, #1]
    a5ea:	2b00      	cmp	r3, #0
    a5ec:	d014      	beq.n	a618 <P2PTasks+0x264>
    a5ee:	2b01      	cmp	r3, #1
    a5f0:	d10f      	bne.n	a612 <P2PTasks+0x25e>
                                    if (EstConfCallback)
    a5f2:	4b56      	ldr	r3, [pc, #344]	; (a74c <P2PTasks+0x398>)
    a5f4:	681b      	ldr	r3, [r3, #0]
    a5f6:	2b00      	cmp	r3, #0
    a5f8:	d004      	beq.n	a604 <P2PTasks+0x250>
                                        EstConfCallback(ALREADY_EXISTS);
    a5fa:	2006      	movs	r0, #6
    a5fc:	4798      	blx	r3
                                        EstConfCallback = NULL;
    a5fe:	2200      	movs	r2, #0
    a600:	4b52      	ldr	r3, [pc, #328]	; (a74c <P2PTasks+0x398>)
    a602:	601a      	str	r2, [r3, #0]
                                        if( myPANID.Val == 0xFFFF )
    a604:	4b52      	ldr	r3, [pc, #328]	; (a750 <P2PTasks+0x39c>)
    a606:	881a      	ldrh	r2, [r3, #0]
    a608:	4b52      	ldr	r3, [pc, #328]	; (a754 <P2PTasks+0x3a0>)
    a60a:	429a      	cmp	r2, r3
    a60c:	d00e      	beq.n	a62c <P2PTasks+0x278>
                                    AddConnection();
    a60e:	4b52      	ldr	r3, [pc, #328]	; (a758 <P2PTasks+0x3a4>)
    a610:	4798      	blx	r3
                        MiMAC_DiscardPacket();
    a612:	4b41      	ldr	r3, [pc, #260]	; (a718 <P2PTasks+0x364>)
    a614:	4798      	blx	r3
                        break; 
    a616:	e0b4      	b.n	a782 <P2PTasks+0x3ce>
                                    if (EstConfCallback)
    a618:	4b4c      	ldr	r3, [pc, #304]	; (a74c <P2PTasks+0x398>)
    a61a:	681b      	ldr	r3, [r3, #0]
    a61c:	2b00      	cmp	r3, #0
    a61e:	d0f1      	beq.n	a604 <P2PTasks+0x250>
                                        EstConfCallback(SUCCESS);
    a620:	2000      	movs	r0, #0
    a622:	4798      	blx	r3
                                        EstConfCallback = NULL;
    a624:	2200      	movs	r2, #0
    a626:	4b49      	ldr	r3, [pc, #292]	; (a74c <P2PTasks+0x398>)
    a628:	601a      	str	r2, [r3, #0]
    a62a:	e7eb      	b.n	a604 <P2PTasks+0x250>
                                            myPANID.Val = rxMessage.SourcePANID.Val;
    a62c:	4948      	ldr	r1, [pc, #288]	; (a750 <P2PTasks+0x39c>)
    a62e:	4b38      	ldr	r3, [pc, #224]	; (a710 <P2PTasks+0x35c>)
    a630:	885b      	ldrh	r3, [r3, #2]
    a632:	800b      	strh	r3, [r1, #0]
                                                uint16_t tmp = 0xFFFF;
    a634:	201e      	movs	r0, #30
    a636:	ab02      	add	r3, sp, #8
    a638:	469c      	mov	ip, r3
    a63a:	4460      	add	r0, ip
    a63c:	2301      	movs	r3, #1
    a63e:	425b      	negs	r3, r3
    a640:	8003      	strh	r3, [r0, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    a642:	4b46      	ldr	r3, [pc, #280]	; (a75c <P2PTasks+0x3a8>)
    a644:	4798      	blx	r3
    a646:	e7e2      	b.n	a60e <P2PTasks+0x25a>
                            if( P2PStatus.bits.Resync )
    a648:	4b22      	ldr	r3, [pc, #136]	; (a6d4 <P2PTasks+0x320>)
    a64a:	781b      	ldrb	r3, [r3, #0]
    a64c:	069b      	lsls	r3, r3, #26
    a64e:	d504      	bpl.n	a65a <P2PTasks+0x2a6>
                                P2PStatus.bits.Resync = 0;   
    a650:	4a20      	ldr	r2, [pc, #128]	; (a6d4 <P2PTasks+0x320>)
    a652:	7813      	ldrb	r3, [r2, #0]
    a654:	2120      	movs	r1, #32
    a656:	438b      	bics	r3, r1
    a658:	7013      	strb	r3, [r2, #0]
                            MiMAC_DiscardPacket(); 
    a65a:	4b2f      	ldr	r3, [pc, #188]	; (a718 <P2PTasks+0x364>)
    a65c:	4798      	blx	r3
                        break;                
    a65e:	e090      	b.n	a782 <P2PTasks+0x3ce>
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
    a660:	784b      	ldrb	r3, [r1, #1]
    a662:	2b00      	cmp	r3, #0
    a664:	d120      	bne.n	a6a8 <P2PTasks+0x2f4>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    a666:	4b2a      	ldr	r3, [pc, #168]	; (a710 <P2PTasks+0x35c>)
    a668:	685b      	ldr	r3, [r3, #4]
    a66a:	9307      	str	r3, [sp, #28]
    a66c:	4f35      	ldr	r7, [pc, #212]	; (a744 <P2PTasks+0x390>)
    a66e:	2600      	movs	r6, #0
                                    if( ConnectionTable[i].status.bits.isValid )
    a670:	003c      	movs	r4, r7
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    a672:	4d35      	ldr	r5, [pc, #212]	; (a748 <P2PTasks+0x394>)
    a674:	e003      	b.n	a67e <P2PTasks+0x2ca>
    a676:	3601      	adds	r6, #1
    a678:	370a      	adds	r7, #10
                                for(i = 0; i < CONNECTION_SIZE; i++)
    a67a:	2efa      	cmp	r6, #250	; 0xfa
    a67c:	d014      	beq.n	a6a8 <P2PTasks+0x2f4>
                                    if( ConnectionTable[i].status.bits.isValid )
    a67e:	9606      	str	r6, [sp, #24]
    a680:	00b3      	lsls	r3, r6, #2
    a682:	199b      	adds	r3, r3, r6
    a684:	005b      	lsls	r3, r3, #1
    a686:	18e3      	adds	r3, r4, r3
    a688:	7a1b      	ldrb	r3, [r3, #8]
    a68a:	09db      	lsrs	r3, r3, #7
    a68c:	d0f3      	beq.n	a676 <P2PTasks+0x2c2>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    a68e:	0039      	movs	r1, r7
    a690:	9807      	ldr	r0, [sp, #28]
    a692:	47a8      	blx	r5
    a694:	2800      	cmp	r0, #0
    a696:	d0ee      	beq.n	a676 <P2PTasks+0x2c2>
                                            ConnectionTable[i].status.Val = 0;
    a698:	9a06      	ldr	r2, [sp, #24]
    a69a:	0093      	lsls	r3, r2, #2
    a69c:	189c      	adds	r4, r3, r2
    a69e:	0064      	lsls	r4, r4, #1
    a6a0:	4b28      	ldr	r3, [pc, #160]	; (a744 <P2PTasks+0x390>)
    a6a2:	191c      	adds	r4, r3, r4
    a6a4:	2300      	movs	r3, #0
    a6a6:	7223      	strb	r3, [r4, #8]
                        MiMAC_DiscardPacket();
    a6a8:	4b1b      	ldr	r3, [pc, #108]	; (a718 <P2PTasks+0x364>)
    a6aa:	4798      	blx	r3
                        break;
    a6ac:	e069      	b.n	a782 <P2PTasks+0x3ce>
                    P2PStatus.bits.RxHasUserData = 1;
    a6ae:	4c09      	ldr	r4, [pc, #36]	; (a6d4 <P2PTasks+0x320>)
    a6b0:	7823      	ldrb	r3, [r4, #0]
    a6b2:	2208      	movs	r2, #8
    a6b4:	4313      	orrs	r3, r2
    a6b6:	7023      	strb	r3, [r4, #0]
					pktRxcallback(&rxMessage);
    a6b8:	4b29      	ldr	r3, [pc, #164]	; (a760 <P2PTasks+0x3ac>)
    a6ba:	681b      	ldr	r3, [r3, #0]
    a6bc:	4814      	ldr	r0, [pc, #80]	; (a710 <P2PTasks+0x35c>)
    a6be:	4798      	blx	r3
					P2PStatus.bits.RxHasUserData = 0;
    a6c0:	7823      	ldrb	r3, [r4, #0]
    a6c2:	2208      	movs	r2, #8
    a6c4:	4393      	bics	r3, r2
    a6c6:	7023      	strb	r3, [r4, #0]
					MiMAC_DiscardPacket();
    a6c8:	4b13      	ldr	r3, [pc, #76]	; (a718 <P2PTasks+0x364>)
    a6ca:	4798      	blx	r3
                    break;
    a6cc:	e059      	b.n	a782 <P2PTasks+0x3ce>
    a6ce:	46c0      	nop			; (mov r8, r8)
    a6d0:	0000996d 	.word	0x0000996d
    a6d4:	20003380 	.word	0x20003380
    a6d8:	0000a255 	.word	0x0000a255
    a6dc:	000c8708 	.word	0x000c8708
    a6e0:	20000298 	.word	0x20000298
    a6e4:	20000283 	.word	0x20000283
    a6e8:	2000339c 	.word	0x2000339c
    a6ec:	0000ac59 	.word	0x0000ac59
    a6f0:	20003388 	.word	0x20003388
    a6f4:	0000acb9 	.word	0x0000acb9
    a6f8:	000fffff 	.word	0x000fffff
    a6fc:	00009229 	.word	0x00009229
    a700:	00009245 	.word	0x00009245
    a704:	20002f92 	.word	0x20002f92
    a708:	20002f70 	.word	0x20002f70
    a70c:	20002f90 	.word	0x20002f90
    a710:	2000338c 	.word	0x2000338c
    a714:	00016bc0 	.word	0x00016bc0
    a718:	000091ed 	.word	0x000091ed
    a71c:	20000010 	.word	0x20000010
    a720:	20000011 	.word	0x20000011
    a724:	0000aa19 	.word	0x0000aa19
    a728:	20002f85 	.word	0x20002f85
    a72c:	2000000c 	.word	0x2000000c
    a730:	00009df9 	.word	0x00009df9
    a734:	000044cd 	.word	0x000044cd
    a738:	00009e35 	.word	0x00009e35
    a73c:	00009e6d 	.word	0x00009e6d
    a740:	000044a1 	.word	0x000044a1
    a744:	200025a8 	.word	0x200025a8
    a748:	0000a011 	.word	0x0000a011
    a74c:	20002f8c 	.word	0x20002f8c
    a750:	20002f88 	.word	0x20002f88
    a754:	0000ffff 	.word	0x0000ffff
    a758:	0000a101 	.word	0x0000a101
    a75c:	00008999 	.word	0x00008999
    a760:	2000029c 	.word	0x2000029c
            P2PStatus.bits.RxHasUserData = 1;
    a764:	4c1c      	ldr	r4, [pc, #112]	; (a7d8 <P2PTasks+0x424>)
    a766:	7823      	ldrb	r3, [r4, #0]
    a768:	2208      	movs	r2, #8
    a76a:	4313      	orrs	r3, r2
    a76c:	7023      	strb	r3, [r4, #0]
			pktRxcallback(&rxMessage);
    a76e:	4b1b      	ldr	r3, [pc, #108]	; (a7dc <P2PTasks+0x428>)
    a770:	681b      	ldr	r3, [r3, #0]
    a772:	481b      	ldr	r0, [pc, #108]	; (a7e0 <P2PTasks+0x42c>)
    a774:	4798      	blx	r3
			P2PStatus.bits.RxHasUserData = 0;
    a776:	7823      	ldrb	r3, [r4, #0]
    a778:	2208      	movs	r2, #8
    a77a:	4393      	bics	r3, r2
    a77c:	7023      	strb	r3, [r4, #0]
			MiMAC_DiscardPacket();
    a77e:	4b19      	ldr	r3, [pc, #100]	; (a7e4 <P2PTasks+0x430>)
    a780:	4798      	blx	r3
            if( P2PStatus.bits.DataRequesting && P2PStatus.bits.RxHasUserData )
    a782:	4b15      	ldr	r3, [pc, #84]	; (a7d8 <P2PTasks+0x424>)
    a784:	781b      	ldrb	r3, [r3, #0]
    a786:	075b      	lsls	r3, r3, #29
    a788:	d508      	bpl.n	a79c <P2PTasks+0x3e8>
    a78a:	4b13      	ldr	r3, [pc, #76]	; (a7d8 <P2PTasks+0x424>)
    a78c:	781b      	ldrb	r3, [r3, #0]
    a78e:	071b      	lsls	r3, r3, #28
    a790:	d504      	bpl.n	a79c <P2PTasks+0x3e8>
                P2PStatus.bits.DataRequesting = 0;
    a792:	4a11      	ldr	r2, [pc, #68]	; (a7d8 <P2PTasks+0x424>)
    a794:	7813      	ldrb	r3, [r2, #0]
    a796:	2104      	movs	r1, #4
    a798:	438b      	bics	r3, r1
    a79a:	7013      	strb	r3, [r2, #0]
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    a79c:	4b10      	ldr	r3, [pc, #64]	; (a7e0 <P2PTasks+0x42c>)
    a79e:	7b1b      	ldrb	r3, [r3, #12]
    a7a0:	2b00      	cmp	r3, #0
    a7a2:	d008      	beq.n	a7b6 <P2PTasks+0x402>
    a7a4:	4b0c      	ldr	r3, [pc, #48]	; (a7d8 <P2PTasks+0x424>)
    a7a6:	781b      	ldrb	r3, [r3, #0]
    a7a8:	06db      	lsls	r3, r3, #27
    a7aa:	d404      	bmi.n	a7b6 <P2PTasks+0x402>
    a7ac:	4b0a      	ldr	r3, [pc, #40]	; (a7d8 <P2PTasks+0x424>)
    a7ae:	781b      	ldrb	r3, [r3, #0]
    a7b0:	069b      	lsls	r3, r3, #26
    a7b2:	d400      	bmi.n	a7b6 <P2PTasks+0x402>
    a7b4:	e620      	b.n	a3f8 <P2PTasks+0x44>
            P2PStatus.bits.RxHasUserData = 0;
    a7b6:	4a08      	ldr	r2, [pc, #32]	; (a7d8 <P2PTasks+0x424>)
    a7b8:	7813      	ldrb	r3, [r2, #0]
    a7ba:	2108      	movs	r1, #8
    a7bc:	438b      	bics	r3, r1
    a7be:	7013      	strb	r3, [r2, #0]
            MiMAC_DiscardPacket();
    a7c0:	4b08      	ldr	r3, [pc, #32]	; (a7e4 <P2PTasks+0x430>)
    a7c2:	4798      	blx	r3
    a7c4:	e618      	b.n	a3f8 <P2PTasks+0x44>
                            MiMAC_DiscardPacket();
    a7c6:	4b07      	ldr	r3, [pc, #28]	; (a7e4 <P2PTasks+0x430>)
    a7c8:	4798      	blx	r3
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    a7ca:	2301      	movs	r3, #1
                                dataPtr[dataLen++] = STATUS_ENTRY_NOT_EXIST;
    a7cc:	1c5c      	adds	r4, r3, #1
    a7ce:	22f0      	movs	r2, #240	; 0xf0
    a7d0:	4659      	mov	r1, fp
    a7d2:	54ca      	strb	r2, [r1, r3]
    a7d4:	e6f1      	b.n	a5ba <P2PTasks+0x206>
    a7d6:	46c0      	nop			; (mov r8, r8)
    a7d8:	20003380 	.word	0x20003380
    a7dc:	2000029c 	.word	0x2000029c
    a7e0:	2000338c 	.word	0x2000338c
    a7e4:	000091ed 	.word	0x000091ed

0000a7e8 <MiApp_TransceiverPowerState>:
    {
    a7e8:	b570      	push	{r4, r5, r6, lr}
    a7ea:	0004      	movs	r4, r0
        switch(Mode)
    a7ec:	2801      	cmp	r0, #1
    a7ee:	d013      	beq.n	a818 <MiApp_TransceiverPowerState+0x30>
    a7f0:	2800      	cmp	r0, #0
    a7f2:	d004      	beq.n	a7fe <MiApp_TransceiverPowerState+0x16>
    a7f4:	2802      	cmp	r0, #2
    a7f6:	d01c      	beq.n	a832 <MiApp_TransceiverPowerState+0x4a>
        return ERR_INVALID_INPUT;    
    a7f8:	230d      	movs	r3, #13
    }
    a7fa:	0018      	movs	r0, r3
    a7fc:	bd70      	pop	{r4, r5, r6, pc}
                    if( MiMAC_PowerState(POWER_STATE_DEEP_SLEEP) )
    a7fe:	2000      	movs	r0, #0
    a800:	4b1c      	ldr	r3, [pc, #112]	; (a874 <MiApp_TransceiverPowerState+0x8c>)
    a802:	4798      	blx	r3
                    return ERR_TRX_FAIL;
    a804:	230c      	movs	r3, #12
                    if( MiMAC_PowerState(POWER_STATE_DEEP_SLEEP) )
    a806:	2800      	cmp	r0, #0
    a808:	d0f7      	beq.n	a7fa <MiApp_TransceiverPowerState+0x12>
                        P2PStatus.bits.Sleeping = 1;
    a80a:	4a1b      	ldr	r2, [pc, #108]	; (a878 <MiApp_TransceiverPowerState+0x90>)
    a80c:	7813      	ldrb	r3, [r2, #0]
    a80e:	2101      	movs	r1, #1
    a810:	430b      	orrs	r3, r1
    a812:	7013      	strb	r3, [r2, #0]
                        return SUCCESS;
    a814:	0023      	movs	r3, r4
    a816:	e7f0      	b.n	a7fa <MiApp_TransceiverPowerState+0x12>
                    if( MiMAC_PowerState(POWER_STATE_OPERATE) )
    a818:	20ff      	movs	r0, #255	; 0xff
    a81a:	4b16      	ldr	r3, [pc, #88]	; (a874 <MiApp_TransceiverPowerState+0x8c>)
    a81c:	4798      	blx	r3
                    return ERR_TRX_FAIL;
    a81e:	230c      	movs	r3, #12
                    if( MiMAC_PowerState(POWER_STATE_OPERATE) )
    a820:	2800      	cmp	r0, #0
    a822:	d0ea      	beq.n	a7fa <MiApp_TransceiverPowerState+0x12>
                        P2PStatus.bits.Sleeping = 0;
    a824:	4a14      	ldr	r2, [pc, #80]	; (a878 <MiApp_TransceiverPowerState+0x90>)
    a826:	7813      	ldrb	r3, [r2, #0]
    a828:	2101      	movs	r1, #1
    a82a:	438b      	bics	r3, r1
    a82c:	7013      	strb	r3, [r2, #0]
                        return SUCCESS;
    a82e:	2300      	movs	r3, #0
    a830:	e7e3      	b.n	a7fa <MiApp_TransceiverPowerState+0x12>
                    if( false == MiMAC_PowerState(POWER_STATE_OPERATE) )
    a832:	20ff      	movs	r0, #255	; 0xff
    a834:	4b0f      	ldr	r3, [pc, #60]	; (a874 <MiApp_TransceiverPowerState+0x8c>)
    a836:	4798      	blx	r3
                        return ERR_TRX_FAIL;
    a838:	230c      	movs	r3, #12
                    if( false == MiMAC_PowerState(POWER_STATE_OPERATE) )
    a83a:	2800      	cmp	r0, #0
    a83c:	d0dd      	beq.n	a7fa <MiApp_TransceiverPowerState+0x12>
                    P2PStatus.bits.Sleeping = 0;
    a83e:	4a0e      	ldr	r2, [pc, #56]	; (a878 <MiApp_TransceiverPowerState+0x90>)
    a840:	7813      	ldrb	r3, [r2, #0]
    a842:	2101      	movs	r1, #1
    a844:	438b      	bics	r3, r1
    a846:	7013      	strb	r3, [r2, #0]
                    if( CheckForData() == false )
    a848:	4b0c      	ldr	r3, [pc, #48]	; (a87c <MiApp_TransceiverPowerState+0x94>)
    a84a:	4798      	blx	r3
                        return ERR_TX_FAIL;
    a84c:	230b      	movs	r3, #11
                    if( CheckForData() == false )
    a84e:	2800      	cmp	r0, #0
    a850:	d0d3      	beq.n	a7fa <MiApp_TransceiverPowerState+0x12>
                    while( P2PStatus.bits.DataRequesting ) 
    a852:	4b09      	ldr	r3, [pc, #36]	; (a878 <MiApp_TransceiverPowerState+0x90>)
    a854:	781b      	ldrb	r3, [r3, #0]
    a856:	075b      	lsls	r3, r3, #29
    a858:	d509      	bpl.n	a86e <MiApp_TransceiverPowerState+0x86>
                        P2PTasks();
    a85a:	4e09      	ldr	r6, [pc, #36]	; (a880 <MiApp_TransceiverPowerState+0x98>)
						SYSTEM_RunTasks();
    a85c:	4d09      	ldr	r5, [pc, #36]	; (a884 <MiApp_TransceiverPowerState+0x9c>)
                    while( P2PStatus.bits.DataRequesting ) 
    a85e:	4c06      	ldr	r4, [pc, #24]	; (a878 <MiApp_TransceiverPowerState+0x90>)
                        P2PTasks();
    a860:	47b0      	blx	r6
						SYSTEM_RunTasks();
    a862:	47a8      	blx	r5
                    while( P2PStatus.bits.DataRequesting ) 
    a864:	7823      	ldrb	r3, [r4, #0]
    a866:	075b      	lsls	r3, r3, #29
    a868:	d4fa      	bmi.n	a860 <MiApp_TransceiverPowerState+0x78>
                    return SUCCESS;
    a86a:	2300      	movs	r3, #0
    a86c:	e7c5      	b.n	a7fa <MiApp_TransceiverPowerState+0x12>
    a86e:	2300      	movs	r3, #0
    a870:	e7c3      	b.n	a7fa <MiApp_TransceiverPowerState+0x12>
    a872:	46c0      	nop			; (mov r8, r8)
    a874:	00008d99 	.word	0x00008d99
    a878:	20003380 	.word	0x20003380
    a87c:	00009f41 	.word	0x00009f41
    a880:	0000a3b5 	.word	0x0000a3b5
    a884:	0000c185 	.word	0x0000c185

0000a888 <MiApp_EstablishConnection>:
    {
    a888:	b5f0      	push	{r4, r5, r6, r7, lr}
    a88a:	46d6      	mov	lr, sl
    a88c:	464f      	mov	r7, r9
    a88e:	4646      	mov	r6, r8
    a890:	b5c0      	push	{r6, r7, lr}
    a892:	b08a      	sub	sp, #40	; 0x28
    a894:	231f      	movs	r3, #31
    a896:	aa02      	add	r2, sp, #8
    a898:	4694      	mov	ip, r2
    a89a:	4463      	add	r3, ip
    a89c:	7018      	strb	r0, [r3, #0]
        uint8_t    tmpConnectionMode = ConnMode;
    a89e:	4c3c      	ldr	r4, [pc, #240]	; (a990 <MiApp_EstablishConnection+0x108>)
    a8a0:	7823      	ldrb	r3, [r4, #0]
    a8a2:	469a      	mov	sl, r3
        tick1.Val = MiWi_TickGet();
    a8a4:	4d3b      	ldr	r5, [pc, #236]	; (a994 <MiApp_EstablishConnection+0x10c>)
    a8a6:	47a8      	blx	r5
    a8a8:	4b3b      	ldr	r3, [pc, #236]	; (a998 <MiApp_EstablishConnection+0x110>)
    a8aa:	6018      	str	r0, [r3, #0]
        t1.Val = MiWi_TickGet();
    a8ac:	47a8      	blx	r5
        t1.Val -= (ONE_SECOND);
    a8ae:	0003      	movs	r3, r0
    a8b0:	4a3a      	ldr	r2, [pc, #232]	; (a99c <MiApp_EstablishConnection+0x114>)
    a8b2:	4694      	mov	ip, r2
    a8b4:	4463      	add	r3, ip
    a8b6:	9307      	str	r3, [sp, #28]
        ConnMode = ENABLE_ALL_CONN;
    a8b8:	2300      	movs	r3, #0
    a8ba:	7023      	strb	r3, [r4, #0]
        P2PStatus.bits.SearchConnection = 1;
    a8bc:	4a38      	ldr	r2, [pc, #224]	; (a9a0 <MiApp_EstablishConnection+0x118>)
    a8be:	7813      	ldrb	r3, [r2, #0]
    a8c0:	2110      	movs	r1, #16
    a8c2:	430b      	orrs	r3, r1
    a8c4:	7013      	strb	r3, [r2, #0]
        EstConfCallback = ConfCallback;
    a8c6:	4b37      	ldr	r3, [pc, #220]	; (a9a4 <MiApp_EstablishConnection+0x11c>)
    a8c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a8ca:	601a      	str	r2, [r3, #0]
        uint8_t    connectionInterval = 0;
    a8cc:	2500      	movs	r5, #0
        uint8_t    retry = CONNECTION_RETRY_TIMES;
    a8ce:	2303      	movs	r3, #3
    a8d0:	4698      	mov	r8, r3
        while( P2PStatus.bits.SearchConnection )
    a8d2:	4b33      	ldr	r3, [pc, #204]	; (a9a0 <MiApp_EstablishConnection+0x118>)
    a8d4:	4699      	mov	r9, r3
            t2.Val = MiWi_TickGet();
    a8d6:	4c2f      	ldr	r4, [pc, #188]	; (a994 <MiApp_EstablishConnection+0x10c>)
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
    a8d8:	4e33      	ldr	r6, [pc, #204]	; (a9a8 <MiApp_EstablishConnection+0x120>)
        while( P2PStatus.bits.SearchConnection )
    a8da:	e034      	b.n	a946 <MiApp_EstablishConnection+0xbe>
                if( retry-- == 0 )
    a8dc:	4643      	mov	r3, r8
    a8de:	1e5f      	subs	r7, r3, #1
    a8e0:	b2ff      	uxtb	r7, r7
    a8e2:	2b00      	cmp	r3, #0
    a8e4:	d041      	beq.n	a96a <MiApp_EstablishConnection+0xe2>
                MiApp_Set(CHANNEL, &Channel);
    a8e6:	211f      	movs	r1, #31
    a8e8:	ab02      	add	r3, sp, #8
    a8ea:	469c      	mov	ip, r3
    a8ec:	4461      	add	r1, ip
    a8ee:	2000      	movs	r0, #0
    a8f0:	4b2e      	ldr	r3, [pc, #184]	; (a9ac <MiApp_EstablishConnection+0x124>)
    a8f2:	4798      	blx	r3
                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REQUEST));
    a8f4:	2010      	movs	r0, #16
    a8f6:	4b2e      	ldr	r3, [pc, #184]	; (a9b0 <MiApp_EstablishConnection+0x128>)
    a8f8:	4798      	blx	r3
                if (NULL == dataPtr)
    a8fa:	2800      	cmp	r0, #0
    a8fc:	d041      	beq.n	a982 <MiApp_EstablishConnection+0xfa>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_REQUEST;
    a8fe:	2381      	movs	r3, #129	; 0x81
    a900:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = currentChannel;
    a902:	4b2c      	ldr	r3, [pc, #176]	; (a9b4 <MiApp_EstablishConnection+0x12c>)
    a904:	781b      	ldrb	r3, [r3, #0]
    a906:	7043      	strb	r3, [r0, #1]
                dataPtr[dataLen++] = P2PCapacityInfo;
    a908:	4b2b      	ldr	r3, [pc, #172]	; (a9b8 <MiApp_EstablishConnection+0x130>)
    a90a:	781b      	ldrb	r3, [r3, #0]
    a90c:	7083      	strb	r3, [r0, #2]
                            dataPtr[dataLen++] = AdditionalNodeID[i];
    a90e:	4b2b      	ldr	r3, [pc, #172]	; (a9bc <MiApp_EstablishConnection+0x134>)
    a910:	781b      	ldrb	r3, [r3, #0]
    a912:	70c3      	strb	r3, [r0, #3]
                        SendPacket(true, myPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    a914:	4b2a      	ldr	r3, [pc, #168]	; (a9c0 <MiApp_EstablishConnection+0x138>)
    a916:	8819      	ldrh	r1, [r3, #0]
    a918:	4b2a      	ldr	r3, [pc, #168]	; (a9c4 <MiApp_EstablishConnection+0x13c>)
    a91a:	9305      	str	r3, [sp, #20]
    a91c:	2301      	movs	r3, #1
    a91e:	9304      	str	r3, [sp, #16]
    a920:	2300      	movs	r3, #0
    a922:	9303      	str	r3, [sp, #12]
    a924:	9002      	str	r0, [sp, #8]
    a926:	2204      	movs	r2, #4
    a928:	9201      	str	r2, [sp, #4]
    a92a:	9300      	str	r3, [sp, #0]
    a92c:	3301      	adds	r3, #1
    a92e:	2200      	movs	r2, #0
    a930:	2001      	movs	r0, #1
    a932:	4d25      	ldr	r5, [pc, #148]	; (a9c8 <MiApp_EstablishConnection+0x140>)
    a934:	47a8      	blx	r5
                t1.Val = t2.Val;
    a936:	9b08      	ldr	r3, [sp, #32]
    a938:	9307      	str	r3, [sp, #28]
                if( retry-- == 0 )
    a93a:	46b8      	mov	r8, r7
                connectionInterval = CONNECTION_INTERVAL-1;
    a93c:	2503      	movs	r5, #3
            P2PTasks();
    a93e:	4b23      	ldr	r3, [pc, #140]	; (a9cc <MiApp_EstablishConnection+0x144>)
    a940:	4798      	blx	r3
			SYSTEM_RunTasks();
    a942:	4b23      	ldr	r3, [pc, #140]	; (a9d0 <MiApp_EstablishConnection+0x148>)
    a944:	4798      	blx	r3
        while( P2PStatus.bits.SearchConnection )
    a946:	464b      	mov	r3, r9
    a948:	781b      	ldrb	r3, [r3, #0]
    a94a:	06db      	lsls	r3, r3, #27
    a94c:	d514      	bpl.n	a978 <MiApp_EstablishConnection+0xf0>
            t2.Val = MiWi_TickGet();
    a94e:	47a0      	blx	r4
    a950:	0007      	movs	r7, r0
    a952:	9008      	str	r0, [sp, #32]
            if( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND) )
    a954:	9907      	ldr	r1, [sp, #28]
    a956:	47b0      	blx	r6
    a958:	4b1e      	ldr	r3, [pc, #120]	; (a9d4 <MiApp_EstablishConnection+0x14c>)
    a95a:	4298      	cmp	r0, r3
    a95c:	d9ef      	bls.n	a93e <MiApp_EstablishConnection+0xb6>
                if( connectionInterval-- > 0 )
    a95e:	2d00      	cmp	r5, #0
    a960:	d0bc      	beq.n	a8dc <MiApp_EstablishConnection+0x54>
    a962:	3d01      	subs	r5, #1
    a964:	b2ed      	uxtb	r5, r5
                t1.Val = t2.Val;
    a966:	9707      	str	r7, [sp, #28]
    a968:	e7ed      	b.n	a946 <MiApp_EstablishConnection+0xbe>
                    P2PStatus.bits.SearchConnection = 0;
    a96a:	4a0d      	ldr	r2, [pc, #52]	; (a9a0 <MiApp_EstablishConnection+0x118>)
    a96c:	7813      	ldrb	r3, [r2, #0]
    a96e:	2110      	movs	r1, #16
    a970:	438b      	bics	r3, r1
    a972:	7013      	strb	r3, [r2, #0]
                    return 0xFF;
    a974:	25ff      	movs	r5, #255	; 0xff
    a976:	e004      	b.n	a982 <MiApp_EstablishConnection+0xfa>
        ConnMode = tmpConnectionMode;
    a978:	4b05      	ldr	r3, [pc, #20]	; (a990 <MiApp_EstablishConnection+0x108>)
    a97a:	4652      	mov	r2, sl
    a97c:	701a      	strb	r2, [r3, #0]
        return LatestConnection;
    a97e:	4b16      	ldr	r3, [pc, #88]	; (a9d8 <MiApp_EstablishConnection+0x150>)
    a980:	781d      	ldrb	r5, [r3, #0]
    }
    a982:	0028      	movs	r0, r5
    a984:	b00a      	add	sp, #40	; 0x28
    a986:	bc1c      	pop	{r2, r3, r4}
    a988:	4690      	mov	r8, r2
    a98a:	4699      	mov	r9, r3
    a98c:	46a2      	mov	sl, r4
    a98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a990:	20000010 	.word	0x20000010
    a994:	0000ac59 	.word	0x0000ac59
    a998:	20003384 	.word	0x20003384
    a99c:	fff0bdc0 	.word	0xfff0bdc0
    a9a0:	20003380 	.word	0x20003380
    a9a4:	20002f8c 	.word	0x20002f8c
    a9a8:	0000acb9 	.word	0x0000acb9
    a9ac:	0000a039 	.word	0x0000a039
    a9b0:	0000aa19 	.word	0x0000aa19
    a9b4:	20000011 	.word	0x20000011
    a9b8:	20002f85 	.word	0x20002f85
    a9bc:	2000000c 	.word	0x2000000c
    a9c0:	20002f88 	.word	0x20002f88
    a9c4:	00009e35 	.word	0x00009e35
    a9c8:	00009e6d 	.word	0x00009e6d
    a9cc:	0000a3b5 	.word	0x0000a3b5
    a9d0:	0000c185 	.word	0x0000c185
    a9d4:	000f4240 	.word	0x000f4240
    a9d8:	200025a4 	.word	0x200025a4

0000a9dc <MiMem_Init>:
* Output:		    none
*
* Overview:		    This function will initialize the Mimem buffers
********************************************************************/
void MiMem_Init(void)
{
    a9dc:	b510      	push	{r4, lr}
	size_t startAddress =  ALIGN((size_t)heapMem);
    a9de:	4a0b      	ldr	r2, [pc, #44]	; (aa0c <MiMem_Init+0x30>)
    a9e0:	1e50      	subs	r0, r2, #1
    a9e2:	2403      	movs	r4, #3
    a9e4:	43a0      	bics	r0, r4
    a9e6:	1d01      	adds	r1, r0, #4

	/*Aligned heap is the base */
	base = (Block_t*) startAddress;
    a9e8:	4b09      	ldr	r3, [pc, #36]	; (aa10 <MiMem_Init+0x34>)
    a9ea:	6019      	str	r1, [r3, #0]
	base->size = totalFreeBytesRemaining = HEAP_SIZE - (startAddress - (size_t)heapMem);
    a9ec:	4253      	negs	r3, r2
    a9ee:	43a3      	bics	r3, r4
    a9f0:	24c0      	movs	r4, #192	; 0xc0
    a9f2:	0164      	lsls	r4, r4, #5
    a9f4:	46a4      	mov	ip, r4
    a9f6:	4462      	add	r2, ip
    a9f8:	189b      	adds	r3, r3, r2
    a9fa:	4a06      	ldr	r2, [pc, #24]	; (aa14 <MiMem_Init+0x38>)
    a9fc:	6013      	str	r3, [r2, #0]
    a9fe:	60c3      	str	r3, [r0, #12]
	base->free = true;
    aa00:	2301      	movs	r3, #1
    aa02:	7403      	strb	r3, [r0, #16]
	base->next = NULL;
    aa04:	2300      	movs	r3, #0
    aa06:	6043      	str	r3, [r0, #4]
	base->prev = NULL;
    aa08:	6083      	str	r3, [r0, #8]
}
    aa0a:	bd10      	pop	{r4, pc}
    aa0c:	200002a4 	.word	0x200002a4
    aa10:	200002a0 	.word	0x200002a0
    aa14:	20001aa4 	.word	0x20001aa4

0000aa18 <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
void* MiMem_Alloc(uint8_t size)
{
    aa18:	b570      	push	{r4, r5, r6, lr}
    aa1a:	0005      	movs	r5, r0
	size_t requestedSize = 0U;
	void* requestedMemPtr = NULL;

	/* Initialize the Heap */
	if (!base)
    aa1c:	4b29      	ldr	r3, [pc, #164]	; (aac4 <MiMem_Alloc+0xac>)
    aa1e:	681b      	ldr	r3, [r3, #0]
    aa20:	2b00      	cmp	r3, #0
    aa22:	d012      	beq.n	aa4a <MiMem_Alloc+0x32>
	{
		MiMem_Init();
	}
	/* if requested size is of non zero */
	if (size)
    aa24:	2d00      	cmp	r5, #0
    aa26:	d047      	beq.n	aab8 <MiMem_Alloc+0xa0>
	{
		requestedSize =  size + blockMetaDataSize;
		requestedSize = ALIGN(requestedSize);
    aa28:	0029      	movs	r1, r5
    aa2a:	310f      	adds	r1, #15
    aa2c:	2303      	movs	r3, #3
    aa2e:	4399      	bics	r1, r3
    aa30:	3104      	adds	r1, #4
		if (requestedSize <= totalFreeBytesRemaining)
    aa32:	4b25      	ldr	r3, [pc, #148]	; (aac8 <MiMem_Alloc+0xb0>)
    aa34:	6818      	ldr	r0, [r3, #0]
    aa36:	4281      	cmp	r1, r0
    aa38:	d840      	bhi.n	aabc <MiMem_Alloc+0xa4>
		{
			size_t receivedSize = (size_t)~0U;
			Block_t *requestedBlock = NULL;
			Block_t *blockPtr = base;
    aa3a:	4b22      	ldr	r3, [pc, #136]	; (aac4 <MiMem_Alloc+0xac>)
    aa3c:	681b      	ldr	r3, [r3, #0]

			/* Find best fit free Block */
			while (blockPtr)
    aa3e:	2b00      	cmp	r3, #0
    aa40:	d03e      	beq.n	aac0 <MiMem_Alloc+0xa8>
    aa42:	2600      	movs	r6, #0
    aa44:	2401      	movs	r4, #1
    aa46:	4264      	negs	r4, r4
    aa48:	e005      	b.n	aa56 <MiMem_Alloc+0x3e>
		MiMem_Init();
    aa4a:	4b20      	ldr	r3, [pc, #128]	; (aacc <MiMem_Alloc+0xb4>)
    aa4c:	4798      	blx	r3
    aa4e:	e7e9      	b.n	aa24 <MiMem_Alloc+0xc>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
				{
					receivedSize = blockPtr->size;
					requestedBlock = blockPtr;
				}
				blockPtr = blockPtr->next;
    aa50:	681b      	ldr	r3, [r3, #0]
			while (blockPtr)
    aa52:	2b00      	cmp	r3, #0
    aa54:	d00a      	beq.n	aa6c <MiMem_Alloc+0x54>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
    aa56:	7b1a      	ldrb	r2, [r3, #12]
    aa58:	2a00      	cmp	r2, #0
    aa5a:	d0f9      	beq.n	aa50 <MiMem_Alloc+0x38>
    aa5c:	689a      	ldr	r2, [r3, #8]
    aa5e:	4291      	cmp	r1, r2
    aa60:	d8f6      	bhi.n	aa50 <MiMem_Alloc+0x38>
    aa62:	42a2      	cmp	r2, r4
    aa64:	d2f4      	bcs.n	aa50 <MiMem_Alloc+0x38>
    aa66:	001e      	movs	r6, r3
					receivedSize = blockPtr->size;
    aa68:	0014      	movs	r4, r2
    aa6a:	e7f1      	b.n	aa50 <MiMem_Alloc+0x38>
    aa6c:	2400      	movs	r4, #0
			}

			if (requestedBlock)
    aa6e:	2e00      	cmp	r6, #0
    aa70:	d012      	beq.n	aa98 <MiMem_Alloc+0x80>
			{
				if ((requestedBlock->size - requestedSize) > HEAP_MINIMUM_BLOCK_SIZE)
    aa72:	68b3      	ldr	r3, [r6, #8]
    aa74:	1a5b      	subs	r3, r3, r1
    aa76:	2b14      	cmp	r3, #20
    aa78:	d810      	bhi.n	aa9c <MiMem_Alloc+0x84>
				splitBlock (requestedBlock, requestedSize);
				requestedBlock->free = false;
    aa7a:	2300      	movs	r3, #0
    aa7c:	7333      	strb	r3, [r6, #12]
				totalFreeBytesRemaining -= requestedBlock->size;
    aa7e:	68b3      	ldr	r3, [r6, #8]
    aa80:	1ac0      	subs	r0, r0, r3
    aa82:	4b11      	ldr	r3, [pc, #68]	; (aac8 <MiMem_Alloc+0xb0>)
    aa84:	6018      	str	r0, [r3, #0]
				requestedMemPtr = ( void* )(((uint8_t*)requestedBlock) + blockMetaDataSize);
    aa86:	0034      	movs	r4, r6
    aa88:	3410      	adds	r4, #16
			}
		}
	}
	if (NULL != requestedMemPtr)
    aa8a:	2c00      	cmp	r4, #0
    aa8c:	d004      	beq.n	aa98 <MiMem_Alloc+0x80>
	{
		memset(requestedMemPtr, 0, size);
    aa8e:	002a      	movs	r2, r5
    aa90:	2100      	movs	r1, #0
    aa92:	0020      	movs	r0, r4
    aa94:	4b0e      	ldr	r3, [pc, #56]	; (aad0 <MiMem_Alloc+0xb8>)
    aa96:	4798      	blx	r3
	}
	return requestedMemPtr;
}
    aa98:	0020      	movs	r0, r4
    aa9a:	bd70      	pop	{r4, r5, r6, pc}
  \param[in] size size of the memory chunk requested
  \return None.
 ******************************************************************************/
static void splitBlock(Block_t* blockTobeSplitted, size_t size)
{
	uint8_t* ptr = (uint8_t*)blockTobeSplitted + size;
    aa9c:	1872      	adds	r2, r6, r1
	Block_t* newBlock = (Block_t*)ptr;

	newBlock->size = blockTobeSplitted->size - size;
    aa9e:	6093      	str	r3, [r2, #8]

	if (blockTobeSplitted->next)
    aaa0:	6833      	ldr	r3, [r6, #0]
    aaa2:	2b00      	cmp	r3, #0
    aaa4:	d000      	beq.n	aaa8 <MiMem_Alloc+0x90>
		blockTobeSplitted->next->prev = newBlock;
    aaa6:	605a      	str	r2, [r3, #4]

	newBlock->next = blockTobeSplitted->next;
    aaa8:	6833      	ldr	r3, [r6, #0]
    aaaa:	6013      	str	r3, [r2, #0]
	newBlock->prev = blockTobeSplitted;
    aaac:	6056      	str	r6, [r2, #4]
	newBlock->free = true;
    aaae:	2301      	movs	r3, #1
    aab0:	7313      	strb	r3, [r2, #12]

	blockTobeSplitted->next = newBlock;
    aab2:	6032      	str	r2, [r6, #0]
	blockTobeSplitted->size = size;
    aab4:	60b1      	str	r1, [r6, #8]
    aab6:	e7e0      	b.n	aa7a <MiMem_Alloc+0x62>
    aab8:	2400      	movs	r4, #0
    aaba:	e7ed      	b.n	aa98 <MiMem_Alloc+0x80>
    aabc:	2400      	movs	r4, #0
    aabe:	e7eb      	b.n	aa98 <MiMem_Alloc+0x80>
			while (blockPtr)
    aac0:	2400      	movs	r4, #0
    aac2:	e7e9      	b.n	aa98 <MiMem_Alloc+0x80>
    aac4:	200002a0 	.word	0x200002a0
    aac8:	20001aa4 	.word	0x20001aa4
    aacc:	0000a9dd 	.word	0x0000a9dd
    aad0:	00014ff5 	.word	0x00014ff5

0000aad4 <MiMem_Free>:
	Block_t* blockPtr = base;
    aad4:	4b1c      	ldr	r3, [pc, #112]	; (ab48 <MiMem_Free+0x74>)
    aad6:	681b      	ldr	r3, [r3, #0]
	Block_t* freeBlockPtr = (Block_t*)((uint8_t*)ptr - (uint8_t*)blockMetaDataSize);
    aad8:	3810      	subs	r0, #16
	for(; ((blockPtr != NULL) && (blockPtr != freeBlockPtr)); blockPtr = blockPtr->next);
    aada:	2b00      	cmp	r3, #0
    aadc:	d030      	beq.n	ab40 <MiMem_Free+0x6c>
    aade:	4283      	cmp	r3, r0
    aae0:	d02f      	beq.n	ab42 <MiMem_Free+0x6e>
    aae2:	681b      	ldr	r3, [r3, #0]
    aae4:	2b00      	cmp	r3, #0
    aae6:	d02b      	beq.n	ab40 <MiMem_Free+0x6c>
    aae8:	4298      	cmp	r0, r3
    aaea:	d1fa      	bne.n	aae2 <MiMem_Free+0xe>
		blockPtr->free = true;
    aaec:	2301      	movs	r3, #1
    aaee:	7303      	strb	r3, [r0, #12]
		totalFreeBytesRemaining += blockPtr->size;
    aaf0:	6881      	ldr	r1, [r0, #8]
    aaf2:	4a16      	ldr	r2, [pc, #88]	; (ab4c <MiMem_Free+0x78>)
    aaf4:	6813      	ldr	r3, [r2, #0]
    aaf6:	185b      	adds	r3, r3, r1
    aaf8:	6013      	str	r3, [r2, #0]
		if (blockPtr->prev && blockPtr->prev->free)
    aafa:	6843      	ldr	r3, [r0, #4]
    aafc:	2b00      	cmp	r3, #0
    aafe:	d00f      	beq.n	ab20 <MiMem_Free+0x4c>
    ab00:	7b1a      	ldrb	r2, [r3, #12]
    ab02:	2a00      	cmp	r2, #0
    ab04:	d00c      	beq.n	ab20 <MiMem_Free+0x4c>
			blockPtr->prev->size += blockPtr->size;
    ab06:	689a      	ldr	r2, [r3, #8]
    ab08:	4694      	mov	ip, r2
    ab0a:	4461      	add	r1, ip
    ab0c:	6099      	str	r1, [r3, #8]
			if (blockPtr->next)
    ab0e:	6803      	ldr	r3, [r0, #0]
    ab10:	2b00      	cmp	r3, #0
    ab12:	d001      	beq.n	ab18 <MiMem_Free+0x44>
			blockPtr->next->prev = blockPtr->prev;
    ab14:	6842      	ldr	r2, [r0, #4]
    ab16:	605a      	str	r2, [r3, #4]
			blockPtr->prev->next = blockPtr->next;
    ab18:	6843      	ldr	r3, [r0, #4]
    ab1a:	6802      	ldr	r2, [r0, #0]
    ab1c:	601a      	str	r2, [r3, #0]
			blockPtr = blockPtr->prev;
    ab1e:	6840      	ldr	r0, [r0, #4]
		if (blockPtr->next && blockPtr->next->free)
    ab20:	6803      	ldr	r3, [r0, #0]
    ab22:	2b00      	cmp	r3, #0
    ab24:	d00c      	beq.n	ab40 <MiMem_Free+0x6c>
    ab26:	7b1a      	ldrb	r2, [r3, #12]
    ab28:	2a00      	cmp	r2, #0
    ab2a:	d009      	beq.n	ab40 <MiMem_Free+0x6c>
			blockPtr->size += blockPtr->next->size ;
    ab2c:	6882      	ldr	r2, [r0, #8]
    ab2e:	6899      	ldr	r1, [r3, #8]
    ab30:	468c      	mov	ip, r1
    ab32:	4462      	add	r2, ip
    ab34:	6082      	str	r2, [r0, #8]
			blockPtr->next = blockPtr->next->next;
    ab36:	681b      	ldr	r3, [r3, #0]
    ab38:	6003      	str	r3, [r0, #0]
			if (blockPtr->next)
    ab3a:	2b00      	cmp	r3, #0
    ab3c:	d000      	beq.n	ab40 <MiMem_Free+0x6c>
			blockPtr->next->prev = blockPtr;
    ab3e:	6058      	str	r0, [r3, #4]
}
    ab40:	4770      	bx	lr
	Block_t* blockPtr = base;
    ab42:	0018      	movs	r0, r3
    ab44:	e7d2      	b.n	aaec <MiMem_Free+0x18>
    ab46:	46c0      	nop			; (mov r8, r8)
    ab48:	200002a0 	.word	0x200002a0
    ab4c:	20001aa4 	.word	0x20001aa4

0000ab50 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    ab50:	b530      	push	{r4, r5, lr}
	if (timers) {
    ab52:	4b14      	ldr	r3, [pc, #80]	; (aba4 <placeTimer+0x54>)
    ab54:	681d      	ldr	r5, [r3, #0]
    ab56:	2d00      	cmp	r5, #0
    ab58:	d01c      	beq.n	ab94 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    ab5a:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    ab5c:	6869      	ldr	r1, [r5, #4]
    ab5e:	428a      	cmp	r2, r1
    ab60:	d309      	bcc.n	ab76 <placeTimer+0x26>
    ab62:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    ab64:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    ab66:	6823      	ldr	r3, [r4, #0]
    ab68:	2b00      	cmp	r3, #0
    ab6a:	d008      	beq.n	ab7e <placeTimer+0x2e>
			if (timeout < t->timeout) {
    ab6c:	6859      	ldr	r1, [r3, #4]
    ab6e:	4291      	cmp	r1, r2
    ab70:	d803      	bhi.n	ab7a <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    ab72:	001c      	movs	r4, r3
    ab74:	e7f6      	b.n	ab64 <placeTimer+0x14>
    ab76:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    ab78:	2400      	movs	r4, #0
				t->timeout -= timeout;
    ab7a:	1a89      	subs	r1, r1, r2
    ab7c:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    ab7e:	6042      	str	r2, [r0, #4]

		if (prev) {
    ab80:	2c00      	cmp	r4, #0
    ab82:	d003      	beq.n	ab8c <placeTimer+0x3c>
			timer->next = prev->next;
    ab84:	6823      	ldr	r3, [r4, #0]
    ab86:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    ab88:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    ab8a:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    ab8c:	6005      	str	r5, [r0, #0]
			timers = timer;
    ab8e:	4b05      	ldr	r3, [pc, #20]	; (aba4 <placeTimer+0x54>)
    ab90:	6018      	str	r0, [r3, #0]
    ab92:	e7fa      	b.n	ab8a <placeTimer+0x3a>
		timer->next = NULL;
    ab94:	2300      	movs	r3, #0
    ab96:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    ab98:	6883      	ldr	r3, [r0, #8]
    ab9a:	6043      	str	r3, [r0, #4]
		timers = timer;
    ab9c:	4b01      	ldr	r3, [pc, #4]	; (aba4 <placeTimer+0x54>)
    ab9e:	6018      	str	r0, [r3, #0]
}
    aba0:	e7f3      	b.n	ab8a <placeTimer+0x3a>
    aba2:	46c0      	nop			; (mov r8, r8)
    aba4:	20001aa8 	.word	0x20001aa8

0000aba8 <SYS_HwOverflow_Cb>:
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
}

void SYS_HwOverflow_Cb(void)
{
	timerExtension1++;
    aba8:	4a06      	ldr	r2, [pc, #24]	; (abc4 <SYS_HwOverflow_Cb+0x1c>)
    abaa:	7813      	ldrb	r3, [r2, #0]
    abac:	3301      	adds	r3, #1
    abae:	b2db      	uxtb	r3, r3
    abb0:	7013      	strb	r3, [r2, #0]
	if(timerExtension1 == 0)
    abb2:	7813      	ldrb	r3, [r2, #0]
    abb4:	2b00      	cmp	r3, #0
    abb6:	d104      	bne.n	abc2 <SYS_HwOverflow_Cb+0x1a>
	{
		timerExtension2++;
    abb8:	4a03      	ldr	r2, [pc, #12]	; (abc8 <SYS_HwOverflow_Cb+0x20>)
    abba:	7813      	ldrb	r3, [r2, #0]
    abbc:	3301      	adds	r3, #1
    abbe:	b2db      	uxtb	r3, r3
    abc0:	7013      	strb	r3, [r2, #0]
	}
}
    abc2:	4770      	bx	lr
    abc4:	200033a4 	.word	0x200033a4
    abc8:	200033a5 	.word	0x200033a5

0000abcc <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    abcc:	4b0e      	ldr	r3, [pc, #56]	; (ac08 <SYS_TimerStop+0x3c>)
    abce:	681a      	ldr	r2, [r3, #0]
    abd0:	2a00      	cmp	r2, #0
    abd2:	d014      	beq.n	abfe <SYS_TimerStop+0x32>
		if (t == timer) {
    abd4:	4282      	cmp	r2, r0
    abd6:	d013      	beq.n	ac00 <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    abd8:	6813      	ldr	r3, [r2, #0]
    abda:	2b00      	cmp	r3, #0
    abdc:	d00f      	beq.n	abfe <SYS_TimerStop+0x32>
		if (t == timer) {
    abde:	4298      	cmp	r0, r3
    abe0:	d001      	beq.n	abe6 <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    abe2:	001a      	movs	r2, r3
    abe4:	e7f8      	b.n	abd8 <SYS_TimerStop+0xc>
			if (prev) {
    abe6:	2a00      	cmp	r2, #0
    abe8:	d00a      	beq.n	ac00 <SYS_TimerStop+0x34>
				prev->next = t->next;
    abea:	6803      	ldr	r3, [r0, #0]
    abec:	6013      	str	r3, [r2, #0]
			if (t->next) {
    abee:	6803      	ldr	r3, [r0, #0]
    abf0:	2b00      	cmp	r3, #0
    abf2:	d004      	beq.n	abfe <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    abf4:	6842      	ldr	r2, [r0, #4]
    abf6:	6859      	ldr	r1, [r3, #4]
    abf8:	468c      	mov	ip, r1
    abfa:	4462      	add	r2, ip
    abfc:	605a      	str	r2, [r3, #4]
}
    abfe:	4770      	bx	lr
				timers = t->next;
    ac00:	4b01      	ldr	r3, [pc, #4]	; (ac08 <SYS_TimerStop+0x3c>)
    ac02:	6802      	ldr	r2, [r0, #0]
    ac04:	601a      	str	r2, [r3, #0]
    ac06:	e7f2      	b.n	abee <SYS_TimerStop+0x22>
    ac08:	20001aa8 	.word	0x20001aa8

0000ac0c <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    ac0c:	4b09      	ldr	r3, [pc, #36]	; (ac34 <SYS_TimerStarted+0x28>)
    ac0e:	681b      	ldr	r3, [r3, #0]
    ac10:	2b00      	cmp	r3, #0
    ac12:	d00a      	beq.n	ac2a <SYS_TimerStarted+0x1e>
		if (t == timer) {
    ac14:	4283      	cmp	r3, r0
    ac16:	d00a      	beq.n	ac2e <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    ac18:	681b      	ldr	r3, [r3, #0]
    ac1a:	2b00      	cmp	r3, #0
    ac1c:	d003      	beq.n	ac26 <SYS_TimerStarted+0x1a>
		if (t == timer) {
    ac1e:	4298      	cmp	r0, r3
    ac20:	d1fa      	bne.n	ac18 <SYS_TimerStarted+0xc>
			return true;
    ac22:	2001      	movs	r0, #1
    ac24:	e000      	b.n	ac28 <SYS_TimerStarted+0x1c>
	return false;
    ac26:	2000      	movs	r0, #0
}
    ac28:	4770      	bx	lr
	return false;
    ac2a:	2000      	movs	r0, #0
    ac2c:	e7fc      	b.n	ac28 <SYS_TimerStarted+0x1c>
			return true;
    ac2e:	2001      	movs	r0, #1
    ac30:	e7fa      	b.n	ac28 <SYS_TimerStarted+0x1c>
    ac32:	46c0      	nop			; (mov r8, r8)
    ac34:	20001aa8 	.word	0x20001aa8

0000ac38 <SYS_TimerStart>:
{
    ac38:	b510      	push	{r4, lr}
    ac3a:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    ac3c:	4b04      	ldr	r3, [pc, #16]	; (ac50 <SYS_TimerStart+0x18>)
    ac3e:	4798      	blx	r3
    ac40:	2800      	cmp	r0, #0
    ac42:	d000      	beq.n	ac46 <SYS_TimerStart+0xe>
}
    ac44:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    ac46:	0020      	movs	r0, r4
    ac48:	4b02      	ldr	r3, [pc, #8]	; (ac54 <SYS_TimerStart+0x1c>)
    ac4a:	4798      	blx	r3
}
    ac4c:	e7fa      	b.n	ac44 <SYS_TimerStart+0xc>
    ac4e:	46c0      	nop			; (mov r8, r8)
    ac50:	0000ac0d 	.word	0x0000ac0d
    ac54:	0000ab51 	.word	0x0000ab51

0000ac58 <MiWi_TickGet>:
{
    ac58:	b570      	push	{r4, r5, r6, lr}
	uint8_t current_timerExtension1 = timerExtension1;
    ac5a:	4e11      	ldr	r6, [pc, #68]	; (aca0 <MiWi_TickGet+0x48>)
    ac5c:	7835      	ldrb	r5, [r6, #0]
    ac5e:	b2ed      	uxtb	r5, r5
	tmr_disable_ovf_interrupt();
    ac60:	4b10      	ldr	r3, [pc, #64]	; (aca4 <MiWi_TickGet+0x4c>)
    ac62:	4798      	blx	r3
	currentTime.word.w0 = common_tc_read_count();
    ac64:	4b10      	ldr	r3, [pc, #64]	; (aca8 <MiWi_TickGet+0x50>)
    ac66:	4798      	blx	r3
    ac68:	0004      	movs	r4, r0
	tmr_enable_ovf_interrupt();
    ac6a:	4b10      	ldr	r3, [pc, #64]	; (acac <MiWi_TickGet+0x54>)
    ac6c:	4798      	blx	r3
  __ASM volatile ("nop");
    ac6e:	46c0      	nop			; (mov r8, r8)
	if (current_timerExtension1 != timerExtension1)
    ac70:	7833      	ldrb	r3, [r6, #0]
    ac72:	b2db      	uxtb	r3, r3
    ac74:	429d      	cmp	r5, r3
    ac76:	d004      	beq.n	ac82 <MiWi_TickGet+0x2a>
		currentTime.word.w0 = common_tc_read_count();
    ac78:	4b0b      	ldr	r3, [pc, #44]	; (aca8 <MiWi_TickGet+0x50>)
    ac7a:	4798      	blx	r3
    ac7c:	0c24      	lsrs	r4, r4, #16
    ac7e:	0424      	lsls	r4, r4, #16
    ac80:	4304      	orrs	r4, r0
    currentTime.byte.b2 = timerExtension1;
    ac82:	4b07      	ldr	r3, [pc, #28]	; (aca0 <MiWi_TickGet+0x48>)
    ac84:	781b      	ldrb	r3, [r3, #0]
    ac86:	041b      	lsls	r3, r3, #16
    ac88:	4809      	ldr	r0, [pc, #36]	; (acb0 <MiWi_TickGet+0x58>)
    ac8a:	4004      	ands	r4, r0
    ac8c:	431c      	orrs	r4, r3
    currentTime.byte.b3 = timerExtension2;
    ac8e:	4b09      	ldr	r3, [pc, #36]	; (acb4 <MiWi_TickGet+0x5c>)
    ac90:	781b      	ldrb	r3, [r3, #0]
    ac92:	061b      	lsls	r3, r3, #24
    ac94:	0224      	lsls	r4, r4, #8
    ac96:	0a24      	lsrs	r4, r4, #8
    ac98:	431c      	orrs	r4, r3
}
    ac9a:	0020      	movs	r0, r4
    ac9c:	bd70      	pop	{r4, r5, r6, pc}
    ac9e:	46c0      	nop			; (mov r8, r8)
    aca0:	200033a4 	.word	0x200033a4
    aca4:	0000c4c9 	.word	0x0000c4c9
    aca8:	00011b95 	.word	0x00011b95
    acac:	0000c4dd 	.word	0x0000c4dd
    acb0:	ff00ffff 	.word	0xff00ffff
    acb4:	200033a5 	.word	0x200033a5

0000acb8 <MiWi_TickGetDiff>:
	if (current_tick.Val > previous_tick.Val)
    acb8:	4288      	cmp	r0, r1
    acba:	d802      	bhi.n	acc2 <MiWi_TickGetDiff+0xa>
		ret_val = (0xFFFFFFFF - previous_tick.Val) + current_tick.Val;
    acbc:	3801      	subs	r0, #1
    acbe:	1a40      	subs	r0, r0, r1
}
    acc0:	4770      	bx	lr
		ret_val = current_tick.Val - previous_tick.Val;
    acc2:	1a40      	subs	r0, r0, r1
    acc4:	e7fc      	b.n	acc0 <MiWi_TickGetDiff+0x8>
    acc6:	Address 0x0000acc6 is out of bounds.


0000acc8 <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    acc8:	4b13      	ldr	r3, [pc, #76]	; (ad18 <HAL_SPISend+0x50>)
    acca:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    accc:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    acce:	7e1a      	ldrb	r2, [r3, #24]
    acd0:	420a      	tst	r2, r1
    acd2:	d0fc      	beq.n	acce <HAL_SPISend+0x6>
    acd4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    acd6:	07d2      	lsls	r2, r2, #31
    acd8:	d500      	bpl.n	acdc <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    acda:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    acdc:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    acde:	7e1a      	ldrb	r2, [r3, #24]
    ace0:	420a      	tst	r2, r1
    ace2:	d0fc      	beq.n	acde <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    ace4:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ace6:	7e1a      	ldrb	r2, [r3, #24]
    ace8:	420a      	tst	r2, r1
    acea:	d0fc      	beq.n	ace6 <HAL_SPISend+0x1e>
    acec:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    acee:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    acf0:	0752      	lsls	r2, r2, #29
    acf2:	d50a      	bpl.n	ad0a <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    acf4:	8b5a      	ldrh	r2, [r3, #26]
    acf6:	0752      	lsls	r2, r2, #29
    acf8:	d501      	bpl.n	acfe <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    acfa:	2204      	movs	r2, #4
    acfc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    acfe:	4a06      	ldr	r2, [pc, #24]	; (ad18 <HAL_SPISend+0x50>)
    ad00:	7992      	ldrb	r2, [r2, #6]
    ad02:	2a01      	cmp	r2, #1
    ad04:	d003      	beq.n	ad0e <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ad06:	6a98      	ldr	r0, [r3, #40]	; 0x28
    ad08:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    ad0a:	b2c0      	uxtb	r0, r0
}
    ad0c:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    ad0e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    ad10:	05c0      	lsls	r0, r0, #23
    ad12:	0dc0      	lsrs	r0, r0, #23
    ad14:	e7f9      	b.n	ad0a <HAL_SPISend+0x42>
    ad16:	46c0      	nop			; (mov r8, r8)
    ad18:	20001ab8 	.word	0x20001ab8

0000ad1c <HAL_ResetPinMakeOutput>:
{
    ad1c:	b500      	push	{lr}
    ad1e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    ad20:	a901      	add	r1, sp, #4
    ad22:	2301      	movs	r3, #1
    ad24:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    ad26:	2200      	movs	r2, #0
    ad28:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    ad2a:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    ad2c:	202f      	movs	r0, #47	; 0x2f
    ad2e:	4b02      	ldr	r3, [pc, #8]	; (ad38 <HAL_ResetPinMakeOutput+0x1c>)
    ad30:	4798      	blx	r3
}
    ad32:	b003      	add	sp, #12
    ad34:	bd00      	pop	{pc}
    ad36:	46c0      	nop			; (mov r8, r8)
    ad38:	000050fd 	.word	0x000050fd

0000ad3c <HAL_RadioDIO2Callback>:
{
    ad3c:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    ad3e:	4b05      	ldr	r3, [pc, #20]	; (ad54 <HAL_RadioDIO2Callback+0x18>)
    ad40:	681b      	ldr	r3, [r3, #0]
    ad42:	2b00      	cmp	r3, #0
    ad44:	d004      	beq.n	ad50 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    ad46:	4b04      	ldr	r3, [pc, #16]	; (ad58 <HAL_RadioDIO2Callback+0x1c>)
    ad48:	4798      	blx	r3
    interruptHandlerDio2();
    ad4a:	4b02      	ldr	r3, [pc, #8]	; (ad54 <HAL_RadioDIO2Callback+0x18>)
    ad4c:	681b      	ldr	r3, [r3, #0]
    ad4e:	4798      	blx	r3
}
    ad50:	bd10      	pop	{r4, pc}
    ad52:	46c0      	nop			; (mov r8, r8)
    ad54:	20001ab4 	.word	0x20001ab4
    ad58:	0000b1bd 	.word	0x0000b1bd

0000ad5c <HAL_RadioDIO1Callback>:
{
    ad5c:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    ad5e:	4b05      	ldr	r3, [pc, #20]	; (ad74 <HAL_RadioDIO1Callback+0x18>)
    ad60:	681b      	ldr	r3, [r3, #0]
    ad62:	2b00      	cmp	r3, #0
    ad64:	d004      	beq.n	ad70 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    ad66:	4b04      	ldr	r3, [pc, #16]	; (ad78 <HAL_RadioDIO1Callback+0x1c>)
    ad68:	4798      	blx	r3
    interruptHandlerDio1();
    ad6a:	4b02      	ldr	r3, [pc, #8]	; (ad74 <HAL_RadioDIO1Callback+0x18>)
    ad6c:	681b      	ldr	r3, [r3, #0]
    ad6e:	4798      	blx	r3
}
    ad70:	bd10      	pop	{r4, pc}
    ad72:	46c0      	nop			; (mov r8, r8)
    ad74:	20001ab0 	.word	0x20001ab0
    ad78:	0000b1bd 	.word	0x0000b1bd

0000ad7c <HAL_RadioDIO0Callback>:
{
    ad7c:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    ad7e:	4b05      	ldr	r3, [pc, #20]	; (ad94 <HAL_RadioDIO0Callback+0x18>)
    ad80:	681b      	ldr	r3, [r3, #0]
    ad82:	2b00      	cmp	r3, #0
    ad84:	d004      	beq.n	ad90 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    ad86:	4b04      	ldr	r3, [pc, #16]	; (ad98 <HAL_RadioDIO0Callback+0x1c>)
    ad88:	4798      	blx	r3
    interruptHandlerDio0();
    ad8a:	4b02      	ldr	r3, [pc, #8]	; (ad94 <HAL_RadioDIO0Callback+0x18>)
    ad8c:	681b      	ldr	r3, [r3, #0]
    ad8e:	4798      	blx	r3
}
    ad90:	bd10      	pop	{r4, pc}
    ad92:	46c0      	nop			; (mov r8, r8)
    ad94:	20001aac 	.word	0x20001aac
    ad98:	0000b1bd 	.word	0x0000b1bd

0000ad9c <HAL_SPICSAssert>:
{
    ad9c:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    ad9e:	2201      	movs	r2, #1
    ada0:	4902      	ldr	r1, [pc, #8]	; (adac <HAL_SPICSAssert+0x10>)
    ada2:	4803      	ldr	r0, [pc, #12]	; (adb0 <HAL_SPICSAssert+0x14>)
    ada4:	4b03      	ldr	r3, [pc, #12]	; (adb4 <HAL_SPICSAssert+0x18>)
    ada6:	4798      	blx	r3
}
    ada8:	bd10      	pop	{r4, pc}
    adaa:	46c0      	nop			; (mov r8, r8)
    adac:	200033a8 	.word	0x200033a8
    adb0:	20001ab8 	.word	0x20001ab8
    adb4:	00005a6d 	.word	0x00005a6d

0000adb8 <HAL_SPICSDeassert>:
{
    adb8:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    adba:	2200      	movs	r2, #0
    adbc:	4902      	ldr	r1, [pc, #8]	; (adc8 <HAL_SPICSDeassert+0x10>)
    adbe:	4803      	ldr	r0, [pc, #12]	; (adcc <HAL_SPICSDeassert+0x14>)
    adc0:	4b03      	ldr	r3, [pc, #12]	; (add0 <HAL_SPICSDeassert+0x18>)
    adc2:	4798      	blx	r3
}
    adc4:	bd10      	pop	{r4, pc}
    adc6:	46c0      	nop			; (mov r8, r8)
    adc8:	200033a8 	.word	0x200033a8
    adcc:	20001ab8 	.word	0x20001ab8
    add0:	00005a6d 	.word	0x00005a6d

0000add4 <HAL_RadioInit>:
{
    add4:	b5f0      	push	{r4, r5, r6, r7, lr}
    add6:	46d6      	mov	lr, sl
    add8:	464f      	mov	r7, r9
    adda:	4646      	mov	r6, r8
    addc:	b5c0      	push	{r6, r7, lr}
    adde:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    ade0:	ac01      	add	r4, sp, #4
    ade2:	2601      	movs	r6, #1
    ade4:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    ade6:	2500      	movs	r5, #0
    ade8:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    adea:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    adec:	0021      	movs	r1, r4
    adee:	2052      	movs	r0, #82	; 0x52
    adf0:	4f52      	ldr	r7, [pc, #328]	; (af3c <HAL_RadioInit+0x168>)
    adf2:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    adf4:	0021      	movs	r1, r4
    adf6:	203e      	movs	r0, #62	; 0x3e
    adf8:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    adfa:	0021      	movs	r1, r4
    adfc:	203f      	movs	r0, #63	; 0x3f
    adfe:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    ae00:	0021      	movs	r1, r4
    ae02:	202f      	movs	r0, #47	; 0x2f
    ae04:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    ae06:	2280      	movs	r2, #128	; 0x80
    ae08:	02d2      	lsls	r2, r2, #11
    ae0a:	4b4d      	ldr	r3, [pc, #308]	; (af40 <HAL_RadioInit+0x16c>)
    ae0c:	619a      	str	r2, [r3, #24]
    ae0e:	4b4d      	ldr	r3, [pc, #308]	; (af44 <HAL_RadioInit+0x170>)
    ae10:	2280      	movs	r2, #128	; 0x80
    ae12:	05d2      	lsls	r2, r2, #23
    ae14:	619a      	str	r2, [r3, #24]
    ae16:	2280      	movs	r2, #128	; 0x80
    ae18:	0612      	lsls	r2, r2, #24
    ae1a:	619a      	str	r2, [r3, #24]
    ae1c:	2280      	movs	r2, #128	; 0x80
    ae1e:	0212      	lsls	r2, r2, #8
    ae20:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    ae22:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    ae24:	0021      	movs	r1, r4
    ae26:	2053      	movs	r0, #83	; 0x53
    ae28:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    ae2a:	ac02      	add	r4, sp, #8
    ae2c:	0020      	movs	r0, r4
    ae2e:	4b46      	ldr	r3, [pc, #280]	; (af48 <HAL_RadioInit+0x174>)
    ae30:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    ae32:	2330      	movs	r3, #48	; 0x30
    ae34:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    ae36:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    ae38:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    ae3a:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    ae3c:	0021      	movs	r1, r4
    ae3e:	2000      	movs	r0, #0
    ae40:	4b42      	ldr	r3, [pc, #264]	; (af4c <HAL_RadioInit+0x178>)
    ae42:	469a      	mov	sl, r3
    ae44:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    ae46:	2200      	movs	r2, #0
    ae48:	2100      	movs	r1, #0
    ae4a:	4841      	ldr	r0, [pc, #260]	; (af50 <HAL_RadioInit+0x17c>)
    ae4c:	4b41      	ldr	r3, [pc, #260]	; (af54 <HAL_RadioInit+0x180>)
    ae4e:	4699      	mov	r9, r3
    ae50:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    ae52:	2100      	movs	r1, #0
    ae54:	2000      	movs	r0, #0
    ae56:	4b40      	ldr	r3, [pc, #256]	; (af58 <HAL_RadioInit+0x184>)
    ae58:	4698      	mov	r8, r3
    ae5a:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    ae5c:	230b      	movs	r3, #11
    ae5e:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    ae60:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    ae62:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    ae64:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    ae66:	0021      	movs	r1, r4
    ae68:	200b      	movs	r0, #11
    ae6a:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    ae6c:	2200      	movs	r2, #0
    ae6e:	210b      	movs	r1, #11
    ae70:	483a      	ldr	r0, [pc, #232]	; (af5c <HAL_RadioInit+0x188>)
    ae72:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    ae74:	2100      	movs	r1, #0
    ae76:	200b      	movs	r0, #11
    ae78:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    ae7a:	230c      	movs	r3, #12
    ae7c:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    ae7e:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    ae80:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    ae82:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    ae84:	0021      	movs	r1, r4
    ae86:	200c      	movs	r0, #12
    ae88:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    ae8a:	2200      	movs	r2, #0
    ae8c:	210c      	movs	r1, #12
    ae8e:	4834      	ldr	r0, [pc, #208]	; (af60 <HAL_RadioInit+0x18c>)
    ae90:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    ae92:	2100      	movs	r1, #0
    ae94:	200c      	movs	r0, #12
    ae96:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    ae98:	4b32      	ldr	r3, [pc, #200]	; (af64 <HAL_RadioInit+0x190>)
    ae9a:	4698      	mov	r8, r3
    ae9c:	233f      	movs	r3, #63	; 0x3f
    ae9e:	4642      	mov	r2, r8
    aea0:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    aea2:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    aea4:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    aea6:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    aea8:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    aeaa:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    aeac:	0021      	movs	r1, r4
    aeae:	203f      	movs	r0, #63	; 0x3f
    aeb0:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    aeb2:	4643      	mov	r3, r8
    aeb4:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    aeb6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    aeb8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    aeba:	2900      	cmp	r1, #0
    aebc:	d104      	bne.n	aec8 <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    aebe:	0953      	lsrs	r3, r2, #5
    aec0:	01db      	lsls	r3, r3, #7
    aec2:	4929      	ldr	r1, [pc, #164]	; (af68 <HAL_RadioInit+0x194>)
    aec4:	468c      	mov	ip, r1
    aec6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    aec8:	211f      	movs	r1, #31
    aeca:	4011      	ands	r1, r2
    aecc:	2201      	movs	r2, #1
    aece:	0010      	movs	r0, r2
    aed0:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    aed2:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    aed4:	ac02      	add	r4, sp, #8
    aed6:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    aed8:	2300      	movs	r3, #0
    aeda:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    aedc:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    aede:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    aee0:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    aee2:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    aee4:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    aee6:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    aee8:	3223      	adds	r2, #35	; 0x23
    aeea:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    aeec:	3a18      	subs	r2, #24
    aeee:	2100      	movs	r1, #0
    aef0:	a808      	add	r0, sp, #32
    aef2:	4b1e      	ldr	r3, [pc, #120]	; (af6c <HAL_RadioInit+0x198>)
    aef4:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    aef6:	4b1e      	ldr	r3, [pc, #120]	; (af70 <HAL_RadioInit+0x19c>)
    aef8:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    aefa:	2380      	movs	r3, #128	; 0x80
    aefc:	025b      	lsls	r3, r3, #9
    aefe:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    af00:	4b1c      	ldr	r3, [pc, #112]	; (af74 <HAL_RadioInit+0x1a0>)
    af02:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    af04:	2301      	movs	r3, #1
    af06:	425b      	negs	r3, r3
    af08:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    af0a:	4b1b      	ldr	r3, [pc, #108]	; (af78 <HAL_RadioInit+0x1a4>)
    af0c:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    af0e:	4b1b      	ldr	r3, [pc, #108]	; (af7c <HAL_RadioInit+0x1a8>)
    af10:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    af12:	4d1b      	ldr	r5, [pc, #108]	; (af80 <HAL_RadioInit+0x1ac>)
    af14:	0022      	movs	r2, r4
    af16:	491b      	ldr	r1, [pc, #108]	; (af84 <HAL_RadioInit+0x1b0>)
    af18:	0028      	movs	r0, r5
    af1a:	4b1b      	ldr	r3, [pc, #108]	; (af88 <HAL_RadioInit+0x1b4>)
    af1c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    af1e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    af20:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    af22:	2b00      	cmp	r3, #0
    af24:	d1fc      	bne.n	af20 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    af26:	6813      	ldr	r3, [r2, #0]
    af28:	2102      	movs	r1, #2
    af2a:	430b      	orrs	r3, r1
    af2c:	6013      	str	r3, [r2, #0]
}
    af2e:	b010      	add	sp, #64	; 0x40
    af30:	bc1c      	pop	{r2, r3, r4}
    af32:	4690      	mov	r8, r2
    af34:	4699      	mov	r9, r3
    af36:	46a2      	mov	sl, r4
    af38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af3a:	46c0      	nop			; (mov r8, r8)
    af3c:	000050fd 	.word	0x000050fd
    af40:	40002900 	.word	0x40002900
    af44:	40002880 	.word	0x40002880
    af48:	00004e49 	.word	0x00004e49
    af4c:	00004e5d 	.word	0x00004e5d
    af50:	0000ad7d 	.word	0x0000ad7d
    af54:	00004d09 	.word	0x00004d09
    af58:	00004d35 	.word	0x00004d35
    af5c:	0000ad5d 	.word	0x0000ad5d
    af60:	0000ad3d 	.word	0x0000ad3d
    af64:	200033a8 	.word	0x200033a8
    af68:	40002800 	.word	0x40002800
    af6c:	00014ff5 	.word	0x00014ff5
    af70:	001e8480 	.word	0x001e8480
    af74:	00530005 	.word	0x00530005
    af78:	003e0005 	.word	0x003e0005
    af7c:	00520005 	.word	0x00520005
    af80:	20001ab8 	.word	0x20001ab8
    af84:	42001000 	.word	0x42001000
    af88:	00005721 	.word	0x00005721

0000af8c <HAL_RadioDeInit>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    af8c:	4b06      	ldr	r3, [pc, #24]	; (afa8 <HAL_RadioDeInit+0x1c>)
    af8e:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    af90:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    af92:	2b00      	cmp	r3, #0
    af94:	d1fc      	bne.n	af90 <HAL_RadioDeInit+0x4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    af96:	338f      	adds	r3, #143	; 0x8f
    af98:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    af9a:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    af9c:	6813      	ldr	r3, [r2, #0]
    af9e:	2102      	movs	r1, #2
    afa0:	438b      	bics	r3, r1
    afa2:	6013      	str	r3, [r2, #0]
}
    afa4:	4770      	bx	lr
    afa6:	46c0      	nop			; (mov r8, r8)
    afa8:	20001ab8 	.word	0x20001ab8

0000afac <RADIO_Reset>:
{
    afac:	b570      	push	{r4, r5, r6, lr}
    afae:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    afb0:	4c0a      	ldr	r4, [pc, #40]	; (afdc <RADIO_Reset+0x30>)
    afb2:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    afb4:	4d0a      	ldr	r5, [pc, #40]	; (afe0 <RADIO_Reset+0x34>)
    afb6:	2680      	movs	r6, #128	; 0x80
    afb8:	0236      	lsls	r6, r6, #8
    afba:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    afbc:	2001      	movs	r0, #1
    afbe:	4b09      	ldr	r3, [pc, #36]	; (afe4 <RADIO_Reset+0x38>)
    afc0:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    afc2:	a901      	add	r1, sp, #4
    afc4:	2300      	movs	r3, #0
    afc6:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    afc8:	2201      	movs	r2, #1
    afca:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    afcc:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    afce:	202f      	movs	r0, #47	; 0x2f
    afd0:	4b05      	ldr	r3, [pc, #20]	; (afe8 <RADIO_Reset+0x3c>)
    afd2:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    afd4:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    afd6:	47a0      	blx	r4
}
    afd8:	b002      	add	sp, #8
    afda:	bd70      	pop	{r4, r5, r6, pc}
    afdc:	0000ad1d 	.word	0x0000ad1d
    afe0:	40002880 	.word	0x40002880
    afe4:	0000b189 	.word	0x0000b189
    afe8:	000050fd 	.word	0x000050fd

0000afec <RADIO_RegisterWrite>:
{
    afec:	b570      	push	{r4, r5, r6, lr}
    afee:	0004      	movs	r4, r0
    aff0:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    aff2:	4b05      	ldr	r3, [pc, #20]	; (b008 <RADIO_RegisterWrite+0x1c>)
    aff4:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    aff6:	2080      	movs	r0, #128	; 0x80
    aff8:	4320      	orrs	r0, r4
    affa:	4c04      	ldr	r4, [pc, #16]	; (b00c <RADIO_RegisterWrite+0x20>)
    affc:	47a0      	blx	r4
	HAL_SPISend(value);
    affe:	0028      	movs	r0, r5
    b000:	47a0      	blx	r4
	HAL_SPICSDeassert();
    b002:	4b03      	ldr	r3, [pc, #12]	; (b010 <RADIO_RegisterWrite+0x24>)
    b004:	4798      	blx	r3
}
    b006:	bd70      	pop	{r4, r5, r6, pc}
    b008:	0000ad9d 	.word	0x0000ad9d
    b00c:	0000acc9 	.word	0x0000acc9
    b010:	0000adb9 	.word	0x0000adb9

0000b014 <RADIO_RegisterRead>:
{
    b014:	b510      	push	{r4, lr}
    b016:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    b018:	4b06      	ldr	r3, [pc, #24]	; (b034 <RADIO_RegisterRead+0x20>)
    b01a:	4798      	blx	r3
	HAL_SPISend(reg);
    b01c:	207f      	movs	r0, #127	; 0x7f
    b01e:	4020      	ands	r0, r4
    b020:	4c05      	ldr	r4, [pc, #20]	; (b038 <RADIO_RegisterRead+0x24>)
    b022:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    b024:	20ff      	movs	r0, #255	; 0xff
    b026:	47a0      	blx	r4
    b028:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    b02a:	4b04      	ldr	r3, [pc, #16]	; (b03c <RADIO_RegisterRead+0x28>)
    b02c:	4798      	blx	r3
}
    b02e:	0020      	movs	r0, r4
    b030:	bd10      	pop	{r4, pc}
    b032:	46c0      	nop			; (mov r8, r8)
    b034:	0000ad9d 	.word	0x0000ad9d
    b038:	0000acc9 	.word	0x0000acc9
    b03c:	0000adb9 	.word	0x0000adb9

0000b040 <RADIO_FrameWrite>:
{
    b040:	b570      	push	{r4, r5, r6, lr}
    b042:	0004      	movs	r4, r0
    b044:	000e      	movs	r6, r1
    b046:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    b048:	4b0a      	ldr	r3, [pc, #40]	; (b074 <RADIO_FrameWrite+0x34>)
    b04a:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    b04c:	2080      	movs	r0, #128	; 0x80
    b04e:	4320      	orrs	r0, r4
    b050:	4b09      	ldr	r3, [pc, #36]	; (b078 <RADIO_FrameWrite+0x38>)
    b052:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    b054:	2d00      	cmp	r5, #0
    b056:	d00a      	beq.n	b06e <RADIO_FrameWrite+0x2e>
    b058:	0034      	movs	r4, r6
    b05a:	3d01      	subs	r5, #1
    b05c:	b2ed      	uxtb	r5, r5
    b05e:	3501      	adds	r5, #1
    b060:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    b062:	4e05      	ldr	r6, [pc, #20]	; (b078 <RADIO_FrameWrite+0x38>)
    b064:	7820      	ldrb	r0, [r4, #0]
    b066:	47b0      	blx	r6
    b068:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    b06a:	42ac      	cmp	r4, r5
    b06c:	d1fa      	bne.n	b064 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    b06e:	4b03      	ldr	r3, [pc, #12]	; (b07c <RADIO_FrameWrite+0x3c>)
    b070:	4798      	blx	r3
}
    b072:	bd70      	pop	{r4, r5, r6, pc}
    b074:	0000ad9d 	.word	0x0000ad9d
    b078:	0000acc9 	.word	0x0000acc9
    b07c:	0000adb9 	.word	0x0000adb9

0000b080 <RADIO_FrameRead>:
{
    b080:	b570      	push	{r4, r5, r6, lr}
    b082:	0004      	movs	r4, r0
    b084:	000e      	movs	r6, r1
    b086:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    b088:	4b0a      	ldr	r3, [pc, #40]	; (b0b4 <RADIO_FrameRead+0x34>)
    b08a:	4798      	blx	r3
    HAL_SPISend(offset);
    b08c:	0020      	movs	r0, r4
    b08e:	4b0a      	ldr	r3, [pc, #40]	; (b0b8 <RADIO_FrameRead+0x38>)
    b090:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    b092:	2d00      	cmp	r5, #0
    b094:	d00b      	beq.n	b0ae <RADIO_FrameRead+0x2e>
    b096:	0034      	movs	r4, r6
    b098:	3d01      	subs	r5, #1
    b09a:	b2ed      	uxtb	r5, r5
    b09c:	3501      	adds	r5, #1
    b09e:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    b0a0:	4e05      	ldr	r6, [pc, #20]	; (b0b8 <RADIO_FrameRead+0x38>)
    b0a2:	20ff      	movs	r0, #255	; 0xff
    b0a4:	47b0      	blx	r6
    b0a6:	7020      	strb	r0, [r4, #0]
    b0a8:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    b0aa:	42ac      	cmp	r4, r5
    b0ac:	d1f9      	bne.n	b0a2 <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    b0ae:	4b03      	ldr	r3, [pc, #12]	; (b0bc <RADIO_FrameRead+0x3c>)
    b0b0:	4798      	blx	r3
}
    b0b2:	bd70      	pop	{r4, r5, r6, pc}
    b0b4:	0000ad9d 	.word	0x0000ad9d
    b0b8:	0000acc9 	.word	0x0000acc9
    b0bc:	0000adb9 	.word	0x0000adb9

0000b0c0 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    b0c0:	2802      	cmp	r0, #2
    b0c2:	d007      	beq.n	b0d4 <HAL_RegisterDioInterruptHandler+0x14>
    b0c4:	2804      	cmp	r0, #4
    b0c6:	d008      	beq.n	b0da <HAL_RegisterDioInterruptHandler+0x1a>
    b0c8:	2801      	cmp	r0, #1
    b0ca:	d000      	beq.n	b0ce <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    b0cc:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    b0ce:	4b04      	ldr	r3, [pc, #16]	; (b0e0 <HAL_RegisterDioInterruptHandler+0x20>)
    b0d0:	6019      	str	r1, [r3, #0]
      break;
    b0d2:	e7fb      	b.n	b0cc <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    b0d4:	4b03      	ldr	r3, [pc, #12]	; (b0e4 <HAL_RegisterDioInterruptHandler+0x24>)
    b0d6:	6019      	str	r1, [r3, #0]
      break;
    b0d8:	e7f8      	b.n	b0cc <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    b0da:	4b03      	ldr	r3, [pc, #12]	; (b0e8 <HAL_RegisterDioInterruptHandler+0x28>)
    b0dc:	6019      	str	r1, [r3, #0]
}
    b0de:	e7f5      	b.n	b0cc <HAL_RegisterDioInterruptHandler+0xc>
    b0e0:	20001aac 	.word	0x20001aac
    b0e4:	20001ab0 	.word	0x20001ab0
    b0e8:	20001ab4 	.word	0x20001ab4

0000b0ec <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    b0ec:	2801      	cmp	r0, #1
    b0ee:	d00a      	beq.n	b106 <HAL_EnableRFCtrl+0x1a>
    b0f0:	2900      	cmp	r1, #0
    b0f2:	d008      	beq.n	b106 <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    b0f4:	2802      	cmp	r0, #2
    b0f6:	d10a      	bne.n	b10e <HAL_EnableRFCtrl+0x22>
    b0f8:	2901      	cmp	r1, #1
    b0fa:	d108      	bne.n	b10e <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    b0fc:	2280      	movs	r2, #128	; 0x80
    b0fe:	0192      	lsls	r2, r2, #6
    b100:	4b03      	ldr	r3, [pc, #12]	; (b110 <HAL_EnableRFCtrl+0x24>)
    b102:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    b104:	e003      	b.n	b10e <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    b106:	2280      	movs	r2, #128	; 0x80
    b108:	0192      	lsls	r2, r2, #6
    b10a:	4b01      	ldr	r3, [pc, #4]	; (b110 <HAL_EnableRFCtrl+0x24>)
    b10c:	619a      	str	r2, [r3, #24]
    b10e:	4770      	bx	lr
    b110:	40002800 	.word	0x40002800

0000b114 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    b114:	2801      	cmp	r0, #1
    b116:	d001      	beq.n	b11c <HAL_DisableRFCtrl+0x8>
    b118:	2900      	cmp	r1, #0
    b11a:	d103      	bne.n	b124 <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    b11c:	2280      	movs	r2, #128	; 0x80
    b11e:	0192      	lsls	r2, r2, #6
    b120:	4b01      	ldr	r3, [pc, #4]	; (b128 <HAL_DisableRFCtrl+0x14>)
    b122:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    b124:	4770      	bx	lr
    b126:	46c0      	nop			; (mov r8, r8)
    b128:	40002800 	.word	0x40002800

0000b12c <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    b12c:	2002      	movs	r0, #2
    b12e:	4770      	bx	lr

0000b130 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    b130:	2000      	movs	r0, #0
    b132:	4770      	bx	lr

0000b134 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    b134:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    b136:	2280      	movs	r2, #128	; 0x80
    b138:	0092      	lsls	r2, r2, #2
    b13a:	4b03      	ldr	r3, [pc, #12]	; (b148 <HAL_TCXOPowerOn+0x14>)
    b13c:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    b13e:	2002      	movs	r0, #2
    b140:	4b02      	ldr	r3, [pc, #8]	; (b14c <HAL_TCXOPowerOn+0x18>)
    b142:	4798      	blx	r3
#endif
}
    b144:	bd10      	pop	{r4, pc}
    b146:	46c0      	nop			; (mov r8, r8)
    b148:	40002800 	.word	0x40002800
    b14c:	000044cd 	.word	0x000044cd

0000b150 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    b150:	2280      	movs	r2, #128	; 0x80
    b152:	0092      	lsls	r2, r2, #2
    b154:	4b01      	ldr	r3, [pc, #4]	; (b15c <HAL_TCXOPowerOff+0xc>)
    b156:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    b158:	4770      	bx	lr
    b15a:	46c0      	nop			; (mov r8, r8)
    b15c:	40002800 	.word	0x40002800

0000b160 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    b160:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    b162:	4802      	ldr	r0, [pc, #8]	; (b16c <SleepTimerGetElapsedTime+0xc>)
    b164:	4b02      	ldr	r3, [pc, #8]	; (b170 <SleepTimerGetElapsedTime+0x10>)
    b166:	4798      	blx	r3
}
    b168:	bd10      	pop	{r4, pc}
    b16a:	46c0      	nop			; (mov r8, r8)
    b16c:	200033ac 	.word	0x200033ac
    b170:	000051d9 	.word	0x000051d9

0000b174 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    b174:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    b176:	2108      	movs	r1, #8
    b178:	4801      	ldr	r0, [pc, #4]	; (b180 <SleepTimerStop+0xc>)
    b17a:	4b02      	ldr	r3, [pc, #8]	; (b184 <SleepTimerStop+0x10>)
    b17c:	4798      	blx	r3
}
    b17e:	bd10      	pop	{r4, pc}
    b180:	200033ac 	.word	0x200033ac
    b184:	000053b5 	.word	0x000053b5

0000b188 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    b188:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    b18a:	2800      	cmp	r0, #0
    b18c:	d103      	bne.n	b196 <SystemBlockingWaitMs+0xe>
    b18e:	2001      	movs	r0, #1
    b190:	4b02      	ldr	r3, [pc, #8]	; (b19c <SystemBlockingWaitMs+0x14>)
    b192:	4798      	blx	r3
#endif
}
    b194:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    b196:	4b02      	ldr	r3, [pc, #8]	; (b1a0 <SystemBlockingWaitMs+0x18>)
    b198:	4798      	blx	r3
    b19a:	e7fb      	b.n	b194 <SystemBlockingWaitMs+0xc>
    b19c:	000044a1 	.word	0x000044a1
    b1a0:	000044cd 	.word	0x000044cd

0000b1a4 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    b1a4:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    b1a6:	4b01      	ldr	r3, [pc, #4]	; (b1ac <system_enter_critical_section+0x8>)
    b1a8:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    b1aa:	bd10      	pop	{r4, pc}
    b1ac:	000044f9 	.word	0x000044f9

0000b1b0 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    b1b0:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    b1b2:	4b01      	ldr	r3, [pc, #4]	; (b1b8 <system_leave_critical_section+0x8>)
    b1b4:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    b1b6:	bd10      	pop	{r4, pc}
    b1b8:	00004539 	.word	0x00004539

0000b1bc <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    b1bc:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    b1be:	4b16      	ldr	r3, [pc, #88]	; (b218 <PMM_Wakeup+0x5c>)
    b1c0:	781b      	ldrb	r3, [r3, #0]
    b1c2:	2b01      	cmp	r3, #1
    b1c4:	d000      	beq.n	b1c8 <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    b1c6:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    b1c8:	2200      	movs	r2, #0
    b1ca:	4b13      	ldr	r3, [pc, #76]	; (b218 <PMM_Wakeup+0x5c>)
    b1cc:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    b1ce:	4b13      	ldr	r3, [pc, #76]	; (b21c <PMM_Wakeup+0x60>)
    b1d0:	4798      	blx	r3
    b1d2:	4b13      	ldr	r3, [pc, #76]	; (b220 <PMM_Wakeup+0x64>)
    b1d4:	4798      	blx	r3
    b1d6:	4913      	ldr	r1, [pc, #76]	; (b224 <PMM_Wakeup+0x68>)
    b1d8:	4b13      	ldr	r3, [pc, #76]	; (b228 <PMM_Wakeup+0x6c>)
    b1da:	4798      	blx	r3
    b1dc:	4b13      	ldr	r3, [pc, #76]	; (b22c <PMM_Wakeup+0x70>)
    b1de:	4798      	blx	r3
    b1e0:	0004      	movs	r4, r0
    b1e2:	000d      	movs	r5, r1
        SleepTimerStop();
    b1e4:	4b12      	ldr	r3, [pc, #72]	; (b230 <PMM_Wakeup+0x74>)
    b1e6:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    b1e8:	0020      	movs	r0, r4
    b1ea:	0029      	movs	r1, r5
    b1ec:	4b11      	ldr	r3, [pc, #68]	; (b234 <PMM_Wakeup+0x78>)
    b1ee:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    b1f0:	4b11      	ldr	r3, [pc, #68]	; (b238 <PMM_Wakeup+0x7c>)
    b1f2:	681b      	ldr	r3, [r3, #0]
    b1f4:	2b00      	cmp	r3, #0
    b1f6:	d0e6      	beq.n	b1c6 <PMM_Wakeup+0xa>
    b1f8:	689e      	ldr	r6, [r3, #8]
    b1fa:	2e00      	cmp	r6, #0
    b1fc:	d0e3      	beq.n	b1c6 <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    b1fe:	22fa      	movs	r2, #250	; 0xfa
    b200:	0092      	lsls	r2, r2, #2
    b202:	2300      	movs	r3, #0
    b204:	0020      	movs	r0, r4
    b206:	0029      	movs	r1, r5
    b208:	4c0c      	ldr	r4, [pc, #48]	; (b23c <PMM_Wakeup+0x80>)
    b20a:	47a0      	blx	r4
    b20c:	47b0      	blx	r6
            sleepReq = NULL;
    b20e:	2200      	movs	r2, #0
    b210:	4b09      	ldr	r3, [pc, #36]	; (b238 <PMM_Wakeup+0x7c>)
    b212:	601a      	str	r2, [r3, #0]
}
    b214:	e7d7      	b.n	b1c6 <PMM_Wakeup+0xa>
    b216:	46c0      	nop			; (mov r8, r8)
    b218:	20001ac4 	.word	0x20001ac4
    b21c:	0000b161 	.word	0x0000b161
    b220:	00013179 	.word	0x00013179
    b224:	41f423d7 	.word	0x41f423d7
    b228:	00012b21 	.word	0x00012b21
    b22c:	0001225d 	.word	0x0001225d
    b230:	0000b175 	.word	0x0000b175
    b234:	0000c099 	.word	0x0000c099
    b238:	20001ac8 	.word	0x20001ac8
    b23c:	0001215d 	.word	0x0001215d

0000b240 <InitDefault868Channels>:
/*
 * \brief This function initializes all the EU868 Channels to default values
 */
#if (EU_BAND == 1)
void InitDefault868Channels (void)
{
    b240:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels868) );
    b242:	4c39      	ldr	r4, [pc, #228]	; (b328 <InitDefault868Channels+0xe8>)
    b244:	7920      	ldrb	r0, [r4, #4]
    b246:	7963      	ldrb	r3, [r4, #5]
    b248:	021b      	lsls	r3, r3, #8
    b24a:	4303      	orrs	r3, r0
    b24c:	79a0      	ldrb	r0, [r4, #6]
    b24e:	0400      	lsls	r0, r0, #16
    b250:	4303      	orrs	r3, r0
    b252:	79e0      	ldrb	r0, [r4, #7]
    b254:	0600      	lsls	r0, r0, #24
    b256:	4318      	orrs	r0, r3
    b258:	2206      	movs	r2, #6
    b25a:	2100      	movs	r1, #0
    b25c:	4e33      	ldr	r6, [pc, #204]	; (b32c <InitDefault868Channels+0xec>)
    b25e:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    b260:	7920      	ldrb	r0, [r4, #4]
    b262:	7963      	ldrb	r3, [r4, #5]
    b264:	021b      	lsls	r3, r3, #8
    b266:	4303      	orrs	r3, r0
    b268:	79a0      	ldrb	r0, [r4, #6]
    b26a:	0400      	lsls	r0, r0, #16
    b26c:	4303      	orrs	r3, r0
    b26e:	79e0      	ldrb	r0, [r4, #7]
    b270:	0600      	lsls	r0, r0, #24
    b272:	4318      	orrs	r0, r3
    b274:	2206      	movs	r2, #6
    b276:	492e      	ldr	r1, [pc, #184]	; (b330 <InitDefault868Channels+0xf0>)
    b278:	4d2e      	ldr	r5, [pc, #184]	; (b334 <InitDefault868Channels+0xf4>)
    b27a:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels868) );
    b27c:	7a20      	ldrb	r0, [r4, #8]
    b27e:	7a63      	ldrb	r3, [r4, #9]
    b280:	021b      	lsls	r3, r3, #8
    b282:	4303      	orrs	r3, r0
    b284:	7aa0      	ldrb	r0, [r4, #10]
    b286:	0400      	lsls	r0, r0, #16
    b288:	4303      	orrs	r3, r0
    b28a:	7ae0      	ldrb	r0, [r4, #11]
    b28c:	0600      	lsls	r0, r0, #24
    b28e:	4318      	orrs	r0, r3
    b290:	2224      	movs	r2, #36	; 0x24
    b292:	2100      	movs	r1, #0
    b294:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    b296:	7a20      	ldrb	r0, [r4, #8]
    b298:	7a63      	ldrb	r3, [r4, #9]
    b29a:	021b      	lsls	r3, r3, #8
    b29c:	4303      	orrs	r3, r0
    b29e:	7aa0      	ldrb	r0, [r4, #10]
    b2a0:	0400      	lsls	r0, r0, #16
    b2a2:	4303      	orrs	r3, r0
    b2a4:	7ae0      	ldrb	r0, [r4, #11]
    b2a6:	0600      	lsls	r0, r0, #24
    b2a8:	4318      	orrs	r0, r3
    b2aa:	2224      	movs	r2, #36	; 0x24
    b2ac:	4922      	ldr	r1, [pc, #136]	; (b338 <InitDefault868Channels+0xf8>)
    b2ae:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams868) );
    b2b0:	7b20      	ldrb	r0, [r4, #12]
    b2b2:	7b63      	ldrb	r3, [r4, #13]
    b2b4:	021b      	lsls	r3, r3, #8
    b2b6:	4303      	orrs	r3, r0
    b2b8:	7ba0      	ldrb	r0, [r4, #14]
    b2ba:	0400      	lsls	r0, r0, #16
    b2bc:	4303      	orrs	r3, r0
    b2be:	7be0      	ldrb	r0, [r4, #15]
    b2c0:	0600      	lsls	r0, r0, #24
    b2c2:	4318      	orrs	r0, r3
    b2c4:	2248      	movs	r2, #72	; 0x48
    b2c6:	2100      	movs	r1, #0
    b2c8:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    b2ca:	7b20      	ldrb	r0, [r4, #12]
    b2cc:	7b63      	ldrb	r3, [r4, #13]
    b2ce:	021b      	lsls	r3, r3, #8
    b2d0:	4303      	orrs	r3, r0
    b2d2:	7ba0      	ldrb	r0, [r4, #14]
    b2d4:	0400      	lsls	r0, r0, #16
    b2d6:	4303      	orrs	r3, r0
    b2d8:	7be0      	ldrb	r0, [r4, #15]
    b2da:	0600      	lsls	r0, r0, #24
    b2dc:	4318      	orrs	r0, r3
    b2de:	2248      	movs	r2, #72	; 0x48
    b2e0:	4916      	ldr	r1, [pc, #88]	; (b33c <InitDefault868Channels+0xfc>)
    b2e2:	47a8      	blx	r5
	memset(RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycle868));
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    b2e4:	0020      	movs	r0, r4
    b2e6:	30af      	adds	r0, #175	; 0xaf
    b2e8:	30ff      	adds	r0, #255	; 0xff
    b2ea:	220c      	movs	r2, #12
    b2ec:	4914      	ldr	r1, [pc, #80]	; (b340 <InitDefault868Channels+0x100>)
    b2ee:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    b2f0:	232a      	movs	r3, #42	; 0x2a
    b2f2:	56e3      	ldrsb	r3, [r4, r3]
    b2f4:	2b03      	cmp	r3, #3
    b2f6:	dd15      	ble.n	b324 <InitDefault868Channels+0xe4>
    b2f8:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    b2fa:	480b      	ldr	r0, [pc, #44]	; (b328 <InitDefault868Channels+0xe8>)
    b2fc:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    b2fe:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    b300:	7902      	ldrb	r2, [r0, #4]
    b302:	7941      	ldrb	r1, [r0, #5]
    b304:	0209      	lsls	r1, r1, #8
    b306:	4311      	orrs	r1, r2
    b308:	7982      	ldrb	r2, [r0, #6]
    b30a:	0412      	lsls	r2, r2, #16
    b30c:	4311      	orrs	r1, r2
    b30e:	79c2      	ldrb	r2, [r0, #7]
    b310:	0612      	lsls	r2, r2, #24
    b312:	430a      	orrs	r2, r1
    b314:	0059      	lsls	r1, r3, #1
    b316:	188a      	adds	r2, r1, r2
    b318:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    b31a:	3301      	adds	r3, #1
    b31c:	b2db      	uxtb	r3, r3
    b31e:	5702      	ldrsb	r2, [r0, r4]
    b320:	4293      	cmp	r3, r2
    b322:	dbed      	blt.n	b300 <InitDefault868Channels+0xc0>
    }
}
    b324:	bd70      	pop	{r4, r5, r6, pc}
    b326:	46c0      	nop			; (mov r8, r8)
    b328:	200033e8 	.word	0x200033e8
    b32c:	00014ff5 	.word	0x00014ff5
    b330:	00016c6c 	.word	0x00016c6c
    b334:	00014fe3 	.word	0x00014fe3
    b338:	00016c40 	.word	0x00016c40
    b33c:	00016c8c 	.word	0x00016c8c
    b340:	00016c74 	.word	0x00016c74

0000b344 <InitDefault433Channels>:

/*
 * \brief This function initializes all the EU433 Channels to default values
 */
void InitDefault433Channels (void)
{
    b344:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels433) );
    b346:	4c36      	ldr	r4, [pc, #216]	; (b420 <InitDefault433Channels+0xdc>)
    b348:	7920      	ldrb	r0, [r4, #4]
    b34a:	7963      	ldrb	r3, [r4, #5]
    b34c:	021b      	lsls	r3, r3, #8
    b34e:	4303      	orrs	r3, r0
    b350:	79a0      	ldrb	r0, [r4, #6]
    b352:	0400      	lsls	r0, r0, #16
    b354:	4303      	orrs	r3, r0
    b356:	79e0      	ldrb	r0, [r4, #7]
    b358:	0600      	lsls	r0, r0, #24
    b35a:	4318      	orrs	r0, r3
    b35c:	2206      	movs	r2, #6
    b35e:	2100      	movs	r1, #0
    b360:	4e30      	ldr	r6, [pc, #192]	; (b424 <InitDefault433Channels+0xe0>)
    b362:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    b364:	7920      	ldrb	r0, [r4, #4]
    b366:	7963      	ldrb	r3, [r4, #5]
    b368:	021b      	lsls	r3, r3, #8
    b36a:	4303      	orrs	r3, r0
    b36c:	79a0      	ldrb	r0, [r4, #6]
    b36e:	0400      	lsls	r0, r0, #16
    b370:	4303      	orrs	r3, r0
    b372:	79e0      	ldrb	r0, [r4, #7]
    b374:	0600      	lsls	r0, r0, #24
    b376:	4318      	orrs	r0, r3
    b378:	2206      	movs	r2, #6
    b37a:	492b      	ldr	r1, [pc, #172]	; (b428 <InitDefault433Channels+0xe4>)
    b37c:	4d2b      	ldr	r5, [pc, #172]	; (b42c <InitDefault433Channels+0xe8>)
    b37e:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels433) );
    b380:	7a20      	ldrb	r0, [r4, #8]
    b382:	7a63      	ldrb	r3, [r4, #9]
    b384:	021b      	lsls	r3, r3, #8
    b386:	4303      	orrs	r3, r0
    b388:	7aa0      	ldrb	r0, [r4, #10]
    b38a:	0400      	lsls	r0, r0, #16
    b38c:	4303      	orrs	r3, r0
    b38e:	7ae0      	ldrb	r0, [r4, #11]
    b390:	0600      	lsls	r0, r0, #24
    b392:	4318      	orrs	r0, r3
    b394:	2224      	movs	r2, #36	; 0x24
    b396:	2100      	movs	r1, #0
    b398:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    b39a:	7a20      	ldrb	r0, [r4, #8]
    b39c:	7a63      	ldrb	r3, [r4, #9]
    b39e:	021b      	lsls	r3, r3, #8
    b3a0:	4303      	orrs	r3, r0
    b3a2:	7aa0      	ldrb	r0, [r4, #10]
    b3a4:	0400      	lsls	r0, r0, #16
    b3a6:	4303      	orrs	r3, r0
    b3a8:	7ae0      	ldrb	r0, [r4, #11]
    b3aa:	0600      	lsls	r0, r0, #24
    b3ac:	4318      	orrs	r0, r3
    b3ae:	2224      	movs	r2, #36	; 0x24
    b3b0:	491f      	ldr	r1, [pc, #124]	; (b430 <InitDefault433Channels+0xec>)
    b3b2:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams433) );
    b3b4:	7b20      	ldrb	r0, [r4, #12]
    b3b6:	7b63      	ldrb	r3, [r4, #13]
    b3b8:	021b      	lsls	r3, r3, #8
    b3ba:	4303      	orrs	r3, r0
    b3bc:	7ba0      	ldrb	r0, [r4, #14]
    b3be:	0400      	lsls	r0, r0, #16
    b3c0:	4303      	orrs	r3, r0
    b3c2:	7be0      	ldrb	r0, [r4, #15]
    b3c4:	0600      	lsls	r0, r0, #24
    b3c6:	4318      	orrs	r0, r3
    b3c8:	220c      	movs	r2, #12
    b3ca:	2100      	movs	r1, #0
    b3cc:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    b3ce:	7b20      	ldrb	r0, [r4, #12]
    b3d0:	7b63      	ldrb	r3, [r4, #13]
    b3d2:	021b      	lsls	r3, r3, #8
    b3d4:	4303      	orrs	r3, r0
    b3d6:	7ba0      	ldrb	r0, [r4, #14]
    b3d8:	0400      	lsls	r0, r0, #16
    b3da:	4303      	orrs	r3, r0
    b3dc:	7be0      	ldrb	r0, [r4, #15]
    b3de:	0600      	lsls	r0, r0, #24
    b3e0:	4318      	orrs	r0, r3
    b3e2:	220c      	movs	r2, #12
    b3e4:	4913      	ldr	r1, [pc, #76]	; (b434 <InitDefault433Channels+0xf0>)
    b3e6:	47a8      	blx	r5
	
    for (i = 3; i < RegParams.maxChannels; i++)
    b3e8:	232a      	movs	r3, #42	; 0x2a
    b3ea:	56e3      	ldrsb	r3, [r4, r3]
    b3ec:	2b03      	cmp	r3, #3
    b3ee:	dd15      	ble.n	b41c <InitDefault433Channels+0xd8>
    b3f0:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    b3f2:	480b      	ldr	r0, [pc, #44]	; (b420 <InitDefault433Channels+0xdc>)
    b3f4:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    b3f6:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    b3f8:	7902      	ldrb	r2, [r0, #4]
    b3fa:	7941      	ldrb	r1, [r0, #5]
    b3fc:	0209      	lsls	r1, r1, #8
    b3fe:	4311      	orrs	r1, r2
    b400:	7982      	ldrb	r2, [r0, #6]
    b402:	0412      	lsls	r2, r2, #16
    b404:	4311      	orrs	r1, r2
    b406:	79c2      	ldrb	r2, [r0, #7]
    b408:	0612      	lsls	r2, r2, #24
    b40a:	430a      	orrs	r2, r1
    b40c:	0059      	lsls	r1, r3, #1
    b40e:	188a      	adds	r2, r1, r2
    b410:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    b412:	3301      	adds	r3, #1
    b414:	b2db      	uxtb	r3, r3
    b416:	5702      	ldrsb	r2, [r0, r4]
    b418:	4293      	cmp	r3, r2
    b41a:	dbed      	blt.n	b3f8 <InitDefault433Channels+0xb4>
    }
}
    b41c:	bd70      	pop	{r4, r5, r6, pc}
    b41e:	46c0      	nop			; (mov r8, r8)
    b420:	200033e8 	.word	0x200033e8
    b424:	00014ff5 	.word	0x00014ff5
    b428:	00016c64 	.word	0x00016c64
    b42c:	00014fe3 	.word	0x00014fe3
    b430:	00016c1c 	.word	0x00016c1c
    b434:	00016c80 	.word	0x00016c80

0000b438 <InitDefault920Channels>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (JPN_BAND == 1)
void InitDefault920Channels (void)
{
    b438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels923JP) );
    b43a:	4c40      	ldr	r4, [pc, #256]	; (b53c <InitDefault920Channels+0x104>)
    b43c:	7920      	ldrb	r0, [r4, #4]
    b43e:	7963      	ldrb	r3, [r4, #5]
    b440:	021b      	lsls	r3, r3, #8
    b442:	4303      	orrs	r3, r0
    b444:	79a0      	ldrb	r0, [r4, #6]
    b446:	0400      	lsls	r0, r0, #16
    b448:	4303      	orrs	r3, r0
    b44a:	79e0      	ldrb	r0, [r4, #7]
    b44c:	0600      	lsls	r0, r0, #24
    b44e:	4318      	orrs	r0, r3
    b450:	2204      	movs	r2, #4
    b452:	2100      	movs	r1, #0
    b454:	4e3a      	ldr	r6, [pc, #232]	; (b540 <InitDefault920Channels+0x108>)
    b456:	47b0      	blx	r6
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923JP) );
    b458:	7a20      	ldrb	r0, [r4, #8]
    b45a:	7a63      	ldrb	r3, [r4, #9]
    b45c:	021b      	lsls	r3, r3, #8
    b45e:	4303      	orrs	r3, r0
    b460:	7aa0      	ldrb	r0, [r4, #10]
    b462:	0400      	lsls	r0, r0, #16
    b464:	4303      	orrs	r3, r0
    b466:	7ae0      	ldrb	r0, [r4, #11]
    b468:	0600      	lsls	r0, r0, #24
    b46a:	4318      	orrs	r0, r3
    b46c:	2218      	movs	r2, #24
    b46e:	2100      	movs	r1, #0
    b470:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    b472:	7920      	ldrb	r0, [r4, #4]
    b474:	7963      	ldrb	r3, [r4, #5]
    b476:	021b      	lsls	r3, r3, #8
    b478:	4303      	orrs	r3, r0
    b47a:	79a0      	ldrb	r0, [r4, #6]
    b47c:	0400      	lsls	r0, r0, #16
    b47e:	4303      	orrs	r3, r0
    b480:	79e0      	ldrb	r0, [r4, #7]
    b482:	0600      	lsls	r0, r0, #24
    b484:	4318      	orrs	r0, r3
    b486:	2204      	movs	r2, #4
    b488:	492e      	ldr	r1, [pc, #184]	; (b544 <InitDefault920Channels+0x10c>)
    b48a:	4d2f      	ldr	r5, [pc, #188]	; (b548 <InitDefault920Channels+0x110>)
    b48c:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    b48e:	7a20      	ldrb	r0, [r4, #8]
    b490:	7a63      	ldrb	r3, [r4, #9]
    b492:	021b      	lsls	r3, r3, #8
    b494:	4303      	orrs	r3, r0
    b496:	7aa0      	ldrb	r0, [r4, #10]
    b498:	0400      	lsls	r0, r0, #16
    b49a:	4303      	orrs	r3, r0
    b49c:	7ae0      	ldrb	r0, [r4, #11]
    b49e:	0600      	lsls	r0, r0, #24
    b4a0:	4318      	orrs	r0, r3
    b4a2:	2218      	movs	r2, #24
    b4a4:	4929      	ldr	r1, [pc, #164]	; (b54c <InitDefault920Channels+0x114>)
    b4a6:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParamsJP923) );
    b4a8:	7b20      	ldrb	r0, [r4, #12]
    b4aa:	7b63      	ldrb	r3, [r4, #13]
    b4ac:	021b      	lsls	r3, r3, #8
    b4ae:	4303      	orrs	r3, r0
    b4b0:	7ba0      	ldrb	r0, [r4, #14]
    b4b2:	0400      	lsls	r0, r0, #16
    b4b4:	4303      	orrs	r3, r0
    b4b6:	7be0      	ldrb	r0, [r4, #15]
    b4b8:	0600      	lsls	r0, r0, #24
    b4ba:	4318      	orrs	r0, r3
    b4bc:	2218      	movs	r2, #24
    b4be:	2100      	movs	r1, #0
    b4c0:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    b4c2:	7b20      	ldrb	r0, [r4, #12]
    b4c4:	7b63      	ldrb	r3, [r4, #13]
    b4c6:	021b      	lsls	r3, r3, #8
    b4c8:	4303      	orrs	r3, r0
    b4ca:	7ba0      	ldrb	r0, [r4, #14]
    b4cc:	0400      	lsls	r0, r0, #16
    b4ce:	4303      	orrs	r3, r0
    b4d0:	7be0      	ldrb	r0, [r4, #15]
    b4d2:	0600      	lsls	r0, r0, #24
    b4d4:	4318      	orrs	r0, r3
    b4d6:	2218      	movs	r2, #24
    b4d8:	491d      	ldr	r1, [pc, #116]	; (b550 <InitDefault920Channels+0x118>)
    b4da:	47a8      	blx	r5
	memset (RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycleJP923));
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    b4dc:	0020      	movs	r0, r4
    b4de:	30af      	adds	r0, #175	; 0xaf
    b4e0:	30ff      	adds	r0, #255	; 0xff
    b4e2:	2204      	movs	r2, #4
    b4e4:	491b      	ldr	r1, [pc, #108]	; (b554 <InitDefault920Channels+0x11c>)
    b4e6:	47a8      	blx	r5
    for (i = 2; i < RegParams.maxChannels; i++)
    b4e8:	232a      	movs	r3, #42	; 0x2a
    b4ea:	56e3      	ldrsb	r3, [r4, r3]
    b4ec:	2b02      	cmp	r3, #2
    b4ee:	dd1f      	ble.n	b530 <InitDefault920Channels+0xf8>
    b4f0:	2302      	movs	r3, #2
    b4f2:	2202      	movs	r2, #2
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    b4f4:	4911      	ldr	r1, [pc, #68]	; (b53c <InitDefault920Channels+0x104>)
    b4f6:	27ff      	movs	r7, #255	; 0xff
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    b4f8:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    b4fa:	262a      	movs	r6, #42	; 0x2a
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    b4fc:	7908      	ldrb	r0, [r1, #4]
    b4fe:	794c      	ldrb	r4, [r1, #5]
    b500:	0224      	lsls	r4, r4, #8
    b502:	4304      	orrs	r4, r0
    b504:	7988      	ldrb	r0, [r1, #6]
    b506:	0400      	lsls	r0, r0, #16
    b508:	4304      	orrs	r4, r0
    b50a:	79c8      	ldrb	r0, [r1, #7]
    b50c:	0600      	lsls	r0, r0, #24
    b50e:	4320      	orrs	r0, r4
    b510:	0054      	lsls	r4, r2, #1
    b512:	1820      	adds	r0, r4, r0
    b514:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    b516:	3358      	adds	r3, #88	; 0x58
    b518:	009b      	lsls	r3, r3, #2
    b51a:	18cb      	adds	r3, r1, r3
    b51c:	725d      	strb	r5, [r3, #9]
    b51e:	729d      	strb	r5, [r3, #10]
    b520:	72dd      	strb	r5, [r3, #11]
    b522:	731d      	strb	r5, [r3, #12]
    for (i = 2; i < RegParams.maxChannels; i++)
    b524:	3201      	adds	r2, #1
    b526:	b2d2      	uxtb	r2, r2
    b528:	0013      	movs	r3, r2
    b52a:	5788      	ldrsb	r0, [r1, r6]
    b52c:	4282      	cmp	r2, r0
    b52e:	dbe5      	blt.n	b4fc <InitDefault920Channels+0xc4>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    b530:	21ff      	movs	r1, #255	; 0xff
    b532:	2330      	movs	r3, #48	; 0x30
    b534:	4a01      	ldr	r2, [pc, #4]	; (b53c <InitDefault920Channels+0x104>)
    b536:	54d1      	strb	r1, [r2, r3]
}
    b538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b53a:	46c0      	nop			; (mov r8, r8)
    b53c:	200033e8 	.word	0x200033e8
    b540:	00014ff5 	.word	0x00014ff5
    b544:	00016cec 	.word	0x00016cec
    b548:	00014fe3 	.word	0x00014fe3
    b54c:	00016cd4 	.word	0x00016cd4
    b550:	00016cf4 	.word	0x00016cf4
    b554:	00016cf0 	.word	0x00016cf0

0000b558 <InitDefault920ChannelsKR>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (KR_BAND == 1)
void InitDefault920ChannelsKR (void)
{
    b558:	b5f0      	push	{r4, r5, r6, r7, lr}
    b55a:	46d6      	mov	lr, sl
    b55c:	464f      	mov	r7, r9
    b55e:	4646      	mov	r6, r8
    b560:	b5c0      	push	{r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels920KR) );
    b562:	4c46      	ldr	r4, [pc, #280]	; (b67c <InitDefault920ChannelsKR+0x124>)
    b564:	7920      	ldrb	r0, [r4, #4]
    b566:	7963      	ldrb	r3, [r4, #5]
    b568:	021b      	lsls	r3, r3, #8
    b56a:	4303      	orrs	r3, r0
    b56c:	79a0      	ldrb	r0, [r4, #6]
    b56e:	0400      	lsls	r0, r0, #16
    b570:	4303      	orrs	r3, r0
    b572:	79e0      	ldrb	r0, [r4, #7]
    b574:	0600      	lsls	r0, r0, #24
    b576:	4318      	orrs	r0, r3
    b578:	2206      	movs	r2, #6
    b57a:	2100      	movs	r1, #0
    b57c:	4d40      	ldr	r5, [pc, #256]	; (b680 <InitDefault920ChannelsKR+0x128>)
    b57e:	47a8      	blx	r5
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels920KR) );
    b580:	7a20      	ldrb	r0, [r4, #8]
    b582:	7a63      	ldrb	r3, [r4, #9]
    b584:	021b      	lsls	r3, r3, #8
    b586:	4303      	orrs	r3, r0
    b588:	7aa0      	ldrb	r0, [r4, #10]
    b58a:	0400      	lsls	r0, r0, #16
    b58c:	4303      	orrs	r3, r0
    b58e:	7ae0      	ldrb	r0, [r4, #11]
    b590:	0600      	lsls	r0, r0, #24
    b592:	4318      	orrs	r0, r3
    b594:	2224      	movs	r2, #36	; 0x24
    b596:	2100      	movs	r1, #0
    b598:	47a8      	blx	r5
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    b59a:	7920      	ldrb	r0, [r4, #4]
    b59c:	7963      	ldrb	r3, [r4, #5]
    b59e:	021b      	lsls	r3, r3, #8
    b5a0:	4303      	orrs	r3, r0
    b5a2:	79a0      	ldrb	r0, [r4, #6]
    b5a4:	0400      	lsls	r0, r0, #16
    b5a6:	4303      	orrs	r3, r0
    b5a8:	79e0      	ldrb	r0, [r4, #7]
    b5aa:	0600      	lsls	r0, r0, #24
    b5ac:	4318      	orrs	r0, r3
    b5ae:	2206      	movs	r2, #6
    b5b0:	4934      	ldr	r1, [pc, #208]	; (b684 <InitDefault920ChannelsKR+0x12c>)
    b5b2:	4d35      	ldr	r5, [pc, #212]	; (b688 <InitDefault920ChannelsKR+0x130>)
    b5b4:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    b5b6:	7a20      	ldrb	r0, [r4, #8]
    b5b8:	7a63      	ldrb	r3, [r4, #9]
    b5ba:	021b      	lsls	r3, r3, #8
    b5bc:	4303      	orrs	r3, r0
    b5be:	7aa0      	ldrb	r0, [r4, #10]
    b5c0:	0400      	lsls	r0, r0, #16
    b5c2:	4303      	orrs	r3, r0
    b5c4:	7ae0      	ldrb	r0, [r4, #11]
    b5c6:	0600      	lsls	r0, r0, #24
    b5c8:	4318      	orrs	r0, r3
    b5ca:	2224      	movs	r2, #36	; 0x24
    b5cc:	492f      	ldr	r1, [pc, #188]	; (b68c <InitDefault920ChannelsKR+0x134>)
    b5ce:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    b5d0:	232a      	movs	r3, #42	; 0x2a
    b5d2:	56e3      	ldrsb	r3, [r4, r3]
    b5d4:	2b03      	cmp	r3, #3
    b5d6:	dd48      	ble.n	b66a <InitDefault920ChannelsKR+0x112>
    b5d8:	2103      	movs	r1, #3
    b5da:	2003      	movs	r0, #3
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    b5dc:	4b27      	ldr	r3, [pc, #156]	; (b67c <InitDefault920ChannelsKR+0x124>)
    b5de:	26ff      	movs	r6, #255	; 0xff
		RegParams.pChParams[i].status = DISABLED;
    b5e0:	2500      	movs	r5, #0
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    b5e2:	22e1      	movs	r2, #225	; 0xe1
    b5e4:	0052      	lsls	r2, r2, #1
    b5e6:	4690      	mov	r8, r2
    b5e8:	46b4      	mov	ip, r6
    for (i = 3; i < RegParams.maxChannels; i++)
    b5ea:	3a99      	subs	r2, #153	; 0x99
    b5ec:	3aff      	subs	r2, #255	; 0xff
    b5ee:	4692      	mov	sl, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    b5f0:	0042      	lsls	r2, r0, #1
    b5f2:	791c      	ldrb	r4, [r3, #4]
    b5f4:	46a1      	mov	r9, r4
    b5f6:	795c      	ldrb	r4, [r3, #5]
    b5f8:	0224      	lsls	r4, r4, #8
    b5fa:	464f      	mov	r7, r9
    b5fc:	4327      	orrs	r7, r4
    b5fe:	799c      	ldrb	r4, [r3, #6]
    b600:	0424      	lsls	r4, r4, #16
    b602:	4327      	orrs	r7, r4
    b604:	79dc      	ldrb	r4, [r3, #7]
    b606:	0624      	lsls	r4, r4, #24
    b608:	433c      	orrs	r4, r7
    b60a:	18a4      	adds	r4, r4, r2
    b60c:	7066      	strb	r6, [r4, #1]
		RegParams.pChParams[i].status = DISABLED;
    b60e:	791c      	ldrb	r4, [r3, #4]
    b610:	46a1      	mov	r9, r4
    b612:	795c      	ldrb	r4, [r3, #5]
    b614:	0224      	lsls	r4, r4, #8
    b616:	464f      	mov	r7, r9
    b618:	4327      	orrs	r7, r4
    b61a:	799c      	ldrb	r4, [r3, #6]
    b61c:	0424      	lsls	r4, r4, #16
    b61e:	4327      	orrs	r7, r4
    b620:	79dc      	ldrb	r4, [r3, #7]
    b622:	0624      	lsls	r4, r4, #24
    b624:	433c      	orrs	r4, r7
    b626:	54a5      	strb	r5, [r4, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    b628:	7a1c      	ldrb	r4, [r3, #8]
    b62a:	46a1      	mov	r9, r4
    b62c:	7a5c      	ldrb	r4, [r3, #9]
    b62e:	0224      	lsls	r4, r4, #8
    b630:	464f      	mov	r7, r9
    b632:	4327      	orrs	r7, r4
    b634:	7a9c      	ldrb	r4, [r3, #10]
    b636:	0424      	lsls	r4, r4, #16
    b638:	4327      	orrs	r7, r4
    b63a:	7adc      	ldrb	r4, [r3, #11]
    b63c:	0624      	lsls	r4, r4, #24
    b63e:	433c      	orrs	r4, r7
    b640:	1812      	adds	r2, r2, r0
    b642:	0092      	lsls	r2, r2, #2
    b644:	1912      	adds	r2, r2, r4
    b646:	7255      	strb	r5, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    b648:	4642      	mov	r2, r8
    b64a:	4664      	mov	r4, ip
    b64c:	549c      	strb	r4, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    b64e:	3158      	adds	r1, #88	; 0x58
    b650:	0089      	lsls	r1, r1, #2
    b652:	1859      	adds	r1, r3, r1
    b654:	724d      	strb	r5, [r1, #9]
    b656:	728d      	strb	r5, [r1, #10]
    b658:	72cd      	strb	r5, [r1, #11]
    b65a:	730d      	strb	r5, [r1, #12]
    for (i = 3; i < RegParams.maxChannels; i++)
    b65c:	3001      	adds	r0, #1
    b65e:	b2c0      	uxtb	r0, r0
    b660:	0001      	movs	r1, r0
    b662:	4652      	mov	r2, sl
    b664:	569a      	ldrsb	r2, [r3, r2]
    b666:	4290      	cmp	r0, r2
    b668:	dbc2      	blt.n	b5f0 <InitDefault920ChannelsKR+0x98>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    b66a:	21ff      	movs	r1, #255	; 0xff
    b66c:	2330      	movs	r3, #48	; 0x30
    b66e:	4a03      	ldr	r2, [pc, #12]	; (b67c <InitDefault920ChannelsKR+0x124>)
    b670:	54d1      	strb	r1, [r2, r3]
}
    b672:	bc1c      	pop	{r2, r3, r4}
    b674:	4690      	mov	r8, r2
    b676:	4699      	mov	r9, r3
    b678:	46a2      	mov	sl, r4
    b67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b67c:	200033e8 	.word	0x200033e8
    b680:	00014ff5 	.word	0x00014ff5
    b684:	00016d30 	.word	0x00016d30
    b688:	00014fe3 	.word	0x00014fe3
    b68c:	00016d0c 	.word	0x00016d0c

0000b690 <LORAREG_GetAttr>:
 * \param[out] Result of the GET operation
 * \retval LORAWAN_SUCCESS : If GET is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_GetAttr(LorawanRegionalAttributes_t attrType, void *attrInput, void *attrOutput)
{
    b690:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    b692:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    b694:	283c      	cmp	r0, #60	; 0x3c
    b696:	d901      	bls.n	b69c <LORAREG_GetAttr+0xc>
	{
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
	}

	return result;
}
    b698:	0018      	movs	r0, r3
    b69a:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    b69c:	0084      	lsls	r4, r0, #2
    b69e:	4b02      	ldr	r3, [pc, #8]	; (b6a8 <LORAREG_GetAttr+0x18>)
    b6a0:	58e3      	ldr	r3, [r4, r3]
    b6a2:	4798      	blx	r3
    b6a4:	0003      	movs	r3, r0
    b6a6:	e7f7      	b.n	b698 <LORAREG_GetAttr+0x8>
    b6a8:	20001acc 	.word	0x20001acc

0000b6ac <LORAREG_ValidateAttr>:
 * \param[in] attrInput Input used to validate the attribute value
 * \retval LORAWAN_SUCCESS : If Validate is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_ValidateAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    b6ac:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    b6ae:	230a      	movs	r3, #10
	
	if(attrType < REG_NUM_ATTRIBUTES)
    b6b0:	283c      	cmp	r0, #60	; 0x3c
    b6b2:	d901      	bls.n	b6b8 <LORAREG_ValidateAttr+0xc>
	{
	    result = pValidateAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    b6b4:	0018      	movs	r0, r3
    b6b6:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    b6b8:	0082      	lsls	r2, r0, #2
    b6ba:	4b02      	ldr	r3, [pc, #8]	; (b6c4 <LORAREG_ValidateAttr+0x18>)
    b6bc:	58d3      	ldr	r3, [r2, r3]
    b6be:	4798      	blx	r3
    b6c0:	0003      	movs	r3, r0
    b6c2:	e7f7      	b.n	b6b4 <LORAREG_ValidateAttr+0x8>
    b6c4:	20001cb4 	.word	0x20001cb4

0000b6c8 <LORAREG_SetAttr>:
 * \param[in] attrInput Input used to update the attribute value
 * \retval LORAWAN_SUCCESS : If Update is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_SetAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    b6c8:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    b6ca:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    b6cc:	283c      	cmp	r0, #60	; 0x3c
    b6ce:	d901      	bls.n	b6d4 <LORAREG_SetAttr+0xc>
	{
	    result = pSetAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    b6d0:	0018      	movs	r0, r3
    b6d2:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    b6d4:	0082      	lsls	r2, r0, #2
    b6d6:	4b02      	ldr	r3, [pc, #8]	; (b6e0 <LORAREG_SetAttr+0x18>)
    b6d8:	58d3      	ldr	r3, [r2, r3]
    b6da:	4798      	blx	r3
    b6dc:	0003      	movs	r3, r0
    b6de:	e7f7      	b.n	b6d0 <LORAREG_SetAttr+0x8>
    b6e0:	20001bc0 	.word	0x20001bc0

0000b6e4 <setDefaultTxPower>:
}
#endif
StackRetStatus_t setDefaultTxPower(IsmBand_t ismBand)
{   
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    b6e4:	2800      	cmp	r0, #0
    b6e6:	d00e      	beq.n	b706 <setDefaultTxPower+0x22>
	{
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
	}
	else if(ismBand == ISM_JPN923)
    b6e8:	2805      	cmp	r0, #5
    b6ea:	d013      	beq.n	b714 <setDefaultTxPower+0x30>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
	}
	else if (ismBand == ISM_KR920)
    b6ec:	2804      	cmp	r0, #4
    b6ee:	d017      	beq.n	b720 <setDefaultTxPower+0x3c>
	}
	else if (ismBand == ISM_ASBAND)
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
	}
	else if(ismBand == ISM_AU915)
    b6f0:	2803      	cmp	r0, #3
    b6f2:	d01b      	beq.n	b72c <setDefaultTxPower+0x48>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
    b6f4:	230a      	movs	r3, #10
	else if(ismBand == ISM_NA915)
    b6f6:	2802      	cmp	r0, #2
    b6f8:	d10a      	bne.n	b710 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    b6fa:	2107      	movs	r1, #7
    b6fc:	331d      	adds	r3, #29
    b6fe:	4a0e      	ldr	r2, [pc, #56]	; (b738 <setDefaultTxPower+0x54>)
    b700:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b702:	3b1f      	subs	r3, #31
    b704:	e004      	b.n	b710 <setDefaultTxPower+0x2c>
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    b706:	2101      	movs	r1, #1
    b708:	2327      	movs	r3, #39	; 0x27
    b70a:	4a0b      	ldr	r2, [pc, #44]	; (b738 <setDefaultTxPower+0x54>)
    b70c:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b70e:	3b1f      	subs	r3, #31
	}
#if (ENABLE_PDS==1)
	PDS_STORE(RegParams.MacTxPower);
#endif
	return result;
}
    b710:	0018      	movs	r0, r3
    b712:	4770      	bx	lr
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    b714:	2101      	movs	r1, #1
    b716:	2327      	movs	r3, #39	; 0x27
    b718:	4a07      	ldr	r2, [pc, #28]	; (b738 <setDefaultTxPower+0x54>)
    b71a:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b71c:	3b1f      	subs	r3, #31
    b71e:	e7f7      	b.n	b710 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    b720:	2101      	movs	r1, #1
    b722:	2327      	movs	r3, #39	; 0x27
    b724:	4a04      	ldr	r2, [pc, #16]	; (b738 <setDefaultTxPower+0x54>)
    b726:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b728:	3b1f      	subs	r3, #31
    b72a:	e7f1      	b.n	b710 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    b72c:	2107      	movs	r1, #7
    b72e:	2327      	movs	r3, #39	; 0x27
    b730:	4a01      	ldr	r2, [pc, #4]	; (b738 <setDefaultTxPower+0x54>)
    b732:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b734:	3b1f      	subs	r3, #31
    b736:	e7eb      	b.n	b710 <setDefaultTxPower+0x2c>
    b738:	200033e8 	.word	0x200033e8

0000b73c <Enableallchannels>:
	}
	return status;
}
#endif
void Enableallchannels()
{
    b73c:	b510      	push	{r4, lr}
    b73e:	2000      	movs	r0, #0
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
	{
		RegParams.pChParams[i].status = ENABLED;
    b740:	490a      	ldr	r1, [pc, #40]	; (b76c <Enableallchannels+0x30>)
    b742:	2401      	movs	r4, #1
    b744:	790b      	ldrb	r3, [r1, #4]
    b746:	794a      	ldrb	r2, [r1, #5]
    b748:	0212      	lsls	r2, r2, #8
    b74a:	431a      	orrs	r2, r3
    b74c:	798b      	ldrb	r3, [r1, #6]
    b74e:	041b      	lsls	r3, r3, #16
    b750:	431a      	orrs	r2, r3
    b752:	79cb      	ldrb	r3, [r1, #7]
    b754:	061b      	lsls	r3, r3, #24
    b756:	4313      	orrs	r3, r2
    b758:	541c      	strb	r4, [r3, r0]
    b75a:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    b75c:	2890      	cmp	r0, #144	; 0x90
    b75e:	d1f1      	bne.n	b744 <Enableallchannels+0x8>
	}
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    b760:	2100      	movs	r1, #0
    b762:	23ac      	movs	r3, #172	; 0xac
    b764:	005b      	lsls	r3, r3, #1
    b766:	4a01      	ldr	r2, [pc, #4]	; (b76c <Enableallchannels+0x30>)
    b768:	54d1      	strb	r1, [r2, r3]
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
#endif
}
    b76a:	bd10      	pop	{r4, pc}
    b76c:	200033e8 	.word	0x200033e8

0000b770 <LORAREG_EnableallChannels>:
StackRetStatus_t LORAREG_EnableallChannels(IsmBand_t ismBand)
{
    b770:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    b772:	2800      	cmp	r0, #0
    b774:	d00a      	beq.n	b78c <LORAREG_EnableallChannels+0x1c>
	{
		 InitDefault868Channels();
	}
	else if (ismBand == ISM_EU433)
    b776:	2801      	cmp	r0, #1
    b778:	d00b      	beq.n	b792 <LORAREG_EnableallChannels+0x22>
	{
		 InitDefault433Channels();
	}
	else if(ismBand == ISM_JPN923)
    b77a:	2805      	cmp	r0, #5
    b77c:	d00c      	beq.n	b798 <LORAREG_EnableallChannels+0x28>
	{
		 InitDefault920Channels();	
	}
	else if (ismBand == ISM_KR920)
    b77e:	2804      	cmp	r0, #4
    b780:	d00d      	beq.n	b79e <LORAREG_EnableallChannels+0x2e>
	}
	else if (ismBand == ISM_ASBAND)
	{
		 InitDefault923Channels ();
	}
	else if(ismBand == ISM_AU915 || ismBand == ISM_NA915)
    b782:	3802      	subs	r0, #2
    b784:	2801      	cmp	r0, #1
    b786:	d90d      	bls.n	b7a4 <LORAREG_EnableallChannels+0x34>
	{
		 Enableallchannels();
	}
	return result;
}
    b788:	2008      	movs	r0, #8
    b78a:	bd10      	pop	{r4, pc}
		 InitDefault868Channels();
    b78c:	4b07      	ldr	r3, [pc, #28]	; (b7ac <LORAREG_EnableallChannels+0x3c>)
    b78e:	4798      	blx	r3
    b790:	e7fa      	b.n	b788 <LORAREG_EnableallChannels+0x18>
		 InitDefault433Channels();
    b792:	4b07      	ldr	r3, [pc, #28]	; (b7b0 <LORAREG_EnableallChannels+0x40>)
    b794:	4798      	blx	r3
    b796:	e7f7      	b.n	b788 <LORAREG_EnableallChannels+0x18>
		 InitDefault920Channels();	
    b798:	4b06      	ldr	r3, [pc, #24]	; (b7b4 <LORAREG_EnableallChannels+0x44>)
    b79a:	4798      	blx	r3
    b79c:	e7f4      	b.n	b788 <LORAREG_EnableallChannels+0x18>
		 InitDefault920ChannelsKR();
    b79e:	4b06      	ldr	r3, [pc, #24]	; (b7b8 <LORAREG_EnableallChannels+0x48>)
    b7a0:	4798      	blx	r3
    b7a2:	e7f1      	b.n	b788 <LORAREG_EnableallChannels+0x18>
		 Enableallchannels();
    b7a4:	4b05      	ldr	r3, [pc, #20]	; (b7bc <LORAREG_EnableallChannels+0x4c>)
    b7a6:	4798      	blx	r3
    b7a8:	e7ee      	b.n	b788 <LORAREG_EnableallChannels+0x18>
    b7aa:	46c0      	nop			; (mov r8, r8)
    b7ac:	0000b241 	.word	0x0000b241
    b7b0:	0000b345 	.word	0x0000b345
    b7b4:	0000b439 	.word	0x0000b439
    b7b8:	0000b559 	.word	0x0000b559
    b7bc:	0000b73d 	.word	0x0000b73d

0000b7c0 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    b7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7c2:	b083      	sub	sp, #12
    b7c4:	0004      	movs	r4, r0
    b7c6:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    b7c8:	4a2b      	ldr	r2, [pc, #172]	; (b878 <AESEncode+0xb8>)
    b7ca:	2101      	movs	r1, #1
    b7cc:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    b7ce:	2300      	movs	r3, #0
    b7d0:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    b7d2:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    b7d4:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    b7d6:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    b7d8:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    b7da:	4928      	ldr	r1, [pc, #160]	; (b87c <AESEncode+0xbc>)
    b7dc:	4828      	ldr	r0, [pc, #160]	; (b880 <AESEncode+0xc0>)
    b7de:	4b29      	ldr	r3, [pc, #164]	; (b884 <AESEncode+0xc4>)
    b7e0:	4798      	blx	r3
    b7e2:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    b7e4:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    b7e6:	4f28      	ldr	r7, [pc, #160]	; (b888 <AESEncode+0xc8>)
    b7e8:	1870      	adds	r0, r6, r1
    b7ea:	2300      	movs	r3, #0
    b7ec:	5cc2      	ldrb	r2, [r0, r3]
    b7ee:	555a      	strb	r2, [r3, r5]
    b7f0:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    b7f2:	2b04      	cmp	r3, #4
    b7f4:	d1fa      	bne.n	b7ec <AESEncode+0x2c>
    b7f6:	9b01      	ldr	r3, [sp, #4]
    b7f8:	51cb      	str	r3, [r1, r7]
    b7fa:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    b7fc:	2910      	cmp	r1, #16
    b7fe:	d1f3      	bne.n	b7e8 <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    b800:	4d1f      	ldr	r5, [pc, #124]	; (b880 <AESEncode+0xc0>)
    b802:	4921      	ldr	r1, [pc, #132]	; (b888 <AESEncode+0xc8>)
    b804:	0028      	movs	r0, r5
    b806:	4b21      	ldr	r3, [pc, #132]	; (b88c <AESEncode+0xcc>)
    b808:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    b80a:	682a      	ldr	r2, [r5, #0]
    b80c:	7913      	ldrb	r3, [r2, #4]
    b80e:	2102      	movs	r1, #2
    b810:	430b      	orrs	r3, r1
    b812:	7113      	strb	r3, [r2, #4]
    b814:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    b816:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    b818:	4e1b      	ldr	r6, [pc, #108]	; (b888 <AESEncode+0xc8>)
    b81a:	1860      	adds	r0, r4, r1
    b81c:	2300      	movs	r3, #0
    b81e:	5cc2      	ldrb	r2, [r0, r3]
    b820:	555a      	strb	r2, [r3, r5]
    b822:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    b824:	2b04      	cmp	r3, #4
    b826:	d1fa      	bne.n	b81e <AESEncode+0x5e>
    b828:	9b01      	ldr	r3, [sp, #4]
    b82a:	518b      	str	r3, [r1, r6]
    b82c:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    b82e:	2910      	cmp	r1, #16
    b830:	d1f3      	bne.n	b81a <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    b832:	4d13      	ldr	r5, [pc, #76]	; (b880 <AESEncode+0xc0>)
    b834:	4914      	ldr	r1, [pc, #80]	; (b888 <AESEncode+0xc8>)
    b836:	0028      	movs	r0, r5
    b838:	4b15      	ldr	r3, [pc, #84]	; (b890 <AESEncode+0xd0>)
    b83a:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    b83c:	682d      	ldr	r5, [r5, #0]
    b83e:	792b      	ldrb	r3, [r5, #4]
    b840:	2202      	movs	r2, #2
    b842:	4393      	bics	r3, r2
    b844:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    b846:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    b848:	2002      	movs	r0, #2
    b84a:	e001      	b.n	b850 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    b84c:	4211      	tst	r1, r2
    b84e:	d107      	bne.n	b860 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    b850:	79eb      	ldrb	r3, [r5, #7]
    b852:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    b854:	000a      	movs	r2, r1
    b856:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    b858:	4218      	tst	r0, r3
    b85a:	d0f7      	beq.n	b84c <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    b85c:	4302      	orrs	r2, r0
    b85e:	e7f5      	b.n	b84c <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    b860:	4d09      	ldr	r5, [pc, #36]	; (b888 <AESEncode+0xc8>)
    b862:	0029      	movs	r1, r5
    b864:	4806      	ldr	r0, [pc, #24]	; (b880 <AESEncode+0xc0>)
    b866:	4b0b      	ldr	r3, [pc, #44]	; (b894 <AESEncode+0xd4>)
    b868:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    b86a:	2210      	movs	r2, #16
    b86c:	0029      	movs	r1, r5
    b86e:	0020      	movs	r0, r4
    b870:	4b09      	ldr	r3, [pc, #36]	; (b898 <AESEncode+0xd8>)
    b872:	4798      	blx	r3
#endif	
}
    b874:	b003      	add	sp, #12
    b876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b878:	200035f4 	.word	0x200035f4
    b87c:	42003400 	.word	0x42003400
    b880:	20003600 	.word	0x20003600
    b884:	00004b65 	.word	0x00004b65
    b888:	20001da8 	.word	0x20001da8
    b88c:	00004bf9 	.word	0x00004bf9
    b890:	00004c2d 	.word	0x00004c2d
    b894:	00004c7d 	.word	0x00004c7d
    b898:	00014fe3 	.word	0x00014fe3

0000b89c <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    b89c:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    b89e:	4d07      	ldr	r5, [pc, #28]	; (b8bc <AESInit+0x20>)
    b8a0:	0028      	movs	r0, r5
    b8a2:	4b07      	ldr	r3, [pc, #28]	; (b8c0 <AESInit+0x24>)
    b8a4:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    b8a6:	4c07      	ldr	r4, [pc, #28]	; (b8c4 <AESInit+0x28>)
    b8a8:	002a      	movs	r2, r5
    b8aa:	4907      	ldr	r1, [pc, #28]	; (b8c8 <AESInit+0x2c>)
    b8ac:	0020      	movs	r0, r4
    b8ae:	4b07      	ldr	r3, [pc, #28]	; (b8cc <AESInit+0x30>)
    b8b0:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    b8b2:	0020      	movs	r0, r4
    b8b4:	4b06      	ldr	r3, [pc, #24]	; (b8d0 <AESInit+0x34>)
    b8b6:	4798      	blx	r3
#endif	
}
    b8b8:	bd70      	pop	{r4, r5, r6, pc}
    b8ba:	46c0      	nop			; (mov r8, r8)
    b8bc:	200035f4 	.word	0x200035f4
    b8c0:	00004b29 	.word	0x00004b29
    b8c4:	20003600 	.word	0x20003600
    b8c8:	42003400 	.word	0x42003400
    b8cc:	00004bd9 	.word	0x00004bd9
    b8d0:	00004b43 	.word	0x00004b43

0000b8d4 <hwTimerExpiryCallback>:
	SYS_HwOverflow_Cb();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    b8d4:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    b8d6:	4b06      	ldr	r3, [pc, #24]	; (b8f0 <hwTimerExpiryCallback+0x1c>)
    b8d8:	781b      	ldrb	r3, [r3, #0]
    b8da:	2b00      	cmp	r3, #0
    b8dc:	d100      	bne.n	b8e0 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    b8de:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    b8e0:	2201      	movs	r2, #1
    b8e2:	4b04      	ldr	r3, [pc, #16]	; (b8f4 <hwTimerExpiryCallback+0x20>)
    b8e4:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    b8e6:	2001      	movs	r0, #1
    b8e8:	4b03      	ldr	r3, [pc, #12]	; (b8f8 <hwTimerExpiryCallback+0x24>)
    b8ea:	4798      	blx	r3
}
    b8ec:	e7f7      	b.n	b8de <hwTimerExpiryCallback+0xa>
    b8ee:	46c0      	nop			; (mov r8, r8)
    b8f0:	20001dc8 	.word	0x20001dc8
    b8f4:	200037aa 	.word	0x200037aa
    b8f8:	0000c1f1 	.word	0x0000c1f1

0000b8fc <hwTimerOverflowCallback>:
{
    b8fc:	b510      	push	{r4, lr}
    b8fe:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    b900:	4925      	ldr	r1, [pc, #148]	; (b998 <hwTimerOverflowCallback+0x9c>)
    b902:	880a      	ldrh	r2, [r1, #0]
    b904:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    b906:	880b      	ldrh	r3, [r1, #0]
    b908:	3301      	adds	r3, #1
    b90a:	b29b      	uxth	r3, r3
    b90c:	800b      	strh	r3, [r1, #0]
    b90e:	429a      	cmp	r2, r3
    b910:	d903      	bls.n	b91a <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    b912:	4a22      	ldr	r2, [pc, #136]	; (b99c <hwTimerOverflowCallback+0xa0>)
    b914:	6813      	ldr	r3, [r2, #0]
    b916:	3301      	adds	r3, #1
    b918:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    b91a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    b91e:	425a      	negs	r2, r3
    b920:	4153      	adcs	r3, r2
    b922:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    b924:	b672      	cpsid	i
  __ASM volatile ("dmb");
    b926:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    b92a:	2200      	movs	r2, #0
    b92c:	4b1c      	ldr	r3, [pc, #112]	; (b9a0 <hwTimerOverflowCallback+0xa4>)
    b92e:	701a      	strb	r2, [r3, #0]
	return flags;
    b930:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    b932:	4b1c      	ldr	r3, [pc, #112]	; (b9a4 <hwTimerOverflowCallback+0xa8>)
    b934:	681b      	ldr	r3, [r3, #0]
    b936:	2bff      	cmp	r3, #255	; 0xff
    b938:	d00d      	beq.n	b956 <hwTimerOverflowCallback+0x5a>
    b93a:	0119      	lsls	r1, r3, #4
    b93c:	4a1a      	ldr	r2, [pc, #104]	; (b9a8 <hwTimerOverflowCallback+0xac>)
    b93e:	1852      	adds	r2, r2, r1
    b940:	7b52      	ldrb	r2, [r2, #13]
    b942:	2a00      	cmp	r2, #0
    b944:	d107      	bne.n	b956 <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    b946:	4a18      	ldr	r2, [pc, #96]	; (b9a8 <hwTimerOverflowCallback+0xac>)
    b948:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    b94a:	4b13      	ldr	r3, [pc, #76]	; (b998 <hwTimerOverflowCallback+0x9c>)
    b94c:	881b      	ldrh	r3, [r3, #0]
    b94e:	b29b      	uxth	r3, r3
    b950:	0c02      	lsrs	r2, r0, #16
    b952:	429a      	cmp	r2, r3
    b954:	d00c      	beq.n	b970 <hwTimerOverflowCallback+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    b956:	23ff      	movs	r3, #255	; 0xff
    b958:	4223      	tst	r3, r4
    b95a:	d005      	beq.n	b968 <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    b95c:	2201      	movs	r2, #1
    b95e:	4b10      	ldr	r3, [pc, #64]	; (b9a0 <hwTimerOverflowCallback+0xa4>)
    b960:	701a      	strb	r2, [r3, #0]
    b962:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    b966:	b662      	cpsie	i
	SYS_HwOverflow_Cb();
    b968:	4b10      	ldr	r3, [pc, #64]	; (b9ac <hwTimerOverflowCallback+0xb0>)
    b96a:	4798      	blx	r3
}
    b96c:	b002      	add	sp, #8
    b96e:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    b970:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    b972:	28ff      	cmp	r0, #255	; 0xff
    b974:	d909      	bls.n	b98a <hwTimerOverflowCallback+0x8e>
            {
                common_tc_delay(tmoLow16);
    b976:	4b0e      	ldr	r3, [pc, #56]	; (b9b0 <hwTimerOverflowCallback+0xb4>)
    b978:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    b97a:	4b0a      	ldr	r3, [pc, #40]	; (b9a4 <hwTimerOverflowCallback+0xa8>)
    b97c:	681a      	ldr	r2, [r3, #0]
    b97e:	0112      	lsls	r2, r2, #4
    b980:	4b09      	ldr	r3, [pc, #36]	; (b9a8 <hwTimerOverflowCallback+0xac>)
    b982:	189b      	adds	r3, r3, r2
    b984:	2201      	movs	r2, #1
    b986:	735a      	strb	r2, [r3, #13]
    b988:	e7e5      	b.n	b956 <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    b98a:	2201      	movs	r2, #1
    b98c:	4b09      	ldr	r3, [pc, #36]	; (b9b4 <hwTimerOverflowCallback+0xb8>)
    b98e:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    b990:	2001      	movs	r0, #1
    b992:	4b09      	ldr	r3, [pc, #36]	; (b9b8 <hwTimerOverflowCallback+0xbc>)
    b994:	4798      	blx	r3
    b996:	e7de      	b.n	b956 <hwTimerOverflowCallback+0x5a>
    b998:	200037a8 	.word	0x200037a8
    b99c:	200037ac 	.word	0x200037ac
    b9a0:	20000008 	.word	0x20000008
    b9a4:	20001dc4 	.word	0x20001dc4
    b9a8:	20003618 	.word	0x20003618
    b9ac:	0000aba9 	.word	0x0000aba9
    b9b0:	00011c3d 	.word	0x00011c3d
    b9b4:	200037aa 	.word	0x200037aa
    b9b8:	0000c1f1 	.word	0x0000c1f1

0000b9bc <loadHwTimer>:
{
    b9bc:	b570      	push	{r4, r5, r6, lr}
    b9be:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    b9c0:	28ff      	cmp	r0, #255	; 0xff
    b9c2:	d030      	beq.n	ba26 <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    b9c4:	4b19      	ldr	r3, [pc, #100]	; (ba2c <loadHwTimer+0x70>)
    b9c6:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    b9c8:	4b19      	ldr	r3, [pc, #100]	; (ba30 <loadHwTimer+0x74>)
    b9ca:	881d      	ldrh	r5, [r3, #0]
    b9cc:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    b9ce:	4b19      	ldr	r3, [pc, #100]	; (ba34 <loadHwTimer+0x78>)
    b9d0:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    b9d2:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    b9d4:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    b9d6:	4a18      	ldr	r2, [pc, #96]	; (ba38 <loadHwTimer+0x7c>)
    b9d8:	589b      	ldr	r3, [r3, r2]
    b9da:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    b9dc:	4b17      	ldr	r3, [pc, #92]	; (ba3c <loadHwTimer+0x80>)
    b9de:	4298      	cmp	r0, r3
    b9e0:	d81a      	bhi.n	ba18 <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    b9e2:	0122      	lsls	r2, r4, #4
    b9e4:	4b14      	ldr	r3, [pc, #80]	; (ba38 <loadHwTimer+0x7c>)
    b9e6:	189b      	adds	r3, r3, r2
    b9e8:	7b5b      	ldrb	r3, [r3, #13]
    b9ea:	2b00      	cmp	r3, #0
    b9ec:	d11d      	bne.n	ba2a <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    b9ee:	28ff      	cmp	r0, #255	; 0xff
    b9f0:	d90b      	bls.n	ba0a <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    b9f2:	4b13      	ldr	r3, [pc, #76]	; (ba40 <loadHwTimer+0x84>)
    b9f4:	4298      	cmp	r0, r3
    b9f6:	d818      	bhi.n	ba2a <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    b9f8:	b280      	uxth	r0, r0
    b9fa:	4b12      	ldr	r3, [pc, #72]	; (ba44 <loadHwTimer+0x88>)
    b9fc:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    b9fe:	0124      	lsls	r4, r4, #4
    ba00:	4b0d      	ldr	r3, [pc, #52]	; (ba38 <loadHwTimer+0x7c>)
    ba02:	191c      	adds	r4, r3, r4
    ba04:	2301      	movs	r3, #1
    ba06:	7363      	strb	r3, [r4, #13]
    ba08:	e00f      	b.n	ba2a <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    ba0a:	2201      	movs	r2, #1
    ba0c:	4b0e      	ldr	r3, [pc, #56]	; (ba48 <loadHwTimer+0x8c>)
    ba0e:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    ba10:	2001      	movs	r0, #1
    ba12:	4b0e      	ldr	r3, [pc, #56]	; (ba4c <loadHwTimer+0x90>)
    ba14:	4798      	blx	r3
    ba16:	e008      	b.n	ba2a <loadHwTimer+0x6e>
            isTimerTriggered = true;
    ba18:	2201      	movs	r2, #1
    ba1a:	4b0b      	ldr	r3, [pc, #44]	; (ba48 <loadHwTimer+0x8c>)
    ba1c:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    ba1e:	2001      	movs	r0, #1
    ba20:	4b0a      	ldr	r3, [pc, #40]	; (ba4c <loadHwTimer+0x90>)
    ba22:	4798      	blx	r3
    ba24:	e001      	b.n	ba2a <loadHwTimer+0x6e>
        common_tc_compare_stop();
    ba26:	4b0a      	ldr	r3, [pc, #40]	; (ba50 <loadHwTimer+0x94>)
    ba28:	4798      	blx	r3
}
    ba2a:	bd70      	pop	{r4, r5, r6, pc}
    ba2c:	200037ac 	.word	0x200037ac
    ba30:	200037a8 	.word	0x200037a8
    ba34:	00011b95 	.word	0x00011b95
    ba38:	20003618 	.word	0x20003618
    ba3c:	7ffffffe 	.word	0x7ffffffe
    ba40:	0000ffff 	.word	0x0000ffff
    ba44:	00011c3d 	.word	0x00011c3d
    ba48:	200037aa 	.word	0x200037aa
    ba4c:	0000c1f1 	.word	0x0000c1f1
    ba50:	00011be1 	.word	0x00011be1

0000ba54 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    ba54:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    ba56:	4b1d      	ldr	r3, [pc, #116]	; (bacc <swtimerInternalHandler+0x78>)
    ba58:	781b      	ldrb	r3, [r3, #0]
    ba5a:	2b00      	cmp	r3, #0
    ba5c:	d027      	beq.n	baae <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    ba5e:	2200      	movs	r2, #0
    ba60:	4b1a      	ldr	r3, [pc, #104]	; (bacc <swtimerInternalHandler+0x78>)
    ba62:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    ba64:	4b1a      	ldr	r3, [pc, #104]	; (bad0 <swtimerInternalHandler+0x7c>)
    ba66:	781b      	ldrb	r3, [r3, #0]
    ba68:	2b00      	cmp	r3, #0
    ba6a:	d020      	beq.n	baae <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    ba6c:	4b19      	ldr	r3, [pc, #100]	; (bad4 <swtimerInternalHandler+0x80>)
    ba6e:	681b      	ldr	r3, [r3, #0]
    ba70:	2bff      	cmp	r3, #255	; 0xff
    ba72:	d01d      	beq.n	bab0 <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    ba74:	4b18      	ldr	r3, [pc, #96]	; (bad8 <swtimerInternalHandler+0x84>)
    ba76:	6818      	ldr	r0, [r3, #0]
    ba78:	4918      	ldr	r1, [pc, #96]	; (badc <swtimerInternalHandler+0x88>)
    ba7a:	680b      	ldr	r3, [r1, #0]
    ba7c:	011a      	lsls	r2, r3, #4
    ba7e:	4b18      	ldr	r3, [pc, #96]	; (bae0 <swtimerInternalHandler+0x8c>)
    ba80:	189b      	adds	r3, r3, r2
    ba82:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    ba84:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    ba86:	4a16      	ldr	r2, [pc, #88]	; (bae0 <swtimerInternalHandler+0x8c>)
    ba88:	4913      	ldr	r1, [pc, #76]	; (bad8 <swtimerInternalHandler+0x84>)
    ba8a:	680b      	ldr	r3, [r1, #0]
    ba8c:	011b      	lsls	r3, r3, #4
    ba8e:	18d3      	adds	r3, r2, r3
    ba90:	7b18      	ldrb	r0, [r3, #12]
    ba92:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    ba94:	4b11      	ldr	r3, [pc, #68]	; (badc <swtimerInternalHandler+0x88>)
    ba96:	681b      	ldr	r3, [r3, #0]
    ba98:	011b      	lsls	r3, r3, #4
    ba9a:	18d2      	adds	r2, r2, r3
    ba9c:	23ff      	movs	r3, #255	; 0xff
    ba9e:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    baa0:	4a0b      	ldr	r2, [pc, #44]	; (bad0 <swtimerInternalHandler+0x7c>)
    baa2:	7813      	ldrb	r3, [r2, #0]
    baa4:	3b01      	subs	r3, #1
    baa6:	b2db      	uxtb	r3, r3
    baa8:	7013      	strb	r3, [r2, #0]
    baaa:	2b00      	cmp	r3, #0
    baac:	d10b      	bne.n	bac6 <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    baae:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    bab0:	4b0a      	ldr	r3, [pc, #40]	; (badc <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    bab2:	681b      	ldr	r3, [r3, #0]
    bab4:	2bff      	cmp	r3, #255	; 0xff
    bab6:	d1dd      	bne.n	ba74 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    bab8:	4b07      	ldr	r3, [pc, #28]	; (bad8 <swtimerInternalHandler+0x84>)
    baba:	681b      	ldr	r3, [r3, #0]
    babc:	4a05      	ldr	r2, [pc, #20]	; (bad4 <swtimerInternalHandler+0x80>)
    babe:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    bac0:	4a06      	ldr	r2, [pc, #24]	; (badc <swtimerInternalHandler+0x88>)
    bac2:	6013      	str	r3, [r2, #0]
    bac4:	e7df      	b.n	ba86 <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    bac6:	4b07      	ldr	r3, [pc, #28]	; (bae4 <swtimerInternalHandler+0x90>)
    bac8:	4798      	blx	r3
}
    baca:	e7f0      	b.n	baae <swtimerInternalHandler+0x5a>
    bacc:	200037aa 	.word	0x200037aa
    bad0:	20001dc8 	.word	0x20001dc8
    bad4:	20001dbc 	.word	0x20001dbc
    bad8:	20001dc4 	.word	0x20001dc4
    badc:	20001dc0 	.word	0x20001dc0
    bae0:	20003618 	.word	0x20003618
    bae4:	0000b9bd 	.word	0x0000b9bd

0000bae8 <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    bae8:	2300      	movs	r3, #0
    baea:	4a0d      	ldr	r2, [pc, #52]	; (bb20 <SwTimerReset+0x38>)
    baec:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    baee:	4a0d      	ldr	r2, [pc, #52]	; (bb24 <SwTimerReset+0x3c>)
    baf0:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    baf2:	33ff      	adds	r3, #255	; 0xff
    baf4:	4a0c      	ldr	r2, [pc, #48]	; (bb28 <SwTimerReset+0x40>)
    baf6:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    baf8:	4a0c      	ldr	r2, [pc, #48]	; (bb2c <SwTimerReset+0x44>)
    bafa:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    bafc:	4a0c      	ldr	r2, [pc, #48]	; (bb30 <SwTimerReset+0x48>)
    bafe:	6013      	str	r3, [r2, #0]
    bb00:	4b0c      	ldr	r3, [pc, #48]	; (bb34 <SwTimerReset+0x4c>)
    bb02:	0018      	movs	r0, r3
    bb04:	3091      	adds	r0, #145	; 0x91
    bb06:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    bb08:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    bb0a:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    bb0c:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    bb0e:	601a      	str	r2, [r3, #0]
    bb10:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    bb12:	4283      	cmp	r3, r0
    bb14:	d1fa      	bne.n	bb0c <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    bb16:	2200      	movs	r2, #0
    bb18:	4b07      	ldr	r3, [pc, #28]	; (bb38 <SwTimerReset+0x50>)
    bb1a:	701a      	strb	r2, [r3, #0]
}
    bb1c:	4770      	bx	lr
    bb1e:	46c0      	nop			; (mov r8, r8)
    bb20:	20001dc8 	.word	0x20001dc8
    bb24:	200037aa 	.word	0x200037aa
    bb28:	20001dc4 	.word	0x20001dc4
    bb2c:	20001dbc 	.word	0x20001dbc
    bb30:	20001dc0 	.word	0x20001dc0
    bb34:	2000361c 	.word	0x2000361c
    bb38:	20001db8 	.word	0x20001db8

0000bb3c <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    bb3c:	b510      	push	{r4, lr}
    SwTimerReset();
    bb3e:	4b08      	ldr	r3, [pc, #32]	; (bb60 <SystemTimerInit+0x24>)
    bb40:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = 0x00000000;
    bb42:	2300      	movs	r3, #0
    bb44:	4a07      	ldr	r2, [pc, #28]	; (bb64 <SystemTimerInit+0x28>)
    bb46:	6013      	str	r3, [r2, #0]
    sysTime = 0x0000;
    bb48:	4a07      	ldr	r2, [pc, #28]	; (bb68 <SystemTimerInit+0x2c>)
    bb4a:	8013      	strh	r3, [r2, #0]

    common_tc_init();
    bb4c:	4b07      	ldr	r3, [pc, #28]	; (bb6c <SystemTimerInit+0x30>)
    bb4e:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    bb50:	4807      	ldr	r0, [pc, #28]	; (bb70 <SystemTimerInit+0x34>)
    bb52:	4b08      	ldr	r3, [pc, #32]	; (bb74 <SystemTimerInit+0x38>)
    bb54:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    bb56:	4808      	ldr	r0, [pc, #32]	; (bb78 <SystemTimerInit+0x3c>)
    bb58:	4b08      	ldr	r3, [pc, #32]	; (bb7c <SystemTimerInit+0x40>)
    bb5a:	4798      	blx	r3
}
    bb5c:	bd10      	pop	{r4, pc}
    bb5e:	46c0      	nop			; (mov r8, r8)
    bb60:	0000bae9 	.word	0x0000bae9
    bb64:	200037ac 	.word	0x200037ac
    bb68:	200037a8 	.word	0x200037a8
    bb6c:	00011ca9 	.word	0x00011ca9
    bb70:	0000b8fd 	.word	0x0000b8fd
    bb74:	00011d2d 	.word	0x00011d2d
    bb78:	0000b8d5 	.word	0x0000b8d5
    bb7c:	00011d39 	.word	0x00011d39

0000bb80 <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    bb80:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    bb82:	4b05      	ldr	r3, [pc, #20]	; (bb98 <SwTimerGetTime+0x18>)
    bb84:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    bb86:	4b05      	ldr	r3, [pc, #20]	; (bb9c <SwTimerGetTime+0x1c>)
    bb88:	881d      	ldrh	r5, [r3, #0]
    bb8a:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    bb8c:	4b04      	ldr	r3, [pc, #16]	; (bba0 <SwTimerGetTime+0x20>)
    bb8e:	4798      	blx	r3
    bb90:	4328      	orrs	r0, r5
    return gettime();
}
    bb92:	0021      	movs	r1, r4
    bb94:	bd70      	pop	{r4, r5, r6, pc}
    bb96:	46c0      	nop			; (mov r8, r8)
    bb98:	200037ac 	.word	0x200037ac
    bb9c:	200037a8 	.word	0x200037a8
    bba0:	00011b95 	.word	0x00011b95

0000bba4 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    bba4:	b510      	push	{r4, lr}
    bba6:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    bba8:	4b08      	ldr	r3, [pc, #32]	; (bbcc <SwTimerCreate+0x28>)
    bbaa:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    bbac:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    bbae:	2b18      	cmp	r3, #24
    bbb0:	d900      	bls.n	bbb4 <SwTimerCreate+0x10>
    }

    return retVal;
}
    bbb2:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    bbb4:	4b06      	ldr	r3, [pc, #24]	; (bbd0 <SwTimerCreate+0x2c>)
    bbb6:	4798      	blx	r3
        *timerId = allocatedTimerId;
    bbb8:	4a04      	ldr	r2, [pc, #16]	; (bbcc <SwTimerCreate+0x28>)
    bbba:	7813      	ldrb	r3, [r2, #0]
    bbbc:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    bbbe:	3301      	adds	r3, #1
    bbc0:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    bbc2:	4b04      	ldr	r3, [pc, #16]	; (bbd4 <SwTimerCreate+0x30>)
    bbc4:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    bbc6:	2008      	movs	r0, #8
    bbc8:	e7f3      	b.n	bbb2 <SwTimerCreate+0xe>
    bbca:	46c0      	nop			; (mov r8, r8)
    bbcc:	20001db8 	.word	0x20001db8
    bbd0:	0000b1a5 	.word	0x0000b1a5
    bbd4:	0000b1b1 	.word	0x0000b1b1

0000bbd8 <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    bbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bbda:	46d6      	mov	lr, sl
    bbdc:	464f      	mov	r7, r9
    bbde:	4646      	mov	r6, r8
    bbe0:	b5c0      	push	{r6, r7, lr}
    bbe2:	b084      	sub	sp, #16
    bbe4:	0007      	movs	r7, r0
    bbe6:	000d      	movs	r5, r1
    bbe8:	0016      	movs	r6, r2
    bbea:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    bbec:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    bbee:	2f18      	cmp	r7, #24
    bbf0:	d809      	bhi.n	bc06 <SwTimerStart+0x2e>
    bbf2:	2b00      	cmp	r3, #0
    bbf4:	d100      	bne.n	bbf8 <SwTimerStart+0x20>
    bbf6:	e08c      	b.n	bd12 <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    bbf8:	013a      	lsls	r2, r7, #4
    bbfa:	4b52      	ldr	r3, [pc, #328]	; (bd44 <SwTimerStart+0x16c>)
    bbfc:	189b      	adds	r3, r3, r2
    bbfe:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    bc00:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    bc02:	2b00      	cmp	r3, #0
    bc04:	d005      	beq.n	bc12 <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    bc06:	b004      	add	sp, #16
    bc08:	bc1c      	pop	{r2, r3, r4}
    bc0a:	4690      	mov	r8, r2
    bc0c:	4699      	mov	r9, r3
    bc0e:	46a2      	mov	sl, r4
    bc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    bc12:	4b4d      	ldr	r3, [pc, #308]	; (bd48 <SwTimerStart+0x170>)
    bc14:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    bc16:	4b4d      	ldr	r3, [pc, #308]	; (bd4c <SwTimerStart+0x174>)
    bc18:	8818      	ldrh	r0, [r3, #0]
    bc1a:	0403      	lsls	r3, r0, #16
    bc1c:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    bc1e:	4b4c      	ldr	r3, [pc, #304]	; (bd50 <SwTimerStart+0x178>)
    bc20:	4798      	blx	r3
    bc22:	4643      	mov	r3, r8
    bc24:	4303      	orrs	r3, r0
    switch (timeoutType)
    bc26:	2e00      	cmp	r6, #0
    bc28:	d003      	beq.n	bc32 <SwTimerStart+0x5a>
    bc2a:	2e01      	cmp	r6, #1
    bc2c:	d038      	beq.n	bca0 <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    bc2e:	200a      	movs	r0, #10
    bc30:	e7e9      	b.n	bc06 <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    bc32:	4948      	ldr	r1, [pc, #288]	; (bd54 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    bc34:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    bc36:	002a      	movs	r2, r5
    bc38:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    bc3a:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    bc3c:	428a      	cmp	r2, r1
    bc3e:	d8e2      	bhi.n	bc06 <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    bc40:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    bc44:	425a      	negs	r2, r3
    bc46:	4153      	adcs	r3, r2
    bc48:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    bc4a:	b672      	cpsid	i
    bc4c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    bc50:	2600      	movs	r6, #0
    bc52:	4b41      	ldr	r3, [pc, #260]	; (bd58 <SwTimerStart+0x180>)
    bc54:	701e      	strb	r6, [r3, #0]
	return flags;
    bc56:	9b03      	ldr	r3, [sp, #12]
    bc58:	4699      	mov	r9, r3
    swtimerInternalHandler();
    bc5a:	4b40      	ldr	r3, [pc, #256]	; (bd5c <SwTimerStart+0x184>)
    bc5c:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    bc5e:	4b39      	ldr	r3, [pc, #228]	; (bd44 <SwTimerStart+0x16c>)
    bc60:	013a      	lsls	r2, r7, #4
    bc62:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    bc64:	189b      	adds	r3, r3, r2
    bc66:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    bc68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bc6a:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    bc6c:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    bc6e:	4a3c      	ldr	r2, [pc, #240]	; (bd60 <SwTimerStart+0x188>)
    bc70:	7813      	ldrb	r3, [r2, #0]
    bc72:	3301      	adds	r3, #1
    bc74:	b2db      	uxtb	r3, r3
    bc76:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    bc78:	4b3a      	ldr	r3, [pc, #232]	; (bd64 <SwTimerStart+0x18c>)
    bc7a:	681b      	ldr	r3, [r3, #0]
    bc7c:	469a      	mov	sl, r3
    bc7e:	2bff      	cmp	r3, #255	; 0xff
    bc80:	d016      	beq.n	bcb0 <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    bc82:	466a      	mov	r2, sp
    bc84:	7013      	strb	r3, [r2, #0]
    bc86:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    bc88:	4b35      	ldr	r3, [pc, #212]	; (bd60 <SwTimerStart+0x188>)
    bc8a:	781b      	ldrb	r3, [r3, #0]
    bc8c:	2b00      	cmp	r3, #0
    bc8e:	d042      	beq.n	bd16 <SwTimerStart+0x13e>
    bc90:	9200      	str	r2, [sp, #0]
    bc92:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    bc94:	492b      	ldr	r1, [pc, #172]	; (bd44 <SwTimerStart+0x16c>)
    bc96:	4688      	mov	r8, r1
    bc98:	4833      	ldr	r0, [pc, #204]	; (bd68 <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    bc9a:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    bc9c:	4c30      	ldr	r4, [pc, #192]	; (bd60 <SwTimerStart+0x188>)
    bc9e:	e02a      	b.n	bcf6 <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    bca0:	0028      	movs	r0, r5
    bca2:	38ff      	subs	r0, #255	; 0xff
    bca4:	1ac3      	subs	r3, r0, r3
    bca6:	4a2b      	ldr	r2, [pc, #172]	; (bd54 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    bca8:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    bcaa:	4293      	cmp	r3, r2
    bcac:	d9c8      	bls.n	bc40 <SwTimerStart+0x68>
    bcae:	e7aa      	b.n	bc06 <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    bcb0:	4b2c      	ldr	r3, [pc, #176]	; (bd64 <SwTimerStart+0x18c>)
    bcb2:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    bcb4:	0038      	movs	r0, r7
    bcb6:	4b2d      	ldr	r3, [pc, #180]	; (bd6c <SwTimerStart+0x194>)
    bcb8:	4798      	blx	r3
    bcba:	e036      	b.n	bd2a <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    bcbc:	4b21      	ldr	r3, [pc, #132]	; (bd44 <SwTimerStart+0x16c>)
    bcbe:	013c      	lsls	r4, r7, #4
    bcc0:	191c      	adds	r4, r3, r4
    bcc2:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    bcc4:	9901      	ldr	r1, [sp, #4]
    bcc6:	0109      	lsls	r1, r1, #4
    bcc8:	1859      	adds	r1, r3, r1
    bcca:	2300      	movs	r3, #0
    bccc:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    bcce:	4592      	cmp	sl, r2
    bcd0:	d005      	beq.n	bcde <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    bcd2:	9b00      	ldr	r3, [sp, #0]
    bcd4:	0118      	lsls	r0, r3, #4
    bcd6:	4b1b      	ldr	r3, [pc, #108]	; (bd44 <SwTimerStart+0x16c>)
    bcd8:	1818      	adds	r0, r3, r0
    bcda:	7307      	strb	r7, [r0, #12]
    bcdc:	e025      	b.n	bd2a <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    bcde:	4b21      	ldr	r3, [pc, #132]	; (bd64 <SwTimerStart+0x18c>)
    bce0:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    bce2:	0038      	movs	r0, r7
    bce4:	4b21      	ldr	r3, [pc, #132]	; (bd6c <SwTimerStart+0x194>)
    bce6:	4798      	blx	r3
    bce8:	e01f      	b.n	bd2a <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    bcea:	3301      	adds	r3, #1
    bcec:	b2db      	uxtb	r3, r3
    bcee:	7821      	ldrb	r1, [r4, #0]
    bcf0:	b2c9      	uxtb	r1, r1
    bcf2:	428b      	cmp	r3, r1
    bcf4:	d210      	bcs.n	bd18 <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    bcf6:	2aff      	cmp	r2, #255	; 0xff
    bcf8:	d0f7      	beq.n	bcea <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    bcfa:	9201      	str	r2, [sp, #4]
    bcfc:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    bcfe:	4646      	mov	r6, r8
    bd00:	5989      	ldr	r1, [r1, r6]
    bd02:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    bd04:	4281      	cmp	r1, r0
    bd06:	d8d9      	bhi.n	bcbc <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    bd08:	0111      	lsls	r1, r2, #4
    bd0a:	4461      	add	r1, ip
    bd0c:	9200      	str	r2, [sp, #0]
    bd0e:	7b0a      	ldrb	r2, [r1, #12]
    bd10:	e7eb      	b.n	bcea <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    bd12:	200a      	movs	r0, #10
    bd14:	e777      	b.n	bc06 <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    bd16:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    bd18:	4b0a      	ldr	r3, [pc, #40]	; (bd44 <SwTimerStart+0x16c>)
    bd1a:	9a00      	ldr	r2, [sp, #0]
    bd1c:	0110      	lsls	r0, r2, #4
    bd1e:	1818      	adds	r0, r3, r0
    bd20:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    bd22:	013f      	lsls	r7, r7, #4
    bd24:	19df      	adds	r7, r3, r7
    bd26:	23ff      	movs	r3, #255	; 0xff
    bd28:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    bd2a:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    bd2c:	2008      	movs	r0, #8
    bd2e:	464a      	mov	r2, r9
    bd30:	4213      	tst	r3, r2
    bd32:	d100      	bne.n	bd36 <SwTimerStart+0x15e>
    bd34:	e767      	b.n	bc06 <SwTimerStart+0x2e>
		cpu_irq_enable();
    bd36:	2201      	movs	r2, #1
    bd38:	4b07      	ldr	r3, [pc, #28]	; (bd58 <SwTimerStart+0x180>)
    bd3a:	701a      	strb	r2, [r3, #0]
    bd3c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    bd40:	b662      	cpsie	i
    bd42:	e760      	b.n	bc06 <SwTimerStart+0x2e>
    bd44:	20003618 	.word	0x20003618
    bd48:	200037ac 	.word	0x200037ac
    bd4c:	200037a8 	.word	0x200037a8
    bd50:	00011b95 	.word	0x00011b95
    bd54:	7fffff00 	.word	0x7fffff00
    bd58:	20000008 	.word	0x20000008
    bd5c:	0000ba55 	.word	0x0000ba55
    bd60:	20001dc8 	.word	0x20001dc8
    bd64:	20001dc4 	.word	0x20001dc4
    bd68:	7ffffffe 	.word	0x7ffffffe
    bd6c:	0000b9bd 	.word	0x0000b9bd

0000bd70 <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    bd70:	0103      	lsls	r3, r0, #4
    bd72:	4803      	ldr	r0, [pc, #12]	; (bd80 <SwTimerIsRunning+0x10>)
    bd74:	18c0      	adds	r0, r0, r3
    bd76:	6840      	ldr	r0, [r0, #4]
    bd78:	1e43      	subs	r3, r0, #1
    bd7a:	4198      	sbcs	r0, r3
    bd7c:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    bd7e:	4770      	bx	lr
    bd80:	20003618 	.word	0x20003618

0000bd84 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    bd84:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    if ( NULL != swTimers[timerId].timerCb )
    bd86:	0102      	lsls	r2, r0, #4
    bd88:	4b0d      	ldr	r3, [pc, #52]	; (bdc0 <SwTimerReadValue+0x3c>)
    bd8a:	189b      	adds	r3, r3, r2
    bd8c:	685b      	ldr	r3, [r3, #4]
    bd8e:	2b00      	cmp	r3, #0
    bd90:	d014      	beq.n	bdbc <SwTimerReadValue+0x38>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    bd92:	4b0b      	ldr	r3, [pc, #44]	; (bdc0 <SwTimerReadValue+0x3c>)
    bd94:	58d5      	ldr	r5, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
    bd96:	4b0b      	ldr	r3, [pc, #44]	; (bdc4 <SwTimerReadValue+0x40>)
    bd98:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    bd9a:	4b0b      	ldr	r3, [pc, #44]	; (bdc8 <SwTimerReadValue+0x44>)
    bd9c:	881c      	ldrh	r4, [r3, #0]
    bd9e:	0424      	lsls	r4, r4, #16
    time |= (uint64_t) common_tc_read_count();
    bda0:	4b0a      	ldr	r3, [pc, #40]	; (bdcc <SwTimerReadValue+0x48>)
    bda2:	4798      	blx	r3
    bda4:	4320      	orrs	r0, r4
	    currentSysTime = (uint32_t) gettime();
	    if ( currentSysTime <= timerExpiryTime )
    bda6:	4285      	cmp	r5, r0
    bda8:	d305      	bcc.n	bdb6 <SwTimerReadValue+0x32>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
    bdaa:	1a28      	subs	r0, r5, r0
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
	    }

        if (remainingTime >= SWTIMER_MAX_TIMEOUT)
    bdac:	4b08      	ldr	r3, [pc, #32]	; (bdd0 <SwTimerReadValue+0x4c>)
    bdae:	4298      	cmp	r0, r3
    bdb0:	d900      	bls.n	bdb4 <SwTimerReadValue+0x30>
        {
            /* Diff cannot be more than max timeout */
            remainingTime = 0;
    bdb2:	2000      	movs	r0, #0
        }
    }
    return remainingTime;
}
    bdb4:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    bdb6:	3d01      	subs	r5, #1
    bdb8:	1a28      	subs	r0, r5, r0
    bdba:	e7f7      	b.n	bdac <SwTimerReadValue+0x28>
    uint32_t remainingTime = 0u;
    bdbc:	2000      	movs	r0, #0
    return remainingTime;
    bdbe:	e7f9      	b.n	bdb4 <SwTimerReadValue+0x30>
    bdc0:	20003618 	.word	0x20003618
    bdc4:	200037ac 	.word	0x200037ac
    bdc8:	200037a8 	.word	0x200037a8
    bdcc:	00011b95 	.word	0x00011b95
    bdd0:	7ffffffe 	.word	0x7ffffffe

0000bdd4 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    bdd4:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    bdd6:	4b05      	ldr	r3, [pc, #20]	; (bdec <SwTimerNextExpiryDuration+0x18>)
    bdd8:	6818      	ldr	r0, [r3, #0]
    bdda:	28ff      	cmp	r0, #255	; 0xff
    bddc:	d102      	bne.n	bde4 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    bdde:	2001      	movs	r0, #1
    bde0:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    bde2:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    bde4:	b2c0      	uxtb	r0, r0
    bde6:	4b02      	ldr	r3, [pc, #8]	; (bdf0 <SwTimerNextExpiryDuration+0x1c>)
    bde8:	4798      	blx	r3
    bdea:	e7fa      	b.n	bde2 <SwTimerNextExpiryDuration+0xe>
    bdec:	20001dc4 	.word	0x20001dc4
    bdf0:	0000bd85 	.word	0x0000bd85

0000bdf4 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    bdf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdf6:	46de      	mov	lr, fp
    bdf8:	4657      	mov	r7, sl
    bdfa:	464e      	mov	r6, r9
    bdfc:	4645      	mov	r5, r8
    bdfe:	b5e0      	push	{r5, r6, r7, lr}
    be00:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    be02:	4b2f      	ldr	r3, [pc, #188]	; (bec0 <SwTimersExecute+0xcc>)
    be04:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    be06:	4b2f      	ldr	r3, [pc, #188]	; (bec4 <SwTimersExecute+0xd0>)
    be08:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    be0a:	4b2f      	ldr	r3, [pc, #188]	; (bec8 <SwTimersExecute+0xd4>)
    be0c:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    be0e:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    be12:	4253      	negs	r3, r2
    be14:	4153      	adcs	r3, r2
    be16:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    be18:	b672      	cpsid	i
    be1a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    be1e:	2200      	movs	r2, #0
    be20:	4b2a      	ldr	r3, [pc, #168]	; (becc <SwTimersExecute+0xd8>)
    be22:	701a      	strb	r2, [r3, #0]
	return flags;
    be24:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    be26:	4b2a      	ldr	r3, [pc, #168]	; (bed0 <SwTimersExecute+0xdc>)
    be28:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    be2a:	23ff      	movs	r3, #255	; 0xff
    be2c:	4223      	tst	r3, r4
    be2e:	d005      	beq.n	be3c <SwTimersExecute+0x48>
		cpu_irq_enable();
    be30:	2201      	movs	r2, #1
    be32:	4b26      	ldr	r3, [pc, #152]	; (becc <SwTimersExecute+0xd8>)
    be34:	701a      	strb	r2, [r3, #0]
    be36:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    be3a:	b662      	cpsie	i
	cpu_irq_disable();
    be3c:	4b23      	ldr	r3, [pc, #140]	; (becc <SwTimersExecute+0xd8>)
    be3e:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    be40:	4c24      	ldr	r4, [pc, #144]	; (bed4 <SwTimersExecute+0xe0>)
    be42:	4b25      	ldr	r3, [pc, #148]	; (bed8 <SwTimersExecute+0xe4>)
    be44:	4699      	mov	r9, r3
    be46:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    be48:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    be4a:	4b24      	ldr	r3, [pc, #144]	; (bedc <SwTimersExecute+0xe8>)
    be4c:	4698      	mov	r8, r3
		cpu_irq_enable();
    be4e:	4b1f      	ldr	r3, [pc, #124]	; (becc <SwTimersExecute+0xd8>)
    be50:	469c      	mov	ip, r3
    be52:	e004      	b.n	be5e <SwTimersExecute+0x6a>
    be54:	4643      	mov	r3, r8
    be56:	6018      	str	r0, [r3, #0]
    be58:	e01e      	b.n	be98 <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    be5a:	2e00      	cmp	r6, #0
    be5c:	d125      	bne.n	beaa <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    be5e:	4b1d      	ldr	r3, [pc, #116]	; (bed4 <SwTimersExecute+0xe0>)
    be60:	681b      	ldr	r3, [r3, #0]
    be62:	2bff      	cmp	r3, #255	; 0xff
    be64:	d024      	beq.n	beb0 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    be66:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    be6a:	424b      	negs	r3, r1
    be6c:	414b      	adcs	r3, r1
    be6e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    be70:	b672      	cpsid	i
    be72:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    be76:	4653      	mov	r3, sl
    be78:	701a      	strb	r2, [r3, #0]
	return flags;
    be7a:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    be7c:	6823      	ldr	r3, [r4, #0]
    be7e:	011b      	lsls	r3, r3, #4
    be80:	444b      	add	r3, r9
    be82:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    be84:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    be86:	689d      	ldr	r5, [r3, #8]
    be88:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    be8a:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    be8c:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    be8e:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    be90:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    be92:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    be94:	29ff      	cmp	r1, #255	; 0xff
    be96:	d0dd      	beq.n	be54 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    be98:	4238      	tst	r0, r7
    be9a:	d0de      	beq.n	be5a <SwTimersExecute+0x66>
		cpu_irq_enable();
    be9c:	2301      	movs	r3, #1
    be9e:	4661      	mov	r1, ip
    bea0:	700b      	strb	r3, [r1, #0]
    bea2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    bea6:	b662      	cpsie	i
    bea8:	e7d7      	b.n	be5a <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    beaa:	4658      	mov	r0, fp
    beac:	47b0      	blx	r6
    beae:	e7ca      	b.n	be46 <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    beb0:	b003      	add	sp, #12
    beb2:	bc3c      	pop	{r2, r3, r4, r5}
    beb4:	4690      	mov	r8, r2
    beb6:	4699      	mov	r9, r3
    beb8:	46a2      	mov	sl, r4
    beba:	46ab      	mov	fp, r5
    bebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bebe:	46c0      	nop			; (mov r8, r8)
    bec0:	200037ac 	.word	0x200037ac
    bec4:	200037a8 	.word	0x200037a8
    bec8:	00011b95 	.word	0x00011b95
    becc:	20000008 	.word	0x20000008
    bed0:	0000ba55 	.word	0x0000ba55
    bed4:	20001dbc 	.word	0x20001dbc
    bed8:	20003618 	.word	0x20003618
    bedc:	20001dc0 	.word	0x20001dc0

0000bee0 <TIMER_TaskHandler>:
{
    bee0:	b510      	push	{r4, lr}
    SwTimersExecute();
    bee2:	4b02      	ldr	r3, [pc, #8]	; (beec <TIMER_TaskHandler+0xc>)
    bee4:	4798      	blx	r3
}
    bee6:	2000      	movs	r0, #0
    bee8:	bd10      	pop	{r4, pc}
    beea:	46c0      	nop			; (mov r8, r8)
    beec:	0000bdf5 	.word	0x0000bdf5

0000bef0 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    bef0:	b570      	push	{r4, r5, r6, lr}
    bef2:	b082      	sub	sp, #8
    bef4:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    bef6:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    bef8:	2c18      	cmp	r4, #24
    befa:	d901      	bls.n	bf00 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    befc:	b002      	add	sp, #8
    befe:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    bf00:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    bf04:	425a      	negs	r2, r3
    bf06:	4153      	adcs	r3, r2
    bf08:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    bf0a:	b672      	cpsid	i
    bf0c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    bf10:	2200      	movs	r2, #0
    bf12:	4b47      	ldr	r3, [pc, #284]	; (c030 <SwTimerStop+0x140>)
    bf14:	701a      	strb	r2, [r3, #0]
	return flags;
    bf16:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    bf18:	4b46      	ldr	r3, [pc, #280]	; (c034 <SwTimerStop+0x144>)
    bf1a:	4798      	blx	r3
    if (runningTimers > 0)
    bf1c:	4b46      	ldr	r3, [pc, #280]	; (c038 <SwTimerStop+0x148>)
    bf1e:	781b      	ldrb	r3, [r3, #0]
    bf20:	2b00      	cmp	r3, #0
    bf22:	d040      	beq.n	bfa6 <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    bf24:	4b44      	ldr	r3, [pc, #272]	; (c038 <SwTimerStop+0x148>)
    bf26:	781b      	ldrb	r3, [r3, #0]
    bf28:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    bf2a:	4a44      	ldr	r2, [pc, #272]	; (c03c <SwTimerStop+0x14c>)
    bf2c:	6816      	ldr	r6, [r2, #0]
    bf2e:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    bf30:	2b00      	cmp	r3, #0
    bf32:	d038      	beq.n	bfa6 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    bf34:	428c      	cmp	r4, r1
    bf36:	d00b      	beq.n	bf50 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    bf38:	4841      	ldr	r0, [pc, #260]	; (c040 <SwTimerStop+0x150>)
    bf3a:	010a      	lsls	r2, r1, #4
    bf3c:	1882      	adds	r2, r0, r2
    bf3e:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    bf40:	3b01      	subs	r3, #1
    bf42:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    bf44:	2b00      	cmp	r3, #0
    bf46:	d02e      	beq.n	bfa6 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    bf48:	4294      	cmp	r4, r2
    bf4a:	d001      	beq.n	bf50 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    bf4c:	0011      	movs	r1, r2
    bf4e:	e7f4      	b.n	bf3a <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    bf50:	42a6      	cmp	r6, r4
    bf52:	d01d      	beq.n	bf90 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    bf54:	4b3a      	ldr	r3, [pc, #232]	; (c040 <SwTimerStop+0x150>)
    bf56:	0122      	lsls	r2, r4, #4
    bf58:	189a      	adds	r2, r3, r2
    bf5a:	7b12      	ldrb	r2, [r2, #12]
    bf5c:	0109      	lsls	r1, r1, #4
    bf5e:	1859      	adds	r1, r3, r1
    bf60:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    bf62:	0122      	lsls	r2, r4, #4
    bf64:	4b36      	ldr	r3, [pc, #216]	; (c040 <SwTimerStop+0x150>)
    bf66:	189b      	adds	r3, r3, r2
    bf68:	22ff      	movs	r2, #255	; 0xff
    bf6a:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    bf6c:	4a32      	ldr	r2, [pc, #200]	; (c038 <SwTimerStop+0x148>)
    bf6e:	7813      	ldrb	r3, [r2, #0]
    bf70:	3b01      	subs	r3, #1
    bf72:	b2db      	uxtb	r3, r3
    bf74:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    bf76:	0124      	lsls	r4, r4, #4
    bf78:	4b31      	ldr	r3, [pc, #196]	; (c040 <SwTimerStop+0x150>)
    bf7a:	191c      	adds	r4, r3, r4
    bf7c:	2300      	movs	r3, #0
    bf7e:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    bf80:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    bf82:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    bf84:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    bf86:	2008      	movs	r0, #8
    bf88:	422b      	tst	r3, r5
    bf8a:	d0b7      	beq.n	befc <SwTimerStop+0xc>
    bf8c:	2301      	movs	r3, #1
    bf8e:	e040      	b.n	c012 <SwTimerStop+0x122>
                    common_tc_compare_stop();
    bf90:	4b2c      	ldr	r3, [pc, #176]	; (c044 <SwTimerStop+0x154>)
    bf92:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    bf94:	0122      	lsls	r2, r4, #4
    bf96:	4b2a      	ldr	r3, [pc, #168]	; (c040 <SwTimerStop+0x150>)
    bf98:	189b      	adds	r3, r3, r2
    bf9a:	7b18      	ldrb	r0, [r3, #12]
    bf9c:	4b27      	ldr	r3, [pc, #156]	; (c03c <SwTimerStop+0x14c>)
    bf9e:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    bfa0:	4b29      	ldr	r3, [pc, #164]	; (c048 <SwTimerStop+0x158>)
    bfa2:	4798      	blx	r3
    bfa4:	e7dd      	b.n	bf62 <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    bfa6:	4b29      	ldr	r3, [pc, #164]	; (c04c <SwTimerStop+0x15c>)
    bfa8:	6818      	ldr	r0, [r3, #0]
    bfaa:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    bfac:	2aff      	cmp	r2, #255	; 0xff
    bfae:	d02c      	beq.n	c00a <SwTimerStop+0x11a>
            if (timerId == currIndex)
    bfb0:	4294      	cmp	r4, r2
    bfb2:	d009      	beq.n	bfc8 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    bfb4:	4922      	ldr	r1, [pc, #136]	; (c040 <SwTimerStop+0x150>)
    bfb6:	0113      	lsls	r3, r2, #4
    bfb8:	18cb      	adds	r3, r1, r3
    bfba:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    bfbc:	2bff      	cmp	r3, #255	; 0xff
    bfbe:	d024      	beq.n	c00a <SwTimerStop+0x11a>
            if (timerId == currIndex)
    bfc0:	429c      	cmp	r4, r3
    bfc2:	d001      	beq.n	bfc8 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    bfc4:	001a      	movs	r2, r3
    bfc6:	e7f6      	b.n	bfb6 <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    bfc8:	42a0      	cmp	r0, r4
    bfca:	d00d      	beq.n	bfe8 <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    bfcc:	4b1c      	ldr	r3, [pc, #112]	; (c040 <SwTimerStop+0x150>)
    bfce:	0121      	lsls	r1, r4, #4
    bfd0:	1859      	adds	r1, r3, r1
    bfd2:	7b09      	ldrb	r1, [r1, #12]
    bfd4:	0110      	lsls	r0, r2, #4
    bfd6:	181b      	adds	r3, r3, r0
    bfd8:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    bfda:	4b1d      	ldr	r3, [pc, #116]	; (c050 <SwTimerStop+0x160>)
    bfdc:	681b      	ldr	r3, [r3, #0]
    bfde:	429c      	cmp	r4, r3
    bfe0:	d1c9      	bne.n	bf76 <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    bfe2:	4b1b      	ldr	r3, [pc, #108]	; (c050 <SwTimerStop+0x160>)
    bfe4:	601a      	str	r2, [r3, #0]
    bfe6:	e7c6      	b.n	bf76 <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    bfe8:	4b19      	ldr	r3, [pc, #100]	; (c050 <SwTimerStop+0x160>)
    bfea:	681b      	ldr	r3, [r3, #0]
    bfec:	4298      	cmp	r0, r3
    bfee:	d006      	beq.n	bffe <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    bff0:	0100      	lsls	r0, r0, #4
    bff2:	4b13      	ldr	r3, [pc, #76]	; (c040 <SwTimerStop+0x150>)
    bff4:	1818      	adds	r0, r3, r0
    bff6:	7b02      	ldrb	r2, [r0, #12]
    bff8:	4b14      	ldr	r3, [pc, #80]	; (c04c <SwTimerStop+0x15c>)
    bffa:	601a      	str	r2, [r3, #0]
    bffc:	e7bb      	b.n	bf76 <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    bffe:	23ff      	movs	r3, #255	; 0xff
    c000:	4a13      	ldr	r2, [pc, #76]	; (c050 <SwTimerStop+0x160>)
    c002:	6013      	str	r3, [r2, #0]
    c004:	4a11      	ldr	r2, [pc, #68]	; (c04c <SwTimerStop+0x15c>)
    c006:	6013      	str	r3, [r2, #0]
    c008:	e7b5      	b.n	bf76 <SwTimerStop+0x86>
    c00a:	23ff      	movs	r3, #255	; 0xff
    c00c:	422b      	tst	r3, r5
    c00e:	d00a      	beq.n	c026 <SwTimerStop+0x136>
    c010:	2300      	movs	r3, #0
		cpu_irq_enable();
    c012:	2101      	movs	r1, #1
    c014:	4a06      	ldr	r2, [pc, #24]	; (c030 <SwTimerStop+0x140>)
    c016:	7011      	strb	r1, [r2, #0]
    c018:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c01c:	b662      	cpsie	i
    if (timerStopReqStatus)
    c01e:	2b00      	cmp	r3, #0
    c020:	d103      	bne.n	c02a <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    c022:	2015      	movs	r0, #21
    c024:	e76a      	b.n	befc <SwTimerStop+0xc>
    c026:	2015      	movs	r0, #21
    c028:	e768      	b.n	befc <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    c02a:	2008      	movs	r0, #8
    c02c:	e766      	b.n	befc <SwTimerStop+0xc>
    c02e:	46c0      	nop			; (mov r8, r8)
    c030:	20000008 	.word	0x20000008
    c034:	0000ba55 	.word	0x0000ba55
    c038:	20001dc8 	.word	0x20001dc8
    c03c:	20001dc4 	.word	0x20001dc4
    c040:	20003618 	.word	0x20003618
    c044:	00011be1 	.word	0x00011be1
    c048:	0000b9bd 	.word	0x0000b9bd
    c04c:	20001dbc 	.word	0x20001dbc
    c050:	20001dc0 	.word	0x20001dc0

0000c054 <SwTimerRunRemainingTime>:
{
    c054:	b5f0      	push	{r4, r5, r6, r7, lr}
    c056:	b083      	sub	sp, #12
    c058:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    c05a:	4b0b      	ldr	r3, [pc, #44]	; (c088 <SwTimerRunRemainingTime+0x34>)
    c05c:	681c      	ldr	r4, [r3, #0]
    c05e:	0122      	lsls	r2, r4, #4
    c060:	4b0a      	ldr	r3, [pc, #40]	; (c08c <SwTimerRunRemainingTime+0x38>)
    c062:	189b      	adds	r3, r3, r2
    c064:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    c066:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    c068:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    c06a:	0020      	movs	r0, r4
    c06c:	4b08      	ldr	r3, [pc, #32]	; (c090 <SwTimerRunRemainingTime+0x3c>)
    c06e:	4798      	blx	r3
    c070:	2808      	cmp	r0, #8
    c072:	d001      	beq.n	c078 <SwTimerRunRemainingTime+0x24>
}
    c074:	b003      	add	sp, #12
    c076:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    c078:	9700      	str	r7, [sp, #0]
    c07a:	0033      	movs	r3, r6
    c07c:	2200      	movs	r2, #0
    c07e:	0029      	movs	r1, r5
    c080:	0020      	movs	r0, r4
    c082:	4c04      	ldr	r4, [pc, #16]	; (c094 <SwTimerRunRemainingTime+0x40>)
    c084:	47a0      	blx	r4
}
    c086:	e7f5      	b.n	c074 <SwTimerRunRemainingTime+0x20>
    c088:	20001dc4 	.word	0x20001dc4
    c08c:	20003618 	.word	0x20003618
    c090:	0000bef1 	.word	0x0000bef1
    c094:	0000bbd9 	.word	0x0000bbd9

0000c098 <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    c098:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    c09a:	4b22      	ldr	r3, [pc, #136]	; (c124 <SystemTimerSync+0x8c>)
    c09c:	681c      	ldr	r4, [r3, #0]
    c09e:	685d      	ldr	r5, [r3, #4]
    c0a0:	1900      	adds	r0, r0, r4
    c0a2:	4169      	adcs	r1, r5
    c0a4:	6018      	str	r0, [r3, #0]
    c0a6:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    c0a8:	4b1f      	ldr	r3, [pc, #124]	; (c128 <SystemTimerSync+0x90>)
    c0aa:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    c0ac:	0c02      	lsrs	r2, r0, #16
    c0ae:	4b1f      	ldr	r3, [pc, #124]	; (c12c <SystemTimerSync+0x94>)
    c0b0:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    c0b2:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    c0b4:	4b1e      	ldr	r3, [pc, #120]	; (c130 <SystemTimerSync+0x98>)
    c0b6:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    c0b8:	4a1e      	ldr	r2, [pc, #120]	; (c134 <SystemTimerSync+0x9c>)
    c0ba:	7812      	ldrb	r2, [r2, #0]
    c0bc:	2a00      	cmp	r2, #0
    c0be:	d012      	beq.n	c0e6 <SystemTimerSync+0x4e>
    c0c0:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    c0c2:	4c1d      	ldr	r4, [pc, #116]	; (c138 <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    c0c4:	4d1b      	ldr	r5, [pc, #108]	; (c134 <SystemTimerSync+0x9c>)
    c0c6:	e005      	b.n	c0d4 <SystemTimerSync+0x3c>
    c0c8:	3201      	adds	r2, #1
    c0ca:	b2d2      	uxtb	r2, r2
    c0cc:	7829      	ldrb	r1, [r5, #0]
    c0ce:	b2c9      	uxtb	r1, r1
    c0d0:	4291      	cmp	r1, r2
    c0d2:	d908      	bls.n	c0e6 <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    c0d4:	2bff      	cmp	r3, #255	; 0xff
    c0d6:	d0f7      	beq.n	c0c8 <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    c0d8:	011b      	lsls	r3, r3, #4
    c0da:	5919      	ldr	r1, [r3, r4]
    c0dc:	1a09      	subs	r1, r1, r0
    c0de:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    c0e0:	18e3      	adds	r3, r4, r3
    c0e2:	7b1b      	ldrb	r3, [r3, #12]
    c0e4:	e7f0      	b.n	c0c8 <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    c0e6:	4b15      	ldr	r3, [pc, #84]	; (c13c <SystemTimerSync+0xa4>)
    c0e8:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    c0ea:	4815      	ldr	r0, [pc, #84]	; (c140 <SystemTimerSync+0xa8>)
    c0ec:	4b15      	ldr	r3, [pc, #84]	; (c144 <SystemTimerSync+0xac>)
    c0ee:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    c0f0:	4815      	ldr	r0, [pc, #84]	; (c148 <SystemTimerSync+0xb0>)
    c0f2:	4b16      	ldr	r3, [pc, #88]	; (c14c <SystemTimerSync+0xb4>)
    c0f4:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    c0f6:	4b0f      	ldr	r3, [pc, #60]	; (c134 <SystemTimerSync+0x9c>)
    c0f8:	781b      	ldrb	r3, [r3, #0]
    c0fa:	2b00      	cmp	r3, #0
    c0fc:	d009      	beq.n	c112 <SystemTimerSync+0x7a>
    c0fe:	4b0c      	ldr	r3, [pc, #48]	; (c130 <SystemTimerSync+0x98>)
    c100:	681b      	ldr	r3, [r3, #0]
    c102:	2bff      	cmp	r3, #255	; 0xff
    c104:	d005      	beq.n	c112 <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    c106:	4b12      	ldr	r3, [pc, #72]	; (c150 <SystemTimerSync+0xb8>)
    c108:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    c10a:	28fe      	cmp	r0, #254	; 0xfe
    c10c:	d902      	bls.n	c114 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    c10e:	4b11      	ldr	r3, [pc, #68]	; (c154 <SystemTimerSync+0xbc>)
    c110:	4798      	blx	r3
        }
    }
}
    c112:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    c114:	2201      	movs	r2, #1
    c116:	4b10      	ldr	r3, [pc, #64]	; (c158 <SystemTimerSync+0xc0>)
    c118:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    c11a:	2001      	movs	r0, #1
    c11c:	4b0f      	ldr	r3, [pc, #60]	; (c15c <SystemTimerSync+0xc4>)
    c11e:	4798      	blx	r3
    c120:	e7f7      	b.n	c112 <SystemTimerSync+0x7a>
    c122:	46c0      	nop			; (mov r8, r8)
    c124:	20001dd0 	.word	0x20001dd0
    c128:	200037ac 	.word	0x200037ac
    c12c:	200037a8 	.word	0x200037a8
    c130:	20001dc4 	.word	0x20001dc4
    c134:	20001dc8 	.word	0x20001dc8
    c138:	20003618 	.word	0x20003618
    c13c:	00011ca9 	.word	0x00011ca9
    c140:	0000b8fd 	.word	0x0000b8fd
    c144:	00011d2d 	.word	0x00011d2d
    c148:	0000b8d5 	.word	0x0000b8d5
    c14c:	00011d39 	.word	0x00011d39
    c150:	0000bdd5 	.word	0x0000bdd5
    c154:	0000c055 	.word	0x0000c055
    c158:	200037aa 	.word	0x200037aa
    c15c:	0000c1f1 	.word	0x0000c1f1

0000c160 <SwTimerWriteTimestamp>:
\param[in] index Index of the system timestamp
\param[in] *timestamp Pointer-to-timestamp to be stored in the given index
******************************************************************************/
void SwTimerWriteTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
    swTimestamp[index] = *timestamp;
    c160:	680a      	ldr	r2, [r1, #0]
    c162:	684b      	ldr	r3, [r1, #4]
    c164:	00c1      	lsls	r1, r0, #3
    c166:	4802      	ldr	r0, [pc, #8]	; (c170 <SwTimerWriteTimestamp+0x10>)
    c168:	1840      	adds	r0, r0, r1
    c16a:	6002      	str	r2, [r0, #0]
    c16c:	6043      	str	r3, [r0, #4]
}
    c16e:	4770      	bx	lr
    c170:	20003608 	.word	0x20003608

0000c174 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    c174:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    c176:	2010      	movs	r0, #16
    c178:	4b01      	ldr	r3, [pc, #4]	; (c180 <Stack_Init+0xc>)
    c17a:	4798      	blx	r3
}
    c17c:	bd10      	pop	{r4, pc}
    c17e:	46c0      	nop			; (mov r8, r8)
    c180:	0000c1f1 	.word	0x0000c1f1

0000c184 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    c184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    c186:	4b16      	ldr	r3, [pc, #88]	; (c1e0 <SYSTEM_RunTasks+0x5c>)
    c188:	881b      	ldrh	r3, [r3, #0]
    c18a:	b29b      	uxth	r3, r3
    c18c:	2b1f      	cmp	r3, #31
    c18e:	d922      	bls.n	c1d6 <SYSTEM_RunTasks+0x52>
    c190:	e7fe      	b.n	c190 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    c192:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    c194:	4b13      	ldr	r3, [pc, #76]	; (c1e4 <SYSTEM_RunTasks+0x60>)
    c196:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    c198:	4911      	ldr	r1, [pc, #68]	; (c1e0 <SYSTEM_RunTasks+0x5c>)
    c19a:	880b      	ldrh	r3, [r1, #0]
    c19c:	2201      	movs	r2, #1
    c19e:	40aa      	lsls	r2, r5
    c1a0:	4393      	bics	r3, r2
    c1a2:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    c1a4:	4b10      	ldr	r3, [pc, #64]	; (c1e8 <SYSTEM_RunTasks+0x64>)
    c1a6:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId](); //Frame is transmitted at this point.
    c1a8:	00ad      	lsls	r5, r5, #2
    c1aa:	4b10      	ldr	r3, [pc, #64]	; (c1ec <SYSTEM_RunTasks+0x68>)
    c1ac:	58eb      	ldr	r3, [r5, r3]
    c1ae:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    c1b0:	2101      	movs	r1, #1
        while (sysTaskFlag)
    c1b2:	883b      	ldrh	r3, [r7, #0]
    c1b4:	b29b      	uxth	r3, r3
    c1b6:	2b00      	cmp	r3, #0
    c1b8:	d011      	beq.n	c1de <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    c1ba:	8823      	ldrh	r3, [r4, #0]
    c1bc:	420b      	tst	r3, r1
    c1be:	d1e8      	bne.n	c192 <SYSTEM_RunTasks+0xe>
    c1c0:	2201      	movs	r2, #1
    c1c2:	8833      	ldrh	r3, [r6, #0]
    c1c4:	b29b      	uxth	r3, r3
    c1c6:	0015      	movs	r5, r2
    c1c8:	4113      	asrs	r3, r2
    c1ca:	4219      	tst	r1, r3
    c1cc:	d1e2      	bne.n	c194 <SYSTEM_RunTasks+0x10>
    c1ce:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    c1d0:	2a05      	cmp	r2, #5
    c1d2:	d1f6      	bne.n	c1c2 <SYSTEM_RunTasks+0x3e>
    c1d4:	e7ed      	b.n	c1b2 <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    c1d6:	4f02      	ldr	r7, [pc, #8]	; (c1e0 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    c1d8:	003c      	movs	r4, r7
    c1da:	003e      	movs	r6, r7
    c1dc:	e7e8      	b.n	c1b0 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    c1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1e0:	20001dd8 	.word	0x20001dd8
    c1e4:	0000b1a5 	.word	0x0000b1a5
    c1e8:	0000b1b1 	.word	0x0000b1b1
    c1ec:	00016d38 	.word	0x00016d38

0000c1f0 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    c1f0:	b510      	push	{r4, lr}
    c1f2:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    c1f4:	4b04      	ldr	r3, [pc, #16]	; (c208 <SYSTEM_PostTask+0x18>)
    c1f6:	4798      	blx	r3
    sysTaskFlag |= task;
    c1f8:	4b04      	ldr	r3, [pc, #16]	; (c20c <SYSTEM_PostTask+0x1c>)
    c1fa:	8818      	ldrh	r0, [r3, #0]
    c1fc:	4320      	orrs	r0, r4
    c1fe:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    c200:	4b03      	ldr	r3, [pc, #12]	; (c210 <SYSTEM_PostTask+0x20>)
    c202:	4798      	blx	r3
}
    c204:	bd10      	pop	{r4, pc}
    c206:	46c0      	nop			; (mov r8, r8)
    c208:	0000b1a5 	.word	0x0000b1a5
    c20c:	20001dd8 	.word	0x20001dd8
    c210:	0000b1b1 	.word	0x0000b1b1

0000c214 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    c214:	b5f0      	push	{r4, r5, r6, r7, lr}
    c216:	46d6      	mov	lr, sl
    c218:	464f      	mov	r7, r9
    c21a:	b580      	push	{r7, lr}
    c21c:	b083      	sub	sp, #12
    c21e:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    c220:	2900      	cmp	r1, #0
    c222:	d102      	bne.n	c22a <Radio_WriteMode+0x16>
    c224:	1f83      	subs	r3, r0, #6
    c226:	2b01      	cmp	r3, #1
    c228:	d92a      	bls.n	c280 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    c22a:	2307      	movs	r3, #7
    c22c:	4699      	mov	r9, r3
    c22e:	001c      	movs	r4, r3
    c230:	4004      	ands	r4, r0
    newModulation &= 0x01;
    c232:	2601      	movs	r6, #1
    c234:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    c236:	2001      	movs	r0, #1
    c238:	4b2b      	ldr	r3, [pc, #172]	; (c2e8 <Radio_WriteMode+0xd4>)
    c23a:	4798      	blx	r3
    c23c:	0005      	movs	r5, r0
    c23e:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    c240:	b243      	sxtb	r3, r0
    c242:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    c244:	464b      	mov	r3, r9
    c246:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    c248:	4652      	mov	r2, sl
    c24a:	0fd2      	lsrs	r2, r2, #31
    c24c:	4296      	cmp	r6, r2
    c24e:	d00a      	beq.n	c266 <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    c250:	2b00      	cmp	r3, #0
    c252:	d11a      	bne.n	c28a <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    c254:	2e00      	cmp	r6, #0
    c256:	d11e      	bne.n	c296 <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    c258:	2778      	movs	r7, #120	; 0x78
    c25a:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    c25c:	0039      	movs	r1, r7
    c25e:	2001      	movs	r0, #1
    c260:	4b22      	ldr	r3, [pc, #136]	; (c2ec <Radio_WriteMode+0xd8>)
    c262:	4798      	blx	r3
    c264:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    c266:	42a3      	cmp	r3, r4
    c268:	d00a      	beq.n	c280 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    c26a:	2c00      	cmp	r4, #0
    c26c:	d030      	beq.n	c2d0 <Radio_WriteMode+0xbc>
    c26e:	9b01      	ldr	r3, [sp, #4]
    c270:	2b01      	cmp	r3, #1
    c272:	d016      	beq.n	c2a2 <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    c274:	21f8      	movs	r1, #248	; 0xf8
    c276:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    c278:	4321      	orrs	r1, r4
    c27a:	2001      	movs	r0, #1
    c27c:	4b1b      	ldr	r3, [pc, #108]	; (c2ec <Radio_WriteMode+0xd8>)
    c27e:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    c280:	b003      	add	sp, #12
    c282:	bc0c      	pop	{r2, r3}
    c284:	4691      	mov	r9, r2
    c286:	469a      	mov	sl, r3
    c288:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    c28a:	21f8      	movs	r1, #248	; 0xf8
    c28c:	4001      	ands	r1, r0
    c28e:	2001      	movs	r0, #1
    c290:	4b16      	ldr	r3, [pc, #88]	; (c2ec <Radio_WriteMode+0xd8>)
    c292:	4798      	blx	r3
    c294:	e7de      	b.n	c254 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    c296:	2778      	movs	r7, #120	; 0x78
    c298:	4653      	mov	r3, sl
    c29a:	401f      	ands	r7, r3
    c29c:	2180      	movs	r1, #128	; 0x80
    c29e:	430f      	orrs	r7, r1
    c2a0:	e7dc      	b.n	c25c <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    c2a2:	2041      	movs	r0, #65	; 0x41
    c2a4:	4b10      	ldr	r3, [pc, #64]	; (c2e8 <Radio_WriteMode+0xd4>)
    c2a6:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    c2a8:	2e00      	cmp	r6, #0
    c2aa:	d10e      	bne.n	c2ca <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    c2ac:	2130      	movs	r1, #48	; 0x30
    c2ae:	4301      	orrs	r1, r0
    c2b0:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    c2b2:	2041      	movs	r0, #65	; 0x41
    c2b4:	4d0d      	ldr	r5, [pc, #52]	; (c2ec <Radio_WriteMode+0xd8>)
    c2b6:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    c2b8:	21f8      	movs	r1, #248	; 0xf8
    c2ba:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    c2bc:	4321      	orrs	r1, r4
    c2be:	2001      	movs	r0, #1
    c2c0:	47a8      	blx	r5
			   delay_ms(1);
    c2c2:	2001      	movs	r0, #1
    c2c4:	4b0a      	ldr	r3, [pc, #40]	; (c2f0 <Radio_WriteMode+0xdc>)
    c2c6:	4798      	blx	r3
    c2c8:	e7da      	b.n	c280 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    c2ca:	21cf      	movs	r1, #207	; 0xcf
    c2cc:	4001      	ands	r1, r0
    c2ce:	e7f0      	b.n	c2b2 <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    c2d0:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    c2d2:	4039      	ands	r1, r7
    c2d4:	2001      	movs	r0, #1
    c2d6:	4b05      	ldr	r3, [pc, #20]	; (c2ec <Radio_WriteMode+0xd8>)
    c2d8:	4798      	blx	r3
        if (1 == blocking)
    c2da:	9b01      	ldr	r3, [sp, #4]
    c2dc:	2b01      	cmp	r3, #1
    c2de:	d1cf      	bne.n	c280 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    c2e0:	2001      	movs	r0, #1
    c2e2:	4b04      	ldr	r3, [pc, #16]	; (c2f4 <Radio_WriteMode+0xe0>)
    c2e4:	4798      	blx	r3
    c2e6:	e7cb      	b.n	c280 <Radio_WriteMode+0x6c>
    c2e8:	0000b015 	.word	0x0000b015
    c2ec:	0000afed 	.word	0x0000afed
    c2f0:	000044cd 	.word	0x000044cd
    c2f4:	0000b189 	.word	0x0000b189

0000c2f8 <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    c2f8:	b500      	push	{lr}
    c2fa:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    c2fc:	2012      	movs	r0, #18
    c2fe:	4b0d      	ldr	r3, [pc, #52]	; (c334 <RADIO_FHSSChangeChannel+0x3c>)
    c300:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    c302:	4b0d      	ldr	r3, [pc, #52]	; (c338 <RADIO_FHSSChangeChannel+0x40>)
    c304:	8adb      	ldrh	r3, [r3, #22]
    c306:	2b00      	cmp	r3, #0
    c308:	d007      	beq.n	c31a <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    c30a:	4b0b      	ldr	r3, [pc, #44]	; (c338 <RADIO_FHSSChangeChannel+0x40>)
    c30c:	691b      	ldr	r3, [r3, #16]
    c30e:	2b00      	cmp	r3, #0
    c310:	d003      	beq.n	c31a <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    c312:	4a0a      	ldr	r2, [pc, #40]	; (c33c <RADIO_FHSSChangeChannel+0x44>)
    c314:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    c316:	0692      	lsls	r2, r2, #26
    c318:	d405      	bmi.n	c326 <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    c31a:	2102      	movs	r1, #2
    c31c:	2012      	movs	r0, #18
    c31e:	4b08      	ldr	r3, [pc, #32]	; (c340 <RADIO_FHSSChangeChannel+0x48>)
    c320:	4798      	blx	r3
}
    c322:	b003      	add	sp, #12
    c324:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    c326:	a901      	add	r1, sp, #4
    c328:	2020      	movs	r0, #32
    c32a:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    c32c:	9801      	ldr	r0, [sp, #4]
    c32e:	4b05      	ldr	r3, [pc, #20]	; (c344 <RADIO_FHSSChangeChannel+0x4c>)
    c330:	4798      	blx	r3
    c332:	e7f2      	b.n	c31a <RADIO_FHSSChangeChannel+0x22>
    c334:	0000b015 	.word	0x0000b015
    c338:	200037b0 	.word	0x200037b0
    c33c:	200039aa 	.word	0x200039aa
    c340:	0000afed 	.word	0x0000afed
    c344:	0000cd71 	.word	0x0000cd71

0000c348 <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    c348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    c34a:	2000      	movs	r0, #0
    c34c:	4b1a      	ldr	r3, [pc, #104]	; (c3b8 <RADIO_ReadRandom+0x70>)
    c34e:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    c350:	4b1a      	ldr	r3, [pc, #104]	; (c3bc <RADIO_ReadRandom+0x74>)
    c352:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    c354:	2201      	movs	r2, #1
    c356:	2101      	movs	r1, #1
    c358:	2000      	movs	r0, #0
    c35a:	4c19      	ldr	r4, [pc, #100]	; (c3c0 <RADIO_ReadRandom+0x78>)
    c35c:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    c35e:	21ff      	movs	r1, #255	; 0xff
    c360:	2011      	movs	r0, #17
    c362:	4b18      	ldr	r3, [pc, #96]	; (c3c4 <RADIO_ReadRandom+0x7c>)
    c364:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    c366:	2201      	movs	r2, #1
    c368:	2101      	movs	r1, #1
    c36a:	2005      	movs	r0, #5
    c36c:	47a0      	blx	r4
    c36e:	2410      	movs	r4, #16
    retVal = 0;
    c370:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    c372:	4f15      	ldr	r7, [pc, #84]	; (c3c8 <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    c374:	4e15      	ldr	r6, [pc, #84]	; (c3cc <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    c376:	2001      	movs	r0, #1
    c378:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    c37a:	202c      	movs	r0, #44	; 0x2c
    c37c:	47b0      	blx	r6
    c37e:	2301      	movs	r3, #1
    c380:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    c382:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    c384:	4305      	orrs	r5, r0
    c386:	b2ad      	uxth	r5, r5
    c388:	3c01      	subs	r4, #1
    c38a:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    c38c:	2c00      	cmp	r4, #0
    c38e:	d1f2      	bne.n	c376 <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    c390:	2000      	movs	r0, #0
    c392:	4b0f      	ldr	r3, [pc, #60]	; (c3d0 <RADIO_ReadRandom+0x88>)
    c394:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    c396:	2201      	movs	r2, #1
    c398:	2101      	movs	r1, #1
    c39a:	2000      	movs	r0, #0
    c39c:	4b08      	ldr	r3, [pc, #32]	; (c3c0 <RADIO_ReadRandom+0x78>)
    c39e:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    c3a0:	21ff      	movs	r1, #255	; 0xff
    c3a2:	2012      	movs	r0, #18
    c3a4:	4c07      	ldr	r4, [pc, #28]	; (c3c4 <RADIO_ReadRandom+0x7c>)
    c3a6:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    c3a8:	2100      	movs	r1, #0
    c3aa:	2011      	movs	r0, #17
    c3ac:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    c3ae:	4b09      	ldr	r3, [pc, #36]	; (c3d4 <RADIO_ReadRandom+0x8c>)
    c3b0:	4798      	blx	r3
	
    return retVal;
}
    c3b2:	0028      	movs	r0, r5
    c3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3b6:	46c0      	nop			; (mov r8, r8)
    c3b8:	0000d62d 	.word	0x0000d62d
    c3bc:	0000d9e9 	.word	0x0000d9e9
    c3c0:	0000c215 	.word	0x0000c215
    c3c4:	0000afed 	.word	0x0000afed
    c3c8:	0000b189 	.word	0x0000b189
    c3cc:	0000b015 	.word	0x0000b015
    c3d0:	0000d661 	.word	0x0000d661
    c3d4:	0000db19 	.word	0x0000db19

0000c3d8 <Radio_ReadRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadRssi(int16_t *rssi)
{
    c3d8:	b510      	push	{r4, lr}
    c3da:	0004      	movs	r4, r0
	if (MODULATION_LORA == radioConfiguration.modulation)
    c3dc:	2334      	movs	r3, #52	; 0x34
    c3de:	4a11      	ldr	r2, [pc, #68]	; (c424 <Radio_ReadRssi+0x4c>)
    c3e0:	5cd3      	ldrb	r3, [r2, r3]
    c3e2:	2b01      	cmp	r3, #1
    c3e4:	d003      	beq.n	c3ee <Radio_ReadRssi+0x16>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
	#endif // UT
	}
	else
	{
		return ERR_UNSUPPORTED_ATTR;
    c3e6:	2006      	movs	r0, #6
	else if (MODULATION_FSK == radioConfiguration.modulation)
    c3e8:	2b00      	cmp	r3, #0
    c3ea:	d012      	beq.n	c412 <Radio_ReadRssi+0x3a>
	}
	return ERR_NONE;
}
    c3ec:	bd10      	pop	{r4, pc}
		if (radioConfiguration.frequency >= HF_FREQ_HZ)
    c3ee:	4b0e      	ldr	r3, [pc, #56]	; (c428 <Radio_ReadRssi+0x50>)
    c3f0:	6812      	ldr	r2, [r2, #0]
    c3f2:	429a      	cmp	r2, r3
    c3f4:	d906      	bls.n	c404 <Radio_ReadRssi+0x2c>
			*rssi = RSSI_HF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    c3f6:	201a      	movs	r0, #26
    c3f8:	4b0c      	ldr	r3, [pc, #48]	; (c42c <Radio_ReadRssi+0x54>)
    c3fa:	4798      	blx	r3
    c3fc:	389d      	subs	r0, #157	; 0x9d
    c3fe:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    c400:	2000      	movs	r0, #0
    c402:	e7f3      	b.n	c3ec <Radio_ReadRssi+0x14>
			*rssi = RSSI_LF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    c404:	201a      	movs	r0, #26
    c406:	4b09      	ldr	r3, [pc, #36]	; (c42c <Radio_ReadRssi+0x54>)
    c408:	4798      	blx	r3
    c40a:	38a4      	subs	r0, #164	; 0xa4
    c40c:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    c40e:	2000      	movs	r0, #0
    c410:	e7ec      	b.n	c3ec <Radio_ReadRssi+0x14>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    c412:	300b      	adds	r0, #11
    c414:	4b05      	ldr	r3, [pc, #20]	; (c42c <Radio_ReadRssi+0x54>)
    c416:	4798      	blx	r3
    c418:	0840      	lsrs	r0, r0, #1
    c41a:	b2c3      	uxtb	r3, r0
    c41c:	425b      	negs	r3, r3
    c41e:	8023      	strh	r3, [r4, #0]
	return ERR_NONE;
    c420:	2000      	movs	r0, #0
    c422:	e7e3      	b.n	c3ec <Radio_ReadRssi+0x14>
    c424:	200037b0 	.word	0x200037b0
    c428:	3361137f 	.word	0x3361137f
    c42c:	0000b015 	.word	0x0000b015

0000c430 <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    c430:	b510      	push	{r4, lr}
    c432:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    c434:	2011      	movs	r0, #17
    c436:	4b04      	ldr	r3, [pc, #16]	; (c448 <Radio_ReadFSKRssi+0x18>)
    c438:	4798      	blx	r3
    c43a:	0840      	lsrs	r0, r0, #1
    c43c:	b2c0      	uxtb	r0, r0
    c43e:	4240      	negs	r0, r0
    c440:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    c442:	2000      	movs	r0, #0
    c444:	bd10      	pop	{r4, pc}
    c446:	46c0      	nop			; (mov r8, r8)
    c448:	0000b015 	.word	0x0000b015

0000c44c <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    c44c:	b510      	push	{r4, lr}
	tmr_cca_callback();
    c44e:	4b01      	ldr	r3, [pc, #4]	; (c454 <tc_cca_callback+0x8>)
    c450:	4798      	blx	r3
}
    c452:	bd10      	pop	{r4, pc}
    c454:	00011d11 	.word	0x00011d11

0000c458 <tc_ovf_callback>:
{
    c458:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    c45a:	4b01      	ldr	r3, [pc, #4]	; (c460 <tc_ovf_callback+0x8>)
    c45c:	4798      	blx	r3
}
    c45e:	bd10      	pop	{r4, pc}
    c460:	00011cc9 	.word	0x00011cc9

0000c464 <tmr_read_count>:
{
    c464:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    c466:	4802      	ldr	r0, [pc, #8]	; (c470 <tmr_read_count+0xc>)
    c468:	4b02      	ldr	r3, [pc, #8]	; (c474 <tmr_read_count+0x10>)
    c46a:	4798      	blx	r3
    c46c:	b280      	uxth	r0, r0
}
    c46e:	bd10      	pop	{r4, pc}
    c470:	20003844 	.word	0x20003844
    c474:	000066e5 	.word	0x000066e5

0000c478 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    c478:	4b03      	ldr	r3, [pc, #12]	; (c488 <tmr_disable_cc_interrupt+0x10>)
    c47a:	2110      	movs	r1, #16
    c47c:	681a      	ldr	r2, [r3, #0]
    c47e:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    c480:	7e5a      	ldrb	r2, [r3, #25]
    c482:	438a      	bics	r2, r1
    c484:	765a      	strb	r2, [r3, #25]
}
    c486:	4770      	bx	lr
    c488:	20003844 	.word	0x20003844

0000c48c <tmr_enable_cc_interrupt>:
{
    c48c:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    c48e:	4c0a      	ldr	r4, [pc, #40]	; (c4b8 <tmr_enable_cc_interrupt+0x2c>)
    c490:	6820      	ldr	r0, [r4, #0]
    c492:	4b0a      	ldr	r3, [pc, #40]	; (c4bc <tmr_enable_cc_interrupt+0x30>)
    c494:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    c496:	4b0a      	ldr	r3, [pc, #40]	; (c4c0 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c498:	5c1b      	ldrb	r3, [r3, r0]
    c49a:	221f      	movs	r2, #31
    c49c:	401a      	ands	r2, r3
    c49e:	2301      	movs	r3, #1
    c4a0:	4093      	lsls	r3, r2
    c4a2:	4a08      	ldr	r2, [pc, #32]	; (c4c4 <tmr_enable_cc_interrupt+0x38>)
    c4a4:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    c4a6:	7e63      	ldrb	r3, [r4, #25]
    c4a8:	2210      	movs	r2, #16
    c4aa:	4313      	orrs	r3, r2
    c4ac:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    c4ae:	6823      	ldr	r3, [r4, #0]
    c4b0:	2210      	movs	r2, #16
    c4b2:	725a      	strb	r2, [r3, #9]
}
    c4b4:	bd10      	pop	{r4, pc}
    c4b6:	46c0      	nop			; (mov r8, r8)
    c4b8:	20003844 	.word	0x20003844
    c4bc:	000063b9 	.word	0x000063b9
    c4c0:	00016d4c 	.word	0x00016d4c
    c4c4:	e000e100 	.word	0xe000e100

0000c4c8 <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    c4c8:	4b03      	ldr	r3, [pc, #12]	; (c4d8 <tmr_disable_ovf_interrupt+0x10>)
    c4ca:	2101      	movs	r1, #1
    c4cc:	681a      	ldr	r2, [r3, #0]
    c4ce:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    c4d0:	7e5a      	ldrb	r2, [r3, #25]
    c4d2:	438a      	bics	r2, r1
    c4d4:	765a      	strb	r2, [r3, #25]
}
    c4d6:	4770      	bx	lr
    c4d8:	20003844 	.word	0x20003844

0000c4dc <tmr_enable_ovf_interrupt>:
{
    c4dc:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    c4de:	4c0a      	ldr	r4, [pc, #40]	; (c508 <tmr_enable_ovf_interrupt+0x2c>)
    c4e0:	6820      	ldr	r0, [r4, #0]
    c4e2:	4b0a      	ldr	r3, [pc, #40]	; (c50c <tmr_enable_ovf_interrupt+0x30>)
    c4e4:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    c4e6:	4b0a      	ldr	r3, [pc, #40]	; (c510 <tmr_enable_ovf_interrupt+0x34>)
    c4e8:	5c1a      	ldrb	r2, [r3, r0]
    c4ea:	231f      	movs	r3, #31
    c4ec:	4013      	ands	r3, r2
    c4ee:	2201      	movs	r2, #1
    c4f0:	0011      	movs	r1, r2
    c4f2:	4099      	lsls	r1, r3
    c4f4:	4b07      	ldr	r3, [pc, #28]	; (c514 <tmr_enable_ovf_interrupt+0x38>)
    c4f6:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    c4f8:	7e63      	ldrb	r3, [r4, #25]
    c4fa:	2101      	movs	r1, #1
    c4fc:	430b      	orrs	r3, r1
    c4fe:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    c500:	6823      	ldr	r3, [r4, #0]
    c502:	725a      	strb	r2, [r3, #9]
}
    c504:	bd10      	pop	{r4, pc}
    c506:	46c0      	nop			; (mov r8, r8)
    c508:	20003844 	.word	0x20003844
    c50c:	000063b9 	.word	0x000063b9
    c510:	00016d4c 	.word	0x00016d4c
    c514:	e000e100 	.word	0xe000e100

0000c518 <tmr_stop>:
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    c518:	4b06      	ldr	r3, [pc, #24]	; (c534 <tmr_stop+0x1c>)
    c51a:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    c51c:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    c51e:	2b00      	cmp	r3, #0
    c520:	d1fc      	bne.n	c51c <tmr_stop+0x4>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    c522:	3333      	adds	r3, #51	; 0x33
    c524:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    c526:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    c528:	6813      	ldr	r3, [r2, #0]
    c52a:	2102      	movs	r1, #2
    c52c:	438b      	bics	r3, r1
    c52e:	6013      	str	r3, [r2, #0]
}
    c530:	4770      	bx	lr
    c532:	46c0      	nop			; (mov r8, r8)
    c534:	20003844 	.word	0x20003844

0000c538 <tmr_write_cmpreg>:
{
    c538:	b510      	push	{r4, lr}
    c53a:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    c53c:	2100      	movs	r1, #0
    c53e:	4802      	ldr	r0, [pc, #8]	; (c548 <tmr_write_cmpreg+0x10>)
    c540:	4b02      	ldr	r3, [pc, #8]	; (c54c <tmr_write_cmpreg+0x14>)
    c542:	4798      	blx	r3
}
    c544:	bd10      	pop	{r4, pc}
    c546:	46c0      	nop			; (mov r8, r8)
    c548:	20003844 	.word	0x20003844
    c54c:	0000672d 	.word	0x0000672d

0000c550 <save_cpu_interrupt>:
{
    c550:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c552:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c556:	425a      	negs	r2, r3
    c558:	4153      	adcs	r3, r2
    c55a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c55c:	b672      	cpsid	i
    c55e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c562:	2200      	movs	r2, #0
    c564:	4b02      	ldr	r3, [pc, #8]	; (c570 <save_cpu_interrupt+0x20>)
    c566:	701a      	strb	r2, [r3, #0]
	return flags;
    c568:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    c56a:	b2c0      	uxtb	r0, r0
}
    c56c:	b002      	add	sp, #8
    c56e:	4770      	bx	lr
    c570:	20000008 	.word	0x20000008

0000c574 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    c574:	2800      	cmp	r0, #0
    c576:	d005      	beq.n	c584 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    c578:	2201      	movs	r2, #1
    c57a:	4b03      	ldr	r3, [pc, #12]	; (c588 <restore_cpu_interrupt+0x14>)
    c57c:	701a      	strb	r2, [r3, #0]
    c57e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c582:	b662      	cpsie	i
}
    c584:	4770      	bx	lr
    c586:	46c0      	nop			; (mov r8, r8)
    c588:	20000008 	.word	0x20000008

0000c58c <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    c58c:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    c58e:	4a33      	ldr	r2, [pc, #204]	; (c65c <tmr_init+0xd0>)
    c590:	2100      	movs	r1, #0
    c592:	2300      	movs	r3, #0
    c594:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    c596:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    c598:	2000      	movs	r0, #0
    c59a:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    c59c:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    c59e:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    c5a0:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    c5a2:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    c5a4:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    c5a6:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    c5a8:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    c5aa:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    c5ac:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    c5ae:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    c5b0:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    c5b2:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    c5b4:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    c5b6:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    c5b8:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    c5ba:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    c5bc:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    c5be:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    c5c0:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    c5c2:	2334      	movs	r3, #52	; 0x34
    c5c4:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    c5c6:	3b35      	subs	r3, #53	; 0x35
    c5c8:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    c5ca:	4c25      	ldr	r4, [pc, #148]	; (c660 <tmr_init+0xd4>)
    c5cc:	4925      	ldr	r1, [pc, #148]	; (c664 <tmr_init+0xd8>)
    c5ce:	0020      	movs	r0, r4
    c5d0:	4b25      	ldr	r3, [pc, #148]	; (c668 <tmr_init+0xdc>)
    c5d2:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    c5d4:	2200      	movs	r2, #0
    c5d6:	4925      	ldr	r1, [pc, #148]	; (c66c <tmr_init+0xe0>)
    c5d8:	0020      	movs	r0, r4
    c5da:	4d25      	ldr	r5, [pc, #148]	; (c670 <tmr_init+0xe4>)
    c5dc:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    c5de:	2202      	movs	r2, #2
    c5e0:	4924      	ldr	r1, [pc, #144]	; (c674 <tmr_init+0xe8>)
    c5e2:	0020      	movs	r0, r4
    c5e4:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    c5e6:	6820      	ldr	r0, [r4, #0]
    c5e8:	4b23      	ldr	r3, [pc, #140]	; (c678 <tmr_init+0xec>)
    c5ea:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    c5ec:	4b23      	ldr	r3, [pc, #140]	; (c67c <tmr_init+0xf0>)
    c5ee:	5c1a      	ldrb	r2, [r3, r0]
    c5f0:	231f      	movs	r3, #31
    c5f2:	4013      	ands	r3, r2
    c5f4:	2101      	movs	r1, #1
    c5f6:	000a      	movs	r2, r1
    c5f8:	409a      	lsls	r2, r3
    c5fa:	4b21      	ldr	r3, [pc, #132]	; (c680 <tmr_init+0xf4>)
    c5fc:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    c5fe:	7e63      	ldrb	r3, [r4, #25]
    c600:	2201      	movs	r2, #1
    c602:	4313      	orrs	r3, r2
    c604:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    c606:	6822      	ldr	r2, [r4, #0]
    c608:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    c60a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    c60c:	2b00      	cmp	r3, #0
    c60e:	d1fc      	bne.n	c60a <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    c610:	6813      	ldr	r3, [r2, #0]
    c612:	2102      	movs	r1, #2
    c614:	430b      	orrs	r3, r1
    c616:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    c618:	2000      	movs	r0, #0
    c61a:	4b1a      	ldr	r3, [pc, #104]	; (c684 <tmr_init+0xf8>)
    c61c:	4798      	blx	r3
    c61e:	4d1a      	ldr	r5, [pc, #104]	; (c688 <tmr_init+0xfc>)
    c620:	47a8      	blx	r5
    c622:	491a      	ldr	r1, [pc, #104]	; (c68c <tmr_init+0x100>)
    c624:	4b1a      	ldr	r3, [pc, #104]	; (c690 <tmr_init+0x104>)
    c626:	4798      	blx	r3
    c628:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    c62a:	4b1a      	ldr	r3, [pc, #104]	; (c694 <tmr_init+0x108>)
    c62c:	4798      	blx	r3
    c62e:	47a8      	blx	r5
    c630:	1c01      	adds	r1, r0, #0
    c632:	1c20      	adds	r0, r4, #0
    c634:	4b18      	ldr	r3, [pc, #96]	; (c698 <tmr_init+0x10c>)
    c636:	4798      	blx	r3
    c638:	21fc      	movs	r1, #252	; 0xfc
    c63a:	0589      	lsls	r1, r1, #22
    c63c:	4b17      	ldr	r3, [pc, #92]	; (c69c <tmr_init+0x110>)
    c63e:	4798      	blx	r3
    c640:	2800      	cmp	r0, #0
    c642:	d005      	beq.n	c650 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    c644:	21fe      	movs	r1, #254	; 0xfe
    c646:	0589      	lsls	r1, r1, #22
    c648:	1c20      	adds	r0, r4, #0
    c64a:	4b15      	ldr	r3, [pc, #84]	; (c6a0 <tmr_init+0x114>)
    c64c:	4798      	blx	r3
    c64e:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    c650:	1c20      	adds	r0, r4, #0
    c652:	4b10      	ldr	r3, [pc, #64]	; (c694 <tmr_init+0x108>)
    c654:	4798      	blx	r3
    c656:	b2c0      	uxtb	r0, r0
}
    c658:	bd70      	pop	{r4, r5, r6, pc}
    c65a:	46c0      	nop			; (mov r8, r8)
    c65c:	2000380c 	.word	0x2000380c
    c660:	20003844 	.word	0x20003844
    c664:	42002000 	.word	0x42002000
    c668:	000063f5 	.word	0x000063f5
    c66c:	0000c459 	.word	0x0000c459
    c670:	000062f1 	.word	0x000062f1
    c674:	0000c44d 	.word	0x0000c44d
    c678:	000063b9 	.word	0x000063b9
    c67c:	00016d4c 	.word	0x00016d4c
    c680:	e000e100 	.word	0xe000e100
    c684:	000060b9 	.word	0x000060b9
    c688:	00013179 	.word	0x00013179
    c68c:	49742400 	.word	0x49742400
    c690:	00012741 	.word	0x00012741
    c694:	000121f1 	.word	0x000121f1
    c698:	00012d61 	.word	0x00012d61
    c69c:	00012149 	.word	0x00012149
    c6a0:	0001241d 	.word	0x0001241d

0000c6a4 <configure_rtc_callbacks>:
	system_sleep();
	SystemTimerInit();
}

static void configure_rtc_callbacks(void)
{
    c6a4:	b510      	push	{r4, lr}
	/*Register rtc callback*/
	rtc_count_register_callback(
    c6a6:	4c05      	ldr	r4, [pc, #20]	; (c6bc <configure_rtc_callbacks+0x18>)
    c6a8:	220a      	movs	r2, #10
    c6aa:	4905      	ldr	r1, [pc, #20]	; (c6c0 <configure_rtc_callbacks+0x1c>)
    c6ac:	0020      	movs	r0, r4
    c6ae:	4b05      	ldr	r3, [pc, #20]	; (c6c4 <configure_rtc_callbacks+0x20>)
    c6b0:	4798      	blx	r3
			&rtc_instance, rtc_overflow_callback,
			RTC_COUNT_CALLBACK_OVERFLOW);
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    c6b2:	210a      	movs	r1, #10
    c6b4:	0020      	movs	r0, r4
    c6b6:	4b04      	ldr	r3, [pc, #16]	; (c6c8 <configure_rtc_callbacks+0x24>)
    c6b8:	4798      	blx	r3
}
    c6ba:	bd10      	pop	{r4, pc}
    c6bc:	20003860 	.word	0x20003860
    c6c0:	0000c6cd 	.word	0x0000c6cd
    c6c4:	00005335 	.word	0x00005335
    c6c8:	00005371 	.word	0x00005371

0000c6cc <rtc_overflow_callback>:

static void rtc_overflow_callback(void)
{
    c6cc:	b510      	push	{r4, lr}
	/* Do something on RTC overflow here */
	rtc_count_disable(&rtc_instance);
    c6ce:	4802      	ldr	r0, [pc, #8]	; (c6d8 <rtc_overflow_callback+0xc>)
    c6d0:	4b02      	ldr	r3, [pc, #8]	; (c6dc <rtc_overflow_callback+0x10>)
    c6d2:	4798      	blx	r3
}
    c6d4:	bd10      	pop	{r4, pc}
    c6d6:	46c0      	nop			; (mov r8, r8)
    c6d8:	20003860 	.word	0x20003860
    c6dc:	00005161 	.word	0x00005161

0000c6e0 <sm_init>:
{
    c6e0:	b500      	push	{lr}
    c6e2:	b085      	sub	sp, #20
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
    c6e4:	2300      	movs	r3, #0
    c6e6:	466a      	mov	r2, sp
    c6e8:	70d3      	strb	r3, [r2, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->enable_read_sync    = true;
    c6ea:	2201      	movs	r2, #1
    c6ec:	4669      	mov	r1, sp
    c6ee:	710a      	strb	r2, [r1, #4]
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    c6f0:	9302      	str	r3, [sp, #8]
    c6f2:	9303      	str	r3, [sp, #12]
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_16;
    c6f4:	22a0      	movs	r2, #160	; 0xa0
    c6f6:	00d2      	lsls	r2, r2, #3
    c6f8:	800a      	strh	r2, [r1, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    c6fa:	466a      	mov	r2, sp
    c6fc:	708b      	strb	r3, [r1, #2]
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    c6fe:	4904      	ldr	r1, [pc, #16]	; (c710 <sm_init+0x30>)
    c700:	4804      	ldr	r0, [pc, #16]	; (c714 <sm_init+0x34>)
    c702:	4b05      	ldr	r3, [pc, #20]	; (c718 <sm_init+0x38>)
    c704:	4798      	blx	r3
	configure_rtc_callbacks();
    c706:	4b05      	ldr	r3, [pc, #20]	; (c71c <sm_init+0x3c>)
    c708:	4798      	blx	r3
}
    c70a:	b005      	add	sp, #20
    c70c:	bd00      	pop	{pc}
    c70e:	46c0      	nop			; (mov r8, r8)
    c710:	40002000 	.word	0x40002000
    c714:	20003860 	.word	0x20003860
    c718:	00005269 	.word	0x00005269
    c71c:	0000c6a5 	.word	0x0000c6a5

0000c720 <sm_sleep>:
{
    c720:	b570      	push	{r4, r5, r6, lr}
    c722:	0004      	movs	r4, r0
	uint32_t offSet = ((float)(period/60)*3000 + 100)/16;
    c724:	213c      	movs	r1, #60	; 0x3c
    c726:	4b16      	ldr	r3, [pc, #88]	; (c780 <sm_sleep+0x60>)
    c728:	4798      	blx	r3
    c72a:	4b16      	ldr	r3, [pc, #88]	; (c784 <sm_sleep+0x64>)
    c72c:	4798      	blx	r3
    c72e:	4d16      	ldr	r5, [pc, #88]	; (c788 <sm_sleep+0x68>)
    c730:	4916      	ldr	r1, [pc, #88]	; (c78c <sm_sleep+0x6c>)
    c732:	47a8      	blx	r5
    c734:	4916      	ldr	r1, [pc, #88]	; (c790 <sm_sleep+0x70>)
    c736:	4b17      	ldr	r3, [pc, #92]	; (c794 <sm_sleep+0x74>)
    c738:	4798      	blx	r3
    c73a:	21f6      	movs	r1, #246	; 0xf6
    c73c:	0589      	lsls	r1, r1, #22
    c73e:	47a8      	blx	r5
    c740:	4b15      	ldr	r3, [pc, #84]	; (c798 <sm_sleep+0x78>)
    c742:	4798      	blx	r3
	uint32_t interval = period*62+offSet; // period*1000/16 + offSet
    c744:	0161      	lsls	r1, r4, #5
    c746:	1b09      	subs	r1, r1, r4
    c748:	0049      	lsls	r1, r1, #1
    c74a:	1841      	adds	r1, r0, r1
	rtc_count_set_period(&rtc_instance, interval);
    c74c:	b289      	uxth	r1, r1
    c74e:	4c13      	ldr	r4, [pc, #76]	; (c79c <sm_sleep+0x7c>)
    c750:	0020      	movs	r0, r4
    c752:	4b13      	ldr	r3, [pc, #76]	; (c7a0 <sm_sleep+0x80>)
    c754:	4798      	blx	r3
	configure_rtc_callbacks();
    c756:	4b13      	ldr	r3, [pc, #76]	; (c7a4 <sm_sleep+0x84>)
    c758:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    c75a:	0020      	movs	r0, r4
    c75c:	4b12      	ldr	r3, [pc, #72]	; (c7a8 <sm_sleep+0x88>)
    c75e:	4798      	blx	r3
	common_tc_stop();
    c760:	4b12      	ldr	r3, [pc, #72]	; (c7ac <sm_sleep+0x8c>)
    c762:	4798      	blx	r3
	PM->SLEEPCFG.reg = sleep_mode;
    c764:	2204      	movs	r2, #4
    c766:	2380      	movs	r3, #128	; 0x80
    c768:	05db      	lsls	r3, r3, #23
    c76a:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    c76c:	001a      	movs	r2, r3
    c76e:	7853      	ldrb	r3, [r2, #1]
    c770:	2b04      	cmp	r3, #4
    c772:	d1fc      	bne.n	c76e <sm_sleep+0x4e>
  __ASM volatile ("dsb");
    c774:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    c778:	bf30      	wfi
	SystemTimerInit();
    c77a:	4b0d      	ldr	r3, [pc, #52]	; (c7b0 <sm_sleep+0x90>)
    c77c:	4798      	blx	r3
}
    c77e:	bd70      	pop	{r4, r5, r6, pc}
    c780:	00011d81 	.word	0x00011d81
    c784:	00013179 	.word	0x00013179
    c788:	00012b21 	.word	0x00012b21
    c78c:	453b8000 	.word	0x453b8000
    c790:	42c80000 	.word	0x42c80000
    c794:	0001241d 	.word	0x0001241d
    c798:	000121f1 	.word	0x000121f1
    c79c:	20003860 	.word	0x20003860
    c7a0:	00005305 	.word	0x00005305
    c7a4:	0000c6a5 	.word	0x0000c6a5
    c7a8:	0000512d 	.word	0x0000512d
    c7ac:	00011c21 	.word	0x00011c21
    c7b0:	0000bb3d 	.word	0x0000bb3d

0000c7b4 <LORAWAN_TxHandler>:
    c7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7b6:	b087      	sub	sp, #28
    c7b8:	466b      	mov	r3, sp
    c7ba:	2501      	movs	r5, #1
    c7bc:	4c2f      	ldr	r4, [pc, #188]	; (c87c <LORAWAN_TxHandler+0xc8>)
    c7be:	701d      	strb	r5, [r3, #0]
    c7c0:	0023      	movs	r3, r4
    c7c2:	466a      	mov	r2, sp
    c7c4:	33e9      	adds	r3, #233	; 0xe9
    c7c6:	781b      	ldrb	r3, [r3, #0]
    c7c8:	4669      	mov	r1, sp
    c7ca:	7053      	strb	r3, [r2, #1]
    c7cc:	0023      	movs	r3, r4
    c7ce:	33e7      	adds	r3, #231	; 0xe7
    c7d0:	781b      	ldrb	r3, [r3, #0]
    c7d2:	202e      	movs	r0, #46	; 0x2e
    c7d4:	7093      	strb	r3, [r2, #2]
    c7d6:	aa03      	add	r2, sp, #12
    c7d8:	4b29      	ldr	r3, [pc, #164]	; (c880 <LORAWAN_TxHandler+0xcc>)
    c7da:	4798      	blx	r3
    c7dc:	2808      	cmp	r0, #8
    c7de:	d004      	beq.n	c7ea <LORAWAN_TxHandler+0x36>
    c7e0:	4b28      	ldr	r3, [pc, #160]	; (c884 <LORAWAN_TxHandler+0xd0>)
    c7e2:	4798      	blx	r3
    c7e4:	2000      	movs	r0, #0
    c7e6:	b007      	add	sp, #28
    c7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c7ea:	0023      	movs	r3, r4
    c7ec:	33fd      	adds	r3, #253	; 0xfd
    c7ee:	781b      	ldrb	r3, [r3, #0]
    c7f0:	ae01      	add	r6, sp, #4
    c7f2:	2b04      	cmp	r3, #4
    c7f4:	d103      	bne.n	c7fe <LORAWAN_TxHandler+0x4a>
    c7f6:	0030      	movs	r0, r6
    c7f8:	4b23      	ldr	r3, [pc, #140]	; (c888 <LORAWAN_TxHandler+0xd4>)
    c7fa:	7035      	strb	r5, [r6, #0]
    c7fc:	4798      	blx	r3
    c7fe:	4b23      	ldr	r3, [pc, #140]	; (c88c <LORAWAN_TxHandler+0xd8>)
    c800:	9803      	ldr	r0, [sp, #12]
    c802:	9904      	ldr	r1, [sp, #16]
    c804:	9a05      	ldr	r2, [sp, #20]
    c806:	4798      	blx	r3
    c808:	0023      	movs	r3, r4
    c80a:	33fc      	adds	r3, #252	; 0xfc
    c80c:	68dd      	ldr	r5, [r3, #12]
    c80e:	4f20      	ldr	r7, [pc, #128]	; (c890 <LORAWAN_TxHandler+0xdc>)
    c810:	4b20      	ldr	r3, [pc, #128]	; (c894 <LORAWAN_TxHandler+0xe0>)
    c812:	2d00      	cmp	r5, #0
    c814:	d023      	beq.n	c85e <LORAWAN_TxHandler+0xaa>
    c816:	2201      	movs	r2, #1
    c818:	54e2      	strb	r2, [r4, r3]
    c81a:	7828      	ldrb	r0, [r5, #0]
    c81c:	7a2b      	ldrb	r3, [r5, #8]
    c81e:	1e42      	subs	r2, r0, #1
    c820:	4190      	sbcs	r0, r2
    c822:	7869      	ldrb	r1, [r5, #1]
    c824:	686a      	ldr	r2, [r5, #4]
    c826:	b2c0      	uxtb	r0, r0
    c828:	47b8      	blx	r7
    c82a:	0023      	movs	r3, r4
    c82c:	33ce      	adds	r3, #206	; 0xce
    c82e:	881b      	ldrh	r3, [r3, #0]
    c830:	0030      	movs	r0, r6
    c832:	7033      	strb	r3, [r6, #0]
    c834:	4b18      	ldr	r3, [pc, #96]	; (c898 <LORAWAN_TxHandler+0xe4>)
    c836:	6073      	str	r3, [r6, #4]
    c838:	4b18      	ldr	r3, [pc, #96]	; (c89c <LORAWAN_TxHandler+0xe8>)
    c83a:	4798      	blx	r3
    c83c:	2800      	cmp	r0, #0
    c83e:	d114      	bne.n	c86a <LORAWAN_TxHandler+0xb6>
    c840:	0021      	movs	r1, r4
    c842:	220e      	movs	r2, #14
    c844:	3184      	adds	r1, #132	; 0x84
    c846:	780b      	ldrb	r3, [r1, #0]
    c848:	4393      	bics	r3, r2
    c84a:	001a      	movs	r2, r3
    c84c:	2302      	movs	r3, #2
    c84e:	4313      	orrs	r3, r2
    c850:	700b      	strb	r3, [r1, #0]
    c852:	2208      	movs	r2, #8
    c854:	3494      	adds	r4, #148	; 0x94
    c856:	7823      	ldrb	r3, [r4, #0]
    c858:	4393      	bics	r3, r2
    c85a:	7023      	strb	r3, [r4, #0]
    c85c:	e7c2      	b.n	c7e4 <LORAWAN_TxHandler+0x30>
    c85e:	54e5      	strb	r5, [r4, r3]
    c860:	002a      	movs	r2, r5
    c862:	002b      	movs	r3, r5
    c864:	0029      	movs	r1, r5
    c866:	0028      	movs	r0, r5
    c868:	e7de      	b.n	c828 <LORAWAN_TxHandler+0x74>
    c86a:	0022      	movs	r2, r4
    c86c:	2120      	movs	r1, #32
    c86e:	3294      	adds	r2, #148	; 0x94
    c870:	7813      	ldrb	r3, [r2, #0]
    c872:	438b      	bics	r3, r1
    c874:	7013      	strb	r3, [r2, #0]
    c876:	4b03      	ldr	r3, [pc, #12]	; (c884 <LORAWAN_TxHandler+0xd0>)
    c878:	4798      	blx	r3
    c87a:	e7ea      	b.n	c852 <LORAWAN_TxHandler+0x9e>
    c87c:	20003ad4 	.word	0x20003ad4
    c880:	0000b691 	.word	0x0000b691
    c884:	0000f5f9 	.word	0x0000f5f9
    c888:	0000dd29 	.word	0x0000dd29
    c88c:	0000f191 	.word	0x0000f191
    c890:	0001111d 	.word	0x0001111d
    c894:	0000022a 	.word	0x0000022a
    c898:	20003d2c 	.word	0x20003d2c
    c89c:	0000d44d 	.word	0x0000d44d

0000c8a0 <LORAWAN_JoinReqHandler>:
    c8a0:	b530      	push	{r4, r5, lr}
    c8a2:	b087      	sub	sp, #28
    c8a4:	466a      	mov	r2, sp
    c8a6:	2300      	movs	r3, #0
    c8a8:	4c25      	ldr	r4, [pc, #148]	; (c940 <LORAWAN_JoinReqHandler+0xa0>)
    c8aa:	7013      	strb	r3, [r2, #0]
    c8ac:	0023      	movs	r3, r4
    c8ae:	33e9      	adds	r3, #233	; 0xe9
    c8b0:	781b      	ldrb	r3, [r3, #0]
    c8b2:	7053      	strb	r3, [r2, #1]
    c8b4:	0023      	movs	r3, r4
    c8b6:	33e7      	adds	r3, #231	; 0xe7
    c8b8:	781b      	ldrb	r3, [r3, #0]
    c8ba:	7093      	strb	r3, [r2, #2]
    c8bc:	0023      	movs	r3, r4
    c8be:	33ff      	adds	r3, #255	; 0xff
    c8c0:	7f5b      	ldrb	r3, [r3, #29]
    c8c2:	069b      	lsls	r3, r3, #26
    c8c4:	d507      	bpl.n	c8d6 <LORAWAN_JoinReqHandler+0x36>
    c8c6:	6f63      	ldr	r3, [r4, #116]	; 0x74
    c8c8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    c8ca:	4313      	orrs	r3, r2
    c8cc:	d103      	bne.n	c8d6 <LORAWAN_JoinReqHandler+0x36>
    c8ce:	0023      	movs	r3, r4
    c8d0:	2201      	movs	r2, #1
    c8d2:	3380      	adds	r3, #128	; 0x80
    c8d4:	701a      	strb	r2, [r3, #0]
    c8d6:	aa03      	add	r2, sp, #12
    c8d8:	4669      	mov	r1, sp
    c8da:	202e      	movs	r0, #46	; 0x2e
    c8dc:	4b19      	ldr	r3, [pc, #100]	; (c944 <LORAWAN_JoinReqHandler+0xa4>)
    c8de:	4798      	blx	r3
    c8e0:	2808      	cmp	r0, #8
    c8e2:	d004      	beq.n	c8ee <LORAWAN_JoinReqHandler+0x4e>
    c8e4:	4b18      	ldr	r3, [pc, #96]	; (c948 <LORAWAN_JoinReqHandler+0xa8>)
    c8e6:	4798      	blx	r3
    c8e8:	2000      	movs	r0, #0
    c8ea:	b007      	add	sp, #28
    c8ec:	bd30      	pop	{r4, r5, pc}
    c8ee:	4b17      	ldr	r3, [pc, #92]	; (c94c <LORAWAN_JoinReqHandler+0xac>)
    c8f0:	9803      	ldr	r0, [sp, #12]
    c8f2:	9904      	ldr	r1, [sp, #16]
    c8f4:	9a05      	ldr	r2, [sp, #20]
    c8f6:	4798      	blx	r3
    c8f8:	0023      	movs	r3, r4
    c8fa:	33fd      	adds	r3, #253	; 0xfd
    c8fc:	781b      	ldrb	r3, [r3, #0]
    c8fe:	ad01      	add	r5, sp, #4
    c900:	2b04      	cmp	r3, #4
    c902:	d104      	bne.n	c90e <LORAWAN_JoinReqHandler+0x6e>
    c904:	3b03      	subs	r3, #3
    c906:	702b      	strb	r3, [r5, #0]
    c908:	0028      	movs	r0, r5
    c90a:	4b11      	ldr	r3, [pc, #68]	; (c950 <LORAWAN_JoinReqHandler+0xb0>)
    c90c:	4798      	blx	r3
    c90e:	2200      	movs	r2, #0
    c910:	4b10      	ldr	r3, [pc, #64]	; (c954 <LORAWAN_JoinReqHandler+0xb4>)
    c912:	54e2      	strb	r2, [r4, r3]
    c914:	4b10      	ldr	r3, [pc, #64]	; (c958 <LORAWAN_JoinReqHandler+0xb8>)
    c916:	4798      	blx	r3
    c918:	4b10      	ldr	r3, [pc, #64]	; (c95c <LORAWAN_JoinReqHandler+0xbc>)
    c91a:	7028      	strb	r0, [r5, #0]
    c91c:	606b      	str	r3, [r5, #4]
    c91e:	0028      	movs	r0, r5
    c920:	4b0f      	ldr	r3, [pc, #60]	; (c960 <LORAWAN_JoinReqHandler+0xc0>)
    c922:	4798      	blx	r3
    c924:	2800      	cmp	r0, #0
    c926:	d001      	beq.n	c92c <LORAWAN_JoinReqHandler+0x8c>
    c928:	201b      	movs	r0, #27
    c92a:	e7db      	b.n	c8e4 <LORAWAN_JoinReqHandler+0x44>
    c92c:	220e      	movs	r2, #14
    c92e:	3484      	adds	r4, #132	; 0x84
    c930:	7823      	ldrb	r3, [r4, #0]
    c932:	4393      	bics	r3, r2
    c934:	001a      	movs	r2, r3
    c936:	2302      	movs	r3, #2
    c938:	4313      	orrs	r3, r2
    c93a:	7023      	strb	r3, [r4, #0]
    c93c:	e7d4      	b.n	c8e8 <LORAWAN_JoinReqHandler+0x48>
    c93e:	46c0      	nop			; (mov r8, r8)
    c940:	20003ad4 	.word	0x20003ad4
    c944:	0000b691 	.word	0x0000b691
    c948:	0000ec59 	.word	0x0000ec59
    c94c:	0000f191 	.word	0x0000f191
    c950:	0000dd29 	.word	0x0000dd29
    c954:	0000022a 	.word	0x0000022a
    c958:	0000f055 	.word	0x0000f055
    c95c:	20003d1c 	.word	0x20003d1c
    c960:	0000d44d 	.word	0x0000d44d

0000c964 <LORAWAN_RxHandler>:
    c964:	b513      	push	{r0, r1, r4, lr}
    c966:	4b0c      	ldr	r3, [pc, #48]	; (c998 <LORAWAN_RxHandler+0x34>)
    c968:	781b      	ldrb	r3, [r3, #0]
    c96a:	2b08      	cmp	r3, #8
    c96c:	d011      	beq.n	c992 <LORAWAN_RxHandler+0x2e>
    c96e:	2b10      	cmp	r3, #16
    c970:	d001      	beq.n	c976 <LORAWAN_RxHandler+0x12>
    c972:	2b01      	cmp	r3, #1
    c974:	d10b      	bne.n	c98e <LORAWAN_RxHandler+0x2a>
    c976:	466b      	mov	r3, sp
    c978:	1c9c      	adds	r4, r3, #2
    c97a:	0021      	movs	r1, r4
    c97c:	a801      	add	r0, sp, #4
    c97e:	4b07      	ldr	r3, [pc, #28]	; (c99c <LORAWAN_RxHandler+0x38>)
    c980:	4798      	blx	r3
    c982:	9801      	ldr	r0, [sp, #4]
    c984:	2800      	cmp	r0, #0
    c986:	d002      	beq.n	c98e <LORAWAN_RxHandler+0x2a>
    c988:	7821      	ldrb	r1, [r4, #0]
    c98a:	4b05      	ldr	r3, [pc, #20]	; (c9a0 <LORAWAN_RxHandler+0x3c>)
    c98c:	4798      	blx	r3
    c98e:	2000      	movs	r0, #0
    c990:	bd16      	pop	{r1, r2, r4, pc}
    c992:	4b04      	ldr	r3, [pc, #16]	; (c9a4 <LORAWAN_RxHandler+0x40>)
    c994:	4798      	blx	r3
    c996:	e7fa      	b.n	c98e <LORAWAN_RxHandler+0x2a>
    c998:	2000218f 	.word	0x2000218f
    c99c:	0000d619 	.word	0x0000d619
    c9a0:	00010079 	.word	0x00010079
    c9a4:	0000f98d 	.word	0x0000f98d

0000c9a8 <LORAWAN_PostTask>:
    c9a8:	b510      	push	{r4, lr}
    c9aa:	4b08      	ldr	r3, [pc, #32]	; (c9cc <LORAWAN_PostTask+0x24>)
    c9ac:	0004      	movs	r4, r0
    c9ae:	4798      	blx	r3
    c9b0:	2201      	movs	r2, #1
    c9b2:	40a2      	lsls	r2, r4
    c9b4:	4906      	ldr	r1, [pc, #24]	; (c9d0 <LORAWAN_PostTask+0x28>)
    c9b6:	780b      	ldrb	r3, [r1, #0]
    c9b8:	4313      	orrs	r3, r2
    c9ba:	b2db      	uxtb	r3, r3
    c9bc:	700b      	strb	r3, [r1, #0]
    c9be:	4b05      	ldr	r3, [pc, #20]	; (c9d4 <LORAWAN_PostTask+0x2c>)
    c9c0:	4798      	blx	r3
    c9c2:	2004      	movs	r0, #4
    c9c4:	4b04      	ldr	r3, [pc, #16]	; (c9d8 <LORAWAN_PostTask+0x30>)
    c9c6:	4798      	blx	r3
    c9c8:	bd10      	pop	{r4, pc}
    c9ca:	46c0      	nop			; (mov r8, r8)
    c9cc:	0000b1a5 	.word	0x0000b1a5
    c9d0:	20001dda 	.word	0x20001dda
    c9d4:	0000b1b1 	.word	0x0000b1b1
    c9d8:	0000c1f1 	.word	0x0000c1f1

0000c9dc <LORAWAN_TaskHandler>:
    c9dc:	b570      	push	{r4, r5, r6, lr}
    c9de:	2601      	movs	r6, #1
    c9e0:	4d0e      	ldr	r5, [pc, #56]	; (ca1c <LORAWAN_TaskHandler+0x40>)
    c9e2:	e015      	b.n	ca10 <LORAWAN_TaskHandler+0x34>
    c9e4:	2400      	movs	r4, #0
    c9e6:	782b      	ldrb	r3, [r5, #0]
    c9e8:	4123      	asrs	r3, r4
    c9ea:	4233      	tst	r3, r6
    c9ec:	d00d      	beq.n	ca0a <LORAWAN_TaskHandler+0x2e>
    c9ee:	4b0c      	ldr	r3, [pc, #48]	; (ca20 <LORAWAN_TaskHandler+0x44>)
    c9f0:	4798      	blx	r3
    c9f2:	0032      	movs	r2, r6
    c9f4:	40a2      	lsls	r2, r4
    c9f6:	782b      	ldrb	r3, [r5, #0]
    c9f8:	00a4      	lsls	r4, r4, #2
    c9fa:	4393      	bics	r3, r2
    c9fc:	702b      	strb	r3, [r5, #0]
    c9fe:	4b09      	ldr	r3, [pc, #36]	; (ca24 <LORAWAN_TaskHandler+0x48>)
    ca00:	4798      	blx	r3
    ca02:	4b09      	ldr	r3, [pc, #36]	; (ca28 <LORAWAN_TaskHandler+0x4c>)
    ca04:	58e3      	ldr	r3, [r4, r3]
    ca06:	4798      	blx	r3
    ca08:	e7ea      	b.n	c9e0 <LORAWAN_TaskHandler+0x4>
    ca0a:	3401      	adds	r4, #1
    ca0c:	2c03      	cmp	r4, #3
    ca0e:	d1ea      	bne.n	c9e6 <LORAWAN_TaskHandler+0xa>
    ca10:	7828      	ldrb	r0, [r5, #0]
    ca12:	b2c0      	uxtb	r0, r0
    ca14:	2800      	cmp	r0, #0
    ca16:	d1e5      	bne.n	c9e4 <LORAWAN_TaskHandler+0x8>
    ca18:	bd70      	pop	{r4, r5, r6, pc}
    ca1a:	46c0      	nop			; (mov r8, r8)
    ca1c:	20001dda 	.word	0x20001dda
    ca20:	0000b1a5 	.word	0x0000b1a5
    ca24:	0000b1b1 	.word	0x0000b1b1
    ca28:	00016d54 	.word	0x00016d54

0000ca2c <RADIO_GetAttr>:
    ca2c:	b510      	push	{r4, lr}
    ca2e:	000b      	movs	r3, r1
    ca30:	281f      	cmp	r0, #31
    ca32:	d900      	bls.n	ca36 <RADIO_GetAttr+0xa>
    ca34:	e069      	b.n	cb0a <RADIO_GetAttr+0xde>
    ca36:	f005 f985 	bl	11d44 <__gnu_thumb1_case_uqi>
    ca3a:	1410      	.short	0x1410
    ca3c:	68201c19 	.word	0x68201c19
    ca40:	312e2a27 	.word	0x312e2a27
    ca44:	3d3a3734 	.word	0x3d3a3734
    ca48:	46434054 	.word	0x46434054
    ca4c:	68245149 	.word	0x68245149
    ca50:	68686859 	.word	0x68686859
    ca54:	5c686817 	.word	0x5c686817
    ca58:	6360      	.short	0x6360
    ca5a:	4a2d      	ldr	r2, [pc, #180]	; (cb10 <RADIO_GetAttr+0xe4>)
    ca5c:	7e12      	ldrb	r2, [r2, #24]
    ca5e:	701a      	strb	r2, [r3, #0]
    ca60:	e002      	b.n	ca68 <RADIO_GetAttr+0x3c>
    ca62:	4a2b      	ldr	r2, [pc, #172]	; (cb10 <RADIO_GetAttr+0xe4>)
    ca64:	6812      	ldr	r2, [r2, #0]
    ca66:	601a      	str	r2, [r3, #0]
    ca68:	2000      	movs	r0, #0
    ca6a:	bd10      	pop	{r4, pc}
    ca6c:	4a28      	ldr	r2, [pc, #160]	; (cb10 <RADIO_GetAttr+0xe4>)
    ca6e:	6852      	ldr	r2, [r2, #4]
    ca70:	e7f9      	b.n	ca66 <RADIO_GetAttr+0x3a>
    ca72:	4a27      	ldr	r2, [pc, #156]	; (cb10 <RADIO_GetAttr+0xe4>)
    ca74:	8a92      	ldrh	r2, [r2, #20]
    ca76:	801a      	strh	r2, [r3, #0]
    ca78:	e7f6      	b.n	ca68 <RADIO_GetAttr+0x3c>
    ca7a:	4a25      	ldr	r2, [pc, #148]	; (cb10 <RADIO_GetAttr+0xe4>)
    ca7c:	3203      	adds	r2, #3
    ca7e:	7fd2      	ldrb	r2, [r2, #31]
    ca80:	e7ed      	b.n	ca5e <RADIO_GetAttr+0x32>
    ca82:	4a23      	ldr	r2, [pc, #140]	; (cb10 <RADIO_GetAttr+0xe4>)
    ca84:	3204      	adds	r2, #4
    ca86:	e7fa      	b.n	ca7e <RADIO_GetAttr+0x52>
    ca88:	4a21      	ldr	r2, [pc, #132]	; (cb10 <RADIO_GetAttr+0xe4>)
    ca8a:	3206      	adds	r2, #6
    ca8c:	e7f7      	b.n	ca7e <RADIO_GetAttr+0x52>
    ca8e:	4a20      	ldr	r2, [pc, #128]	; (cb10 <RADIO_GetAttr+0xe4>)
    ca90:	3236      	adds	r2, #54	; 0x36
    ca92:	7812      	ldrb	r2, [r2, #0]
    ca94:	e7e3      	b.n	ca5e <RADIO_GetAttr+0x32>
    ca96:	4a1e      	ldr	r2, [pc, #120]	; (cb10 <RADIO_GetAttr+0xe4>)
    ca98:	3205      	adds	r2, #5
    ca9a:	e7f0      	b.n	ca7e <RADIO_GetAttr+0x52>
    ca9c:	4a1c      	ldr	r2, [pc, #112]	; (cb10 <RADIO_GetAttr+0xe4>)
    ca9e:	3234      	adds	r2, #52	; 0x34
    caa0:	e7f7      	b.n	ca92 <RADIO_GetAttr+0x66>
    caa2:	4a1b      	ldr	r2, [pc, #108]	; (cb10 <RADIO_GetAttr+0xe4>)
    caa4:	8ad2      	ldrh	r2, [r2, #22]
    caa6:	e7e6      	b.n	ca76 <RADIO_GetAttr+0x4a>
    caa8:	4a19      	ldr	r2, [pc, #100]	; (cb10 <RADIO_GetAttr+0xe4>)
    caaa:	3233      	adds	r2, #51	; 0x33
    caac:	e7f1      	b.n	ca92 <RADIO_GetAttr+0x66>
    caae:	4a18      	ldr	r2, [pc, #96]	; (cb10 <RADIO_GetAttr+0xe4>)
    cab0:	68d2      	ldr	r2, [r2, #12]
    cab2:	e7d8      	b.n	ca66 <RADIO_GetAttr+0x3a>
    cab4:	4a16      	ldr	r2, [pc, #88]	; (cb10 <RADIO_GetAttr+0xe4>)
    cab6:	6892      	ldr	r2, [r2, #8]
    cab8:	e7d5      	b.n	ca66 <RADIO_GetAttr+0x3a>
    caba:	4a15      	ldr	r2, [pc, #84]	; (cb10 <RADIO_GetAttr+0xe4>)
    cabc:	3237      	adds	r2, #55	; 0x37
    cabe:	e7e8      	b.n	ca92 <RADIO_GetAttr+0x66>
    cac0:	4a13      	ldr	r2, [pc, #76]	; (cb10 <RADIO_GetAttr+0xe4>)
    cac2:	3238      	adds	r2, #56	; 0x38
    cac4:	e7e5      	b.n	ca92 <RADIO_GetAttr+0x66>
    cac6:	4a12      	ldr	r2, [pc, #72]	; (cb10 <RADIO_GetAttr+0xe4>)
    cac8:	3239      	adds	r2, #57	; 0x39
    caca:	e7e2      	b.n	ca92 <RADIO_GetAttr+0x66>
    cacc:	4a10      	ldr	r2, [pc, #64]	; (cb10 <RADIO_GetAttr+0xe4>)
    cace:	4911      	ldr	r1, [pc, #68]	; (cb14 <RADIO_GetAttr+0xe8>)
    cad0:	3202      	adds	r2, #2
    cad2:	7fd2      	ldrb	r2, [r2, #31]
    cad4:	0018      	movs	r0, r3
    cad6:	4b10      	ldr	r3, [pc, #64]	; (cb18 <RADIO_GetAttr+0xec>)
    cad8:	4798      	blx	r3
    cada:	e7c5      	b.n	ca68 <RADIO_GetAttr+0x3c>
    cadc:	4a0c      	ldr	r2, [pc, #48]	; (cb10 <RADIO_GetAttr+0xe4>)
    cade:	3202      	adds	r2, #2
    cae0:	e7cd      	b.n	ca7e <RADIO_GetAttr+0x52>
    cae2:	4a0b      	ldr	r2, [pc, #44]	; (cb10 <RADIO_GetAttr+0xe4>)
    cae4:	3232      	adds	r2, #50	; 0x32
    cae6:	7812      	ldrb	r2, [r2, #0]
    cae8:	b252      	sxtb	r2, r2
    caea:	e7b8      	b.n	ca5e <RADIO_GetAttr+0x32>
    caec:	4a08      	ldr	r2, [pc, #32]	; (cb10 <RADIO_GetAttr+0xe4>)
    caee:	3235      	adds	r2, #53	; 0x35
    caf0:	e7cf      	b.n	ca92 <RADIO_GetAttr+0x66>
    caf2:	4907      	ldr	r1, [pc, #28]	; (cb10 <RADIO_GetAttr+0xe4>)
    caf4:	2206      	movs	r2, #6
    caf6:	313c      	adds	r1, #60	; 0x3c
    caf8:	e7ec      	b.n	cad4 <RADIO_GetAttr+0xa8>
    cafa:	4a05      	ldr	r2, [pc, #20]	; (cb10 <RADIO_GetAttr+0xe4>)
    cafc:	3254      	adds	r2, #84	; 0x54
    cafe:	e7c8      	b.n	ca92 <RADIO_GetAttr+0x66>
    cb00:	4a03      	ldr	r2, [pc, #12]	; (cb10 <RADIO_GetAttr+0xe4>)
    cb02:	3256      	adds	r2, #86	; 0x56
    cb04:	2100      	movs	r1, #0
    cb06:	5e52      	ldrsh	r2, [r2, r1]
    cb08:	e7b5      	b.n	ca76 <RADIO_GetAttr+0x4a>
    cb0a:	2005      	movs	r0, #5
    cb0c:	e7ad      	b.n	ca6a <RADIO_GetAttr+0x3e>
    cb0e:	46c0      	nop			; (mov r8, r8)
    cb10:	200037b0 	.word	0x200037b0
    cb14:	200037c9 	.word	0x200037c9
    cb18:	00014fe3 	.word	0x00014fe3

0000cb1c <RADIO_SetAttr>:
    cb1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cb1e:	4b71      	ldr	r3, [pc, #452]	; (cce4 <RADIO_SetAttr+0x1c8>)
    cb20:	0004      	movs	r4, r0
    cb22:	000d      	movs	r5, r1
    cb24:	4798      	blx	r3
    cb26:	2304      	movs	r3, #4
    cb28:	2801      	cmp	r0, #1
    cb2a:	d11a      	bne.n	cb62 <RADIO_SetAttr+0x46>
    cb2c:	2c1d      	cmp	r4, #29
    cb2e:	d900      	bls.n	cb32 <RADIO_SetAttr+0x16>
    cb30:	e0d5      	b.n	ccde <RADIO_SetAttr+0x1c2>
    cb32:	0020      	movs	r0, r4
    cb34:	f005 f906 	bl	11d44 <__gnu_thumb1_case_uqi>
    cb38:	605c4844 	.word	0x605c4844
    cb3c:	7770d364 	.word	0x7770d364
    cb40:	908c8480 	.word	0x908c8480
    cb44:	a0d39c99 	.word	0xa0d39c99
    cb48:	c2bab1a8 	.word	0xc2bab1a8
    cb4c:	d3cad369 	.word	0xd3cad369
    cb50:	d30fd3d3 	.word	0xd30fd3d3
    cb54:	17d3      	.short	0x17d3
    cb56:	2303      	movs	r3, #3
    cb58:	2d00      	cmp	r5, #0
    cb5a:	d002      	beq.n	cb62 <RADIO_SetAttr+0x46>
    cb5c:	4b62      	ldr	r3, [pc, #392]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cb5e:	611d      	str	r5, [r3, #16]
    cb60:	2300      	movs	r3, #0
    cb62:	0018      	movs	r0, r3
    cb64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    cb66:	796c      	ldrb	r4, [r5, #5]
    cb68:	2c00      	cmp	r4, #0
    cb6a:	d109      	bne.n	cb80 <RADIO_SetAttr+0x64>
    cb6c:	4b5e      	ldr	r3, [pc, #376]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cb6e:	001a      	movs	r2, r3
    cb70:	649c      	str	r4, [r3, #72]	; 0x48
    cb72:	879c      	strh	r4, [r3, #60]	; 0x3c
    cb74:	87dc      	strh	r4, [r3, #62]	; 0x3e
    cb76:	3240      	adds	r2, #64	; 0x40
    cb78:	3341      	adds	r3, #65	; 0x41
    cb7a:	7014      	strb	r4, [r2, #0]
    cb7c:	701c      	strb	r4, [r3, #0]
    cb7e:	e7ef      	b.n	cb60 <RADIO_SetAttr+0x44>
    cb80:	882f      	ldrh	r7, [r5, #0]
    cb82:	2303      	movs	r3, #3
    cb84:	2f00      	cmp	r7, #0
    cb86:	d0ec      	beq.n	cb62 <RADIO_SetAttr+0x46>
    cb88:	792e      	ldrb	r6, [r5, #4]
    cb8a:	2e00      	cmp	r6, #0
    cb8c:	d0e9      	beq.n	cb62 <RADIO_SetAttr+0x46>
    cb8e:	20fa      	movs	r0, #250	; 0xfa
    cb90:	2202      	movs	r2, #2
    cb92:	5eab      	ldrsh	r3, [r5, r2]
    cb94:	0080      	lsls	r0, r0, #2
    cb96:	0031      	movs	r1, r6
    cb98:	9301      	str	r3, [sp, #4]
    cb9a:	4378      	muls	r0, r7
    cb9c:	4b53      	ldr	r3, [pc, #332]	; (ccec <RADIO_SetAttr+0x1d0>)
    cb9e:	4798      	blx	r3
    cba0:	4b53      	ldr	r3, [pc, #332]	; (ccf0 <RADIO_SetAttr+0x1d4>)
    cba2:	4798      	blx	r3
    cba4:	4b53      	ldr	r3, [pc, #332]	; (ccf4 <RADIO_SetAttr+0x1d8>)
    cba6:	4798      	blx	r3
    cba8:	466b      	mov	r3, sp
    cbaa:	4d4f      	ldr	r5, [pc, #316]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cbac:	889b      	ldrh	r3, [r3, #4]
    cbae:	64a8      	str	r0, [r5, #72]	; 0x48
    cbb0:	87eb      	strh	r3, [r5, #62]	; 0x3e
    cbb2:	002b      	movs	r3, r5
    cbb4:	87af      	strh	r7, [r5, #60]	; 0x3c
    cbb6:	3340      	adds	r3, #64	; 0x40
    cbb8:	3541      	adds	r5, #65	; 0x41
    cbba:	701e      	strb	r6, [r3, #0]
    cbbc:	702c      	strb	r4, [r5, #0]
    cbbe:	e7cf      	b.n	cb60 <RADIO_SetAttr+0x44>
    cbc0:	782a      	ldrb	r2, [r5, #0]
    cbc2:	4b49      	ldr	r3, [pc, #292]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cbc4:	761a      	strb	r2, [r3, #24]
    cbc6:	e7cb      	b.n	cb60 <RADIO_SetAttr+0x44>
    cbc8:	4b4b      	ldr	r3, [pc, #300]	; (ccf8 <RADIO_SetAttr+0x1dc>)
    cbca:	682a      	ldr	r2, [r5, #0]
    cbcc:	18d1      	adds	r1, r2, r3
    cbce:	4b4b      	ldr	r3, [pc, #300]	; (ccfc <RADIO_SetAttr+0x1e0>)
    cbd0:	4299      	cmp	r1, r3
    cbd2:	d90a      	bls.n	cbea <RADIO_SetAttr+0xce>
    cbd4:	4b4a      	ldr	r3, [pc, #296]	; (cd00 <RADIO_SetAttr+0x1e4>)
    cbd6:	494b      	ldr	r1, [pc, #300]	; (cd04 <RADIO_SetAttr+0x1e8>)
    cbd8:	18d3      	adds	r3, r2, r3
    cbda:	428b      	cmp	r3, r1
    cbdc:	d905      	bls.n	cbea <RADIO_SetAttr+0xce>
    cbde:	494a      	ldr	r1, [pc, #296]	; (cd08 <RADIO_SetAttr+0x1ec>)
    cbe0:	484a      	ldr	r0, [pc, #296]	; (cd0c <RADIO_SetAttr+0x1f0>)
    cbe2:	1851      	adds	r1, r2, r1
    cbe4:	2305      	movs	r3, #5
    cbe6:	4281      	cmp	r1, r0
    cbe8:	d8bb      	bhi.n	cb62 <RADIO_SetAttr+0x46>
    cbea:	4b3f      	ldr	r3, [pc, #252]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cbec:	601a      	str	r2, [r3, #0]
    cbee:	e7b7      	b.n	cb60 <RADIO_SetAttr+0x44>
    cbf0:	682a      	ldr	r2, [r5, #0]
    cbf2:	4b3d      	ldr	r3, [pc, #244]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cbf4:	605a      	str	r2, [r3, #4]
    cbf6:	e7b3      	b.n	cb60 <RADIO_SetAttr+0x44>
    cbf8:	882a      	ldrh	r2, [r5, #0]
    cbfa:	4b3b      	ldr	r3, [pc, #236]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cbfc:	829a      	strh	r2, [r3, #20]
    cbfe:	e7af      	b.n	cb60 <RADIO_SetAttr+0x44>
    cc00:	4b39      	ldr	r3, [pc, #228]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cc02:	782a      	ldrb	r2, [r5, #0]
    cc04:	3303      	adds	r3, #3
    cc06:	77da      	strb	r2, [r3, #31]
    cc08:	e7aa      	b.n	cb60 <RADIO_SetAttr+0x44>
    cc0a:	782a      	ldrb	r2, [r5, #0]
    cc0c:	2305      	movs	r3, #5
    cc0e:	2a01      	cmp	r2, #1
    cc10:	d8a7      	bhi.n	cb62 <RADIO_SetAttr+0x46>
    cc12:	4b35      	ldr	r3, [pc, #212]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cc14:	3304      	adds	r3, #4
    cc16:	e7f6      	b.n	cc06 <RADIO_SetAttr+0xea>
    cc18:	782a      	ldrb	r2, [r5, #0]
    cc1a:	2305      	movs	r3, #5
    cc1c:	2a01      	cmp	r2, #1
    cc1e:	d8a0      	bhi.n	cb62 <RADIO_SetAttr+0x46>
    cc20:	4b31      	ldr	r3, [pc, #196]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cc22:	3306      	adds	r3, #6
    cc24:	e7ef      	b.n	cc06 <RADIO_SetAttr+0xea>
    cc26:	782a      	ldrb	r2, [r5, #0]
    cc28:	2305      	movs	r3, #5
    cc2a:	1fd1      	subs	r1, r2, #7
    cc2c:	2902      	cmp	r1, #2
    cc2e:	d898      	bhi.n	cb62 <RADIO_SetAttr+0x46>
    cc30:	4b2d      	ldr	r3, [pc, #180]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cc32:	3336      	adds	r3, #54	; 0x36
    cc34:	701a      	strb	r2, [r3, #0]
    cc36:	e793      	b.n	cb60 <RADIO_SetAttr+0x44>
    cc38:	4b2b      	ldr	r3, [pc, #172]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cc3a:	782a      	ldrb	r2, [r5, #0]
    cc3c:	3305      	adds	r3, #5
    cc3e:	e7e2      	b.n	cc06 <RADIO_SetAttr+0xea>
    cc40:	782a      	ldrb	r2, [r5, #0]
    cc42:	2305      	movs	r3, #5
    cc44:	2a01      	cmp	r2, #1
    cc46:	d900      	bls.n	cc4a <RADIO_SetAttr+0x12e>
    cc48:	e78b      	b.n	cb62 <RADIO_SetAttr+0x46>
    cc4a:	4b27      	ldr	r3, [pc, #156]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cc4c:	3334      	adds	r3, #52	; 0x34
    cc4e:	e7f1      	b.n	cc34 <RADIO_SetAttr+0x118>
    cc50:	882a      	ldrh	r2, [r5, #0]
    cc52:	4b25      	ldr	r3, [pc, #148]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cc54:	82da      	strh	r2, [r3, #22]
    cc56:	e783      	b.n	cb60 <RADIO_SetAttr+0x44>
    cc58:	782a      	ldrb	r2, [r5, #0]
    cc5a:	2305      	movs	r3, #5
    cc5c:	1e51      	subs	r1, r2, #1
    cc5e:	2903      	cmp	r1, #3
    cc60:	d900      	bls.n	cc64 <RADIO_SetAttr+0x148>
    cc62:	e77e      	b.n	cb62 <RADIO_SetAttr+0x46>
    cc64:	4b20      	ldr	r3, [pc, #128]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cc66:	3333      	adds	r3, #51	; 0x33
    cc68:	e7e4      	b.n	cc34 <RADIO_SetAttr+0x118>
    cc6a:	4b1f      	ldr	r3, [pc, #124]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cc6c:	682a      	ldr	r2, [r5, #0]
    cc6e:	60da      	str	r2, [r3, #12]
    cc70:	682a      	ldr	r2, [r5, #0]
    cc72:	4b1d      	ldr	r3, [pc, #116]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cc74:	609a      	str	r2, [r3, #8]
    cc76:	e773      	b.n	cb60 <RADIO_SetAttr+0x44>
    cc78:	782a      	ldrb	r2, [r5, #0]
    cc7a:	2305      	movs	r3, #5
    cc7c:	2a03      	cmp	r2, #3
    cc7e:	d900      	bls.n	cc82 <RADIO_SetAttr+0x166>
    cc80:	e76f      	b.n	cb62 <RADIO_SetAttr+0x46>
    cc82:	4b19      	ldr	r3, [pc, #100]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cc84:	3337      	adds	r3, #55	; 0x37
    cc86:	e7d5      	b.n	cc34 <RADIO_SetAttr+0x118>
    cc88:	782a      	ldrb	r2, [r5, #0]
    cc8a:	2305      	movs	r3, #5
    cc8c:	1e51      	subs	r1, r2, #1
    cc8e:	2916      	cmp	r1, #22
    cc90:	d900      	bls.n	cc94 <RADIO_SetAttr+0x178>
    cc92:	e766      	b.n	cb62 <RADIO_SetAttr+0x46>
    cc94:	4b14      	ldr	r3, [pc, #80]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cc96:	3338      	adds	r3, #56	; 0x38
    cc98:	e7cc      	b.n	cc34 <RADIO_SetAttr+0x118>
    cc9a:	782a      	ldrb	r2, [r5, #0]
    cc9c:	2305      	movs	r3, #5
    cc9e:	1e51      	subs	r1, r2, #1
    cca0:	2916      	cmp	r1, #22
    cca2:	d900      	bls.n	cca6 <RADIO_SetAttr+0x18a>
    cca4:	e75d      	b.n	cb62 <RADIO_SetAttr+0x46>
    cca6:	4b10      	ldr	r3, [pc, #64]	; (cce8 <RADIO_SetAttr+0x1cc>)
    cca8:	3339      	adds	r3, #57	; 0x39
    ccaa:	e7c3      	b.n	cc34 <RADIO_SetAttr+0x118>
    ccac:	4b0e      	ldr	r3, [pc, #56]	; (cce8 <RADIO_SetAttr+0x1cc>)
    ccae:	0029      	movs	r1, r5
    ccb0:	3302      	adds	r3, #2
    ccb2:	7fda      	ldrb	r2, [r3, #31]
    ccb4:	4816      	ldr	r0, [pc, #88]	; (cd10 <RADIO_SetAttr+0x1f4>)
    ccb6:	4b17      	ldr	r3, [pc, #92]	; (cd14 <RADIO_SetAttr+0x1f8>)
    ccb8:	4798      	blx	r3
    ccba:	e751      	b.n	cb60 <RADIO_SetAttr+0x44>
    ccbc:	782b      	ldrb	r3, [r5, #0]
    ccbe:	1c1a      	adds	r2, r3, #0
    ccc0:	2b08      	cmp	r3, #8
    ccc2:	d900      	bls.n	ccc6 <RADIO_SetAttr+0x1aa>
    ccc4:	2208      	movs	r2, #8
    ccc6:	4b08      	ldr	r3, [pc, #32]	; (cce8 <RADIO_SetAttr+0x1cc>)
    ccc8:	3302      	adds	r3, #2
    ccca:	e79c      	b.n	cc06 <RADIO_SetAttr+0xea>
    cccc:	2305      	movs	r3, #5
    ccce:	782a      	ldrb	r2, [r5, #0]
    ccd0:	1fd1      	subs	r1, r2, #7
    ccd2:	4299      	cmp	r1, r3
    ccd4:	d900      	bls.n	ccd8 <RADIO_SetAttr+0x1bc>
    ccd6:	e744      	b.n	cb62 <RADIO_SetAttr+0x46>
    ccd8:	4b03      	ldr	r3, [pc, #12]	; (cce8 <RADIO_SetAttr+0x1cc>)
    ccda:	3335      	adds	r3, #53	; 0x35
    ccdc:	e7aa      	b.n	cc34 <RADIO_SetAttr+0x118>
    ccde:	2305      	movs	r3, #5
    cce0:	e73f      	b.n	cb62 <RADIO_SetAttr+0x46>
    cce2:	46c0      	nop			; (mov r8, r8)
    cce4:	0000d431 	.word	0x0000d431
    cce8:	200037b0 	.word	0x200037b0
    ccec:	00011e95 	.word	0x00011e95
    ccf0:	000130d9 	.word	0x000130d9
    ccf4:	000121f1 	.word	0x000121f1
    ccf8:	f7d58bc0 	.word	0xf7d58bc0
    ccfc:	0243d580 	.word	0x0243d580
    cd00:	e78fe580 	.word	0xe78fe580
    cd04:	06dac2c0 	.word	0x06dac2c0
    cd08:	cc9eec80 	.word	0xcc9eec80
    cd0c:	096ae380 	.word	0x096ae380
    cd10:	200037c9 	.word	0x200037c9
    cd14:	00014fe3 	.word	0x00014fe3

0000cd18 <RADIO_Init>:
    cd18:	b510      	push	{r4, lr}
    cd1a:	4b0c      	ldr	r3, [pc, #48]	; (cd4c <RADIO_Init+0x34>)
    cd1c:	4798      	blx	r3
    cd1e:	4b0c      	ldr	r3, [pc, #48]	; (cd50 <RADIO_Init+0x38>)
    cd20:	201f      	movs	r0, #31
    cd22:	4798      	blx	r3
    cd24:	4c0b      	ldr	r4, [pc, #44]	; (cd54 <RADIO_Init+0x3c>)
    cd26:	490c      	ldr	r1, [pc, #48]	; (cd58 <RADIO_Init+0x40>)
    cd28:	2001      	movs	r0, #1
    cd2a:	47a0      	blx	r4
    cd2c:	490b      	ldr	r1, [pc, #44]	; (cd5c <RADIO_Init+0x44>)
    cd2e:	2002      	movs	r0, #2
    cd30:	47a0      	blx	r4
    cd32:	490b      	ldr	r1, [pc, #44]	; (cd60 <RADIO_Init+0x48>)
    cd34:	2004      	movs	r0, #4
    cd36:	47a0      	blx	r4
    cd38:	490a      	ldr	r1, [pc, #40]	; (cd64 <RADIO_Init+0x4c>)
    cd3a:	2008      	movs	r0, #8
    cd3c:	47a0      	blx	r4
    cd3e:	490a      	ldr	r1, [pc, #40]	; (cd68 <RADIO_Init+0x50>)
    cd40:	2010      	movs	r0, #16
    cd42:	47a0      	blx	r4
    cd44:	4909      	ldr	r1, [pc, #36]	; (cd6c <RADIO_Init+0x54>)
    cd46:	2020      	movs	r0, #32
    cd48:	47a0      	blx	r4
    cd4a:	bd10      	pop	{r4, pc}
    cd4c:	0000db35 	.word	0x0000db35
    cd50:	0000d43d 	.word	0x0000d43d
    cd54:	0000b0c1 	.word	0x0000b0c1
    cd58:	0000d1c9 	.word	0x0000d1c9
    cd5c:	0000d241 	.word	0x0000d241
    cd60:	0000d2b1 	.word	0x0000d2b1
    cd64:	0000d301 	.word	0x0000d301
    cd68:	0000d329 	.word	0x0000d329
    cd6c:	0000d351 	.word	0x0000d351

0000cd70 <Radio_WriteFrequency>:
    cd70:	b570      	push	{r4, r5, r6, lr}
    cd72:	490d      	ldr	r1, [pc, #52]	; (cda8 <Radio_WriteFrequency+0x38>)
    cd74:	4d0d      	ldr	r5, [pc, #52]	; (cdac <Radio_WriteFrequency+0x3c>)
    cd76:	0006      	movs	r6, r0
    cd78:	47a8      	blx	r5
    cd7a:	4b0d      	ldr	r3, [pc, #52]	; (cdb0 <Radio_WriteFrequency+0x40>)
    cd7c:	0004      	movs	r4, r0
    cd7e:	490a      	ldr	r1, [pc, #40]	; (cda8 <Radio_WriteFrequency+0x38>)
    cd80:	0030      	movs	r0, r6
    cd82:	4798      	blx	r3
    cd84:	0208      	lsls	r0, r1, #8
    cd86:	4908      	ldr	r1, [pc, #32]	; (cda8 <Radio_WriteFrequency+0x38>)
    cd88:	47a8      	blx	r5
    cd8a:	0224      	lsls	r4, r4, #8
    cd8c:	1904      	adds	r4, r0, r4
    cd8e:	0c21      	lsrs	r1, r4, #16
    cd90:	4d08      	ldr	r5, [pc, #32]	; (cdb4 <Radio_WriteFrequency+0x44>)
    cd92:	b2c9      	uxtb	r1, r1
    cd94:	2006      	movs	r0, #6
    cd96:	47a8      	blx	r5
    cd98:	0a21      	lsrs	r1, r4, #8
    cd9a:	b2c9      	uxtb	r1, r1
    cd9c:	2007      	movs	r0, #7
    cd9e:	47a8      	blx	r5
    cda0:	b2e1      	uxtb	r1, r4
    cda2:	2008      	movs	r0, #8
    cda4:	47a8      	blx	r5
    cda6:	bd70      	pop	{r4, r5, r6, pc}
    cda8:	00003d09 	.word	0x00003d09
    cdac:	00011d81 	.word	0x00011d81
    cdb0:	00011e8d 	.word	0x00011e8d
    cdb4:	0000afed 	.word	0x0000afed

0000cdb8 <Radio_WriteConfiguration>:
    cdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cdba:	4cb0      	ldr	r4, [pc, #704]	; (d07c <Radio_WriteConfiguration+0x2c4>)
    cdbc:	2200      	movs	r2, #0
    cdbe:	0023      	movs	r3, r4
    cdc0:	b085      	sub	sp, #20
    cdc2:	9002      	str	r0, [sp, #8]
    cdc4:	3334      	adds	r3, #52	; 0x34
    cdc6:	0010      	movs	r0, r2
    cdc8:	7819      	ldrb	r1, [r3, #0]
    cdca:	4bad      	ldr	r3, [pc, #692]	; (d080 <Radio_WriteConfiguration+0x2c8>)
    cdcc:	4798      	blx	r3
    cdce:	4bad      	ldr	r3, [pc, #692]	; (d084 <Radio_WriteConfiguration+0x2cc>)
    cdd0:	6820      	ldr	r0, [r4, #0]
    cdd2:	4798      	blx	r3
    cdd4:	1ce3      	adds	r3, r4, #3
    cdd6:	1d62      	adds	r2, r4, #5
    cdd8:	7fdb      	ldrb	r3, [r3, #31]
    cdda:	7fd2      	ldrb	r2, [r2, #31]
    cddc:	b25b      	sxtb	r3, r3
    cdde:	4eaa      	ldr	r6, [pc, #680]	; (d088 <Radio_WriteConfiguration+0x2d0>)
    cde0:	4daa      	ldr	r5, [pc, #680]	; (d08c <Radio_WriteConfiguration+0x2d4>)
    cde2:	2a00      	cmp	r2, #0
    cde4:	d000      	beq.n	cde8 <Radio_WriteConfiguration+0x30>
    cde6:	e0fc      	b.n	cfe2 <Radio_WriteConfiguration+0x22a>
    cde8:	1c1f      	adds	r7, r3, #0
    cdea:	2b0f      	cmp	r3, #15
    cdec:	dc00      	bgt.n	cdf0 <Radio_WriteConfiguration+0x38>
    cdee:	e0ec      	b.n	cfca <Radio_WriteConfiguration+0x212>
    cdf0:	270f      	movs	r7, #15
    cdf2:	b27b      	sxtb	r3, r7
    cdf4:	204d      	movs	r0, #77	; 0x4d
    cdf6:	9301      	str	r3, [sp, #4]
    cdf8:	47b0      	blx	r6
    cdfa:	21f8      	movs	r1, #248	; 0xf8
    cdfc:	4008      	ands	r0, r1
    cdfe:	39f4      	subs	r1, #244	; 0xf4
    ce00:	4301      	orrs	r1, r0
    ce02:	204d      	movs	r0, #77	; 0x4d
    ce04:	47a8      	blx	r5
    ce06:	b27b      	sxtb	r3, r7
    ce08:	2b00      	cmp	r3, #0
    ce0a:	db00      	blt.n	ce0e <Radio_WriteConfiguration+0x56>
    ce0c:	e0e4      	b.n	cfd8 <Radio_WriteConfiguration+0x220>
    ce0e:	3703      	adds	r7, #3
    ce10:	b2f9      	uxtb	r1, r7
    ce12:	2720      	movs	r7, #32
    ce14:	4339      	orrs	r1, r7
    ce16:	2009      	movs	r0, #9
    ce18:	47a8      	blx	r5
    ce1a:	0023      	movs	r3, r4
    ce1c:	3334      	adds	r3, #52	; 0x34
    ce1e:	781f      	ldrb	r7, [r3, #0]
    ce20:	2f01      	cmp	r7, #1
    ce22:	d000      	beq.n	ce26 <Radio_WriteConfiguration+0x6e>
    ce24:	e144      	b.n	d0b0 <Radio_WriteConfiguration+0x2f8>
    ce26:	7e21      	ldrb	r1, [r4, #24]
    ce28:	2039      	movs	r0, #57	; 0x39
    ce2a:	47a8      	blx	r5
    ce2c:	4b98      	ldr	r3, [pc, #608]	; (d090 <Radio_WriteConfiguration+0x2d8>)
    ce2e:	201d      	movs	r0, #29
    ce30:	7819      	ldrb	r1, [r3, #0]
    ce32:	0023      	movs	r3, r4
    ce34:	3333      	adds	r3, #51	; 0x33
    ce36:	781b      	ldrb	r3, [r3, #0]
    ce38:	0109      	lsls	r1, r1, #4
    ce3a:	005b      	lsls	r3, r3, #1
    ce3c:	4319      	orrs	r1, r3
    ce3e:	1de3      	adds	r3, r4, #7
    ce40:	7fdb      	ldrb	r3, [r3, #31]
    ce42:	401f      	ands	r7, r3
    ce44:	4339      	orrs	r1, r7
    ce46:	b2c9      	uxtb	r1, r1
    ce48:	47a8      	blx	r5
    ce4a:	1d23      	adds	r3, r4, #4
    ce4c:	7fd9      	ldrb	r1, [r3, #31]
    ce4e:	2304      	movs	r3, #4
    ce50:	0089      	lsls	r1, r1, #2
    ce52:	4019      	ands	r1, r3
    ce54:	0023      	movs	r3, r4
    ce56:	3335      	adds	r3, #53	; 0x35
    ce58:	781b      	ldrb	r3, [r3, #0]
    ce5a:	201e      	movs	r0, #30
    ce5c:	011b      	lsls	r3, r3, #4
    ce5e:	4319      	orrs	r1, r3
    ce60:	9b02      	ldr	r3, [sp, #8]
    ce62:	059b      	lsls	r3, r3, #22
    ce64:	0f9b      	lsrs	r3, r3, #30
    ce66:	4319      	orrs	r1, r3
    ce68:	b2c9      	uxtb	r1, r1
    ce6a:	47a8      	blx	r5
    ce6c:	2300      	movs	r3, #0
    ce6e:	8ae1      	ldrh	r1, [r4, #22]
    ce70:	4299      	cmp	r1, r3
    ce72:	d011      	beq.n	ce98 <Radio_WriteConfiguration+0xe0>
    ce74:	4a86      	ldr	r2, [pc, #536]	; (d090 <Radio_WriteConfiguration+0x2d8>)
    ce76:	7812      	ldrb	r2, [r2, #0]
    ce78:	2a08      	cmp	r2, #8
    ce7a:	d100      	bne.n	ce7e <Radio_WriteConfiguration+0xc6>
    ce7c:	e0e4      	b.n	d048 <Radio_WriteConfiguration+0x290>
    ce7e:	2a09      	cmp	r2, #9
    ce80:	d100      	bne.n	ce84 <Radio_WriteConfiguration+0xcc>
    ce82:	e0e3      	b.n	d04c <Radio_WriteConfiguration+0x294>
    ce84:	2a07      	cmp	r2, #7
    ce86:	d000      	beq.n	ce8a <Radio_WriteConfiguration+0xd2>
    ce88:	e0e3      	b.n	d052 <Radio_WriteConfiguration+0x29a>
    ce8a:	337d      	adds	r3, #125	; 0x7d
    ce8c:	4359      	muls	r1, r3
    ce8e:	0023      	movs	r3, r4
    ce90:	3335      	adds	r3, #53	; 0x35
    ce92:	781b      	ldrb	r3, [r3, #0]
    ce94:	40d9      	lsrs	r1, r3
    ce96:	000b      	movs	r3, r1
    ce98:	b2d9      	uxtb	r1, r3
    ce9a:	2024      	movs	r0, #36	; 0x24
    ce9c:	4d7b      	ldr	r5, [pc, #492]	; (d08c <Radio_WriteConfiguration+0x2d4>)
    ce9e:	47a8      	blx	r5
    cea0:	466b      	mov	r3, sp
    cea2:	201f      	movs	r0, #31
    cea4:	7a19      	ldrb	r1, [r3, #8]
    cea6:	47a8      	blx	r5
    cea8:	2026      	movs	r0, #38	; 0x26
    ceaa:	47b0      	blx	r6
    ceac:	0023      	movs	r3, r4
    ceae:	3335      	adds	r3, #53	; 0x35
    ceb0:	781b      	ldrb	r3, [r3, #0]
    ceb2:	2b0c      	cmp	r3, #12
    ceb4:	d105      	bne.n	cec2 <Radio_WriteConfiguration+0x10a>
    ceb6:	0023      	movs	r3, r4
    ceb8:	3336      	adds	r3, #54	; 0x36
    ceba:	781b      	ldrb	r3, [r3, #0]
    cebc:	3b07      	subs	r3, #7
    cebe:	2b01      	cmp	r3, #1
    cec0:	d906      	bls.n	ced0 <Radio_WriteConfiguration+0x118>
    cec2:	6b62      	ldr	r2, [r4, #52]	; 0x34
    cec4:	4b73      	ldr	r3, [pc, #460]	; (d094 <Radio_WriteConfiguration+0x2dc>)
    cec6:	4013      	ands	r3, r2
    cec8:	4a73      	ldr	r2, [pc, #460]	; (d098 <Radio_WriteConfiguration+0x2e0>)
    ceca:	4293      	cmp	r3, r2
    cecc:	d000      	beq.n	ced0 <Radio_WriteConfiguration+0x118>
    cece:	e0c2      	b.n	d056 <Radio_WriteConfiguration+0x29e>
    ced0:	2108      	movs	r1, #8
    ced2:	4308      	orrs	r0, r1
    ced4:	b2c0      	uxtb	r0, r0
    ced6:	2104      	movs	r1, #4
    ced8:	4301      	orrs	r1, r0
    ceda:	2026      	movs	r0, #38	; 0x26
    cedc:	47a8      	blx	r5
    cede:	2031      	movs	r0, #49	; 0x31
    cee0:	47b0      	blx	r6
    cee2:	21f8      	movs	r1, #248	; 0xf8
    cee4:	4008      	ands	r0, r1
    cee6:	39f5      	subs	r1, #245	; 0xf5
    cee8:	4301      	orrs	r1, r0
    ceea:	2031      	movs	r0, #49	; 0x31
    ceec:	47a8      	blx	r5
    ceee:	210a      	movs	r1, #10
    cef0:	2037      	movs	r0, #55	; 0x37
    cef2:	47a8      	blx	r5
    cef4:	0023      	movs	r3, r4
    cef6:	3331      	adds	r3, #49	; 0x31
    cef8:	781b      	ldrb	r3, [r3, #0]
    cefa:	2b12      	cmp	r3, #18
    cefc:	d11e      	bne.n	cf3c <Radio_WriteConfiguration+0x184>
    cefe:	0023      	movs	r3, r4
    cf00:	3336      	adds	r3, #54	; 0x36
    cf02:	781b      	ldrb	r3, [r3, #0]
    cf04:	3b07      	subs	r3, #7
    cf06:	2b01      	cmp	r3, #1
    cf08:	d80b      	bhi.n	cf22 <Radio_WriteConfiguration+0x16a>
    cf0a:	2031      	movs	r0, #49	; 0x31
    cf0c:	47b0      	blx	r6
    cf0e:	217f      	movs	r1, #127	; 0x7f
    cf10:	4001      	ands	r1, r0
    cf12:	2031      	movs	r0, #49	; 0x31
    cf14:	47a8      	blx	r5
    cf16:	2140      	movs	r1, #64	; 0x40
    cf18:	202f      	movs	r0, #47	; 0x2f
    cf1a:	47a8      	blx	r5
    cf1c:	2100      	movs	r1, #0
    cf1e:	2030      	movs	r0, #48	; 0x30
    cf20:	47a8      	blx	r5
    cf22:	0023      	movs	r3, r4
    cf24:	3336      	adds	r3, #54	; 0x36
    cf26:	781b      	ldrb	r3, [r3, #0]
    cf28:	2b09      	cmp	r3, #9
    cf2a:	d107      	bne.n	cf3c <Radio_WriteConfiguration+0x184>
    cf2c:	2031      	movs	r0, #49	; 0x31
    cf2e:	47b0      	blx	r6
    cf30:	2180      	movs	r1, #128	; 0x80
    cf32:	4249      	negs	r1, r1
    cf34:	4301      	orrs	r1, r0
    cf36:	b2c9      	uxtb	r1, r1
    cf38:	2031      	movs	r0, #49	; 0x31
    cf3a:	47a8      	blx	r5
    cf3c:	2033      	movs	r0, #51	; 0x33
    cf3e:	47b0      	blx	r6
    cf40:	1da3      	adds	r3, r4, #6
    cf42:	7fd9      	ldrb	r1, [r3, #31]
    cf44:	2340      	movs	r3, #64	; 0x40
    cf46:	0189      	lsls	r1, r1, #6
    cf48:	4398      	bics	r0, r3
    cf4a:	4019      	ands	r1, r3
    cf4c:	4301      	orrs	r1, r0
    cf4e:	b2c9      	uxtb	r1, r1
    cf50:	2033      	movs	r0, #51	; 0x33
    cf52:	47a8      	blx	r5
    cf54:	8aa1      	ldrh	r1, [r4, #20]
    cf56:	2020      	movs	r0, #32
    cf58:	0a09      	lsrs	r1, r1, #8
    cf5a:	47a8      	blx	r5
    cf5c:	7d21      	ldrb	r1, [r4, #20]
    cf5e:	2021      	movs	r0, #33	; 0x21
    cf60:	47a8      	blx	r5
    cf62:	2100      	movs	r1, #0
    cf64:	200d      	movs	r0, #13
    cf66:	47a8      	blx	r5
    cf68:	2100      	movs	r1, #0
    cf6a:	200e      	movs	r0, #14
    cf6c:	47a8      	blx	r5
    cf6e:	2100      	movs	r1, #0
    cf70:	200f      	movs	r0, #15
    cf72:	47a8      	blx	r5
    cf74:	0023      	movs	r3, r4
    cf76:	3331      	adds	r3, #49	; 0x31
    cf78:	781b      	ldrb	r3, [r3, #0]
    cf7a:	2b12      	cmp	r3, #18
    cf7c:	d120      	bne.n	cfc0 <Radio_WriteConfiguration+0x208>
    cf7e:	0023      	movs	r3, r4
    cf80:	3336      	adds	r3, #54	; 0x36
    cf82:	781b      	ldrb	r3, [r3, #0]
    cf84:	2b09      	cmp	r3, #9
    cf86:	d000      	beq.n	cf8a <Radio_WriteConfiguration+0x1d2>
    cf88:	e072      	b.n	d070 <Radio_WriteConfiguration+0x2b8>
    cf8a:	4a44      	ldr	r2, [pc, #272]	; (d09c <Radio_WriteConfiguration+0x2e4>)
    cf8c:	6823      	ldr	r3, [r4, #0]
    cf8e:	1899      	adds	r1, r3, r2
    cf90:	4a43      	ldr	r2, [pc, #268]	; (d0a0 <Radio_WriteConfiguration+0x2e8>)
    cf92:	4291      	cmp	r1, r2
    cf94:	d862      	bhi.n	d05c <Radio_WriteConfiguration+0x2a4>
    cf96:	2102      	movs	r1, #2
    cf98:	2036      	movs	r0, #54	; 0x36
    cf9a:	47a8      	blx	r5
    cf9c:	2164      	movs	r1, #100	; 0x64
    cf9e:	203a      	movs	r0, #58	; 0x3a
    cfa0:	47a8      	blx	r5
    cfa2:	0023      	movs	r3, r4
    cfa4:	3336      	adds	r3, #54	; 0x36
    cfa6:	781b      	ldrb	r3, [r3, #0]
    cfa8:	2165      	movs	r1, #101	; 0x65
    cfaa:	203a      	movs	r0, #58	; 0x3a
    cfac:	2b09      	cmp	r3, #9
    cfae:	d162      	bne.n	d076 <Radio_WriteConfiguration+0x2be>
    cfb0:	3406      	adds	r4, #6
    cfb2:	7fe3      	ldrb	r3, [r4, #31]
    cfb4:	2b01      	cmp	r3, #1
    cfb6:	d15e      	bne.n	d076 <Radio_WriteConfiguration+0x2be>
    cfb8:	47a8      	blx	r5
    cfba:	2119      	movs	r1, #25
    cfbc:	203b      	movs	r0, #59	; 0x3b
    cfbe:	47a8      	blx	r5
    cfc0:	21ff      	movs	r1, #255	; 0xff
    cfc2:	2012      	movs	r0, #18
    cfc4:	47a8      	blx	r5
    cfc6:	b005      	add	sp, #20
    cfc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cfca:	b25b      	sxtb	r3, r3
    cfcc:	3303      	adds	r3, #3
    cfce:	db00      	blt.n	cfd2 <Radio_WriteConfiguration+0x21a>
    cfd0:	e70f      	b.n	cdf2 <Radio_WriteConfiguration+0x3a>
    cfd2:	4b34      	ldr	r3, [pc, #208]	; (d0a4 <Radio_WriteConfiguration+0x2ec>)
    cfd4:	781f      	ldrb	r7, [r3, #0]
    cfd6:	e70c      	b.n	cdf2 <Radio_WriteConfiguration+0x3a>
    cfd8:	2170      	movs	r1, #112	; 0x70
    cfda:	9b01      	ldr	r3, [sp, #4]
    cfdc:	4319      	orrs	r1, r3
    cfde:	b2c9      	uxtb	r1, r1
    cfe0:	e719      	b.n	ce16 <Radio_WriteConfiguration+0x5e>
    cfe2:	2b01      	cmp	r3, #1
    cfe4:	dd07      	ble.n	cff6 <Radio_WriteConfiguration+0x23e>
    cfe6:	2714      	movs	r7, #20
    cfe8:	2b13      	cmp	r3, #19
    cfea:	dc06      	bgt.n	cffa <Radio_WriteConfiguration+0x242>
    cfec:	1c1f      	adds	r7, r3, #0
    cfee:	2b11      	cmp	r3, #17
    cff0:	dd02      	ble.n	cff8 <Radio_WriteConfiguration+0x240>
    cff2:	2711      	movs	r7, #17
    cff4:	e000      	b.n	cff8 <Radio_WriteConfiguration+0x240>
    cff6:	2702      	movs	r7, #2
    cff8:	b27f      	sxtb	r7, r7
    cffa:	200b      	movs	r0, #11
    cffc:	47b0      	blx	r6
    cffe:	9003      	str	r0, [sp, #12]
    d000:	204d      	movs	r0, #77	; 0x4d
    d002:	47b0      	blx	r6
    d004:	2307      	movs	r3, #7
    d006:	4398      	bics	r0, r3
    d008:	b2c1      	uxtb	r1, r0
    d00a:	2f14      	cmp	r7, #20
    d00c:	d112      	bne.n	d034 <Radio_WriteConfiguration+0x27c>
    d00e:	4319      	orrs	r1, r3
    d010:	9b03      	ldr	r3, [sp, #12]
    d012:	37cb      	adds	r7, #203	; 0xcb
    d014:	403b      	ands	r3, r7
    d016:	001f      	movs	r7, r3
    d018:	230f      	movs	r3, #15
    d01a:	9301      	str	r3, [sp, #4]
    d01c:	204d      	movs	r0, #77	; 0x4d
    d01e:	47a8      	blx	r5
    d020:	2180      	movs	r1, #128	; 0x80
    d022:	9b01      	ldr	r3, [sp, #4]
    d024:	4249      	negs	r1, r1
    d026:	4319      	orrs	r1, r3
    d028:	b2c9      	uxtb	r1, r1
    d02a:	2009      	movs	r0, #9
    d02c:	47a8      	blx	r5
    d02e:	0039      	movs	r1, r7
    d030:	200b      	movs	r0, #11
    d032:	e6f1      	b.n	ce18 <Radio_WriteConfiguration+0x60>
    d034:	3f02      	subs	r7, #2
    d036:	b27b      	sxtb	r3, r7
    d038:	2720      	movs	r7, #32
    d03a:	2004      	movs	r0, #4
    d03c:	9301      	str	r3, [sp, #4]
    d03e:	9b03      	ldr	r3, [sp, #12]
    d040:	4301      	orrs	r1, r0
    d042:	431f      	orrs	r7, r3
    d044:	b2ff      	uxtb	r7, r7
    d046:	e7e9      	b.n	d01c <Radio_WriteConfiguration+0x264>
    d048:	23fa      	movs	r3, #250	; 0xfa
    d04a:	e71f      	b.n	ce8c <Radio_WriteConfiguration+0xd4>
    d04c:	23fa      	movs	r3, #250	; 0xfa
    d04e:	005b      	lsls	r3, r3, #1
    d050:	e71c      	b.n	ce8c <Radio_WriteConfiguration+0xd4>
    d052:	0019      	movs	r1, r3
    d054:	e71b      	b.n	ce8e <Radio_WriteConfiguration+0xd6>
    d056:	21f7      	movs	r1, #247	; 0xf7
    d058:	4008      	ands	r0, r1
    d05a:	e73c      	b.n	ced6 <Radio_WriteConfiguration+0x11e>
    d05c:	4a12      	ldr	r2, [pc, #72]	; (d0a8 <Radio_WriteConfiguration+0x2f0>)
    d05e:	189b      	adds	r3, r3, r2
    d060:	4a12      	ldr	r2, [pc, #72]	; (d0ac <Radio_WriteConfiguration+0x2f4>)
    d062:	4293      	cmp	r3, r2
    d064:	d804      	bhi.n	d070 <Radio_WriteConfiguration+0x2b8>
    d066:	2102      	movs	r1, #2
    d068:	2036      	movs	r0, #54	; 0x36
    d06a:	47a8      	blx	r5
    d06c:	217f      	movs	r1, #127	; 0x7f
    d06e:	e796      	b.n	cf9e <Radio_WriteConfiguration+0x1e6>
    d070:	2103      	movs	r1, #3
    d072:	2036      	movs	r0, #54	; 0x36
    d074:	e794      	b.n	cfa0 <Radio_WriteConfiguration+0x1e8>
    d076:	47a8      	blx	r5
    d078:	211d      	movs	r1, #29
    d07a:	e79f      	b.n	cfbc <Radio_WriteConfiguration+0x204>
    d07c:	200037b0 	.word	0x200037b0
    d080:	0000c215 	.word	0x0000c215
    d084:	0000cd71 	.word	0x0000cd71
    d088:	0000b015 	.word	0x0000b015
    d08c:	0000afed 	.word	0x0000afed
    d090:	200037e6 	.word	0x200037e6
    d094:	00ffff00 	.word	0x00ffff00
    d098:	00070b00 	.word	0x00070b00
    d09c:	cc9eec80 	.word	0xcc9eec80
    d0a0:	096ae380 	.word	0x096ae380
    d0a4:	00016d60 	.word	0x00016d60
    d0a8:	e78fe580 	.word	0xe78fe580
    d0ac:	06dac2c0 	.word	0x06dac2c0
    d0b0:	6863      	ldr	r3, [r4, #4]
    d0b2:	492c      	ldr	r1, [pc, #176]	; (d164 <Radio_WriteConfiguration+0x3ac>)
    d0b4:	0218      	lsls	r0, r3, #8
    d0b6:	4b2c      	ldr	r3, [pc, #176]	; (d168 <Radio_WriteConfiguration+0x3b0>)
    d0b8:	4798      	blx	r3
    d0ba:	0007      	movs	r7, r0
    d0bc:	0a01      	lsrs	r1, r0, #8
    d0be:	b2c9      	uxtb	r1, r1
    d0c0:	2004      	movs	r0, #4
    d0c2:	47a8      	blx	r5
    d0c4:	b2f9      	uxtb	r1, r7
    d0c6:	2005      	movs	r0, #5
    d0c8:	47a8      	blx	r5
    d0ca:	4b27      	ldr	r3, [pc, #156]	; (d168 <Radio_WriteConfiguration+0x3b0>)
    d0cc:	68a1      	ldr	r1, [r4, #8]
    d0ce:	4827      	ldr	r0, [pc, #156]	; (d16c <Radio_WriteConfiguration+0x3b4>)
    d0d0:	4798      	blx	r3
    d0d2:	0007      	movs	r7, r0
    d0d4:	0a01      	lsrs	r1, r0, #8
    d0d6:	b2c9      	uxtb	r1, r1
    d0d8:	2002      	movs	r0, #2
    d0da:	47a8      	blx	r5
    d0dc:	b2f9      	uxtb	r1, r7
    d0de:	2003      	movs	r0, #3
    d0e0:	47a8      	blx	r5
    d0e2:	2100      	movs	r1, #0
    d0e4:	205d      	movs	r0, #93	; 0x5d
    d0e6:	47a8      	blx	r5
    d0e8:	8aa1      	ldrh	r1, [r4, #20]
    d0ea:	2025      	movs	r0, #37	; 0x25
    d0ec:	0a09      	lsrs	r1, r1, #8
    d0ee:	47a8      	blx	r5
    d0f0:	7d21      	ldrb	r1, [r4, #20]
    d0f2:	2026      	movs	r0, #38	; 0x26
    d0f4:	47a8      	blx	r5
    d0f6:	219e      	movs	r1, #158	; 0x9e
    d0f8:	200d      	movs	r0, #13
    d0fa:	47a8      	blx	r5
    d0fc:	21bf      	movs	r1, #191	; 0xbf
    d0fe:	2035      	movs	r0, #53	; 0x35
    d100:	47a8      	blx	r5
    d102:	200a      	movs	r0, #10
    d104:	47b0      	blx	r6
    d106:	0023      	movs	r3, r4
    d108:	3337      	adds	r3, #55	; 0x37
    d10a:	7819      	ldrb	r1, [r3, #0]
    d10c:	2360      	movs	r3, #96	; 0x60
    d10e:	0149      	lsls	r1, r1, #5
    d110:	4398      	bics	r0, r3
    d112:	4301      	orrs	r1, r0
    d114:	b2c9      	uxtb	r1, r1
    d116:	200a      	movs	r0, #10
    d118:	47a8      	blx	r5
    d11a:	1d23      	adds	r3, r4, #4
    d11c:	7fdb      	ldrb	r3, [r3, #31]
    d11e:	21c0      	movs	r1, #192	; 0xc0
    d120:	2b00      	cmp	r3, #0
    d122:	d000      	beq.n	d126 <Radio_WriteConfiguration+0x36e>
    d124:	3110      	adds	r1, #16
    d126:	2030      	movs	r0, #48	; 0x30
    d128:	47a8      	blx	r5
    d12a:	2600      	movs	r6, #0
    d12c:	1ca3      	adds	r3, r4, #2
    d12e:	7fd9      	ldrb	r1, [r3, #31]
    d130:	428e      	cmp	r6, r1
    d132:	d30d      	bcc.n	d150 <Radio_WriteConfiguration+0x398>
    d134:	2900      	cmp	r1, #0
    d136:	d003      	beq.n	d140 <Radio_WriteConfiguration+0x388>
    d138:	2310      	movs	r3, #16
    d13a:	3901      	subs	r1, #1
    d13c:	4319      	orrs	r1, r3
    d13e:	b2c9      	uxtb	r1, r1
    d140:	2027      	movs	r0, #39	; 0x27
    d142:	47a8      	blx	r5
    d144:	21ff      	movs	r1, #255	; 0xff
    d146:	203e      	movs	r0, #62	; 0x3e
    d148:	47a8      	blx	r5
    d14a:	21ff      	movs	r1, #255	; 0xff
    d14c:	203f      	movs	r0, #63	; 0x3f
    d14e:	e739      	b.n	cfc4 <Radio_WriteConfiguration+0x20c>
    d150:	0030      	movs	r0, r6
    d152:	19a3      	adds	r3, r4, r6
    d154:	3028      	adds	r0, #40	; 0x28
    d156:	7e59      	ldrb	r1, [r3, #25]
    d158:	b2c0      	uxtb	r0, r0
    d15a:	3601      	adds	r6, #1
    d15c:	47a8      	blx	r5
    d15e:	b2f6      	uxtb	r6, r6
    d160:	e7e4      	b.n	d12c <Radio_WriteConfiguration+0x374>
    d162:	46c0      	nop			; (mov r8, r8)
    d164:	00003d09 	.word	0x00003d09
    d168:	00011d81 	.word	0x00011d81
    d16c:	01e84800 	.word	0x01e84800

0000d170 <RADIO_getMappingAndOpmode>:
    d170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d172:	0006      	movs	r6, r0
    d174:	4d06      	ldr	r5, [pc, #24]	; (d190 <RADIO_getMappingAndOpmode+0x20>)
    d176:	2040      	movs	r0, #64	; 0x40
    d178:	001f      	movs	r7, r3
    d17a:	0014      	movs	r4, r2
    d17c:	9101      	str	r1, [sp, #4]
    d17e:	47a8      	blx	r5
    d180:	4004      	ands	r4, r0
    d182:	413c      	asrs	r4, r7
    d184:	2001      	movs	r0, #1
    d186:	7034      	strb	r4, [r6, #0]
    d188:	47a8      	blx	r5
    d18a:	9b01      	ldr	r3, [sp, #4]
    d18c:	7018      	strb	r0, [r3, #0]
    d18e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    d190:	0000b015 	.word	0x0000b015

0000d194 <RADIO_UnhandledInterrupt.part.0>:
    d194:	b510      	push	{r4, lr}
    d196:	21ff      	movs	r1, #255	; 0xff
    d198:	2012      	movs	r0, #18
    d19a:	4b01      	ldr	r3, [pc, #4]	; (d1a0 <RADIO_UnhandledInterrupt.part.0+0xc>)
    d19c:	4798      	blx	r3
    d19e:	bd10      	pop	{r4, pc}
    d1a0:	0000afed 	.word	0x0000afed

0000d1a4 <RADIO_UnhandledInterrupt>:
    d1a4:	b510      	push	{r4, lr}
    d1a6:	2801      	cmp	r0, #1
    d1a8:	d102      	bne.n	d1b0 <RADIO_UnhandledInterrupt+0xc>
    d1aa:	4b05      	ldr	r3, [pc, #20]	; (d1c0 <RADIO_UnhandledInterrupt+0x1c>)
    d1ac:	4798      	blx	r3
    d1ae:	bd10      	pop	{r4, pc}
    d1b0:	21ff      	movs	r1, #255	; 0xff
    d1b2:	203e      	movs	r0, #62	; 0x3e
    d1b4:	4c03      	ldr	r4, [pc, #12]	; (d1c4 <RADIO_UnhandledInterrupt+0x20>)
    d1b6:	47a0      	blx	r4
    d1b8:	21ff      	movs	r1, #255	; 0xff
    d1ba:	203f      	movs	r0, #63	; 0x3f
    d1bc:	47a0      	blx	r4
    d1be:	e7f6      	b.n	d1ae <RADIO_UnhandledInterrupt+0xa>
    d1c0:	0000d195 	.word	0x0000d195
    d1c4:	0000afed 	.word	0x0000afed

0000d1c8 <RADIO_DIO0>:
    d1c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d1ca:	466b      	mov	r3, sp
    d1cc:	1ddc      	adds	r4, r3, #7
    d1ce:	1d9d      	adds	r5, r3, #6
    d1d0:	22c0      	movs	r2, #192	; 0xc0
    d1d2:	2306      	movs	r3, #6
    d1d4:	0028      	movs	r0, r5
    d1d6:	0021      	movs	r1, r4
    d1d8:	4e12      	ldr	r6, [pc, #72]	; (d224 <RADIO_DIO0+0x5c>)
    d1da:	47b0      	blx	r6
    d1dc:	7823      	ldrb	r3, [r4, #0]
    d1de:	7828      	ldrb	r0, [r5, #0]
    d1e0:	b25a      	sxtb	r2, r3
    d1e2:	b2c0      	uxtb	r0, r0
    d1e4:	2a00      	cmp	r2, #0
    d1e6:	da0b      	bge.n	d200 <RADIO_DIO0+0x38>
    d1e8:	2800      	cmp	r0, #0
    d1ea:	d004      	beq.n	d1f6 <RADIO_DIO0+0x2e>
    d1ec:	2801      	cmp	r0, #1
    d1ee:	d005      	beq.n	d1fc <RADIO_DIO0+0x34>
    d1f0:	4b0d      	ldr	r3, [pc, #52]	; (d228 <RADIO_DIO0+0x60>)
    d1f2:	4798      	blx	r3
    d1f4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    d1f6:	4b0d      	ldr	r3, [pc, #52]	; (d22c <RADIO_DIO0+0x64>)
    d1f8:	4798      	blx	r3
    d1fa:	e7fb      	b.n	d1f4 <RADIO_DIO0+0x2c>
    d1fc:	4b0c      	ldr	r3, [pc, #48]	; (d230 <RADIO_DIO0+0x68>)
    d1fe:	e7fb      	b.n	d1f8 <RADIO_DIO0+0x30>
    d200:	2800      	cmp	r0, #0
    d202:	d10a      	bne.n	d21a <RADIO_DIO0+0x52>
    d204:	2207      	movs	r2, #7
    d206:	4013      	ands	r3, r2
    d208:	7023      	strb	r3, [r4, #0]
    d20a:	2b03      	cmp	r3, #3
    d20c:	d101      	bne.n	d212 <RADIO_DIO0+0x4a>
    d20e:	4b09      	ldr	r3, [pc, #36]	; (d234 <RADIO_DIO0+0x6c>)
    d210:	e7f2      	b.n	d1f8 <RADIO_DIO0+0x30>
    d212:	2b05      	cmp	r3, #5
    d214:	d102      	bne.n	d21c <RADIO_DIO0+0x54>
    d216:	4b08      	ldr	r3, [pc, #32]	; (d238 <RADIO_DIO0+0x70>)
    d218:	e7ee      	b.n	d1f8 <RADIO_DIO0+0x30>
    d21a:	2000      	movs	r0, #0
    d21c:	4b07      	ldr	r3, [pc, #28]	; (d23c <RADIO_DIO0+0x74>)
    d21e:	4798      	blx	r3
    d220:	e7e8      	b.n	d1f4 <RADIO_DIO0+0x2c>
    d222:	46c0      	nop			; (mov r8, r8)
    d224:	0000d171 	.word	0x0000d171
    d228:	0000d195 	.word	0x0000d195
    d22c:	0000d859 	.word	0x0000d859
    d230:	0000d75d 	.word	0x0000d75d
    d234:	0000d7d9 	.word	0x0000d7d9
    d238:	0000d8d5 	.word	0x0000d8d5
    d23c:	0000d1a5 	.word	0x0000d1a5

0000d240 <RADIO_DIO1>:
    d240:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d242:	466b      	mov	r3, sp
    d244:	1ddc      	adds	r4, r3, #7
    d246:	1d9d      	adds	r5, r3, #6
    d248:	2230      	movs	r2, #48	; 0x30
    d24a:	2304      	movs	r3, #4
    d24c:	0021      	movs	r1, r4
    d24e:	0028      	movs	r0, r5
    d250:	4e11      	ldr	r6, [pc, #68]	; (d298 <RADIO_DIO1+0x58>)
    d252:	47b0      	blx	r6
    d254:	7822      	ldrb	r2, [r4, #0]
    d256:	782b      	ldrb	r3, [r5, #0]
    d258:	b251      	sxtb	r1, r2
    d25a:	2900      	cmp	r1, #0
    d25c:	da0c      	bge.n	d278 <RADIO_DIO1+0x38>
    d25e:	b2db      	uxtb	r3, r3
    d260:	2b00      	cmp	r3, #0
    d262:	d004      	beq.n	d26e <RADIO_DIO1+0x2e>
    d264:	2b01      	cmp	r3, #1
    d266:	d005      	beq.n	d274 <RADIO_DIO1+0x34>
    d268:	4b0c      	ldr	r3, [pc, #48]	; (d29c <RADIO_DIO1+0x5c>)
    d26a:	4798      	blx	r3
    d26c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    d26e:	4b0c      	ldr	r3, [pc, #48]	; (d2a0 <RADIO_DIO1+0x60>)
    d270:	4798      	blx	r3
    d272:	e7fb      	b.n	d26c <RADIO_DIO1+0x2c>
    d274:	4b0b      	ldr	r3, [pc, #44]	; (d2a4 <RADIO_DIO1+0x64>)
    d276:	e7fb      	b.n	d270 <RADIO_DIO1+0x30>
    d278:	2107      	movs	r1, #7
    d27a:	b2db      	uxtb	r3, r3
    d27c:	400a      	ands	r2, r1
    d27e:	7022      	strb	r2, [r4, #0]
    d280:	2b00      	cmp	r3, #0
    d282:	d005      	beq.n	d290 <RADIO_DIO1+0x50>
    d284:	2b01      	cmp	r3, #1
    d286:	d1f1      	bne.n	d26c <RADIO_DIO1+0x2c>
    d288:	2a03      	cmp	r2, #3
    d28a:	d1ef      	bne.n	d26c <RADIO_DIO1+0x2c>
    d28c:	4b06      	ldr	r3, [pc, #24]	; (d2a8 <RADIO_DIO1+0x68>)
    d28e:	e7ef      	b.n	d270 <RADIO_DIO1+0x30>
    d290:	4b06      	ldr	r3, [pc, #24]	; (d2ac <RADIO_DIO1+0x6c>)
    d292:	2a05      	cmp	r2, #5
    d294:	d1ea      	bne.n	d26c <RADIO_DIO1+0x2c>
    d296:	e7eb      	b.n	d270 <RADIO_DIO1+0x30>
    d298:	0000d171 	.word	0x0000d171
    d29c:	0000d195 	.word	0x0000d195
    d2a0:	0000d6e1 	.word	0x0000d6e1
    d2a4:	0000c2f9 	.word	0x0000c2f9
    d2a8:	0000d5fd 	.word	0x0000d5fd
    d2ac:	0000d561 	.word	0x0000d561

0000d2b0 <RADIO_DIO2>:
    d2b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d2b2:	466b      	mov	r3, sp
    d2b4:	1ddc      	adds	r4, r3, #7
    d2b6:	1d9d      	adds	r5, r3, #6
    d2b8:	220c      	movs	r2, #12
    d2ba:	2302      	movs	r3, #2
    d2bc:	0021      	movs	r1, r4
    d2be:	0028      	movs	r0, r5
    d2c0:	4e0b      	ldr	r6, [pc, #44]	; (d2f0 <RADIO_DIO2+0x40>)
    d2c2:	47b0      	blx	r6
    d2c4:	7823      	ldrb	r3, [r4, #0]
    d2c6:	782a      	ldrb	r2, [r5, #0]
    d2c8:	b259      	sxtb	r1, r3
    d2ca:	2900      	cmp	r1, #0
    d2cc:	da05      	bge.n	d2da <RADIO_DIO2+0x2a>
    d2ce:	4b09      	ldr	r3, [pc, #36]	; (d2f4 <RADIO_DIO2+0x44>)
    d2d0:	2a02      	cmp	r2, #2
    d2d2:	d90a      	bls.n	d2ea <RADIO_DIO2+0x3a>
    d2d4:	4b08      	ldr	r3, [pc, #32]	; (d2f8 <RADIO_DIO2+0x48>)
    d2d6:	4798      	blx	r3
    d2d8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    d2da:	2107      	movs	r1, #7
    d2dc:	400b      	ands	r3, r1
    d2de:	7023      	strb	r3, [r4, #0]
    d2e0:	2a03      	cmp	r2, #3
    d2e2:	d1f9      	bne.n	d2d8 <RADIO_DIO2+0x28>
    d2e4:	2b05      	cmp	r3, #5
    d2e6:	d1f7      	bne.n	d2d8 <RADIO_DIO2+0x28>
    d2e8:	4b04      	ldr	r3, [pc, #16]	; (d2fc <RADIO_DIO2+0x4c>)
    d2ea:	4798      	blx	r3
    d2ec:	e7f4      	b.n	d2d8 <RADIO_DIO2+0x28>
    d2ee:	46c0      	nop			; (mov r8, r8)
    d2f0:	0000d171 	.word	0x0000d171
    d2f4:	0000c2f9 	.word	0x0000c2f9
    d2f8:	0000d195 	.word	0x0000d195
    d2fc:	0000d531 	.word	0x0000d531

0000d300 <RADIO_DIO3>:
    d300:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d302:	466b      	mov	r3, sp
    d304:	4668      	mov	r0, sp
    d306:	1ddc      	adds	r4, r3, #7
    d308:	2203      	movs	r2, #3
    d30a:	2300      	movs	r3, #0
    d30c:	0021      	movs	r1, r4
    d30e:	3006      	adds	r0, #6
    d310:	4d03      	ldr	r5, [pc, #12]	; (d320 <RADIO_DIO3+0x20>)
    d312:	47a8      	blx	r5
    d314:	7823      	ldrb	r3, [r4, #0]
    d316:	2b7f      	cmp	r3, #127	; 0x7f
    d318:	d901      	bls.n	d31e <RADIO_DIO3+0x1e>
    d31a:	4b02      	ldr	r3, [pc, #8]	; (d324 <RADIO_DIO3+0x24>)
    d31c:	4798      	blx	r3
    d31e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    d320:	0000d171 	.word	0x0000d171
    d324:	0000d195 	.word	0x0000d195

0000d328 <RADIO_DIO4>:
    d328:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d32a:	466b      	mov	r3, sp
    d32c:	4668      	mov	r0, sp
    d32e:	1ddc      	adds	r4, r3, #7
    d330:	2306      	movs	r3, #6
    d332:	22c0      	movs	r2, #192	; 0xc0
    d334:	18c0      	adds	r0, r0, r3
    d336:	0021      	movs	r1, r4
    d338:	4d03      	ldr	r5, [pc, #12]	; (d348 <RADIO_DIO4+0x20>)
    d33a:	47a8      	blx	r5
    d33c:	7823      	ldrb	r3, [r4, #0]
    d33e:	2b7f      	cmp	r3, #127	; 0x7f
    d340:	d901      	bls.n	d346 <RADIO_DIO4+0x1e>
    d342:	4b02      	ldr	r3, [pc, #8]	; (d34c <RADIO_DIO4+0x24>)
    d344:	4798      	blx	r3
    d346:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    d348:	0000d171 	.word	0x0000d171
    d34c:	0000d195 	.word	0x0000d195

0000d350 <RADIO_DIO5>:
    d350:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d352:	466b      	mov	r3, sp
    d354:	4668      	mov	r0, sp
    d356:	1ddc      	adds	r4, r3, #7
    d358:	2230      	movs	r2, #48	; 0x30
    d35a:	2304      	movs	r3, #4
    d35c:	0021      	movs	r1, r4
    d35e:	3006      	adds	r0, #6
    d360:	4d03      	ldr	r5, [pc, #12]	; (d370 <RADIO_DIO5+0x20>)
    d362:	47a8      	blx	r5
    d364:	7823      	ldrb	r3, [r4, #0]
    d366:	2b7f      	cmp	r3, #127	; 0x7f
    d368:	d901      	bls.n	d36e <RADIO_DIO5+0x1e>
    d36a:	4b02      	ldr	r3, [pc, #8]	; (d374 <RADIO_DIO5+0x24>)
    d36c:	4798      	blx	r3
    d36e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    d370:	0000d171 	.word	0x0000d171
    d374:	0000d195 	.word	0x0000d195

0000d378 <radioPostTask>:
    d378:	b510      	push	{r4, lr}
    d37a:	0004      	movs	r4, r0
    d37c:	4b05      	ldr	r3, [pc, #20]	; (d394 <radioPostTask+0x1c>)
    d37e:	4798      	blx	r3
    d380:	4b05      	ldr	r3, [pc, #20]	; (d398 <radioPostTask+0x20>)
    d382:	8818      	ldrh	r0, [r3, #0]
    d384:	4320      	orrs	r0, r4
    d386:	8018      	strh	r0, [r3, #0]
    d388:	4b04      	ldr	r3, [pc, #16]	; (d39c <radioPostTask+0x24>)
    d38a:	4798      	blx	r3
    d38c:	2002      	movs	r0, #2
    d38e:	4b04      	ldr	r3, [pc, #16]	; (d3a0 <radioPostTask+0x28>)
    d390:	4798      	blx	r3
    d392:	bd10      	pop	{r4, pc}
    d394:	0000b1a5 	.word	0x0000b1a5
    d398:	20001ddc 	.word	0x20001ddc
    d39c:	0000b1b1 	.word	0x0000b1b1
    d3a0:	0000c1f1 	.word	0x0000c1f1

0000d3a4 <radioClearTask>:
    d3a4:	b510      	push	{r4, lr}
    d3a6:	0004      	movs	r4, r0
    d3a8:	4b04      	ldr	r3, [pc, #16]	; (d3bc <radioClearTask+0x18>)
    d3aa:	4798      	blx	r3
    d3ac:	4a04      	ldr	r2, [pc, #16]	; (d3c0 <radioClearTask+0x1c>)
    d3ae:	8813      	ldrh	r3, [r2, #0]
    d3b0:	43a3      	bics	r3, r4
    d3b2:	8013      	strh	r3, [r2, #0]
    d3b4:	4b03      	ldr	r3, [pc, #12]	; (d3c4 <radioClearTask+0x20>)
    d3b6:	4798      	blx	r3
    d3b8:	bd10      	pop	{r4, pc}
    d3ba:	46c0      	nop			; (mov r8, r8)
    d3bc:	0000b1a5 	.word	0x0000b1a5
    d3c0:	20001ddc 	.word	0x20001ddc
    d3c4:	0000b1b1 	.word	0x0000b1b1

0000d3c8 <RADIO_TaskHandler>:
    d3c8:	b570      	push	{r4, r5, r6, lr}
    d3ca:	2400      	movs	r4, #0
    d3cc:	4d10      	ldr	r5, [pc, #64]	; (d410 <RADIO_TaskHandler+0x48>)
    d3ce:	2601      	movs	r6, #1
    d3d0:	882b      	ldrh	r3, [r5, #0]
    d3d2:	42a3      	cmp	r3, r4
    d3d4:	d015      	beq.n	d402 <RADIO_TaskHandler+0x3a>
    d3d6:	882b      	ldrh	r3, [r5, #0]
    d3d8:	4123      	asrs	r3, r4
    d3da:	4233      	tst	r3, r6
    d3dc:	d013      	beq.n	d406 <RADIO_TaskHandler+0x3e>
    d3de:	40a6      	lsls	r6, r4
    d3e0:	4b0c      	ldr	r3, [pc, #48]	; (d414 <RADIO_TaskHandler+0x4c>)
    d3e2:	4798      	blx	r3
    d3e4:	882b      	ldrh	r3, [r5, #0]
    d3e6:	00a4      	lsls	r4, r4, #2
    d3e8:	43b3      	bics	r3, r6
    d3ea:	802b      	strh	r3, [r5, #0]
    d3ec:	4b0a      	ldr	r3, [pc, #40]	; (d418 <RADIO_TaskHandler+0x50>)
    d3ee:	4798      	blx	r3
    d3f0:	4b0a      	ldr	r3, [pc, #40]	; (d41c <RADIO_TaskHandler+0x54>)
    d3f2:	58e3      	ldr	r3, [r4, r3]
    d3f4:	4798      	blx	r3
    d3f6:	882b      	ldrh	r3, [r5, #0]
    d3f8:	2b00      	cmp	r3, #0
    d3fa:	d002      	beq.n	d402 <RADIO_TaskHandler+0x3a>
    d3fc:	2002      	movs	r0, #2
    d3fe:	4b08      	ldr	r3, [pc, #32]	; (d420 <RADIO_TaskHandler+0x58>)
    d400:	4798      	blx	r3
    d402:	2000      	movs	r0, #0
    d404:	bd70      	pop	{r4, r5, r6, pc}
    d406:	3401      	adds	r4, #1
    d408:	2c05      	cmp	r4, #5
    d40a:	d1e4      	bne.n	d3d6 <RADIO_TaskHandler+0xe>
    d40c:	e7f9      	b.n	d402 <RADIO_TaskHandler+0x3a>
    d40e:	46c0      	nop			; (mov r8, r8)
    d410:	20001ddc 	.word	0x20001ddc
    d414:	0000b1a5 	.word	0x0000b1a5
    d418:	0000b1b1 	.word	0x0000b1b1
    d41c:	00016d64 	.word	0x00016d64
    d420:	0000c1f1 	.word	0x0000c1f1

0000d424 <RadioSetState>:
    d424:	4b01      	ldr	r3, [pc, #4]	; (d42c <RadioSetState+0x8>)
    d426:	7018      	strb	r0, [r3, #0]
    d428:	4770      	bx	lr
    d42a:	46c0      	nop			; (mov r8, r8)
    d42c:	200039ab 	.word	0x200039ab

0000d430 <RADIO_GetState>:
    d430:	4b01      	ldr	r3, [pc, #4]	; (d438 <RADIO_GetState+0x8>)
    d432:	7818      	ldrb	r0, [r3, #0]
    d434:	b2c0      	uxtb	r0, r0
    d436:	4770      	bx	lr
    d438:	200039ab 	.word	0x200039ab

0000d43c <RADIO_SetCallbackBitmask>:
    d43c:	4a02      	ldr	r2, [pc, #8]	; (d448 <RADIO_SetCallbackBitmask+0xc>)
    d43e:	7813      	ldrb	r3, [r2, #0]
    d440:	4318      	orrs	r0, r3
    d442:	7010      	strb	r0, [r2, #0]
    d444:	4770      	bx	lr
    d446:	46c0      	nop			; (mov r8, r8)
    d448:	200039aa 	.word	0x200039aa

0000d44c <RADIO_Transmit>:
    d44c:	b570      	push	{r4, r5, r6, lr}
    d44e:	4d10      	ldr	r5, [pc, #64]	; (d490 <RADIO_Transmit+0x44>)
    d450:	0006      	movs	r6, r0
    d452:	782b      	ldrb	r3, [r5, #0]
    d454:	2004      	movs	r0, #4
    d456:	2b01      	cmp	r3, #1
    d458:	d118      	bne.n	d48c <RADIO_Transmit+0x40>
    d45a:	4c0e      	ldr	r4, [pc, #56]	; (d494 <RADIO_Transmit+0x48>)
    d45c:	0023      	movs	r3, r4
    d45e:	332f      	adds	r3, #47	; 0x2f
    d460:	7818      	ldrb	r0, [r3, #0]
    d462:	4b0d      	ldr	r3, [pc, #52]	; (d498 <RADIO_Transmit+0x4c>)
    d464:	4798      	blx	r3
    d466:	4b0d      	ldr	r3, [pc, #52]	; (d49c <RADIO_Transmit+0x50>)
    d468:	7832      	ldrb	r2, [r6, #0]
    d46a:	6871      	ldr	r1, [r6, #4]
    d46c:	701a      	strb	r2, [r3, #0]
    d46e:	4b0c      	ldr	r3, [pc, #48]	; (d4a0 <RADIO_Transmit+0x54>)
    d470:	3434      	adds	r4, #52	; 0x34
    d472:	6019      	str	r1, [r3, #0]
    d474:	7821      	ldrb	r1, [r4, #0]
    d476:	2302      	movs	r3, #2
    d478:	2900      	cmp	r1, #0
    d47a:	d102      	bne.n	d482 <RADIO_Transmit+0x36>
    d47c:	0018      	movs	r0, r3
    d47e:	2a3f      	cmp	r2, #63	; 0x3f
    d480:	d804      	bhi.n	d48c <RADIO_Transmit+0x40>
    d482:	702b      	strb	r3, [r5, #0]
    d484:	2004      	movs	r0, #4
    d486:	4b07      	ldr	r3, [pc, #28]	; (d4a4 <RADIO_Transmit+0x58>)
    d488:	4798      	blx	r3
    d48a:	2000      	movs	r0, #0
    d48c:	bd70      	pop	{r4, r5, r6, pc}
    d48e:	46c0      	nop			; (mov r8, r8)
    d490:	200039ab 	.word	0x200039ab
    d494:	200037b0 	.word	0x200037b0
    d498:	0000bef1 	.word	0x0000bef1
    d49c:	20001df4 	.word	0x20001df4
    d4a0:	20001df0 	.word	0x20001df0
    d4a4:	0000d379 	.word	0x0000d379

0000d4a8 <Radio_FSKTxPayloadHandler>:
    d4a8:	b570      	push	{r4, r5, r6, lr}
    d4aa:	4b1c      	ldr	r3, [pc, #112]	; (d51c <Radio_FSKTxPayloadHandler+0x74>)
    d4ac:	000d      	movs	r5, r1
    d4ae:	4798      	blx	r3
    d4b0:	4c1b      	ldr	r4, [pc, #108]	; (d520 <Radio_FSKTxPayloadHandler+0x78>)
    d4b2:	3458      	adds	r4, #88	; 0x58
    d4b4:	7820      	ldrb	r0, [r4, #0]
    d4b6:	b2c0      	uxtb	r0, r0
    d4b8:	2800      	cmp	r0, #0
    d4ba:	d112      	bne.n	d4e2 <Radio_FSKTxPayloadHandler+0x3a>
    d4bc:	2d00      	cmp	r5, #0
    d4be:	d007      	beq.n	d4d0 <Radio_FSKTxPayloadHandler+0x28>
    d4c0:	4918      	ldr	r1, [pc, #96]	; (d524 <Radio_FSKTxPayloadHandler+0x7c>)
    d4c2:	4b19      	ldr	r3, [pc, #100]	; (d528 <Radio_FSKTxPayloadHandler+0x80>)
    d4c4:	2d3e      	cmp	r5, #62	; 0x3e
    d4c6:	d806      	bhi.n	d4d6 <Radio_FSKTxPayloadHandler+0x2e>
    d4c8:	002a      	movs	r2, r5
    d4ca:	6809      	ldr	r1, [r1, #0]
    d4cc:	4798      	blx	r3
    d4ce:	7025      	strb	r5, [r4, #0]
    d4d0:	4b16      	ldr	r3, [pc, #88]	; (d52c <Radio_FSKTxPayloadHandler+0x84>)
    d4d2:	4798      	blx	r3
    d4d4:	bd70      	pop	{r4, r5, r6, pc}
    d4d6:	223f      	movs	r2, #63	; 0x3f
    d4d8:	6809      	ldr	r1, [r1, #0]
    d4da:	4798      	blx	r3
    d4dc:	233f      	movs	r3, #63	; 0x3f
    d4de:	7023      	strb	r3, [r4, #0]
    d4e0:	e7f6      	b.n	d4d0 <Radio_FSKTxPayloadHandler+0x28>
    d4e2:	7823      	ldrb	r3, [r4, #0]
    d4e4:	429d      	cmp	r5, r3
    d4e6:	d0f3      	beq.n	d4d0 <Radio_FSKTxPayloadHandler+0x28>
    d4e8:	7822      	ldrb	r2, [r4, #0]
    d4ea:	480e      	ldr	r0, [pc, #56]	; (d524 <Radio_FSKTxPayloadHandler+0x7c>)
    d4ec:	1aaa      	subs	r2, r5, r2
    d4ee:	b2d2      	uxtb	r2, r2
    d4f0:	4b0d      	ldr	r3, [pc, #52]	; (d528 <Radio_FSKTxPayloadHandler+0x80>)
    d4f2:	2a3f      	cmp	r2, #63	; 0x3f
    d4f4:	d807      	bhi.n	d506 <Radio_FSKTxPayloadHandler+0x5e>
    d4f6:	7826      	ldrb	r6, [r4, #0]
    d4f8:	7822      	ldrb	r2, [r4, #0]
    d4fa:	6801      	ldr	r1, [r0, #0]
    d4fc:	1aaa      	subs	r2, r5, r2
    d4fe:	b2d2      	uxtb	r2, r2
    d500:	1989      	adds	r1, r1, r6
    d502:	2000      	movs	r0, #0
    d504:	e7e2      	b.n	d4cc <Radio_FSKTxPayloadHandler+0x24>
    d506:	7822      	ldrb	r2, [r4, #0]
    d508:	6801      	ldr	r1, [r0, #0]
    d50a:	2000      	movs	r0, #0
    d50c:	1889      	adds	r1, r1, r2
    d50e:	223f      	movs	r2, #63	; 0x3f
    d510:	4798      	blx	r3
    d512:	7823      	ldrb	r3, [r4, #0]
    d514:	333f      	adds	r3, #63	; 0x3f
    d516:	b2db      	uxtb	r3, r3
    d518:	e7e1      	b.n	d4de <Radio_FSKTxPayloadHandler+0x36>
    d51a:	46c0      	nop			; (mov r8, r8)
    d51c:	000044f9 	.word	0x000044f9
    d520:	200037b0 	.word	0x200037b0
    d524:	20001df0 	.word	0x20001df0
    d528:	0000b041 	.word	0x0000b041
    d52c:	00004539 	.word	0x00004539

0000d530 <RADIO_FSKSyncAddr>:
    d530:	4b08      	ldr	r3, [pc, #32]	; (d554 <RADIO_FSKSyncAddr+0x24>)
    d532:	b510      	push	{r4, lr}
    d534:	4798      	blx	r3
    d536:	4b08      	ldr	r3, [pc, #32]	; (d558 <RADIO_FSKSyncAddr+0x28>)
    d538:	001a      	movs	r2, r3
    d53a:	3234      	adds	r2, #52	; 0x34
    d53c:	7812      	ldrb	r2, [r2, #0]
    d53e:	2a00      	cmp	r2, #0
    d540:	d104      	bne.n	d54c <RADIO_FSKSyncAddr+0x1c>
    d542:	0019      	movs	r1, r3
    d544:	3358      	adds	r3, #88	; 0x58
    d546:	312c      	adds	r1, #44	; 0x2c
    d548:	700a      	strb	r2, [r1, #0]
    d54a:	701a      	strb	r2, [r3, #0]
    d54c:	4b03      	ldr	r3, [pc, #12]	; (d55c <RADIO_FSKSyncAddr+0x2c>)
    d54e:	4798      	blx	r3
    d550:	bd10      	pop	{r4, pc}
    d552:	46c0      	nop			; (mov r8, r8)
    d554:	000044f9 	.word	0x000044f9
    d558:	200037b0 	.word	0x200037b0
    d55c:	00004539 	.word	0x00004539

0000d560 <RADIO_FSKFifoLevel>:
    d560:	b570      	push	{r4, r5, r6, lr}
    d562:	4b22      	ldr	r3, [pc, #136]	; (d5ec <RADIO_FSKFifoLevel+0x8c>)
    d564:	4798      	blx	r3
    d566:	4d22      	ldr	r5, [pc, #136]	; (d5f0 <RADIO_FSKFifoLevel+0x90>)
    d568:	002a      	movs	r2, r5
    d56a:	002b      	movs	r3, r5
    d56c:	322c      	adds	r2, #44	; 0x2c
    d56e:	3358      	adds	r3, #88	; 0x58
    d570:	7810      	ldrb	r0, [r2, #0]
    d572:	7819      	ldrb	r1, [r3, #0]
    d574:	4288      	cmp	r0, r1
    d576:	d105      	bne.n	d584 <RADIO_FSKFifoLevel+0x24>
    d578:	7812      	ldrb	r2, [r2, #0]
    d57a:	2a00      	cmp	r2, #0
    d57c:	d002      	beq.n	d584 <RADIO_FSKFifoLevel+0x24>
    d57e:	781b      	ldrb	r3, [r3, #0]
    d580:	2b00      	cmp	r3, #0
    d582:	d11f      	bne.n	d5c4 <RADIO_FSKFifoLevel+0x64>
    d584:	0029      	movs	r1, r5
    d586:	312c      	adds	r1, #44	; 0x2c
    d588:	7808      	ldrb	r0, [r1, #0]
    d58a:	b2c0      	uxtb	r0, r0
    d58c:	2800      	cmp	r0, #0
    d58e:	d102      	bne.n	d596 <RADIO_FSKFifoLevel+0x36>
    d590:	2201      	movs	r2, #1
    d592:	4b18      	ldr	r3, [pc, #96]	; (d5f4 <RADIO_FSKFifoLevel+0x94>)
    d594:	4798      	blx	r3
    d596:	002e      	movs	r6, r5
    d598:	002c      	movs	r4, r5
    d59a:	362c      	adds	r6, #44	; 0x2c
    d59c:	3458      	adds	r4, #88	; 0x58
    d59e:	7833      	ldrb	r3, [r6, #0]
    d5a0:	7822      	ldrb	r2, [r4, #0]
    d5a2:	1a9b      	subs	r3, r3, r2
    d5a4:	b2db      	uxtb	r3, r3
    d5a6:	2b3e      	cmp	r3, #62	; 0x3e
    d5a8:	d80f      	bhi.n	d5ca <RADIO_FSKFifoLevel+0x6a>
    d5aa:	7823      	ldrb	r3, [r4, #0]
    d5ac:	7832      	ldrb	r2, [r6, #0]
    d5ae:	7821      	ldrb	r1, [r4, #0]
    d5b0:	2000      	movs	r0, #0
    d5b2:	1a52      	subs	r2, r2, r1
    d5b4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    d5b6:	b2d2      	uxtb	r2, r2
    d5b8:	18c9      	adds	r1, r1, r3
    d5ba:	4b0e      	ldr	r3, [pc, #56]	; (d5f4 <RADIO_FSKFifoLevel+0x94>)
    d5bc:	4798      	blx	r3
    d5be:	7833      	ldrb	r3, [r6, #0]
    d5c0:	b2db      	uxtb	r3, r3
    d5c2:	7023      	strb	r3, [r4, #0]
    d5c4:	4b0c      	ldr	r3, [pc, #48]	; (d5f8 <RADIO_FSKFifoLevel+0x98>)
    d5c6:	4798      	blx	r3
    d5c8:	bd70      	pop	{r4, r5, r6, pc}
    d5ca:	7833      	ldrb	r3, [r6, #0]
    d5cc:	7822      	ldrb	r2, [r4, #0]
    d5ce:	1a9b      	subs	r3, r3, r2
    d5d0:	b2db      	uxtb	r3, r3
    d5d2:	2b3f      	cmp	r3, #63	; 0x3f
    d5d4:	d9f6      	bls.n	d5c4 <RADIO_FSKFifoLevel+0x64>
    d5d6:	7823      	ldrb	r3, [r4, #0]
    d5d8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    d5da:	223f      	movs	r2, #63	; 0x3f
    d5dc:	18c9      	adds	r1, r1, r3
    d5de:	2000      	movs	r0, #0
    d5e0:	4b04      	ldr	r3, [pc, #16]	; (d5f4 <RADIO_FSKFifoLevel+0x94>)
    d5e2:	4798      	blx	r3
    d5e4:	7823      	ldrb	r3, [r4, #0]
    d5e6:	333f      	adds	r3, #63	; 0x3f
    d5e8:	e7ea      	b.n	d5c0 <RADIO_FSKFifoLevel+0x60>
    d5ea:	46c0      	nop			; (mov r8, r8)
    d5ec:	000044f9 	.word	0x000044f9
    d5f0:	200037b0 	.word	0x200037b0
    d5f4:	0000b081 	.word	0x0000b081
    d5f8:	00004539 	.word	0x00004539

0000d5fc <RADIO_FSKFifoEmpty>:
    d5fc:	b510      	push	{r4, lr}
    d5fe:	4b03      	ldr	r3, [pc, #12]	; (d60c <RADIO_FSKFifoEmpty+0x10>)
    d600:	7819      	ldrb	r1, [r3, #0]
    d602:	4b03      	ldr	r3, [pc, #12]	; (d610 <RADIO_FSKFifoEmpty+0x14>)
    d604:	6818      	ldr	r0, [r3, #0]
    d606:	4b03      	ldr	r3, [pc, #12]	; (d614 <RADIO_FSKFifoEmpty+0x18>)
    d608:	4798      	blx	r3
    d60a:	bd10      	pop	{r4, pc}
    d60c:	20001df4 	.word	0x20001df4
    d610:	20001df0 	.word	0x20001df0
    d614:	0000d4a9 	.word	0x0000d4a9

0000d618 <RADIO_GetData>:
    d618:	4b03      	ldr	r3, [pc, #12]	; (d628 <RADIO_GetData+0x10>)
    d61a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d61c:	332c      	adds	r3, #44	; 0x2c
    d61e:	6002      	str	r2, [r0, #0]
    d620:	781b      	ldrb	r3, [r3, #0]
    d622:	2000      	movs	r0, #0
    d624:	800b      	strh	r3, [r1, #0]
    d626:	4770      	bx	lr
    d628:	200037b0 	.word	0x200037b0

0000d62c <Radio_EnableRfControl>:
    d62c:	b510      	push	{r4, lr}
    d62e:	4b08      	ldr	r3, [pc, #32]	; (d650 <Radio_EnableRfControl+0x24>)
    d630:	0001      	movs	r1, r0
    d632:	681a      	ldr	r2, [r3, #0]
    d634:	4807      	ldr	r0, [pc, #28]	; (d654 <Radio_EnableRfControl+0x28>)
    d636:	4c08      	ldr	r4, [pc, #32]	; (d658 <Radio_EnableRfControl+0x2c>)
    d638:	1812      	adds	r2, r2, r0
    d63a:	2000      	movs	r0, #0
    d63c:	42a2      	cmp	r2, r4
    d63e:	d804      	bhi.n	d64a <Radio_EnableRfControl+0x1e>
    d640:	3305      	adds	r3, #5
    d642:	7fdb      	ldrb	r3, [r3, #31]
    d644:	1e58      	subs	r0, r3, #1
    d646:	4183      	sbcs	r3, r0
    d648:	1c58      	adds	r0, r3, #1
    d64a:	4b04      	ldr	r3, [pc, #16]	; (d65c <Radio_EnableRfControl+0x30>)
    d64c:	4798      	blx	r3
    d64e:	bd10      	pop	{r4, pc}
    d650:	200037b0 	.word	0x200037b0
    d654:	cc9eec80 	.word	0xcc9eec80
    d658:	096ae380 	.word	0x096ae380
    d65c:	0000b0ed 	.word	0x0000b0ed

0000d660 <Radio_DisableRfControl>:
    d660:	b510      	push	{r4, lr}
    d662:	4b08      	ldr	r3, [pc, #32]	; (d684 <Radio_DisableRfControl+0x24>)
    d664:	0001      	movs	r1, r0
    d666:	681a      	ldr	r2, [r3, #0]
    d668:	4807      	ldr	r0, [pc, #28]	; (d688 <Radio_DisableRfControl+0x28>)
    d66a:	4c08      	ldr	r4, [pc, #32]	; (d68c <Radio_DisableRfControl+0x2c>)
    d66c:	1812      	adds	r2, r2, r0
    d66e:	2000      	movs	r0, #0
    d670:	42a2      	cmp	r2, r4
    d672:	d804      	bhi.n	d67e <Radio_DisableRfControl+0x1e>
    d674:	3305      	adds	r3, #5
    d676:	7fdb      	ldrb	r3, [r3, #31]
    d678:	1e58      	subs	r0, r3, #1
    d67a:	4183      	sbcs	r3, r0
    d67c:	1c58      	adds	r0, r3, #1
    d67e:	4b04      	ldr	r3, [pc, #16]	; (d690 <Radio_DisableRfControl+0x30>)
    d680:	4798      	blx	r3
    d682:	bd10      	pop	{r4, pc}
    d684:	200037b0 	.word	0x200037b0
    d688:	cc9eec80 	.word	0xcc9eec80
    d68c:	096ae380 	.word	0x096ae380
    d690:	0000b115 	.word	0x0000b115

0000d694 <Radio_WatchdogTimeout>:
    d694:	b510      	push	{r4, lr}
    d696:	4b0e      	ldr	r3, [pc, #56]	; (d6d0 <Radio_WatchdogTimeout+0x3c>)
    d698:	781a      	ldrb	r2, [r3, #0]
    d69a:	2a04      	cmp	r2, #4
    d69c:	d10b      	bne.n	d6b6 <Radio_WatchdogTimeout+0x22>
    d69e:	2320      	movs	r3, #32
    d6a0:	4a0c      	ldr	r2, [pc, #48]	; (d6d4 <Radio_WatchdogTimeout+0x40>)
    d6a2:	2000      	movs	r0, #0
    d6a4:	8811      	ldrh	r1, [r2, #0]
    d6a6:	430b      	orrs	r3, r1
    d6a8:	8013      	strh	r3, [r2, #0]
    d6aa:	4b0b      	ldr	r3, [pc, #44]	; (d6d8 <Radio_WatchdogTimeout+0x44>)
    d6ac:	4798      	blx	r3
    d6ae:	2002      	movs	r0, #2
    d6b0:	4b0a      	ldr	r3, [pc, #40]	; (d6dc <Radio_WatchdogTimeout+0x48>)
    d6b2:	4798      	blx	r3
    d6b4:	bd10      	pop	{r4, pc}
    d6b6:	781b      	ldrb	r3, [r3, #0]
    d6b8:	2b02      	cmp	r3, #2
    d6ba:	d1fb      	bne.n	d6b4 <Radio_WatchdogTimeout+0x20>
    d6bc:	4a05      	ldr	r2, [pc, #20]	; (d6d4 <Radio_WatchdogTimeout+0x40>)
    d6be:	330e      	adds	r3, #14
    d6c0:	8811      	ldrh	r1, [r2, #0]
    d6c2:	2001      	movs	r0, #1
    d6c4:	430b      	orrs	r3, r1
    d6c6:	8013      	strh	r3, [r2, #0]
    d6c8:	4b03      	ldr	r3, [pc, #12]	; (d6d8 <Radio_WatchdogTimeout+0x44>)
    d6ca:	4798      	blx	r3
    d6cc:	2001      	movs	r0, #1
    d6ce:	e7ef      	b.n	d6b0 <Radio_WatchdogTimeout+0x1c>
    d6d0:	200039ab 	.word	0x200039ab
    d6d4:	200039a8 	.word	0x200039a8
    d6d8:	0000d661 	.word	0x0000d661
    d6dc:	0000d379 	.word	0x0000d379

0000d6e0 <RADIO_RxTimeout>:
    d6e0:	b510      	push	{r4, lr}
    d6e2:	4b0a      	ldr	r3, [pc, #40]	; (d70c <RADIO_RxTimeout+0x2c>)
    d6e4:	332f      	adds	r3, #47	; 0x2f
    d6e6:	7818      	ldrb	r0, [r3, #0]
    d6e8:	4b09      	ldr	r3, [pc, #36]	; (d710 <RADIO_RxTimeout+0x30>)
    d6ea:	4798      	blx	r3
    d6ec:	2000      	movs	r0, #0
    d6ee:	4b09      	ldr	r3, [pc, #36]	; (d714 <RADIO_RxTimeout+0x34>)
    d6f0:	4798      	blx	r3
    d6f2:	2180      	movs	r1, #128	; 0x80
    d6f4:	2012      	movs	r0, #18
    d6f6:	4b08      	ldr	r3, [pc, #32]	; (d718 <RADIO_RxTimeout+0x38>)
    d6f8:	4798      	blx	r3
    d6fa:	2340      	movs	r3, #64	; 0x40
    d6fc:	4a07      	ldr	r2, [pc, #28]	; (d71c <RADIO_RxTimeout+0x3c>)
    d6fe:	2002      	movs	r0, #2
    d700:	8811      	ldrh	r1, [r2, #0]
    d702:	430b      	orrs	r3, r1
    d704:	8013      	strh	r3, [r2, #0]
    d706:	4b06      	ldr	r3, [pc, #24]	; (d720 <RADIO_RxTimeout+0x40>)
    d708:	4798      	blx	r3
    d70a:	bd10      	pop	{r4, pc}
    d70c:	200037b0 	.word	0x200037b0
    d710:	0000bef1 	.word	0x0000bef1
    d714:	0000d661 	.word	0x0000d661
    d718:	0000afed 	.word	0x0000afed
    d71c:	200039a8 	.word	0x200039a8
    d720:	0000d379 	.word	0x0000d379

0000d724 <Radio_RxFSKTimeout>:
    d724:	b510      	push	{r4, lr}
    d726:	4b08      	ldr	r3, [pc, #32]	; (d748 <Radio_RxFSKTimeout+0x24>)
    d728:	332f      	adds	r3, #47	; 0x2f
    d72a:	7818      	ldrb	r0, [r3, #0]
    d72c:	4b07      	ldr	r3, [pc, #28]	; (d74c <Radio_RxFSKTimeout+0x28>)
    d72e:	4798      	blx	r3
    d730:	2000      	movs	r0, #0
    d732:	4b07      	ldr	r3, [pc, #28]	; (d750 <Radio_RxFSKTimeout+0x2c>)
    d734:	4798      	blx	r3
    d736:	2380      	movs	r3, #128	; 0x80
    d738:	4a06      	ldr	r2, [pc, #24]	; (d754 <Radio_RxFSKTimeout+0x30>)
    d73a:	2002      	movs	r0, #2
    d73c:	8811      	ldrh	r1, [r2, #0]
    d73e:	430b      	orrs	r3, r1
    d740:	8013      	strh	r3, [r2, #0]
    d742:	4b05      	ldr	r3, [pc, #20]	; (d758 <Radio_RxFSKTimeout+0x34>)
    d744:	4798      	blx	r3
    d746:	bd10      	pop	{r4, pc}
    d748:	200037b0 	.word	0x200037b0
    d74c:	0000bef1 	.word	0x0000bef1
    d750:	0000d661 	.word	0x0000d661
    d754:	200039a8 	.word	0x200039a8
    d758:	0000d379 	.word	0x0000d379

0000d75c <RADIO_TxDone>:
    d75c:	b570      	push	{r4, r5, r6, lr}
    d75e:	4b14      	ldr	r3, [pc, #80]	; (d7b0 <RADIO_TxDone+0x54>)
    d760:	332f      	adds	r3, #47	; 0x2f
    d762:	7818      	ldrb	r0, [r3, #0]
    d764:	4b13      	ldr	r3, [pc, #76]	; (d7b4 <RADIO_TxDone+0x58>)
    d766:	4798      	blx	r3
    d768:	2001      	movs	r0, #1
    d76a:	4b13      	ldr	r3, [pc, #76]	; (d7b8 <RADIO_TxDone+0x5c>)
    d76c:	4798      	blx	r3
    d76e:	4b13      	ldr	r3, [pc, #76]	; (d7bc <RADIO_TxDone+0x60>)
    d770:	2108      	movs	r1, #8
    d772:	2012      	movs	r0, #18
    d774:	4798      	blx	r3
    d776:	4b12      	ldr	r3, [pc, #72]	; (d7c0 <RADIO_TxDone+0x64>)
    d778:	781a      	ldrb	r2, [r3, #0]
    d77a:	4b12      	ldr	r3, [pc, #72]	; (d7c4 <RADIO_TxDone+0x68>)
    d77c:	2a02      	cmp	r2, #2
    d77e:	d002      	beq.n	d786 <RADIO_TxDone+0x2a>
    d780:	881a      	ldrh	r2, [r3, #0]
    d782:	0692      	lsls	r2, r2, #26
    d784:	d413      	bmi.n	d7ae <RADIO_TxDone+0x52>
    d786:	2001      	movs	r0, #1
    d788:	881a      	ldrh	r2, [r3, #0]
    d78a:	4302      	orrs	r2, r0
    d78c:	801a      	strh	r2, [r3, #0]
    d78e:	4b0e      	ldr	r3, [pc, #56]	; (d7c8 <RADIO_TxDone+0x6c>)
    d790:	4798      	blx	r3
    d792:	4b0e      	ldr	r3, [pc, #56]	; (d7cc <RADIO_TxDone+0x70>)
    d794:	4798      	blx	r3
    d796:	4c0e      	ldr	r4, [pc, #56]	; (d7d0 <RADIO_TxDone+0x74>)
    d798:	4d0e      	ldr	r5, [pc, #56]	; (d7d4 <RADIO_TxDone+0x78>)
    d79a:	6822      	ldr	r2, [r4, #0]
    d79c:	6863      	ldr	r3, [r4, #4]
    d79e:	1a80      	subs	r0, r0, r2
    d7a0:	4199      	sbcs	r1, r3
    d7a2:	22fa      	movs	r2, #250	; 0xfa
    d7a4:	2300      	movs	r3, #0
    d7a6:	0092      	lsls	r2, r2, #2
    d7a8:	47a8      	blx	r5
    d7aa:	6020      	str	r0, [r4, #0]
    d7ac:	6061      	str	r1, [r4, #4]
    d7ae:	bd70      	pop	{r4, r5, r6, pc}
    d7b0:	200037b0 	.word	0x200037b0
    d7b4:	0000bef1 	.word	0x0000bef1
    d7b8:	0000d661 	.word	0x0000d661
    d7bc:	0000afed 	.word	0x0000afed
    d7c0:	200039ab 	.word	0x200039ab
    d7c4:	200039a8 	.word	0x200039a8
    d7c8:	0000d379 	.word	0x0000d379
    d7cc:	0000bb81 	.word	0x0000bb81
    d7d0:	20001de8 	.word	0x20001de8
    d7d4:	0001215d 	.word	0x0001215d

0000d7d8 <RADIO_FSKPacketSent>:
    d7d8:	b570      	push	{r4, r5, r6, lr}
    d7da:	4b15      	ldr	r3, [pc, #84]	; (d830 <RADIO_FSKPacketSent+0x58>)
    d7dc:	203f      	movs	r0, #63	; 0x3f
    d7de:	4798      	blx	r3
    d7e0:	0703      	lsls	r3, r0, #28
    d7e2:	d524      	bpl.n	d82e <RADIO_FSKPacketSent+0x56>
    d7e4:	4b13      	ldr	r3, [pc, #76]	; (d834 <RADIO_FSKPacketSent+0x5c>)
    d7e6:	332f      	adds	r3, #47	; 0x2f
    d7e8:	7818      	ldrb	r0, [r3, #0]
    d7ea:	4b13      	ldr	r3, [pc, #76]	; (d838 <RADIO_FSKPacketSent+0x60>)
    d7ec:	4798      	blx	r3
    d7ee:	4b13      	ldr	r3, [pc, #76]	; (d83c <RADIO_FSKPacketSent+0x64>)
    d7f0:	2001      	movs	r0, #1
    d7f2:	4798      	blx	r3
    d7f4:	4b12      	ldr	r3, [pc, #72]	; (d840 <RADIO_FSKPacketSent+0x68>)
    d7f6:	4c13      	ldr	r4, [pc, #76]	; (d844 <RADIO_FSKPacketSent+0x6c>)
    d7f8:	781b      	ldrb	r3, [r3, #0]
    d7fa:	2b02      	cmp	r3, #2
    d7fc:	d002      	beq.n	d804 <RADIO_FSKPacketSent+0x2c>
    d7fe:	8823      	ldrh	r3, [r4, #0]
    d800:	069b      	lsls	r3, r3, #26
    d802:	d414      	bmi.n	d82e <RADIO_FSKPacketSent+0x56>
    d804:	4b10      	ldr	r3, [pc, #64]	; (d848 <RADIO_FSKPacketSent+0x70>)
    d806:	4798      	blx	r3
    d808:	4d10      	ldr	r5, [pc, #64]	; (d84c <RADIO_FSKPacketSent+0x74>)
    d80a:	4e11      	ldr	r6, [pc, #68]	; (d850 <RADIO_FSKPacketSent+0x78>)
    d80c:	682a      	ldr	r2, [r5, #0]
    d80e:	686b      	ldr	r3, [r5, #4]
    d810:	1a80      	subs	r0, r0, r2
    d812:	4199      	sbcs	r1, r3
    d814:	22fa      	movs	r2, #250	; 0xfa
    d816:	2300      	movs	r3, #0
    d818:	0092      	lsls	r2, r2, #2
    d81a:	47b0      	blx	r6
    d81c:	4b0d      	ldr	r3, [pc, #52]	; (d854 <RADIO_FSKPacketSent+0x7c>)
    d81e:	6028      	str	r0, [r5, #0]
    d820:	6069      	str	r1, [r5, #4]
    d822:	2001      	movs	r0, #1
    d824:	4798      	blx	r3
    d826:	2304      	movs	r3, #4
    d828:	8822      	ldrh	r2, [r4, #0]
    d82a:	4313      	orrs	r3, r2
    d82c:	8023      	strh	r3, [r4, #0]
    d82e:	bd70      	pop	{r4, r5, r6, pc}
    d830:	0000b015 	.word	0x0000b015
    d834:	200037b0 	.word	0x200037b0
    d838:	0000bef1 	.word	0x0000bef1
    d83c:	0000d661 	.word	0x0000d661
    d840:	200039ab 	.word	0x200039ab
    d844:	200039a8 	.word	0x200039a8
    d848:	0000bb81 	.word	0x0000bb81
    d84c:	20001de8 	.word	0x20001de8
    d850:	0001215d 	.word	0x0001215d
    d854:	0000d379 	.word	0x0000d379

0000d858 <RADIO_RxDone>:
    d858:	b570      	push	{r4, r5, r6, lr}
    d85a:	2012      	movs	r0, #18
    d85c:	4e16      	ldr	r6, [pc, #88]	; (d8b8 <RADIO_RxDone+0x60>)
    d85e:	47b0      	blx	r6
    d860:	4b16      	ldr	r3, [pc, #88]	; (d8bc <RADIO_RxDone+0x64>)
    d862:	0005      	movs	r5, r0
    d864:	2170      	movs	r1, #112	; 0x70
    d866:	2012      	movs	r0, #18
    d868:	4798      	blx	r3
    d86a:	2350      	movs	r3, #80	; 0x50
    d86c:	402b      	ands	r3, r5
    d86e:	2b50      	cmp	r3, #80	; 0x50
    d870:	d119      	bne.n	d8a6 <RADIO_RxDone+0x4e>
    d872:	4c13      	ldr	r4, [pc, #76]	; (d8c0 <RADIO_RxDone+0x68>)
    d874:	0023      	movs	r3, r4
    d876:	332f      	adds	r3, #47	; 0x2f
    d878:	7818      	ldrb	r0, [r3, #0]
    d87a:	4b12      	ldr	r3, [pc, #72]	; (d8c4 <RADIO_RxDone+0x6c>)
    d87c:	4798      	blx	r3
    d87e:	4b12      	ldr	r3, [pc, #72]	; (d8c8 <RADIO_RxDone+0x70>)
    d880:	2000      	movs	r0, #0
    d882:	4798      	blx	r3
    d884:	3404      	adds	r4, #4
    d886:	201c      	movs	r0, #28
    d888:	47b0      	blx	r6
    d88a:	7fe2      	ldrb	r2, [r4, #31]
    d88c:	4b0f      	ldr	r3, [pc, #60]	; (d8cc <RADIO_RxDone+0x74>)
    d88e:	4910      	ldr	r1, [pc, #64]	; (d8d0 <RADIO_RxDone+0x78>)
    d890:	2a00      	cmp	r2, #0
    d892:	d003      	beq.n	d89c <RADIO_RxDone+0x44>
    d894:	06aa      	lsls	r2, r5, #26
    d896:	d407      	bmi.n	d8a8 <RADIO_RxDone+0x50>
    d898:	0642      	lsls	r2, r0, #25
    d89a:	d505      	bpl.n	d8a8 <RADIO_RxDone+0x50>
    d89c:	2002      	movs	r0, #2
    d89e:	881a      	ldrh	r2, [r3, #0]
    d8a0:	4302      	orrs	r2, r0
    d8a2:	801a      	strh	r2, [r3, #0]
    d8a4:	4788      	blx	r1
    d8a6:	bd70      	pop	{r4, r5, r6, pc}
    d8a8:	2280      	movs	r2, #128	; 0x80
    d8aa:	8818      	ldrh	r0, [r3, #0]
    d8ac:	0052      	lsls	r2, r2, #1
    d8ae:	4302      	orrs	r2, r0
    d8b0:	801a      	strh	r2, [r3, #0]
    d8b2:	2002      	movs	r0, #2
    d8b4:	e7f6      	b.n	d8a4 <RADIO_RxDone+0x4c>
    d8b6:	46c0      	nop			; (mov r8, r8)
    d8b8:	0000b015 	.word	0x0000b015
    d8bc:	0000afed 	.word	0x0000afed
    d8c0:	200037b0 	.word	0x200037b0
    d8c4:	0000bef1 	.word	0x0000bef1
    d8c8:	0000d661 	.word	0x0000d661
    d8cc:	200039a8 	.word	0x200039a8
    d8d0:	0000d379 	.word	0x0000d379

0000d8d4 <RADIO_FSKPayloadReady>:
    d8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d8d6:	203f      	movs	r0, #63	; 0x3f
    d8d8:	4b39      	ldr	r3, [pc, #228]	; (d9c0 <RADIO_FSKPayloadReady+0xec>)
    d8da:	4798      	blx	r3
    d8dc:	0743      	lsls	r3, r0, #29
    d8de:	d559      	bpl.n	d994 <RADIO_FSKPayloadReady+0xc0>
    d8e0:	4c38      	ldr	r4, [pc, #224]	; (d9c4 <RADIO_FSKPayloadReady+0xf0>)
    d8e2:	4d39      	ldr	r5, [pc, #228]	; (d9c8 <RADIO_FSKPayloadReady+0xf4>)
    d8e4:	1d23      	adds	r3, r4, #4
    d8e6:	7fdb      	ldrb	r3, [r3, #31]
    d8e8:	2b01      	cmp	r3, #1
    d8ea:	d154      	bne.n	d996 <RADIO_FSKPayloadReady+0xc2>
    d8ec:	2202      	movs	r2, #2
    d8ee:	4210      	tst	r0, r2
    d8f0:	d048      	beq.n	d984 <RADIO_FSKPayloadReady+0xb0>
    d8f2:	0023      	movs	r3, r4
    d8f4:	332f      	adds	r3, #47	; 0x2f
    d8f6:	7818      	ldrb	r0, [r3, #0]
    d8f8:	4e34      	ldr	r6, [pc, #208]	; (d9cc <RADIO_FSKPayloadReady+0xf8>)
    d8fa:	47b0      	blx	r6
    d8fc:	0023      	movs	r3, r4
    d8fe:	332e      	adds	r3, #46	; 0x2e
    d900:	7818      	ldrb	r0, [r3, #0]
    d902:	47b0      	blx	r6
    d904:	4b32      	ldr	r3, [pc, #200]	; (d9d0 <RADIO_FSKPayloadReady+0xfc>)
    d906:	4798      	blx	r3
    d908:	0022      	movs	r2, r4
    d90a:	0023      	movs	r3, r4
    d90c:	322c      	adds	r2, #44	; 0x2c
    d90e:	3358      	adds	r3, #88	; 0x58
    d910:	7810      	ldrb	r0, [r2, #0]
    d912:	7819      	ldrb	r1, [r3, #0]
    d914:	4288      	cmp	r0, r1
    d916:	d105      	bne.n	d924 <RADIO_FSKPayloadReady+0x50>
    d918:	7812      	ldrb	r2, [r2, #0]
    d91a:	2a00      	cmp	r2, #0
    d91c:	d002      	beq.n	d924 <RADIO_FSKPayloadReady+0x50>
    d91e:	781b      	ldrb	r3, [r3, #0]
    d920:	2b00      	cmp	r3, #0
    d922:	d118      	bne.n	d956 <RADIO_FSKPayloadReady+0x82>
    d924:	0021      	movs	r1, r4
    d926:	312c      	adds	r1, #44	; 0x2c
    d928:	7808      	ldrb	r0, [r1, #0]
    d92a:	b2c0      	uxtb	r0, r0
    d92c:	2800      	cmp	r0, #0
    d92e:	d102      	bne.n	d936 <RADIO_FSKPayloadReady+0x62>
    d930:	2201      	movs	r2, #1
    d932:	4b28      	ldr	r3, [pc, #160]	; (d9d4 <RADIO_FSKPayloadReady+0x100>)
    d934:	4798      	blx	r3
    d936:	0026      	movs	r6, r4
    d938:	0027      	movs	r7, r4
    d93a:	3658      	adds	r6, #88	; 0x58
    d93c:	7830      	ldrb	r0, [r6, #0]
    d93e:	372c      	adds	r7, #44	; 0x2c
    d940:	b2c0      	uxtb	r0, r0
    d942:	2800      	cmp	r0, #0
    d944:	d110      	bne.n	d968 <RADIO_FSKPayloadReady+0x94>
    d946:	783a      	ldrb	r2, [r7, #0]
    d948:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    d94a:	b2d2      	uxtb	r2, r2
    d94c:	4b21      	ldr	r3, [pc, #132]	; (d9d4 <RADIO_FSKPayloadReady+0x100>)
    d94e:	4798      	blx	r3
    d950:	783b      	ldrb	r3, [r7, #0]
    d952:	b2db      	uxtb	r3, r3
    d954:	7033      	strb	r3, [r6, #0]
    d956:	4b20      	ldr	r3, [pc, #128]	; (d9d8 <RADIO_FSKPayloadReady+0x104>)
    d958:	4798      	blx	r3
    d95a:	4b20      	ldr	r3, [pc, #128]	; (d9dc <RADIO_FSKPayloadReady+0x108>)
    d95c:	2000      	movs	r0, #0
    d95e:	4798      	blx	r3
    d960:	2308      	movs	r3, #8
    d962:	882a      	ldrh	r2, [r5, #0]
    d964:	4313      	orrs	r3, r2
    d966:	e011      	b.n	d98c <RADIO_FSKPayloadReady+0xb8>
    d968:	783b      	ldrb	r3, [r7, #0]
    d96a:	7832      	ldrb	r2, [r6, #0]
    d96c:	1a9b      	subs	r3, r3, r2
    d96e:	2b00      	cmp	r3, #0
    d970:	ddf1      	ble.n	d956 <RADIO_FSKPayloadReady+0x82>
    d972:	7833      	ldrb	r3, [r6, #0]
    d974:	783a      	ldrb	r2, [r7, #0]
    d976:	7831      	ldrb	r1, [r6, #0]
    d978:	2000      	movs	r0, #0
    d97a:	1a52      	subs	r2, r2, r1
    d97c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    d97e:	b2d2      	uxtb	r2, r2
    d980:	18c9      	adds	r1, r1, r3
    d982:	e7e3      	b.n	d94c <RADIO_FSKPayloadReady+0x78>
    d984:	2380      	movs	r3, #128	; 0x80
    d986:	8829      	ldrh	r1, [r5, #0]
    d988:	005b      	lsls	r3, r3, #1
    d98a:	430b      	orrs	r3, r1
    d98c:	802b      	strh	r3, [r5, #0]
    d98e:	2002      	movs	r0, #2
    d990:	4b13      	ldr	r3, [pc, #76]	; (d9e0 <RADIO_FSKPayloadReady+0x10c>)
    d992:	4798      	blx	r3
    d994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d996:	0023      	movs	r3, r4
    d998:	332f      	adds	r3, #47	; 0x2f
    d99a:	4e0c      	ldr	r6, [pc, #48]	; (d9cc <RADIO_FSKPayloadReady+0xf8>)
    d99c:	7818      	ldrb	r0, [r3, #0]
    d99e:	47b0      	blx	r6
    d9a0:	0023      	movs	r3, r4
    d9a2:	332e      	adds	r3, #46	; 0x2e
    d9a4:	7818      	ldrb	r0, [r3, #0]
    d9a6:	47b0      	blx	r6
    d9a8:	4e0e      	ldr	r6, [pc, #56]	; (d9e4 <RADIO_FSKPayloadReady+0x110>)
    d9aa:	2201      	movs	r2, #1
    d9ac:	0031      	movs	r1, r6
    d9ae:	2000      	movs	r0, #0
    d9b0:	4f08      	ldr	r7, [pc, #32]	; (d9d4 <RADIO_FSKPayloadReady+0x100>)
    d9b2:	47b8      	blx	r7
    d9b4:	7832      	ldrb	r2, [r6, #0]
    d9b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    d9b8:	b2d2      	uxtb	r2, r2
    d9ba:	2000      	movs	r0, #0
    d9bc:	47b8      	blx	r7
    d9be:	e7cc      	b.n	d95a <RADIO_FSKPayloadReady+0x86>
    d9c0:	0000b015 	.word	0x0000b015
    d9c4:	200037b0 	.word	0x200037b0
    d9c8:	200039a8 	.word	0x200039a8
    d9cc:	0000bef1 	.word	0x0000bef1
    d9d0:	000044f9 	.word	0x000044f9
    d9d4:	0000b081 	.word	0x0000b081
    d9d8:	00004539 	.word	0x00004539
    d9dc:	0000d661 	.word	0x0000d661
    d9e0:	0000d379 	.word	0x0000d379
    d9e4:	200037dc 	.word	0x200037dc

0000d9e8 <Radio_SetClockInput>:
    d9e8:	b510      	push	{r4, lr}
    d9ea:	4b08      	ldr	r3, [pc, #32]	; (da0c <Radio_SetClockInput+0x24>)
    d9ec:	3355      	adds	r3, #85	; 0x55
    d9ee:	781b      	ldrb	r3, [r3, #0]
    d9f0:	2b00      	cmp	r3, #0
    d9f2:	d10a      	bne.n	da0a <Radio_SetClockInput+0x22>
    d9f4:	4b06      	ldr	r3, [pc, #24]	; (da10 <Radio_SetClockInput+0x28>)
    d9f6:	204b      	movs	r0, #75	; 0x4b
    d9f8:	4798      	blx	r3
    d9fa:	2110      	movs	r1, #16
    d9fc:	4301      	orrs	r1, r0
    d9fe:	4b05      	ldr	r3, [pc, #20]	; (da14 <Radio_SetClockInput+0x2c>)
    da00:	b2c9      	uxtb	r1, r1
    da02:	204b      	movs	r0, #75	; 0x4b
    da04:	4798      	blx	r3
    da06:	4b04      	ldr	r3, [pc, #16]	; (da18 <Radio_SetClockInput+0x30>)
    da08:	4798      	blx	r3
    da0a:	bd10      	pop	{r4, pc}
    da0c:	200037b0 	.word	0x200037b0
    da10:	0000b015 	.word	0x0000b015
    da14:	0000afed 	.word	0x0000afed
    da18:	0000b135 	.word	0x0000b135

0000da1c <RADIO_RxHandler>:
    da1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    da1e:	4b34      	ldr	r3, [pc, #208]	; (daf0 <RADIO_RxHandler+0xd4>)
    da20:	4798      	blx	r3
    da22:	2000      	movs	r0, #0
    da24:	4b33      	ldr	r3, [pc, #204]	; (daf4 <RADIO_RxHandler+0xd8>)
    da26:	4798      	blx	r3
    da28:	4e33      	ldr	r6, [pc, #204]	; (daf8 <RADIO_RxHandler+0xdc>)
    da2a:	4b34      	ldr	r3, [pc, #208]	; (dafc <RADIO_RxHandler+0xe0>)
    da2c:	8830      	ldrh	r0, [r6, #0]
    da2e:	2800      	cmp	r0, #0
    da30:	d100      	bne.n	da34 <RADIO_RxHandler+0x18>
    da32:	3004      	adds	r0, #4
    da34:	4798      	blx	r3
    da36:	4c32      	ldr	r4, [pc, #200]	; (db00 <RADIO_RxHandler+0xe4>)
    da38:	4d32      	ldr	r5, [pc, #200]	; (db04 <RADIO_RxHandler+0xe8>)
    da3a:	0023      	movs	r3, r4
    da3c:	3334      	adds	r3, #52	; 0x34
    da3e:	7819      	ldrb	r1, [r3, #0]
    da40:	2901      	cmp	r1, #1
    da42:	d122      	bne.n	da8a <RADIO_RxHandler+0x6e>
    da44:	2022      	movs	r0, #34	; 0x22
    da46:	47a8      	blx	r5
    da48:	2100      	movs	r1, #0
    da4a:	2040      	movs	r0, #64	; 0x40
    da4c:	47a8      	blx	r5
    da4e:	2100      	movs	r1, #0
    da50:	2041      	movs	r0, #65	; 0x41
    da52:	47a8      	blx	r5
    da54:	8832      	ldrh	r2, [r6, #0]
    da56:	4b2c      	ldr	r3, [pc, #176]	; (db08 <RADIO_RxHandler+0xec>)
    da58:	2a00      	cmp	r2, #0
    da5a:	d131      	bne.n	dac0 <RADIO_RxHandler+0xa4>
    da5c:	0021      	movs	r1, r4
    da5e:	2005      	movs	r0, #5
    da60:	3134      	adds	r1, #52	; 0x34
    da62:	7809      	ldrb	r1, [r1, #0]
    da64:	4798      	blx	r3
    da66:	68e3      	ldr	r3, [r4, #12]
    da68:	2b00      	cmp	r3, #0
    da6a:	d00c      	beq.n	da86 <RADIO_RxHandler+0x6a>
    da6c:	8832      	ldrh	r2, [r6, #0]
    da6e:	2a00      	cmp	r2, #0
    da70:	d009      	beq.n	da86 <RADIO_RxHandler+0x6a>
    da72:	21fa      	movs	r1, #250	; 0xfa
    da74:	2200      	movs	r2, #0
    da76:	342f      	adds	r4, #47	; 0x2f
    da78:	0089      	lsls	r1, r1, #2
    da7a:	7820      	ldrb	r0, [r4, #0]
    da7c:	4359      	muls	r1, r3
    da7e:	9200      	str	r2, [sp, #0]
    da80:	4b22      	ldr	r3, [pc, #136]	; (db0c <RADIO_RxHandler+0xf0>)
    da82:	4c23      	ldr	r4, [pc, #140]	; (db10 <RADIO_RxHandler+0xf4>)
    da84:	47a0      	blx	r4
    da86:	2000      	movs	r0, #0
    da88:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    da8a:	0023      	movs	r3, r4
    da8c:	3338      	adds	r3, #56	; 0x38
    da8e:	7819      	ldrb	r1, [r3, #0]
    da90:	2012      	movs	r0, #18
    da92:	47a8      	blx	r5
    da94:	0023      	movs	r3, r4
    da96:	3339      	adds	r3, #57	; 0x39
    da98:	7819      	ldrb	r1, [r3, #0]
    da9a:	2013      	movs	r0, #19
    da9c:	47a8      	blx	r5
    da9e:	210c      	movs	r1, #12
    daa0:	2040      	movs	r0, #64	; 0x40
    daa2:	47a8      	blx	r5
    daa4:	2100      	movs	r1, #0
    daa6:	2041      	movs	r0, #65	; 0x41
    daa8:	47a8      	blx	r5
    daaa:	0022      	movs	r2, r4
    daac:	2300      	movs	r3, #0
    daae:	3256      	adds	r2, #86	; 0x56
    dab0:	8013      	strh	r3, [r2, #0]
    dab2:	0022      	movs	r2, r4
    dab4:	322c      	adds	r2, #44	; 0x2c
    dab6:	7013      	strb	r3, [r2, #0]
    dab8:	0022      	movs	r2, r4
    daba:	3258      	adds	r2, #88	; 0x58
    dabc:	7013      	strb	r3, [r2, #0]
    dabe:	e7c9      	b.n	da54 <RADIO_RxHandler+0x38>
    dac0:	0022      	movs	r2, r4
    dac2:	3234      	adds	r2, #52	; 0x34
    dac4:	7811      	ldrb	r1, [r2, #0]
    dac6:	2200      	movs	r2, #0
    dac8:	2901      	cmp	r1, #1
    daca:	d101      	bne.n	dad0 <RADIO_RxHandler+0xb4>
    dacc:	2006      	movs	r0, #6
    dace:	e7c9      	b.n	da64 <RADIO_RxHandler+0x48>
    dad0:	0011      	movs	r1, r2
    dad2:	2005      	movs	r0, #5
    dad4:	4798      	blx	r3
    dad6:	21fa      	movs	r1, #250	; 0xfa
    dad8:	8833      	ldrh	r3, [r6, #0]
    dada:	0089      	lsls	r1, r1, #2
    dadc:	4359      	muls	r1, r3
    dade:	0023      	movs	r3, r4
    dae0:	2200      	movs	r2, #0
    dae2:	332e      	adds	r3, #46	; 0x2e
    dae4:	7818      	ldrb	r0, [r3, #0]
    dae6:	4d0a      	ldr	r5, [pc, #40]	; (db10 <RADIO_RxHandler+0xf4>)
    dae8:	9200      	str	r2, [sp, #0]
    daea:	4b0a      	ldr	r3, [pc, #40]	; (db14 <RADIO_RxHandler+0xf8>)
    daec:	47a8      	blx	r5
    daee:	e7ba      	b.n	da66 <RADIO_RxHandler+0x4a>
    daf0:	0000d9e9 	.word	0x0000d9e9
    daf4:	0000d62d 	.word	0x0000d62d
    daf8:	20001de0 	.word	0x20001de0
    dafc:	0000cdb9 	.word	0x0000cdb9
    db00:	200037b0 	.word	0x200037b0
    db04:	0000afed 	.word	0x0000afed
    db08:	0000c215 	.word	0x0000c215
    db0c:	0000d695 	.word	0x0000d695
    db10:	0000bbd9 	.word	0x0000bbd9
    db14:	0000d725 	.word	0x0000d725

0000db18 <Radio_ResetClockInput>:
    db18:	b510      	push	{r4, lr}
    db1a:	4b04      	ldr	r3, [pc, #16]	; (db2c <Radio_ResetClockInput+0x14>)
    db1c:	3355      	adds	r3, #85	; 0x55
    db1e:	781b      	ldrb	r3, [r3, #0]
    db20:	2b00      	cmp	r3, #0
    db22:	d101      	bne.n	db28 <Radio_ResetClockInput+0x10>
    db24:	4b02      	ldr	r3, [pc, #8]	; (db30 <Radio_ResetClockInput+0x18>)
    db26:	4798      	blx	r3
    db28:	bd10      	pop	{r4, pc}
    db2a:	46c0      	nop			; (mov r8, r8)
    db2c:	200037b0 	.word	0x200037b0
    db30:	0000b151 	.word	0x0000b151

0000db34 <RADIO_InitDefaultAttributes>:
    db34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db36:	2501      	movs	r5, #1
    db38:	4b64      	ldr	r3, [pc, #400]	; (dccc <RADIO_InitDefaultAttributes+0x198>)
    db3a:	4c65      	ldr	r4, [pc, #404]	; (dcd0 <RADIO_InitDefaultAttributes+0x19c>)
    db3c:	701d      	strb	r5, [r3, #0]
    db3e:	4b65      	ldr	r3, [pc, #404]	; (dcd4 <RADIO_InitDefaultAttributes+0x1a0>)
    db40:	2207      	movs	r2, #7
    db42:	6023      	str	r3, [r4, #0]
    db44:	4b64      	ldr	r3, [pc, #400]	; (dcd8 <RADIO_InitDefaultAttributes+0x1a4>)
    db46:	18a1      	adds	r1, r4, r2
    db48:	6063      	str	r3, [r4, #4]
    db4a:	4b64      	ldr	r3, [pc, #400]	; (dcdc <RADIO_InitDefaultAttributes+0x1a8>)
    db4c:	0027      	movs	r7, r4
    db4e:	60a3      	str	r3, [r4, #8]
    db50:	0023      	movs	r3, r4
    db52:	3334      	adds	r3, #52	; 0x34
    db54:	701d      	strb	r5, [r3, #0]
    db56:	0023      	movs	r3, r4
    db58:	3336      	adds	r3, #54	; 0x36
    db5a:	701a      	strb	r2, [r3, #0]
    db5c:	1ce3      	adds	r3, r4, #3
    db5e:	77dd      	strb	r5, [r3, #31]
    db60:	0023      	movs	r3, r4
    db62:	3333      	adds	r3, #51	; 0x33
    db64:	701d      	strb	r5, [r3, #0]
    db66:	2300      	movs	r3, #0
    db68:	77cb      	strb	r3, [r1, #31]
    db6a:	2108      	movs	r1, #8
    db6c:	82a1      	strh	r1, [r4, #20]
    db6e:	0021      	movs	r1, r4
    db70:	3135      	adds	r1, #53	; 0x35
    db72:	700a      	strb	r2, [r1, #0]
    db74:	1d22      	adds	r2, r4, #4
    db76:	77d5      	strb	r5, [r2, #31]
    db78:	1d62      	adds	r2, r4, #5
    db7a:	77d3      	strb	r3, [r2, #31]
    db7c:	1da2      	adds	r2, r4, #6
    db7e:	77d3      	strb	r3, [r2, #31]
    db80:	2194      	movs	r1, #148	; 0x94
    db82:	22c1      	movs	r2, #193	; 0xc1
    db84:	76a1      	strb	r1, [r4, #26]
    db86:	7662      	strb	r2, [r4, #25]
    db88:	76e2      	strb	r2, [r4, #27]
    db8a:	3991      	subs	r1, #145	; 0x91
    db8c:	1ca2      	adds	r2, r4, #2
    db8e:	77d1      	strb	r1, [r2, #31]
    db90:	2234      	movs	r2, #52	; 0x34
    db92:	7622      	strb	r2, [r4, #24]
    db94:	0022      	movs	r2, r4
    db96:	317d      	adds	r1, #125	; 0x7d
    db98:	3232      	adds	r2, #50	; 0x32
    db9a:	7011      	strb	r1, [r2, #0]
    db9c:	4a50      	ldr	r2, [pc, #320]	; (dce0 <RADIO_InitDefaultAttributes+0x1ac>)
    db9e:	397e      	subs	r1, #126	; 0x7e
    dba0:	60e2      	str	r2, [r4, #12]
    dba2:	0022      	movs	r2, r4
    dba4:	3237      	adds	r2, #55	; 0x37
    dba6:	7011      	strb	r1, [r2, #0]
    dba8:	0022      	movs	r2, r4
    dbaa:	3109      	adds	r1, #9
    dbac:	3238      	adds	r2, #56	; 0x38
    dbae:	7011      	strb	r1, [r2, #0]
    dbb0:	0022      	movs	r2, r4
    dbb2:	3107      	adds	r1, #7
    dbb4:	3239      	adds	r2, #57	; 0x39
    dbb6:	7011      	strb	r1, [r2, #0]
    dbb8:	0022      	movs	r2, r4
    dbba:	322c      	adds	r2, #44	; 0x2c
    dbbc:	7013      	strb	r3, [r2, #0]
    dbbe:	4a49      	ldr	r2, [pc, #292]	; (dce4 <RADIO_InitDefaultAttributes+0x1b0>)
    dbc0:	82e3      	strh	r3, [r4, #22]
    dbc2:	62a2      	str	r2, [r4, #40]	; 0x28
    dbc4:	0022      	movs	r2, r4
    dbc6:	324c      	adds	r2, #76	; 0x4c
    dbc8:	8013      	strh	r3, [r2, #0]
    dbca:	0022      	movs	r2, r4
    dbcc:	324e      	adds	r2, #78	; 0x4e
    dbce:	7013      	strb	r3, [r2, #0]
    dbd0:	0022      	movs	r2, r4
    dbd2:	324f      	adds	r2, #79	; 0x4f
    dbd4:	7013      	strb	r3, [r2, #0]
    dbd6:	0022      	movs	r2, r4
    dbd8:	3240      	adds	r2, #64	; 0x40
    dbda:	7013      	strb	r3, [r2, #0]
    dbdc:	0022      	movs	r2, r4
    dbde:	3241      	adds	r2, #65	; 0x41
    dbe0:	7013      	strb	r3, [r2, #0]
    dbe2:	0022      	movs	r2, r4
    dbe4:	3254      	adds	r2, #84	; 0x54
    dbe6:	7013      	strb	r3, [r2, #0]
    dbe8:	0022      	movs	r2, r4
    dbea:	3255      	adds	r2, #85	; 0x55
    dbec:	7015      	strb	r5, [r2, #0]
    dbee:	0022      	movs	r2, r4
    dbf0:	3258      	adds	r2, #88	; 0x58
    dbf2:	6463      	str	r3, [r4, #68]	; 0x44
    dbf4:	64a3      	str	r3, [r4, #72]	; 0x48
    dbf6:	87a3      	strh	r3, [r4, #60]	; 0x3c
    dbf8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    dbfa:	7013      	strb	r3, [r2, #0]
    dbfc:	3730      	adds	r7, #48	; 0x30
    dbfe:	783b      	ldrb	r3, [r7, #0]
    dc00:	2b00      	cmp	r3, #0
    dc02:	d151      	bne.n	dca8 <RADIO_InitDefaultAttributes+0x174>
    dc04:	4838      	ldr	r0, [pc, #224]	; (dce8 <RADIO_InitDefaultAttributes+0x1b4>)
    dc06:	4e39      	ldr	r6, [pc, #228]	; (dcec <RADIO_InitDefaultAttributes+0x1b8>)
    dc08:	47b0      	blx	r6
    dc0a:	2808      	cmp	r0, #8
    dc0c:	d149      	bne.n	dca2 <RADIO_InitDefaultAttributes+0x16e>
    dc0e:	4838      	ldr	r0, [pc, #224]	; (dcf0 <RADIO_InitDefaultAttributes+0x1bc>)
    dc10:	47b0      	blx	r6
    dc12:	2808      	cmp	r0, #8
    dc14:	d145      	bne.n	dca2 <RADIO_InitDefaultAttributes+0x16e>
    dc16:	4837      	ldr	r0, [pc, #220]	; (dcf4 <RADIO_InitDefaultAttributes+0x1c0>)
    dc18:	47b0      	blx	r6
    dc1a:	2808      	cmp	r0, #8
    dc1c:	d141      	bne.n	dca2 <RADIO_InitDefaultAttributes+0x16e>
    dc1e:	4836      	ldr	r0, [pc, #216]	; (dcf8 <RADIO_InitDefaultAttributes+0x1c4>)
    dc20:	47b0      	blx	r6
    dc22:	2808      	cmp	r0, #8
    dc24:	d13d      	bne.n	dca2 <RADIO_InitDefaultAttributes+0x16e>
    dc26:	703d      	strb	r5, [r7, #0]
    dc28:	4b34      	ldr	r3, [pc, #208]	; (dcfc <RADIO_InitDefaultAttributes+0x1c8>)
    dc2a:	4798      	blx	r3
    dc2c:	4b34      	ldr	r3, [pc, #208]	; (dd00 <RADIO_InitDefaultAttributes+0x1cc>)
    dc2e:	4798      	blx	r3
    dc30:	2800      	cmp	r0, #0
    dc32:	d107      	bne.n	dc44 <RADIO_InitDefaultAttributes+0x110>
    dc34:	0023      	movs	r3, r4
    dc36:	3355      	adds	r3, #85	; 0x55
    dc38:	7018      	strb	r0, [r3, #0]
    dc3a:	4b32      	ldr	r3, [pc, #200]	; (dd04 <RADIO_InitDefaultAttributes+0x1d0>)
    dc3c:	4798      	blx	r3
    dc3e:	0023      	movs	r3, r4
    dc40:	3354      	adds	r3, #84	; 0x54
    dc42:	7018      	strb	r0, [r3, #0]
    dc44:	4b30      	ldr	r3, [pc, #192]	; (dd08 <RADIO_InitDefaultAttributes+0x1d4>)
    dc46:	4798      	blx	r3
    dc48:	2201      	movs	r2, #1
    dc4a:	2100      	movs	r1, #0
    dc4c:	0010      	movs	r0, r2
    dc4e:	4f2f      	ldr	r7, [pc, #188]	; (dd0c <RADIO_InitDefaultAttributes+0x1d8>)
    dc50:	47b8      	blx	r7
    dc52:	6820      	ldr	r0, [r4, #0]
    dc54:	4b2e      	ldr	r3, [pc, #184]	; (dd10 <RADIO_InitDefaultAttributes+0x1dc>)
    dc56:	4798      	blx	r3
    dc58:	2142      	movs	r1, #66	; 0x42
    dc5a:	203b      	movs	r0, #59	; 0x3b
    dc5c:	4d2d      	ldr	r5, [pc, #180]	; (dd14 <RADIO_InitDefaultAttributes+0x1e0>)
    dc5e:	47a8      	blx	r5
    dc60:	203b      	movs	r0, #59	; 0x3b
    dc62:	4b2d      	ldr	r3, [pc, #180]	; (dd18 <RADIO_InitDefaultAttributes+0x1e4>)
    dc64:	4798      	blx	r3
    dc66:	2620      	movs	r6, #32
    dc68:	4006      	ands	r6, r0
    dc6a:	d1f9      	bne.n	dc60 <RADIO_InitDefaultAttributes+0x12c>
    dc6c:	2123      	movs	r1, #35	; 0x23
    dc6e:	200c      	movs	r0, #12
    dc70:	47a8      	blx	r5
    dc72:	21aa      	movs	r1, #170	; 0xaa
    dc74:	201f      	movs	r0, #31
    dc76:	47a8      	blx	r5
    dc78:	21ff      	movs	r1, #255	; 0xff
    dc7a:	2032      	movs	r0, #50	; 0x32
    dc7c:	47a8      	blx	r5
    dc7e:	2140      	movs	r1, #64	; 0x40
    dc80:	2031      	movs	r0, #49	; 0x31
    dc82:	47a8      	blx	r5
    dc84:	2201      	movs	r2, #1
    dc86:	0030      	movs	r0, r6
    dc88:	0011      	movs	r1, r2
    dc8a:	47b8      	blx	r7
    dc8c:	21ff      	movs	r1, #255	; 0xff
    dc8e:	2023      	movs	r0, #35	; 0x23
    dc90:	47a8      	blx	r5
    dc92:	4b21      	ldr	r3, [pc, #132]	; (dd18 <RADIO_InitDefaultAttributes+0x1e4>)
    dc94:	2042      	movs	r0, #66	; 0x42
    dc96:	4798      	blx	r3
    dc98:	3431      	adds	r4, #49	; 0x31
    dc9a:	4b20      	ldr	r3, [pc, #128]	; (dd1c <RADIO_InitDefaultAttributes+0x1e8>)
    dc9c:	7020      	strb	r0, [r4, #0]
    dc9e:	4798      	blx	r3
    dca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dca2:	4b1f      	ldr	r3, [pc, #124]	; (dd20 <RADIO_InitDefaultAttributes+0x1ec>)
    dca4:	4798      	blx	r3
    dca6:	e7bf      	b.n	dc28 <RADIO_InitDefaultAttributes+0xf4>
    dca8:	0023      	movs	r3, r4
    dcaa:	332d      	adds	r3, #45	; 0x2d
    dcac:	4d1d      	ldr	r5, [pc, #116]	; (dd24 <RADIO_InitDefaultAttributes+0x1f0>)
    dcae:	7818      	ldrb	r0, [r3, #0]
    dcb0:	47a8      	blx	r5
    dcb2:	0023      	movs	r3, r4
    dcb4:	332e      	adds	r3, #46	; 0x2e
    dcb6:	7818      	ldrb	r0, [r3, #0]
    dcb8:	47a8      	blx	r5
    dcba:	0023      	movs	r3, r4
    dcbc:	332f      	adds	r3, #47	; 0x2f
    dcbe:	7818      	ldrb	r0, [r3, #0]
    dcc0:	47a8      	blx	r5
    dcc2:	0023      	movs	r3, r4
    dcc4:	3350      	adds	r3, #80	; 0x50
    dcc6:	7818      	ldrb	r0, [r3, #0]
    dcc8:	47a8      	blx	r5
    dcca:	e7ad      	b.n	dc28 <RADIO_InitDefaultAttributes+0xf4>
    dccc:	200039ab 	.word	0x200039ab
    dcd0:	200037b0 	.word	0x200037b0
    dcd4:	33be27a0 	.word	0x33be27a0
    dcd8:	000061a8 	.word	0x000061a8
    dcdc:	0000c350 	.word	0x0000c350
    dce0:	00003a98 	.word	0x00003a98
    dce4:	200038a8 	.word	0x200038a8
    dce8:	200037dd 	.word	0x200037dd
    dcec:	0000bba5 	.word	0x0000bba5
    dcf0:	200037de 	.word	0x200037de
    dcf4:	200037df 	.word	0x200037df
    dcf8:	20003800 	.word	0x20003800
    dcfc:	0000afad 	.word	0x0000afad
    dd00:	0000b131 	.word	0x0000b131
    dd04:	0000b12d 	.word	0x0000b12d
    dd08:	0000d9e9 	.word	0x0000d9e9
    dd0c:	0000c215 	.word	0x0000c215
    dd10:	0000cd71 	.word	0x0000cd71
    dd14:	0000afed 	.word	0x0000afed
    dd18:	0000b015 	.word	0x0000b015
    dd1c:	0000db19 	.word	0x0000db19
    dd20:	0000bae9 	.word	0x0000bae9
    dd24:	0000bef1 	.word	0x0000bef1

0000dd28 <RADIO_Receive>:
    dd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd2a:	7803      	ldrb	r3, [r0, #0]
    dd2c:	0006      	movs	r6, r0
    dd2e:	4d24      	ldr	r5, [pc, #144]	; (ddc0 <RADIO_Receive+0x98>)
    dd30:	2b00      	cmp	r3, #0
    dd32:	d11d      	bne.n	dd70 <RADIO_Receive+0x48>
    dd34:	782b      	ldrb	r3, [r5, #0]
    dd36:	2004      	movs	r0, #4
    dd38:	2b01      	cmp	r3, #1
    dd3a:	d118      	bne.n	dd6e <RADIO_Receive+0x46>
    dd3c:	4c21      	ldr	r4, [pc, #132]	; (ddc4 <RADIO_Receive+0x9c>)
    dd3e:	4f22      	ldr	r7, [pc, #136]	; (ddc8 <RADIO_Receive+0xa0>)
    dd40:	0023      	movs	r3, r4
    dd42:	332f      	adds	r3, #47	; 0x2f
    dd44:	7818      	ldrb	r0, [r3, #0]
    dd46:	47b8      	blx	r7
    dd48:	0023      	movs	r3, r4
    dd4a:	3334      	adds	r3, #52	; 0x34
    dd4c:	781b      	ldrb	r3, [r3, #0]
    dd4e:	2b00      	cmp	r3, #0
    dd50:	d102      	bne.n	dd58 <RADIO_Receive+0x30>
    dd52:	342e      	adds	r4, #46	; 0x2e
    dd54:	7820      	ldrb	r0, [r4, #0]
    dd56:	47b8      	blx	r7
    dd58:	8872      	ldrh	r2, [r6, #2]
    dd5a:	4b1c      	ldr	r3, [pc, #112]	; (ddcc <RADIO_Receive+0xa4>)
    dd5c:	2008      	movs	r0, #8
    dd5e:	801a      	strh	r2, [r3, #0]
    dd60:	2304      	movs	r3, #4
    dd62:	702b      	strb	r3, [r5, #0]
    dd64:	4b1a      	ldr	r3, [pc, #104]	; (ddd0 <RADIO_Receive+0xa8>)
    dd66:	4798      	blx	r3
    dd68:	4b1a      	ldr	r3, [pc, #104]	; (ddd4 <RADIO_Receive+0xac>)
    dd6a:	4798      	blx	r3
    dd6c:	2000      	movs	r0, #0
    dd6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dd70:	782b      	ldrb	r3, [r5, #0]
    dd72:	2000      	movs	r0, #0
    dd74:	2b01      	cmp	r3, #1
    dd76:	d0fa      	beq.n	dd6e <RADIO_Receive+0x46>
    dd78:	782b      	ldrb	r3, [r5, #0]
    dd7a:	3003      	adds	r0, #3
    dd7c:	2b04      	cmp	r3, #4
    dd7e:	d1f6      	bne.n	dd6e <RADIO_Receive+0x46>
    dd80:	4c10      	ldr	r4, [pc, #64]	; (ddc4 <RADIO_Receive+0x9c>)
    dd82:	4e11      	ldr	r6, [pc, #68]	; (ddc8 <RADIO_Receive+0xa0>)
    dd84:	0023      	movs	r3, r4
    dd86:	332f      	adds	r3, #47	; 0x2f
    dd88:	7818      	ldrb	r0, [r3, #0]
    dd8a:	47b0      	blx	r6
    dd8c:	0023      	movs	r3, r4
    dd8e:	3334      	adds	r3, #52	; 0x34
    dd90:	781b      	ldrb	r3, [r3, #0]
    dd92:	2b00      	cmp	r3, #0
    dd94:	d103      	bne.n	dd9e <RADIO_Receive+0x76>
    dd96:	0023      	movs	r3, r4
    dd98:	332e      	adds	r3, #46	; 0x2e
    dd9a:	7818      	ldrb	r0, [r3, #0]
    dd9c:	47b0      	blx	r6
    dd9e:	2200      	movs	r2, #0
    dda0:	3434      	adds	r4, #52	; 0x34
    dda2:	7821      	ldrb	r1, [r4, #0]
    dda4:	0010      	movs	r0, r2
    dda6:	4b0c      	ldr	r3, [pc, #48]	; (ddd8 <RADIO_Receive+0xb0>)
    dda8:	4798      	blx	r3
    ddaa:	4b0c      	ldr	r3, [pc, #48]	; (dddc <RADIO_Receive+0xb4>)
    ddac:	4798      	blx	r3
    ddae:	2301      	movs	r3, #1
    ddb0:	2008      	movs	r0, #8
    ddb2:	4c0b      	ldr	r4, [pc, #44]	; (dde0 <RADIO_Receive+0xb8>)
    ddb4:	702b      	strb	r3, [r5, #0]
    ddb6:	47a0      	blx	r4
    ddb8:	2002      	movs	r0, #2
    ddba:	47a0      	blx	r4
    ddbc:	e7d6      	b.n	dd6c <RADIO_Receive+0x44>
    ddbe:	46c0      	nop			; (mov r8, r8)
    ddc0:	200039ab 	.word	0x200039ab
    ddc4:	200037b0 	.word	0x200037b0
    ddc8:	0000bef1 	.word	0x0000bef1
    ddcc:	20001de0 	.word	0x20001de0
    ddd0:	0000d379 	.word	0x0000d379
    ddd4:	0000d9e9 	.word	0x0000d9e9
    ddd8:	0000c215 	.word	0x0000c215
    dddc:	0000db19 	.word	0x0000db19
    dde0:	0000d3a5 	.word	0x0000d3a5

0000dde4 <RADIO_TxHandler>:
    dde4:	b5f0      	push	{r4, r5, r6, r7, lr}
    dde6:	2500      	movs	r5, #0
    dde8:	b087      	sub	sp, #28
    ddea:	ae03      	add	r6, sp, #12
    ddec:	4f56      	ldr	r7, [pc, #344]	; (df48 <RADIO_TxHandler+0x164>)
    ddee:	7035      	strb	r5, [r6, #0]
    ddf0:	47b8      	blx	r7
    ddf2:	4c56      	ldr	r4, [pc, #344]	; (df4c <RADIO_TxHandler+0x168>)
    ddf4:	0023      	movs	r3, r4
    ddf6:	332d      	adds	r3, #45	; 0x2d
    ddf8:	7818      	ldrb	r0, [r3, #0]
    ddfa:	4b55      	ldr	r3, [pc, #340]	; (df50 <RADIO_TxHandler+0x16c>)
    ddfc:	4798      	blx	r3
    ddfe:	0023      	movs	r3, r4
    de00:	3341      	adds	r3, #65	; 0x41
    de02:	781b      	ldrb	r3, [r3, #0]
    de04:	42ab      	cmp	r3, r5
    de06:	d021      	beq.n	de4c <RADIO_TxHandler+0x68>
    de08:	2214      	movs	r2, #20
    de0a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    de0c:	4353      	muls	r3, r2
    de0e:	0022      	movs	r2, r4
    de10:	3240      	adds	r2, #64	; 0x40
    de12:	7013      	strb	r3, [r2, #0]
    de14:	47b8      	blx	r7
    de16:	0028      	movs	r0, r5
    de18:	4b4e      	ldr	r3, [pc, #312]	; (df54 <RADIO_TxHandler+0x170>)
    de1a:	4798      	blx	r3
    de1c:	6820      	ldr	r0, [r4, #0]
    de1e:	4b4e      	ldr	r3, [pc, #312]	; (df58 <RADIO_TxHandler+0x174>)
    de20:	4798      	blx	r3
    de22:	0023      	movs	r3, r4
    de24:	2201      	movs	r2, #1
    de26:	334c      	adds	r3, #76	; 0x4c
    de28:	0029      	movs	r1, r5
    de2a:	0028      	movs	r0, r5
    de2c:	4f4b      	ldr	r7, [pc, #300]	; (df5c <RADIO_TxHandler+0x178>)
    de2e:	801d      	strh	r5, [r3, #0]
    de30:	47b8      	blx	r7
    de32:	2109      	movs	r1, #9
    de34:	2012      	movs	r0, #18
    de36:	4b4a      	ldr	r3, [pc, #296]	; (df60 <RADIO_TxHandler+0x17c>)
    de38:	4798      	blx	r3
    de3a:	2201      	movs	r2, #1
    de3c:	0029      	movs	r1, r5
    de3e:	2005      	movs	r0, #5
    de40:	47b8      	blx	r7
    de42:	0023      	movs	r3, r4
    de44:	3340      	adds	r3, #64	; 0x40
    de46:	781b      	ldrb	r3, [r3, #0]
    de48:	42ab      	cmp	r3, r5
    de4a:	d846      	bhi.n	deda <RADIO_TxHandler+0xf6>
    de4c:	7833      	ldrb	r3, [r6, #0]
    de4e:	2b07      	cmp	r3, #7
    de50:	d076      	beq.n	df40 <RADIO_TxHandler+0x15c>
    de52:	2001      	movs	r0, #1
    de54:	4b3f      	ldr	r3, [pc, #252]	; (df54 <RADIO_TxHandler+0x170>)
    de56:	4798      	blx	r3
    de58:	4b42      	ldr	r3, [pc, #264]	; (df64 <RADIO_TxHandler+0x180>)
    de5a:	2004      	movs	r0, #4
    de5c:	4798      	blx	r3
    de5e:	4b42      	ldr	r3, [pc, #264]	; (df68 <RADIO_TxHandler+0x184>)
    de60:	4d3f      	ldr	r5, [pc, #252]	; (df60 <RADIO_TxHandler+0x17c>)
    de62:	781f      	ldrb	r7, [r3, #0]
    de64:	4e41      	ldr	r6, [pc, #260]	; (df6c <RADIO_TxHandler+0x188>)
    de66:	2f01      	cmp	r7, #1
    de68:	d144      	bne.n	def4 <RADIO_TxHandler+0x110>
    de6a:	7831      	ldrb	r1, [r6, #0]
    de6c:	2022      	movs	r0, #34	; 0x22
    de6e:	47a8      	blx	r5
    de70:	4b3f      	ldr	r3, [pc, #252]	; (df70 <RADIO_TxHandler+0x18c>)
    de72:	200a      	movs	r0, #10
    de74:	4798      	blx	r3
    de76:	21f0      	movs	r1, #240	; 0xf0
    de78:	4008      	ands	r0, r1
    de7a:	39e8      	subs	r1, #232	; 0xe8
    de7c:	4301      	orrs	r1, r0
    de7e:	200a      	movs	r0, #10
    de80:	47a8      	blx	r5
    de82:	2140      	movs	r1, #64	; 0x40
    de84:	0008      	movs	r0, r1
    de86:	47a8      	blx	r5
    de88:	2100      	movs	r1, #0
    de8a:	2041      	movs	r0, #65	; 0x41
    de8c:	47a8      	blx	r5
    de8e:	4b36      	ldr	r3, [pc, #216]	; (df68 <RADIO_TxHandler+0x184>)
    de90:	003a      	movs	r2, r7
    de92:	7819      	ldrb	r1, [r3, #0]
    de94:	0038      	movs	r0, r7
    de96:	4b31      	ldr	r3, [pc, #196]	; (df5c <RADIO_TxHandler+0x178>)
    de98:	4798      	blx	r3
    de9a:	4b36      	ldr	r3, [pc, #216]	; (df74 <RADIO_TxHandler+0x190>)
    de9c:	7832      	ldrb	r2, [r6, #0]
    de9e:	6819      	ldr	r1, [r3, #0]
    dea0:	2000      	movs	r0, #0
    dea2:	4b35      	ldr	r3, [pc, #212]	; (df78 <RADIO_TxHandler+0x194>)
    dea4:	4798      	blx	r3
    dea6:	0023      	movs	r3, r4
    dea8:	3334      	adds	r3, #52	; 0x34
    deaa:	7819      	ldrb	r1, [r3, #0]
    deac:	2200      	movs	r2, #0
    deae:	2003      	movs	r0, #3
    deb0:	4b2a      	ldr	r3, [pc, #168]	; (df5c <RADIO_TxHandler+0x178>)
    deb2:	4798      	blx	r3
    deb4:	4b31      	ldr	r3, [pc, #196]	; (df7c <RADIO_TxHandler+0x198>)
    deb6:	4798      	blx	r3
    deb8:	4b31      	ldr	r3, [pc, #196]	; (df80 <RADIO_TxHandler+0x19c>)
    deba:	6018      	str	r0, [r3, #0]
    debc:	6059      	str	r1, [r3, #4]
    debe:	68e3      	ldr	r3, [r4, #12]
    dec0:	2b00      	cmp	r3, #0
    dec2:	d03d      	beq.n	df40 <RADIO_TxHandler+0x15c>
    dec4:	21fa      	movs	r1, #250	; 0xfa
    dec6:	2200      	movs	r2, #0
    dec8:	342f      	adds	r4, #47	; 0x2f
    deca:	0089      	lsls	r1, r1, #2
    decc:	4359      	muls	r1, r3
    dece:	7820      	ldrb	r0, [r4, #0]
    ded0:	4b2c      	ldr	r3, [pc, #176]	; (df84 <RADIO_TxHandler+0x1a0>)
    ded2:	9200      	str	r2, [sp, #0]
    ded4:	4c2c      	ldr	r4, [pc, #176]	; (df88 <RADIO_TxHandler+0x1a4>)
    ded6:	47a0      	blx	r4
    ded8:	e032      	b.n	df40 <RADIO_TxHandler+0x15c>
    deda:	4f2c      	ldr	r7, [pc, #176]	; (df8c <RADIO_TxHandler+0x1a8>)
    dedc:	4b2c      	ldr	r3, [pc, #176]	; (df90 <RADIO_TxHandler+0x1ac>)
    dede:	0038      	movs	r0, r7
    dee0:	4798      	blx	r3
    dee2:	233e      	movs	r3, #62	; 0x3e
    dee4:	5ee2      	ldrsh	r2, [r4, r3]
    dee6:	2100      	movs	r1, #0
    dee8:	5e7b      	ldrsh	r3, [r7, r1]
    deea:	429a      	cmp	r2, r3
    deec:	db14      	blt.n	df18 <RADIO_TxHandler+0x134>
    deee:	3501      	adds	r5, #1
    def0:	b2ed      	uxtb	r5, r5
    def2:	e7a6      	b.n	de42 <RADIO_TxHandler+0x5e>
    def4:	2100      	movs	r1, #0
    def6:	2040      	movs	r0, #64	; 0x40
    def8:	47a8      	blx	r5
    defa:	2100      	movs	r1, #0
    defc:	2041      	movs	r0, #65	; 0x41
    defe:	47a8      	blx	r5
    df00:	0023      	movs	r3, r4
    df02:	2000      	movs	r0, #0
    df04:	3358      	adds	r3, #88	; 0x58
    df06:	7831      	ldrb	r1, [r6, #0]
    df08:	7018      	strb	r0, [r3, #0]
    df0a:	47a8      	blx	r5
    df0c:	4b19      	ldr	r3, [pc, #100]	; (df74 <RADIO_TxHandler+0x190>)
    df0e:	7831      	ldrb	r1, [r6, #0]
    df10:	6818      	ldr	r0, [r3, #0]
    df12:	4b20      	ldr	r3, [pc, #128]	; (df94 <RADIO_TxHandler+0x1b0>)
    df14:	4798      	blx	r3
    df16:	e7c6      	b.n	dea6 <RADIO_TxHandler+0xc2>
    df18:	2000      	movs	r0, #0
    df1a:	4b1f      	ldr	r3, [pc, #124]	; (df98 <RADIO_TxHandler+0x1b4>)
    df1c:	4798      	blx	r3
    df1e:	4b1f      	ldr	r3, [pc, #124]	; (df9c <RADIO_TxHandler+0x1b8>)
    df20:	4798      	blx	r3
    df22:	2307      	movs	r3, #7
    df24:	2201      	movs	r2, #1
    df26:	7033      	strb	r3, [r6, #0]
    df28:	4b1d      	ldr	r3, [pc, #116]	; (dfa0 <RADIO_TxHandler+0x1bc>)
    df2a:	701a      	strb	r2, [r3, #0]
    df2c:	4b1d      	ldr	r3, [pc, #116]	; (dfa4 <RADIO_TxHandler+0x1c0>)
    df2e:	781b      	ldrb	r3, [r3, #0]
    df30:	079b      	lsls	r3, r3, #30
    df32:	d58b      	bpl.n	de4c <RADIO_TxHandler+0x68>
    df34:	6923      	ldr	r3, [r4, #16]
    df36:	2b00      	cmp	r3, #0
    df38:	d088      	beq.n	de4c <RADIO_TxHandler+0x68>
    df3a:	0031      	movs	r1, r6
    df3c:	2002      	movs	r0, #2
    df3e:	4798      	blx	r3
    df40:	2000      	movs	r0, #0
    df42:	b007      	add	sp, #28
    df44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df46:	46c0      	nop			; (mov r8, r8)
    df48:	0000d9e9 	.word	0x0000d9e9
    df4c:	200037b0 	.word	0x200037b0
    df50:	0000bef1 	.word	0x0000bef1
    df54:	0000d62d 	.word	0x0000d62d
    df58:	0000cd71 	.word	0x0000cd71
    df5c:	0000c215 	.word	0x0000c215
    df60:	0000afed 	.word	0x0000afed
    df64:	0000cdb9 	.word	0x0000cdb9
    df68:	200037e4 	.word	0x200037e4
    df6c:	20001df4 	.word	0x20001df4
    df70:	0000b015 	.word	0x0000b015
    df74:	20001df0 	.word	0x20001df0
    df78:	0000b041 	.word	0x0000b041
    df7c:	0000bb81 	.word	0x0000bb81
    df80:	20001de8 	.word	0x20001de8
    df84:	0000d695 	.word	0x0000d695
    df88:	0000bbd9 	.word	0x0000bbd9
    df8c:	20001dde 	.word	0x20001dde
    df90:	0000c431 	.word	0x0000c431
    df94:	0000d4a9 	.word	0x0000d4a9
    df98:	0000d661 	.word	0x0000d661
    df9c:	0000db19 	.word	0x0000db19
    dfa0:	200039ab 	.word	0x200039ab
    dfa4:	200039aa 	.word	0x200039aa

0000dfa8 <RADIO_TxDoneHandler>:
    dfa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfaa:	4b35      	ldr	r3, [pc, #212]	; (e080 <RADIO_TxDoneHandler+0xd8>)
    dfac:	b087      	sub	sp, #28
    dfae:	881a      	ldrh	r2, [r3, #0]
    dfb0:	06d2      	lsls	r2, r2, #27
    dfb2:	0fd2      	lsrs	r2, r2, #31
    dfb4:	9200      	str	r2, [sp, #0]
    dfb6:	466a      	mov	r2, sp
    dfb8:	7810      	ldrb	r0, [r2, #0]
    dfba:	881a      	ldrh	r2, [r3, #0]
    dfbc:	2801      	cmp	r0, #1
    dfbe:	d12b      	bne.n	e018 <RADIO_TxDoneHandler+0x70>
    dfc0:	4c30      	ldr	r4, [pc, #192]	; (e084 <RADIO_TxDoneHandler+0xdc>)
    dfc2:	2110      	movs	r1, #16
    dfc4:	0027      	movs	r7, r4
    dfc6:	2500      	movs	r5, #0
    dfc8:	438a      	bics	r2, r1
    dfca:	801a      	strh	r2, [r3, #0]
    dfcc:	3734      	adds	r7, #52	; 0x34
    dfce:	0002      	movs	r2, r0
    dfd0:	7839      	ldrb	r1, [r7, #0]
    dfd2:	4b2d      	ldr	r3, [pc, #180]	; (e088 <RADIO_TxDoneHandler+0xe0>)
    dfd4:	4798      	blx	r3
    dfd6:	68e3      	ldr	r3, [r4, #12]
    dfd8:	ae03      	add	r6, sp, #12
    dfda:	9304      	str	r3, [sp, #16]
    dfdc:	7035      	strb	r5, [r6, #0]
    dfde:	002a      	movs	r2, r5
    dfe0:	4b29      	ldr	r3, [pc, #164]	; (e088 <RADIO_TxDoneHandler+0xe0>)
    dfe2:	7839      	ldrb	r1, [r7, #0]
    dfe4:	0028      	movs	r0, r5
    dfe6:	4798      	blx	r3
    dfe8:	466a      	mov	r2, sp
    dfea:	4b28      	ldr	r3, [pc, #160]	; (e08c <RADIO_TxDoneHandler+0xe4>)
    dfec:	7812      	ldrb	r2, [r2, #0]
    dfee:	701a      	strb	r2, [r3, #0]
    dff0:	0023      	movs	r3, r4
    dff2:	3358      	adds	r3, #88	; 0x58
    dff4:	701d      	strb	r5, [r3, #0]
    dff6:	4b26      	ldr	r3, [pc, #152]	; (e090 <RADIO_TxDoneHandler+0xe8>)
    dff8:	781b      	ldrb	r3, [r3, #0]
    dffa:	075b      	lsls	r3, r3, #29
    dffc:	d505      	bpl.n	e00a <RADIO_TxDoneHandler+0x62>
    dffe:	6923      	ldr	r3, [r4, #16]
    e000:	42ab      	cmp	r3, r5
    e002:	d002      	beq.n	e00a <RADIO_TxDoneHandler+0x62>
    e004:	0031      	movs	r1, r6
    e006:	2004      	movs	r0, #4
    e008:	4798      	blx	r3
    e00a:	4b22      	ldr	r3, [pc, #136]	; (e094 <RADIO_TxDoneHandler+0xec>)
    e00c:	4798      	blx	r3
    e00e:	4b22      	ldr	r3, [pc, #136]	; (e098 <RADIO_TxDoneHandler+0xf0>)
    e010:	4798      	blx	r3
    e012:	2000      	movs	r0, #0
    e014:	b007      	add	sp, #28
    e016:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e018:	07d2      	lsls	r2, r2, #31
    e01a:	d402      	bmi.n	e022 <RADIO_TxDoneHandler+0x7a>
    e01c:	881a      	ldrh	r2, [r3, #0]
    e01e:	0752      	lsls	r2, r2, #29
    e020:	d527      	bpl.n	e072 <RADIO_TxDoneHandler+0xca>
    e022:	2601      	movs	r6, #1
    e024:	2104      	movs	r1, #4
    e026:	881a      	ldrh	r2, [r3, #0]
    e028:	4f16      	ldr	r7, [pc, #88]	; (e084 <RADIO_TxDoneHandler+0xdc>)
    e02a:	43b2      	bics	r2, r6
    e02c:	801a      	strh	r2, [r3, #0]
    e02e:	881a      	ldrh	r2, [r3, #0]
    e030:	2400      	movs	r4, #0
    e032:	438a      	bics	r2, r1
    e034:	801a      	strh	r2, [r3, #0]
    e036:	4b19      	ldr	r3, [pc, #100]	; (e09c <RADIO_TxDoneHandler+0xf4>)
    e038:	ad03      	add	r5, sp, #12
    e03a:	681b      	ldr	r3, [r3, #0]
    e03c:	702c      	strb	r4, [r5, #0]
    e03e:	9304      	str	r3, [sp, #16]
    e040:	003b      	movs	r3, r7
    e042:	3334      	adds	r3, #52	; 0x34
    e044:	7819      	ldrb	r1, [r3, #0]
    e046:	0022      	movs	r2, r4
    e048:	0020      	movs	r0, r4
    e04a:	4b0f      	ldr	r3, [pc, #60]	; (e088 <RADIO_TxDoneHandler+0xe0>)
    e04c:	4798      	blx	r3
    e04e:	4b14      	ldr	r3, [pc, #80]	; (e0a0 <RADIO_TxDoneHandler+0xf8>)
    e050:	4798      	blx	r3
    e052:	4b0e      	ldr	r3, [pc, #56]	; (e08c <RADIO_TxDoneHandler+0xe4>)
    e054:	701e      	strb	r6, [r3, #0]
    e056:	003b      	movs	r3, r7
    e058:	3358      	adds	r3, #88	; 0x58
    e05a:	701c      	strb	r4, [r3, #0]
    e05c:	4b0c      	ldr	r3, [pc, #48]	; (e090 <RADIO_TxDoneHandler+0xe8>)
    e05e:	781b      	ldrb	r3, [r3, #0]
    e060:	079b      	lsls	r3, r3, #30
    e062:	d5d6      	bpl.n	e012 <RADIO_TxDoneHandler+0x6a>
    e064:	693b      	ldr	r3, [r7, #16]
    e066:	42a3      	cmp	r3, r4
    e068:	d0d3      	beq.n	e012 <RADIO_TxDoneHandler+0x6a>
    e06a:	0029      	movs	r1, r5
    e06c:	2002      	movs	r0, #2
    e06e:	4798      	blx	r3
    e070:	e7cf      	b.n	e012 <RADIO_TxDoneHandler+0x6a>
    e072:	881b      	ldrh	r3, [r3, #0]
    e074:	059b      	lsls	r3, r3, #22
    e076:	d5cc      	bpl.n	e012 <RADIO_TxDoneHandler+0x6a>
    e078:	4b0a      	ldr	r3, [pc, #40]	; (e0a4 <RADIO_TxDoneHandler+0xfc>)
    e07a:	4798      	blx	r3
    e07c:	e7c9      	b.n	e012 <RADIO_TxDoneHandler+0x6a>
    e07e:	46c0      	nop			; (mov r8, r8)
    e080:	200039a8 	.word	0x200039a8
    e084:	200037b0 	.word	0x200037b0
    e088:	0000c215 	.word	0x0000c215
    e08c:	200039ab 	.word	0x200039ab
    e090:	200039aa 	.word	0x200039aa
    e094:	0000afad 	.word	0x0000afad
    e098:	0000db35 	.word	0x0000db35
    e09c:	20001de8 	.word	0x20001de8
    e0a0:	0000db19 	.word	0x0000db19
    e0a4:	00011b0d 	.word	0x00011b0d

0000e0a8 <RADIO_RxDoneHandler>:
    e0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0aa:	4b97      	ldr	r3, [pc, #604]	; (e308 <RADIO_RxDoneHandler+0x260>)
    e0ac:	b085      	sub	sp, #20
    e0ae:	881c      	ldrh	r4, [r3, #0]
    e0b0:	881a      	ldrh	r2, [r3, #0]
    e0b2:	06a4      	lsls	r4, r4, #26
    e0b4:	0fe4      	lsrs	r4, r4, #31
    e0b6:	b2e0      	uxtb	r0, r4
    e0b8:	2801      	cmp	r0, #1
    e0ba:	d126      	bne.n	e10a <RADIO_RxDoneHandler+0x62>
    e0bc:	4d93      	ldr	r5, [pc, #588]	; (e30c <RADIO_RxDoneHandler+0x264>)
    e0be:	2120      	movs	r1, #32
    e0c0:	002e      	movs	r6, r5
    e0c2:	438a      	bics	r2, r1
    e0c4:	801a      	strh	r2, [r3, #0]
    e0c6:	3634      	adds	r6, #52	; 0x34
    e0c8:	0002      	movs	r2, r0
    e0ca:	7831      	ldrb	r1, [r6, #0]
    e0cc:	4f90      	ldr	r7, [pc, #576]	; (e310 <RADIO_RxDoneHandler+0x268>)
    e0ce:	47b8      	blx	r7
    e0d0:	2200      	movs	r2, #0
    e0d2:	7831      	ldrb	r1, [r6, #0]
    e0d4:	0010      	movs	r0, r2
    e0d6:	47b8      	blx	r7
    e0d8:	4b8e      	ldr	r3, [pc, #568]	; (e314 <RADIO_RxDoneHandler+0x26c>)
    e0da:	4798      	blx	r3
    e0dc:	4b8e      	ldr	r3, [pc, #568]	; (e318 <RADIO_RxDoneHandler+0x270>)
    e0de:	002a      	movs	r2, r5
    e0e0:	701c      	strb	r4, [r3, #0]
    e0e2:	2300      	movs	r3, #0
    e0e4:	322c      	adds	r2, #44	; 0x2c
    e0e6:	7013      	strb	r3, [r2, #0]
    e0e8:	002a      	movs	r2, r5
    e0ea:	a901      	add	r1, sp, #4
    e0ec:	3258      	adds	r2, #88	; 0x58
    e0ee:	7013      	strb	r3, [r2, #0]
    e0f0:	700b      	strb	r3, [r1, #0]
    e0f2:	4b8a      	ldr	r3, [pc, #552]	; (e31c <RADIO_RxDoneHandler+0x274>)
    e0f4:	781b      	ldrb	r3, [r3, #0]
    e0f6:	071b      	lsls	r3, r3, #28
    e0f8:	d504      	bpl.n	e104 <RADIO_RxDoneHandler+0x5c>
    e0fa:	692b      	ldr	r3, [r5, #16]
    e0fc:	2008      	movs	r0, #8
    e0fe:	2b00      	cmp	r3, #0
    e100:	d000      	beq.n	e104 <RADIO_RxDoneHandler+0x5c>
    e102:	e084      	b.n	e20e <RADIO_RxDoneHandler+0x166>
    e104:	2000      	movs	r0, #0
    e106:	b005      	add	sp, #20
    e108:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e10a:	0652      	lsls	r2, r2, #25
    e10c:	d402      	bmi.n	e114 <RADIO_RxDoneHandler+0x6c>
    e10e:	881a      	ldrh	r2, [r3, #0]
    e110:	0612      	lsls	r2, r2, #24
    e112:	d523      	bpl.n	e15c <RADIO_RxDoneHandler+0xb4>
    e114:	2140      	movs	r1, #64	; 0x40
    e116:	881a      	ldrh	r2, [r3, #0]
    e118:	4c7c      	ldr	r4, [pc, #496]	; (e30c <RADIO_RxDoneHandler+0x264>)
    e11a:	438a      	bics	r2, r1
    e11c:	801a      	strh	r2, [r3, #0]
    e11e:	881a      	ldrh	r2, [r3, #0]
    e120:	1849      	adds	r1, r1, r1
    e122:	438a      	bics	r2, r1
    e124:	801a      	strh	r2, [r3, #0]
    e126:	0023      	movs	r3, r4
    e128:	2200      	movs	r2, #0
    e12a:	3334      	adds	r3, #52	; 0x34
    e12c:	7819      	ldrb	r1, [r3, #0]
    e12e:	0010      	movs	r0, r2
    e130:	4b77      	ldr	r3, [pc, #476]	; (e310 <RADIO_RxDoneHandler+0x268>)
    e132:	4798      	blx	r3
    e134:	4b77      	ldr	r3, [pc, #476]	; (e314 <RADIO_RxDoneHandler+0x26c>)
    e136:	4798      	blx	r3
    e138:	2201      	movs	r2, #1
    e13a:	4b77      	ldr	r3, [pc, #476]	; (e318 <RADIO_RxDoneHandler+0x270>)
    e13c:	a901      	add	r1, sp, #4
    e13e:	701a      	strb	r2, [r3, #0]
    e140:	0022      	movs	r2, r4
    e142:	2300      	movs	r3, #0
    e144:	322c      	adds	r2, #44	; 0x2c
    e146:	7013      	strb	r3, [r2, #0]
    e148:	0022      	movs	r2, r4
    e14a:	3258      	adds	r2, #88	; 0x58
    e14c:	7013      	strb	r3, [r2, #0]
    e14e:	700b      	strb	r3, [r1, #0]
    e150:	4b72      	ldr	r3, [pc, #456]	; (e31c <RADIO_RxDoneHandler+0x274>)
    e152:	781b      	ldrb	r3, [r3, #0]
    e154:	071b      	lsls	r3, r3, #28
    e156:	d5d5      	bpl.n	e104 <RADIO_RxDoneHandler+0x5c>
    e158:	6923      	ldr	r3, [r4, #16]
    e15a:	e7cf      	b.n	e0fc <RADIO_RxDoneHandler+0x54>
    e15c:	881a      	ldrh	r2, [r3, #0]
    e15e:	0792      	lsls	r2, r2, #30
    e160:	d571      	bpl.n	e246 <RADIO_RxDoneHandler+0x19e>
    e162:	2102      	movs	r1, #2
    e164:	881a      	ldrh	r2, [r3, #0]
    e166:	4d6e      	ldr	r5, [pc, #440]	; (e320 <RADIO_RxDoneHandler+0x278>)
    e168:	438a      	bics	r2, r1
    e16a:	801a      	strh	r2, [r3, #0]
    e16c:	2013      	movs	r0, #19
    e16e:	47a8      	blx	r5
    e170:	4c66      	ldr	r4, [pc, #408]	; (e30c <RADIO_RxDoneHandler+0x264>)
    e172:	2100      	movs	r1, #0
    e174:	0026      	movs	r6, r4
    e176:	362c      	adds	r6, #44	; 0x2c
    e178:	7030      	strb	r0, [r6, #0]
    e17a:	4b6a      	ldr	r3, [pc, #424]	; (e324 <RADIO_RxDoneHandler+0x27c>)
    e17c:	200d      	movs	r0, #13
    e17e:	4798      	blx	r3
    e180:	7832      	ldrb	r2, [r6, #0]
    e182:	4b69      	ldr	r3, [pc, #420]	; (e328 <RADIO_RxDoneHandler+0x280>)
    e184:	b2d2      	uxtb	r2, r2
    e186:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    e188:	2000      	movs	r0, #0
    e18a:	4798      	blx	r3
    e18c:	2019      	movs	r0, #25
    e18e:	47a8      	blx	r5
    e190:	0023      	movs	r3, r4
    e192:	b240      	sxtb	r0, r0
    e194:	3332      	adds	r3, #50	; 0x32
    e196:	2800      	cmp	r0, #0
    e198:	da3b      	bge.n	e212 <RADIO_RxDoneHandler+0x16a>
    e19a:	4240      	negs	r0, r0
    e19c:	1080      	asrs	r0, r0, #2
    e19e:	4240      	negs	r0, r0
    e1a0:	7018      	strb	r0, [r3, #0]
    e1a2:	201a      	movs	r0, #26
    e1a4:	47a8      	blx	r5
    e1a6:	0023      	movs	r3, r4
    e1a8:	3332      	adds	r3, #50	; 0x32
    e1aa:	781b      	ldrb	r3, [r3, #0]
    e1ac:	b202      	sxth	r2, r0
    e1ae:	b25b      	sxtb	r3, r3
    e1b0:	4d5e      	ldr	r5, [pc, #376]	; (e32c <RADIO_RxDoneHandler+0x284>)
    e1b2:	2b00      	cmp	r3, #0
    e1b4:	da36      	bge.n	e224 <RADIO_RxDoneHandler+0x17c>
    e1b6:	6821      	ldr	r1, [r4, #0]
    e1b8:	4e5d      	ldr	r6, [pc, #372]	; (e330 <RADIO_RxDoneHandler+0x288>)
    e1ba:	198e      	adds	r6, r1, r6
    e1bc:	42ae      	cmp	r6, r5
    e1be:	d82a      	bhi.n	e216 <RADIO_RxDoneHandler+0x16e>
    e1c0:	3b9d      	subs	r3, #157	; 0x9d
    e1c2:	181b      	adds	r3, r3, r0
    e1c4:	1112      	asrs	r2, r2, #4
    e1c6:	189b      	adds	r3, r3, r2
    e1c8:	0022      	movs	r2, r4
    e1ca:	3256      	adds	r2, #86	; 0x56
    e1cc:	8013      	strh	r3, [r2, #0]
    e1ce:	0023      	movs	r3, r4
    e1d0:	2200      	movs	r2, #0
    e1d2:	3334      	adds	r3, #52	; 0x34
    e1d4:	7819      	ldrb	r1, [r3, #0]
    e1d6:	0010      	movs	r0, r2
    e1d8:	4b4d      	ldr	r3, [pc, #308]	; (e310 <RADIO_RxDoneHandler+0x268>)
    e1da:	4798      	blx	r3
    e1dc:	4b4d      	ldr	r3, [pc, #308]	; (e314 <RADIO_RxDoneHandler+0x26c>)
    e1de:	4798      	blx	r3
    e1e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e1e2:	a901      	add	r1, sp, #4
    e1e4:	604b      	str	r3, [r1, #4]
    e1e6:	0023      	movs	r3, r4
    e1e8:	332c      	adds	r3, #44	; 0x2c
    e1ea:	781b      	ldrb	r3, [r3, #0]
    e1ec:	2201      	movs	r2, #1
    e1ee:	720b      	strb	r3, [r1, #8]
    e1f0:	2300      	movs	r3, #0
    e1f2:	700b      	strb	r3, [r1, #0]
    e1f4:	4b48      	ldr	r3, [pc, #288]	; (e318 <RADIO_RxDoneHandler+0x270>)
    e1f6:	701a      	strb	r2, [r3, #0]
    e1f8:	4b48      	ldr	r3, [pc, #288]	; (e31c <RADIO_RxDoneHandler+0x274>)
    e1fa:	7818      	ldrb	r0, [r3, #0]
    e1fc:	07c0      	lsls	r0, r0, #31
    e1fe:	0fc0      	lsrs	r0, r0, #31
    e200:	4290      	cmp	r0, r2
    e202:	d000      	beq.n	e206 <RADIO_RxDoneHandler+0x15e>
    e204:	e77e      	b.n	e104 <RADIO_RxDoneHandler+0x5c>
    e206:	6923      	ldr	r3, [r4, #16]
    e208:	2b00      	cmp	r3, #0
    e20a:	d100      	bne.n	e20e <RADIO_RxDoneHandler+0x166>
    e20c:	e77a      	b.n	e104 <RADIO_RxDoneHandler+0x5c>
    e20e:	4798      	blx	r3
    e210:	e778      	b.n	e104 <RADIO_RxDoneHandler+0x5c>
    e212:	1080      	asrs	r0, r0, #2
    e214:	e7c4      	b.n	e1a0 <RADIO_RxDoneHandler+0xf8>
    e216:	4d47      	ldr	r5, [pc, #284]	; (e334 <RADIO_RxDoneHandler+0x28c>)
    e218:	1949      	adds	r1, r1, r5
    e21a:	4d47      	ldr	r5, [pc, #284]	; (e338 <RADIO_RxDoneHandler+0x290>)
    e21c:	42a9      	cmp	r1, r5
    e21e:	d8d6      	bhi.n	e1ce <RADIO_RxDoneHandler+0x126>
    e220:	3ba4      	subs	r3, #164	; 0xa4
    e222:	e7ce      	b.n	e1c2 <RADIO_RxDoneHandler+0x11a>
    e224:	6823      	ldr	r3, [r4, #0]
    e226:	4942      	ldr	r1, [pc, #264]	; (e330 <RADIO_RxDoneHandler+0x288>)
    e228:	1859      	adds	r1, r3, r1
    e22a:	42a9      	cmp	r1, r5
    e22c:	d802      	bhi.n	e234 <RADIO_RxDoneHandler+0x18c>
    e22e:	0003      	movs	r3, r0
    e230:	3b9d      	subs	r3, #157	; 0x9d
    e232:	e7c7      	b.n	e1c4 <RADIO_RxDoneHandler+0x11c>
    e234:	493f      	ldr	r1, [pc, #252]	; (e334 <RADIO_RxDoneHandler+0x28c>)
    e236:	185b      	adds	r3, r3, r1
    e238:	493f      	ldr	r1, [pc, #252]	; (e338 <RADIO_RxDoneHandler+0x290>)
    e23a:	428b      	cmp	r3, r1
    e23c:	d8c7      	bhi.n	e1ce <RADIO_RxDoneHandler+0x126>
    e23e:	38a4      	subs	r0, #164	; 0xa4
    e240:	1113      	asrs	r3, r2, #4
    e242:	18c3      	adds	r3, r0, r3
    e244:	e7c0      	b.n	e1c8 <RADIO_RxDoneHandler+0x120>
    e246:	881a      	ldrh	r2, [r3, #0]
    e248:	0712      	lsls	r2, r2, #28
    e24a:	0fd5      	lsrs	r5, r2, #31
    e24c:	2a00      	cmp	r2, #0
    e24e:	da27      	bge.n	e2a0 <RADIO_RxDoneHandler+0x1f8>
    e250:	2108      	movs	r1, #8
    e252:	881a      	ldrh	r2, [r3, #0]
    e254:	4c2d      	ldr	r4, [pc, #180]	; (e30c <RADIO_RxDoneHandler+0x264>)
    e256:	438a      	bics	r2, r1
    e258:	801a      	strh	r2, [r3, #0]
    e25a:	0023      	movs	r3, r4
    e25c:	2280      	movs	r2, #128	; 0x80
    e25e:	3332      	adds	r3, #50	; 0x32
    e260:	701a      	strb	r2, [r3, #0]
    e262:	0023      	movs	r3, r4
    e264:	2200      	movs	r2, #0
    e266:	3334      	adds	r3, #52	; 0x34
    e268:	7819      	ldrb	r1, [r3, #0]
    e26a:	0010      	movs	r0, r2
    e26c:	4b28      	ldr	r3, [pc, #160]	; (e310 <RADIO_RxDoneHandler+0x268>)
    e26e:	4798      	blx	r3
    e270:	4b28      	ldr	r3, [pc, #160]	; (e314 <RADIO_RxDoneHandler+0x26c>)
    e272:	4798      	blx	r3
    e274:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e276:	a901      	add	r1, sp, #4
    e278:	604b      	str	r3, [r1, #4]
    e27a:	0023      	movs	r3, r4
    e27c:	332c      	adds	r3, #44	; 0x2c
    e27e:	781b      	ldrb	r3, [r3, #0]
    e280:	0022      	movs	r2, r4
    e282:	720b      	strb	r3, [r1, #8]
    e284:	2300      	movs	r3, #0
    e286:	3258      	adds	r2, #88	; 0x58
    e288:	7013      	strb	r3, [r2, #0]
    e28a:	700b      	strb	r3, [r1, #0]
    e28c:	4b22      	ldr	r3, [pc, #136]	; (e318 <RADIO_RxDoneHandler+0x270>)
    e28e:	701d      	strb	r5, [r3, #0]
    e290:	4b22      	ldr	r3, [pc, #136]	; (e31c <RADIO_RxDoneHandler+0x274>)
    e292:	7818      	ldrb	r0, [r3, #0]
    e294:	07c0      	lsls	r0, r0, #31
    e296:	0fc0      	lsrs	r0, r0, #31
    e298:	2801      	cmp	r0, #1
    e29a:	d000      	beq.n	e29e <RADIO_RxDoneHandler+0x1f6>
    e29c:	e732      	b.n	e104 <RADIO_RxDoneHandler+0x5c>
    e29e:	e7b2      	b.n	e206 <RADIO_RxDoneHandler+0x15e>
    e2a0:	881a      	ldrh	r2, [r3, #0]
    e2a2:	05d2      	lsls	r2, r2, #23
    e2a4:	0fd5      	lsrs	r5, r2, #31
    e2a6:	2a00      	cmp	r2, #0
    e2a8:	db00      	blt.n	e2ac <RADIO_RxDoneHandler+0x204>
    e2aa:	e72b      	b.n	e104 <RADIO_RxDoneHandler+0x5c>
    e2ac:	4c17      	ldr	r4, [pc, #92]	; (e30c <RADIO_RxDoneHandler+0x264>)
    e2ae:	881a      	ldrh	r2, [r3, #0]
    e2b0:	0026      	movs	r6, r4
    e2b2:	4922      	ldr	r1, [pc, #136]	; (e33c <RADIO_RxDoneHandler+0x294>)
    e2b4:	362c      	adds	r6, #44	; 0x2c
    e2b6:	400a      	ands	r2, r1
    e2b8:	801a      	strh	r2, [r3, #0]
    e2ba:	7832      	ldrb	r2, [r6, #0]
    e2bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    e2be:	b2d2      	uxtb	r2, r2
    e2c0:	2000      	movs	r0, #0
    e2c2:	4b19      	ldr	r3, [pc, #100]	; (e328 <RADIO_RxDoneHandler+0x280>)
    e2c4:	4798      	blx	r3
    e2c6:	0023      	movs	r3, r4
    e2c8:	2200      	movs	r2, #0
    e2ca:	3334      	adds	r3, #52	; 0x34
    e2cc:	7819      	ldrb	r1, [r3, #0]
    e2ce:	0010      	movs	r0, r2
    e2d0:	4b0f      	ldr	r3, [pc, #60]	; (e310 <RADIO_RxDoneHandler+0x268>)
    e2d2:	4798      	blx	r3
    e2d4:	4b0f      	ldr	r3, [pc, #60]	; (e314 <RADIO_RxDoneHandler+0x26c>)
    e2d6:	4798      	blx	r3
    e2d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e2da:	a901      	add	r1, sp, #4
    e2dc:	604b      	str	r3, [r1, #4]
    e2de:	7833      	ldrb	r3, [r6, #0]
    e2e0:	0022      	movs	r2, r4
    e2e2:	720b      	strb	r3, [r1, #8]
    e2e4:	2300      	movs	r3, #0
    e2e6:	3258      	adds	r2, #88	; 0x58
    e2e8:	7013      	strb	r3, [r2, #0]
    e2ea:	700b      	strb	r3, [r1, #0]
    e2ec:	4b0a      	ldr	r3, [pc, #40]	; (e318 <RADIO_RxDoneHandler+0x270>)
    e2ee:	701d      	strb	r5, [r3, #0]
    e2f0:	4b0a      	ldr	r3, [pc, #40]	; (e31c <RADIO_RxDoneHandler+0x274>)
    e2f2:	781b      	ldrb	r3, [r3, #0]
    e2f4:	06db      	lsls	r3, r3, #27
    e2f6:	d400      	bmi.n	e2fa <RADIO_RxDoneHandler+0x252>
    e2f8:	e704      	b.n	e104 <RADIO_RxDoneHandler+0x5c>
    e2fa:	6923      	ldr	r3, [r4, #16]
    e2fc:	2b00      	cmp	r3, #0
    e2fe:	d100      	bne.n	e302 <RADIO_RxDoneHandler+0x25a>
    e300:	e700      	b.n	e104 <RADIO_RxDoneHandler+0x5c>
    e302:	2010      	movs	r0, #16
    e304:	e783      	b.n	e20e <RADIO_RxDoneHandler+0x166>
    e306:	46c0      	nop			; (mov r8, r8)
    e308:	200039a8 	.word	0x200039a8
    e30c:	200037b0 	.word	0x200037b0
    e310:	0000c215 	.word	0x0000c215
    e314:	0000db19 	.word	0x0000db19
    e318:	200039ab 	.word	0x200039ab
    e31c:	200039aa 	.word	0x200039aa
    e320:	0000b015 	.word	0x0000b015
    e324:	0000afed 	.word	0x0000afed
    e328:	0000b081 	.word	0x0000b081
    e32c:	096ae380 	.word	0x096ae380
    e330:	cc9eec80 	.word	0xcc9eec80
    e334:	e78fe580 	.word	0xe78fe580
    e338:	06dac2c0 	.word	0x06dac2c0
    e33c:	fffffeff 	.word	0xfffffeff

0000e340 <MacClearCommands>:
    e340:	490e      	ldr	r1, [pc, #56]	; (e37c <MacClearCommands+0x3c>)
    e342:	b570      	push	{r4, r5, r6, lr}
    e344:	000b      	movs	r3, r1
    e346:	33e0      	adds	r3, #224	; 0xe0
    e348:	7818      	ldrb	r0, [r3, #0]
    e34a:	2303      	movs	r3, #3
    e34c:	25a4      	movs	r5, #164	; 0xa4
    e34e:	4343      	muls	r3, r0
    e350:	2401      	movs	r4, #1
    e352:	20ff      	movs	r0, #255	; 0xff
    e354:	3399      	adds	r3, #153	; 0x99
    e356:	4a0a      	ldr	r2, [pc, #40]	; (e380 <MacClearCommands+0x40>)
    e358:	185b      	adds	r3, r3, r1
    e35a:	00ed      	lsls	r5, r5, #3
    e35c:	429a      	cmp	r2, r3
    e35e:	d100      	bne.n	e362 <MacClearCommands+0x22>
    e360:	bd70      	pop	{r4, r5, r6, pc}
    e362:	7811      	ldrb	r1, [r2, #0]
    e364:	29ff      	cmp	r1, #255	; 0xff
    e366:	d006      	beq.n	e376 <MacClearCommands+0x36>
    e368:	290a      	cmp	r1, #10
    e36a:	d803      	bhi.n	e374 <MacClearCommands+0x34>
    e36c:	0026      	movs	r6, r4
    e36e:	408e      	lsls	r6, r1
    e370:	422e      	tst	r6, r5
    e372:	d100      	bne.n	e376 <MacClearCommands+0x36>
    e374:	7010      	strb	r0, [r2, #0]
    e376:	3203      	adds	r2, #3
    e378:	e7f0      	b.n	e35c <MacClearCommands+0x1c>
    e37a:	46c0      	nop			; (mov r8, r8)
    e37c:	20003ad4 	.word	0x20003ad4
    e380:	20003b6d 	.word	0x20003b6d

0000e384 <CountfOptsLength>:
    e384:	2200      	movs	r2, #0
    e386:	490d      	ldr	r1, [pc, #52]	; (e3bc <CountfOptsLength+0x38>)
    e388:	b570      	push	{r4, r5, r6, lr}
    e38a:	000b      	movs	r3, r1
    e38c:	0010      	movs	r0, r2
    e38e:	2503      	movs	r5, #3
    e390:	33e0      	adds	r3, #224	; 0xe0
    e392:	781c      	ldrb	r4, [r3, #0]
    e394:	4e0a      	ldr	r6, [pc, #40]	; (e3c0 <CountfOptsLength+0x3c>)
    e396:	b2d3      	uxtb	r3, r2
    e398:	429c      	cmp	r4, r3
    e39a:	d800      	bhi.n	e39e <CountfOptsLength+0x1a>
    e39c:	bd70      	pop	{r4, r5, r6, pc}
    e39e:	002b      	movs	r3, r5
    e3a0:	4353      	muls	r3, r2
    e3a2:	3399      	adds	r3, #153	; 0x99
    e3a4:	5ccb      	ldrb	r3, [r1, r3]
    e3a6:	2bff      	cmp	r3, #255	; 0xff
    e3a8:	d006      	beq.n	e3b8 <CountfOptsLength+0x34>
    e3aa:	18f3      	adds	r3, r6, r3
    e3ac:	3b02      	subs	r3, #2
    e3ae:	781b      	ldrb	r3, [r3, #0]
    e3b0:	18c3      	adds	r3, r0, r3
    e3b2:	2b0f      	cmp	r3, #15
    e3b4:	dcf2      	bgt.n	e39c <CountfOptsLength+0x18>
    e3b6:	b2d8      	uxtb	r0, r3
    e3b8:	3201      	adds	r2, #1
    e3ba:	e7ec      	b.n	e396 <CountfOptsLength+0x12>
    e3bc:	20003ad4 	.word	0x20003ad4
    e3c0:	00016d87 	.word	0x00016d87

0000e3c4 <LorawanGetMaxPayloadSize>:
    e3c4:	b513      	push	{r0, r1, r4, lr}
    e3c6:	466b      	mov	r3, sp
    e3c8:	1ddc      	adds	r4, r3, #7
    e3ca:	2300      	movs	r3, #0
    e3cc:	0022      	movs	r2, r4
    e3ce:	7023      	strb	r3, [r4, #0]
    e3d0:	4903      	ldr	r1, [pc, #12]	; (e3e0 <LorawanGetMaxPayloadSize+0x1c>)
    e3d2:	4b04      	ldr	r3, [pc, #16]	; (e3e4 <LorawanGetMaxPayloadSize+0x20>)
    e3d4:	2005      	movs	r0, #5
    e3d6:	4798      	blx	r3
    e3d8:	7820      	ldrb	r0, [r4, #0]
    e3da:	3808      	subs	r0, #8
    e3dc:	b2c0      	uxtb	r0, r0
    e3de:	bd16      	pop	{r1, r2, r4, pc}
    e3e0:	20003bbb 	.word	0x20003bbb
    e3e4:	0000b691 	.word	0x0000b691

0000e3e8 <UpdateReceiveDelays>:
    e3e8:	23fa      	movs	r3, #250	; 0xfa
    e3ea:	b570      	push	{r4, r5, r6, lr}
    e3ec:	009b      	lsls	r3, r3, #2
    e3ee:	4c0b      	ldr	r4, [pc, #44]	; (e41c <UpdateReceiveDelays+0x34>)
    e3f0:	2800      	cmp	r0, #0
    e3f2:	d000      	beq.n	e3f6 <UpdateReceiveDelays+0xe>
    e3f4:	4343      	muls	r3, r0
    e3f6:	0022      	movs	r2, r4
    e3f8:	4d09      	ldr	r5, [pc, #36]	; (e420 <UpdateReceiveDelays+0x38>)
    e3fa:	32d0      	adds	r2, #208	; 0xd0
    e3fc:	210c      	movs	r1, #12
    e3fe:	2000      	movs	r0, #0
    e400:	8013      	strh	r3, [r2, #0]
    e402:	47a8      	blx	r5
    e404:	0023      	movs	r3, r4
    e406:	22fa      	movs	r2, #250	; 0xfa
    e408:	33d0      	adds	r3, #208	; 0xd0
    e40a:	881b      	ldrh	r3, [r3, #0]
    e40c:	0092      	lsls	r2, r2, #2
    e40e:	189b      	adds	r3, r3, r2
    e410:	34d2      	adds	r4, #210	; 0xd2
    e412:	210d      	movs	r1, #13
    e414:	2000      	movs	r0, #0
    e416:	8023      	strh	r3, [r4, #0]
    e418:	47a8      	blx	r5
    e41a:	bd70      	pop	{r4, r5, r6, pc}
    e41c:	20003ad4 	.word	0x20003ad4
    e420:	00008755 	.word	0x00008755

0000e424 <IncludeMacCommandsResponse>:
    e424:	b5f0      	push	{r4, r5, r6, r7, lr}
    e426:	0005      	movs	r5, r0
    e428:	2600      	movs	r6, #0
    e42a:	b087      	sub	sp, #28
    e42c:	880c      	ldrh	r4, [r1, #0]
    e42e:	9101      	str	r1, [sp, #4]
    e430:	9203      	str	r2, [sp, #12]
    e432:	4f77      	ldr	r7, [pc, #476]	; (e610 <IncludeMacCommandsResponse+0x1ec>)
    e434:	003b      	movs	r3, r7
    e436:	33e0      	adds	r3, #224	; 0xe0
    e438:	781b      	ldrb	r3, [r3, #0]
    e43a:	42b3      	cmp	r3, r6
    e43c:	d913      	bls.n	e466 <IncludeMacCommandsResponse+0x42>
    e43e:	9b03      	ldr	r3, [sp, #12]
    e440:	2b00      	cmp	r3, #0
    e442:	d019      	beq.n	e478 <IncludeMacCommandsResponse+0x54>
    e444:	2303      	movs	r3, #3
    e446:	4373      	muls	r3, r6
    e448:	18fb      	adds	r3, r7, r3
    e44a:	3399      	adds	r3, #153	; 0x99
    e44c:	7819      	ldrb	r1, [r3, #0]
    e44e:	29ff      	cmp	r1, #255	; 0xff
    e450:	d012      	beq.n	e478 <IncludeMacCommandsResponse+0x54>
    e452:	9b01      	ldr	r3, [sp, #4]
    e454:	881a      	ldrh	r2, [r3, #0]
    e456:	4b6f      	ldr	r3, [pc, #444]	; (e614 <IncludeMacCommandsResponse+0x1f0>)
    e458:	1aa2      	subs	r2, r4, r2
    e45a:	185b      	adds	r3, r3, r1
    e45c:	3b02      	subs	r3, #2
    e45e:	781b      	ldrb	r3, [r3, #0]
    e460:	18d3      	adds	r3, r2, r3
    e462:	2b0f      	cmp	r3, #15
    e464:	dd08      	ble.n	e478 <IncludeMacCommandsResponse+0x54>
    e466:	2207      	movs	r2, #7
    e468:	2100      	movs	r1, #0
    e46a:	4b6b      	ldr	r3, [pc, #428]	; (e618 <IncludeMacCommandsResponse+0x1f4>)
    e46c:	486b      	ldr	r0, [pc, #428]	; (e61c <IncludeMacCommandsResponse+0x1f8>)
    e46e:	4798      	blx	r3
    e470:	9b01      	ldr	r3, [sp, #4]
    e472:	801c      	strh	r4, [r3, #0]
    e474:	b007      	add	sp, #28
    e476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e478:	2303      	movs	r3, #3
    e47a:	4373      	muls	r3, r6
    e47c:	18fb      	adds	r3, r7, r3
    e47e:	3399      	adds	r3, #153	; 0x99
    e480:	781b      	ldrb	r3, [r3, #0]
    e482:	1e98      	subs	r0, r3, #2
    e484:	280b      	cmp	r0, #11
    e486:	d862      	bhi.n	e54e <IncludeMacCommandsResponse+0x12a>
    e488:	f003 fc5c 	bl	11d44 <__gnu_thumb1_case_uqi>
    e48c:	27a20698 	.word	0x27a20698
    e490:	7da26748 	.word	0x7da26748
    e494:	a6616182 	.word	0xa6616182
    e498:	2303      	movs	r3, #3
    e49a:	2200      	movs	r2, #0
    e49c:	552b      	strb	r3, [r5, r4]
    e49e:	1c63      	adds	r3, r4, #1
    e4a0:	b29b      	uxth	r3, r3
    e4a2:	18eb      	adds	r3, r5, r3
    e4a4:	4f5a      	ldr	r7, [pc, #360]	; (e610 <IncludeMacCommandsResponse+0x1ec>)
    e4a6:	485e      	ldr	r0, [pc, #376]	; (e620 <IncludeMacCommandsResponse+0x1fc>)
    e4a8:	701a      	strb	r2, [r3, #0]
    e4aa:	5c39      	ldrb	r1, [r7, r0]
    e4ac:	3201      	adds	r2, #1
    e4ae:	4011      	ands	r1, r2
    e4b0:	466a      	mov	r2, sp
    e4b2:	9102      	str	r1, [sp, #8]
    e4b4:	7a12      	ldrb	r2, [r2, #8]
    e4b6:	701a      	strb	r2, [r3, #0]
    e4b8:	5c3a      	ldrb	r2, [r7, r0]
    e4ba:	4694      	mov	ip, r2
    e4bc:	2202      	movs	r2, #2
    e4be:	4661      	mov	r1, ip
    e4c0:	4211      	tst	r1, r2
    e4c2:	d002      	beq.n	e4ca <IncludeMacCommandsResponse+0xa6>
    e4c4:	9902      	ldr	r1, [sp, #8]
    e4c6:	430a      	orrs	r2, r1
    e4c8:	701a      	strb	r2, [r3, #0]
    e4ca:	2204      	movs	r2, #4
    e4cc:	5c39      	ldrb	r1, [r7, r0]
    e4ce:	4211      	tst	r1, r2
    e4d0:	d071      	beq.n	e5b6 <IncludeMacCommandsResponse+0x192>
    e4d2:	7819      	ldrb	r1, [r3, #0]
    e4d4:	430a      	orrs	r2, r1
    e4d6:	701a      	strb	r2, [r3, #0]
    e4d8:	e06d      	b.n	e5b6 <IncludeMacCommandsResponse+0x192>
    e4da:	2305      	movs	r3, #5
    e4dc:	2103      	movs	r1, #3
    e4de:	2200      	movs	r2, #0
    e4e0:	552b      	strb	r3, [r5, r4]
    e4e2:	1c63      	adds	r3, r4, #1
    e4e4:	b29b      	uxth	r3, r3
    e4e6:	4371      	muls	r1, r6
    e4e8:	18eb      	adds	r3, r5, r3
    e4ea:	701a      	strb	r2, [r3, #0]
    e4ec:	4a48      	ldr	r2, [pc, #288]	; (e610 <IncludeMacCommandsResponse+0x1ec>)
    e4ee:	1851      	adds	r1, r2, r1
    e4f0:	3198      	adds	r1, #152	; 0x98
    e4f2:	7888      	ldrb	r0, [r1, #2]
    e4f4:	0700      	lsls	r0, r0, #28
    e4f6:	0fc0      	lsrs	r0, r0, #31
    e4f8:	7018      	strb	r0, [r3, #0]
    e4fa:	7889      	ldrb	r1, [r1, #2]
    e4fc:	b2c7      	uxtb	r7, r0
    e4fe:	06c9      	lsls	r1, r1, #27
    e500:	d502      	bpl.n	e508 <IncludeMacCommandsResponse+0xe4>
    e502:	2102      	movs	r1, #2
    e504:	4339      	orrs	r1, r7
    e506:	7019      	strb	r1, [r3, #0]
    e508:	2103      	movs	r1, #3
    e50a:	4371      	muls	r1, r6
    e50c:	1852      	adds	r2, r2, r1
    e50e:	3298      	adds	r2, #152	; 0x98
    e510:	7892      	ldrb	r2, [r2, #2]
    e512:	0692      	lsls	r2, r2, #26
    e514:	d54f      	bpl.n	e5b6 <IncludeMacCommandsResponse+0x192>
    e516:	7819      	ldrb	r1, [r3, #0]
    e518:	2204      	movs	r2, #4
    e51a:	e7db      	b.n	e4d4 <IncludeMacCommandsResponse+0xb0>
    e51c:	a904      	add	r1, sp, #16
    e51e:	4b41      	ldr	r3, [pc, #260]	; (e624 <IncludeMacCommandsResponse+0x200>)
    e520:	200e      	movs	r0, #14
    e522:	4798      	blx	r3
    e524:	2306      	movs	r3, #6
    e526:	4a3a      	ldr	r2, [pc, #232]	; (e610 <IncludeMacCommandsResponse+0x1ec>)
    e528:	552b      	strb	r3, [r5, r4]
    e52a:	32e8      	adds	r2, #232	; 0xe8
    e52c:	7811      	ldrb	r1, [r2, #0]
    e52e:	1c62      	adds	r2, r4, #1
    e530:	b292      	uxth	r2, r2
    e532:	54a9      	strb	r1, [r5, r2]
    e534:	aa04      	add	r2, sp, #16
    e536:	7812      	ldrb	r2, [r2, #0]
    e538:	1ca3      	adds	r3, r4, #2
    e53a:	0011      	movs	r1, r2
    e53c:	3120      	adds	r1, #32
    e53e:	3403      	adds	r4, #3
    e540:	b2c9      	uxtb	r1, r1
    e542:	b29b      	uxth	r3, r3
    e544:	b2a4      	uxth	r4, r4
    e546:	293f      	cmp	r1, #63	; 0x3f
    e548:	d904      	bls.n	e554 <IncludeMacCommandsResponse+0x130>
    e54a:	2220      	movs	r2, #32
    e54c:	54ea      	strb	r2, [r5, r3]
    e54e:	3601      	adds	r6, #1
    e550:	b2f6      	uxtb	r6, r6
    e552:	e76e      	b.n	e432 <IncludeMacCommandsResponse+0xe>
    e554:	213f      	movs	r1, #63	; 0x3f
    e556:	400a      	ands	r2, r1
    e558:	e7f8      	b.n	e54c <IncludeMacCommandsResponse+0x128>
    e55a:	2307      	movs	r3, #7
    e55c:	2103      	movs	r1, #3
    e55e:	2200      	movs	r2, #0
    e560:	552b      	strb	r3, [r5, r4]
    e562:	1c63      	adds	r3, r4, #1
    e564:	4371      	muls	r1, r6
    e566:	b29b      	uxth	r3, r3
    e568:	18eb      	adds	r3, r5, r3
    e56a:	701a      	strb	r2, [r3, #0]
    e56c:	4a28      	ldr	r2, [pc, #160]	; (e610 <IncludeMacCommandsResponse+0x1ec>)
    e56e:	1852      	adds	r2, r2, r1
    e570:	3298      	adds	r2, #152	; 0x98
    e572:	7891      	ldrb	r1, [r2, #2]
    e574:	09c9      	lsrs	r1, r1, #7
    e576:	7019      	strb	r1, [r3, #0]
    e578:	7892      	ldrb	r2, [r2, #2]
    e57a:	b2c8      	uxtb	r0, r1
    e57c:	0652      	lsls	r2, r2, #25
    e57e:	d51a      	bpl.n	e5b6 <IncludeMacCommandsResponse+0x192>
    e580:	2202      	movs	r2, #2
    e582:	4302      	orrs	r2, r0
    e584:	e7a7      	b.n	e4d6 <IncludeMacCommandsResponse+0xb2>
    e586:	2209      	movs	r2, #9
    e588:	1c63      	adds	r3, r4, #1
    e58a:	552a      	strb	r2, [r5, r4]
    e58c:	b29c      	uxth	r4, r3
    e58e:	e7de      	b.n	e54e <IncludeMacCommandsResponse+0x12a>
    e590:	230a      	movs	r3, #10
    e592:	2103      	movs	r1, #3
    e594:	2200      	movs	r2, #0
    e596:	552b      	strb	r3, [r5, r4]
    e598:	1c63      	adds	r3, r4, #1
    e59a:	4371      	muls	r1, r6
    e59c:	b29b      	uxth	r3, r3
    e59e:	18eb      	adds	r3, r5, r3
    e5a0:	701a      	strb	r2, [r3, #0]
    e5a2:	4a1b      	ldr	r2, [pc, #108]	; (e610 <IncludeMacCommandsResponse+0x1ec>)
    e5a4:	1852      	adds	r2, r2, r1
    e5a6:	3298      	adds	r2, #152	; 0x98
    e5a8:	7891      	ldrb	r1, [r2, #2]
    e5aa:	09c9      	lsrs	r1, r1, #7
    e5ac:	7019      	strb	r1, [r3, #0]
    e5ae:	78d2      	ldrb	r2, [r2, #3]
    e5b0:	b2c8      	uxtb	r0, r1
    e5b2:	07d2      	lsls	r2, r2, #31
    e5b4:	d4e4      	bmi.n	e580 <IncludeMacCommandsResponse+0x15c>
    e5b6:	3402      	adds	r4, #2
    e5b8:	b2a4      	uxth	r4, r4
    e5ba:	e7c8      	b.n	e54e <IncludeMacCommandsResponse+0x12a>
    e5bc:	003b      	movs	r3, r7
    e5be:	22ff      	movs	r2, #255	; 0xff
    e5c0:	33e5      	adds	r3, #229	; 0xe5
    e5c2:	701a      	strb	r2, [r3, #0]
    e5c4:	2300      	movs	r3, #0
    e5c6:	37e6      	adds	r7, #230	; 0xe6
    e5c8:	703b      	strb	r3, [r7, #0]
    e5ca:	3afd      	subs	r2, #253	; 0xfd
    e5cc:	1c63      	adds	r3, r4, #1
    e5ce:	e7dc      	b.n	e58a <IncludeMacCommandsResponse+0x166>
    e5d0:	1c62      	adds	r2, r4, #1
    e5d2:	552b      	strb	r3, [r5, r4]
    e5d4:	b294      	uxth	r4, r2
    e5d6:	e7ba      	b.n	e54e <IncludeMacCommandsResponse+0x12a>
    e5d8:	2201      	movs	r2, #1
    e5da:	4252      	negs	r2, r2
    e5dc:	17d3      	asrs	r3, r2, #31
    e5de:	9204      	str	r2, [sp, #16]
    e5e0:	9305      	str	r3, [sp, #20]
    e5e2:	4b11      	ldr	r3, [pc, #68]	; (e628 <IncludeMacCommandsResponse+0x204>)
    e5e4:	a904      	add	r1, sp, #16
    e5e6:	5cf8      	ldrb	r0, [r7, r3]
    e5e8:	4b10      	ldr	r3, [pc, #64]	; (e62c <IncludeMacCommandsResponse+0x208>)
    e5ea:	4798      	blx	r3
    e5ec:	2301      	movs	r3, #1
    e5ee:	228d      	movs	r2, #141	; 0x8d
    e5f0:	425b      	negs	r3, r3
    e5f2:	0092      	lsls	r2, r2, #2
    e5f4:	50bb      	str	r3, [r7, r2]
    e5f6:	3204      	adds	r2, #4
    e5f8:	54bb      	strb	r3, [r7, r2]
    e5fa:	238c      	movs	r3, #140	; 0x8c
    e5fc:	2201      	movs	r2, #1
    e5fe:	009b      	lsls	r3, r3, #2
    e600:	54fa      	strb	r2, [r7, r3]
    e602:	2303      	movs	r3, #3
    e604:	4373      	muls	r3, r6
    e606:	18ff      	adds	r7, r7, r3
    e608:	3799      	adds	r7, #153	; 0x99
    e60a:	18a2      	adds	r2, r4, r2
    e60c:	783b      	ldrb	r3, [r7, #0]
    e60e:	e7e0      	b.n	e5d2 <IncludeMacCommandsResponse+0x1ae>
    e610:	20003ad4 	.word	0x20003ad4
    e614:	00016d87 	.word	0x00016d87
    e618:	00014ff5 	.word	0x00014ff5
    e61c:	20003cf7 	.word	0x20003cf7
    e620:	00000223 	.word	0x00000223
    e624:	0000ca2d 	.word	0x0000ca2d
    e628:	00000231 	.word	0x00000231
    e62c:	0000c161 	.word	0x0000c161

0000e630 <UpdateJoinSuccessState>:
    e630:	b5f0      	push	{r4, r5, r6, r7, lr}
    e632:	4c32      	ldr	r4, [pc, #200]	; (e6fc <UpdateJoinSuccessState+0xcc>)
    e634:	2104      	movs	r1, #4
    e636:	0022      	movs	r2, r4
    e638:	3294      	adds	r2, #148	; 0x94
    e63a:	7813      	ldrb	r3, [r2, #0]
    e63c:	2001      	movs	r0, #1
    e63e:	438b      	bics	r3, r1
    e640:	7013      	strb	r3, [r2, #0]
    e642:	0022      	movs	r2, r4
    e644:	3284      	adds	r2, #132	; 0x84
    e646:	7813      	ldrb	r3, [r2, #0]
    e648:	b087      	sub	sp, #28
    e64a:	4303      	orrs	r3, r0
    e64c:	3107      	adds	r1, #7
    e64e:	4f2c      	ldr	r7, [pc, #176]	; (e700 <UpdateJoinSuccessState+0xd0>)
    e650:	7013      	strb	r3, [r2, #0]
    e652:	2500      	movs	r5, #0
    e654:	47b8      	blx	r7
    e656:	0023      	movs	r3, r4
    e658:	2115      	movs	r1, #21
    e65a:	3388      	adds	r3, #136	; 0x88
    e65c:	0028      	movs	r0, r5
    e65e:	601d      	str	r5, [r3, #0]
    e660:	47b8      	blx	r7
    e662:	0023      	movs	r3, r4
    e664:	2020      	movs	r0, #32
    e666:	33ff      	adds	r3, #255	; 0xff
    e668:	7f5b      	ldrb	r3, [r3, #29]
    e66a:	4e26      	ldr	r6, [pc, #152]	; (e704 <UpdateJoinSuccessState+0xd4>)
    e66c:	4203      	tst	r3, r0
    e66e:	d00c      	beq.n	e68a <UpdateJoinSuccessState+0x5a>
    e670:	0023      	movs	r3, r4
    e672:	a904      	add	r1, sp, #16
    e674:	3380      	adds	r3, #128	; 0x80
    e676:	710d      	strb	r5, [r1, #4]
    e678:	701d      	strb	r5, [r3, #0]
    e67a:	6765      	str	r5, [r4, #116]	; 0x74
    e67c:	67a5      	str	r5, [r4, #120]	; 0x78
    e67e:	47b0      	blx	r6
    e680:	210f      	movs	r1, #15
    e682:	2021      	movs	r0, #33	; 0x21
    e684:	4469      	add	r1, sp
    e686:	700d      	strb	r5, [r1, #0]
    e688:	47b0      	blx	r6
    e68a:	0023      	movs	r3, r4
    e68c:	2500      	movs	r5, #0
    e68e:	338c      	adds	r3, #140	; 0x8c
    e690:	210a      	movs	r1, #10
    e692:	2001      	movs	r0, #1
    e694:	601d      	str	r5, [r3, #0]
    e696:	47b8      	blx	r7
    e698:	0023      	movs	r3, r4
    e69a:	33ca      	adds	r3, #202	; 0xca
    e69c:	801d      	strh	r5, [r3, #0]
    e69e:	0022      	movs	r2, r4
    e6a0:	0023      	movs	r3, r4
    e6a2:	210e      	movs	r1, #14
    e6a4:	3284      	adds	r2, #132	; 0x84
    e6a6:	33f6      	adds	r3, #246	; 0xf6
    e6a8:	701d      	strb	r5, [r3, #0]
    e6aa:	7813      	ldrb	r3, [r2, #0]
    e6ac:	2039      	movs	r0, #57	; 0x39
    e6ae:	438b      	bics	r3, r1
    e6b0:	0029      	movs	r1, r5
    e6b2:	7013      	strb	r3, [r2, #0]
    e6b4:	47b0      	blx	r6
    e6b6:	0023      	movs	r3, r4
    e6b8:	3385      	adds	r3, #133	; 0x85
    e6ba:	781b      	ldrb	r3, [r3, #0]
    e6bc:	079b      	lsls	r3, r3, #30
    e6be:	d50c      	bpl.n	e6da <UpdateJoinSuccessState+0xaa>
    e6c0:	0023      	movs	r3, r4
    e6c2:	21fa      	movs	r1, #250	; 0xfa
    e6c4:	3390      	adds	r3, #144	; 0x90
    e6c6:	681b      	ldr	r3, [r3, #0]
    e6c8:	34f0      	adds	r4, #240	; 0xf0
    e6ca:	0089      	lsls	r1, r1, #2
    e6cc:	7820      	ldrb	r0, [r4, #0]
    e6ce:	4359      	muls	r1, r3
    e6d0:	9500      	str	r5, [sp, #0]
    e6d2:	4b0d      	ldr	r3, [pc, #52]	; (e708 <UpdateJoinSuccessState+0xd8>)
    e6d4:	002a      	movs	r2, r5
    e6d6:	4c0d      	ldr	r4, [pc, #52]	; (e70c <UpdateJoinSuccessState+0xdc>)
    e6d8:	47a0      	blx	r4
    e6da:	490d      	ldr	r1, [pc, #52]	; (e710 <UpdateJoinSuccessState+0xe0>)
    e6dc:	794a      	ldrb	r2, [r1, #5]
    e6de:	790b      	ldrb	r3, [r1, #4]
    e6e0:	0212      	lsls	r2, r2, #8
    e6e2:	431a      	orrs	r2, r3
    e6e4:	798b      	ldrb	r3, [r1, #6]
    e6e6:	041b      	lsls	r3, r3, #16
    e6e8:	431a      	orrs	r2, r3
    e6ea:	79cb      	ldrb	r3, [r1, #7]
    e6ec:	061b      	lsls	r3, r3, #24
    e6ee:	4313      	orrs	r3, r2
    e6f0:	d001      	beq.n	e6f6 <UpdateJoinSuccessState+0xc6>
    e6f2:	2008      	movs	r0, #8
    e6f4:	4798      	blx	r3
    e6f6:	b007      	add	sp, #28
    e6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e6fa:	46c0      	nop			; (mov r8, r8)
    e6fc:	20003ad4 	.word	0x20003ad4
    e700:	00008755 	.word	0x00008755
    e704:	0000b6c9 	.word	0x0000b6c9
    e708:	0000e851 	.word	0x0000e851
    e70c:	0000bbd9 	.word	0x0000bbd9
    e710:	20003e30 	.word	0x20003e30

0000e714 <PrepareSessionKeys>:
    e714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e716:	0004      	movs	r4, r0
    e718:	2603      	movs	r6, #3
    e71a:	000d      	movs	r5, r1
    e71c:	0017      	movs	r7, r2
    e71e:	4b09      	ldr	r3, [pc, #36]	; (e744 <PrepareSessionKeys+0x30>)
    e720:	2210      	movs	r2, #16
    e722:	2100      	movs	r1, #0
    e724:	4798      	blx	r3
    e726:	0032      	movs	r2, r6
    e728:	0029      	movs	r1, r5
    e72a:	1c60      	adds	r0, r4, #1
    e72c:	4d06      	ldr	r5, [pc, #24]	; (e748 <PrepareSessionKeys+0x34>)
    e72e:	47a8      	blx	r5
    e730:	0032      	movs	r2, r6
    e732:	0039      	movs	r1, r7
    e734:	1d20      	adds	r0, r4, #4
    e736:	47a8      	blx	r5
    e738:	1de0      	adds	r0, r4, #7
    e73a:	2202      	movs	r2, #2
    e73c:	4903      	ldr	r1, [pc, #12]	; (e74c <PrepareSessionKeys+0x38>)
    e73e:	47a8      	blx	r5
    e740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e742:	46c0      	nop			; (mov r8, r8)
    e744:	00014ff5 	.word	0x00014ff5
    e748:	00014fe3 	.word	0x00014fe3
    e74c:	20003ba0 	.word	0x20003ba0

0000e750 <AssembleEncryptionBlock>:
    e750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e752:	001e      	movs	r6, r3
    e754:	4c0b      	ldr	r4, [pc, #44]	; (e784 <AssembleEncryptionBlock+0x34>)
    e756:	0017      	movs	r7, r2
    e758:	4b0b      	ldr	r3, [pc, #44]	; (e788 <AssembleEncryptionBlock+0x38>)
    e75a:	0005      	movs	r5, r0
    e75c:	9101      	str	r1, [sp, #4]
    e75e:	2210      	movs	r2, #16
    e760:	2100      	movs	r1, #0
    e762:	0020      	movs	r0, r4
    e764:	4798      	blx	r3
    e766:	7026      	strb	r6, [r4, #0]
    e768:	2604      	movs	r6, #4
    e76a:	7165      	strb	r5, [r4, #5]
    e76c:	0032      	movs	r2, r6
    e76e:	4d07      	ldr	r5, [pc, #28]	; (e78c <AssembleEncryptionBlock+0x3c>)
    e770:	a908      	add	r1, sp, #32
    e772:	1da0      	adds	r0, r4, #6
    e774:	47a8      	blx	r5
    e776:	0020      	movs	r0, r4
    e778:	0032      	movs	r2, r6
    e77a:	a901      	add	r1, sp, #4
    e77c:	300a      	adds	r0, #10
    e77e:	47a8      	blx	r5
    e780:	73e7      	strb	r7, [r4, #15]
    e782:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    e784:	20001df5 	.word	0x20001df5
    e788:	00014ff5 	.word	0x00014ff5
    e78c:	00014fe3 	.word	0x00014fe3

0000e790 <ConfigureRadio>:
    e790:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e792:	0001      	movs	r1, r0
    e794:	0005      	movs	r5, r0
    e796:	4c11      	ldr	r4, [pc, #68]	; (e7dc <ConfigureRadio+0x4c>)
    e798:	3109      	adds	r1, #9
    e79a:	2009      	movs	r0, #9
    e79c:	47a0      	blx	r4
    e79e:	0029      	movs	r1, r5
    e7a0:	2001      	movs	r0, #1
    e7a2:	47a0      	blx	r4
    e7a4:	1d29      	adds	r1, r5, #4
    e7a6:	200a      	movs	r0, #10
    e7a8:	47a0      	blx	r4
    e7aa:	7a6b      	ldrb	r3, [r5, #9]
    e7ac:	2b01      	cmp	r3, #1
    e7ae:	d10b      	bne.n	e7c8 <ConfigureRadio+0x38>
    e7b0:	0029      	movs	r1, r5
    e7b2:	2016      	movs	r0, #22
    e7b4:	310b      	adds	r1, #11
    e7b6:	47a0      	blx	r4
    e7b8:	0029      	movs	r1, r5
    e7ba:	2007      	movs	r0, #7
    e7bc:	310a      	adds	r1, #10
    e7be:	47a0      	blx	r4
    e7c0:	2000      	movs	r0, #0
    e7c2:	4907      	ldr	r1, [pc, #28]	; (e7e0 <ConfigureRadio+0x50>)
    e7c4:	47a0      	blx	r4
    e7c6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    e7c8:	466b      	mov	r3, sp
    e7ca:	1dd9      	adds	r1, r3, #7
    e7cc:	2303      	movs	r3, #3
    e7ce:	2013      	movs	r0, #19
    e7d0:	700b      	strb	r3, [r1, #0]
    e7d2:	47a0      	blx	r4
    e7d4:	4903      	ldr	r1, [pc, #12]	; (e7e4 <ConfigureRadio+0x54>)
    e7d6:	2012      	movs	r0, #18
    e7d8:	e7f4      	b.n	e7c4 <ConfigureRadio+0x34>
    e7da:	46c0      	nop			; (mov r8, r8)
    e7dc:	0000cb1d 	.word	0x0000cb1d
    e7e0:	20003bd4 	.word	0x20003bd4
    e7e4:	00016d78 	.word	0x00016d78

0000e7e8 <StopReceiveWindow2Timer>:
    e7e8:	b510      	push	{r4, lr}
    e7ea:	4c0b      	ldr	r4, [pc, #44]	; (e818 <StopReceiveWindow2Timer+0x30>)
    e7ec:	0022      	movs	r2, r4
    e7ee:	32fd      	adds	r2, #253	; 0xfd
    e7f0:	7812      	ldrb	r2, [r2, #0]
    e7f2:	2a01      	cmp	r2, #1
    e7f4:	d10e      	bne.n	e814 <StopReceiveWindow2Timer+0x2c>
    e7f6:	0021      	movs	r1, r4
    e7f8:	200e      	movs	r0, #14
    e7fa:	3184      	adds	r1, #132	; 0x84
    e7fc:	780a      	ldrb	r2, [r1, #0]
    e7fe:	34ee      	adds	r4, #238	; 0xee
    e800:	4382      	bics	r2, r0
    e802:	700a      	strb	r2, [r1, #0]
    e804:	7820      	ldrb	r0, [r4, #0]
    e806:	4b05      	ldr	r3, [pc, #20]	; (e81c <StopReceiveWindow2Timer+0x34>)
    e808:	4798      	blx	r3
    e80a:	2800      	cmp	r0, #0
    e80c:	d002      	beq.n	e814 <StopReceiveWindow2Timer+0x2c>
    e80e:	7820      	ldrb	r0, [r4, #0]
    e810:	4b03      	ldr	r3, [pc, #12]	; (e820 <StopReceiveWindow2Timer+0x38>)
    e812:	4798      	blx	r3
    e814:	bd10      	pop	{r4, pc}
    e816:	46c0      	nop			; (mov r8, r8)
    e818:	20003ad4 	.word	0x20003ad4
    e81c:	0000bd71 	.word	0x0000bd71
    e820:	0000bef1 	.word	0x0000bef1

0000e824 <LorawanLinkCheckCallback.part.1>:
    e824:	4b07      	ldr	r3, [pc, #28]	; (e844 <LorawanLinkCheckCallback.part.1+0x20>)
    e826:	b513      	push	{r0, r1, r4, lr}
    e828:	001a      	movs	r2, r3
    e82a:	21fa      	movs	r1, #250	; 0xfa
    e82c:	3290      	adds	r2, #144	; 0x90
    e82e:	6812      	ldr	r2, [r2, #0]
    e830:	0089      	lsls	r1, r1, #2
    e832:	4351      	muls	r1, r2
    e834:	2200      	movs	r2, #0
    e836:	33f0      	adds	r3, #240	; 0xf0
    e838:	7818      	ldrb	r0, [r3, #0]
    e83a:	4c03      	ldr	r4, [pc, #12]	; (e848 <LorawanLinkCheckCallback.part.1+0x24>)
    e83c:	9200      	str	r2, [sp, #0]
    e83e:	4b03      	ldr	r3, [pc, #12]	; (e84c <LorawanLinkCheckCallback.part.1+0x28>)
    e840:	47a0      	blx	r4
    e842:	bd13      	pop	{r0, r1, r4, pc}
    e844:	20003ad4 	.word	0x20003ad4
    e848:	0000bbd9 	.word	0x0000bbd9
    e84c:	0000e851 	.word	0x0000e851

0000e850 <LorawanLinkCheckCallback>:
    e850:	4b17      	ldr	r3, [pc, #92]	; (e8b0 <LorawanLinkCheckCallback+0x60>)
    e852:	20a0      	movs	r0, #160	; 0xa0
    e854:	001a      	movs	r2, r3
    e856:	2180      	movs	r1, #128	; 0x80
    e858:	b510      	push	{r4, lr}
    e85a:	3284      	adds	r2, #132	; 0x84
    e85c:	8812      	ldrh	r2, [r2, #0]
    e85e:	0080      	lsls	r0, r0, #2
    e860:	0089      	lsls	r1, r1, #2
    e862:	4002      	ands	r2, r0
    e864:	428a      	cmp	r2, r1
    e866:	d11c      	bne.n	e8a2 <LorawanLinkCheckCallback+0x52>
    e868:	001a      	movs	r2, r3
    e86a:	32e0      	adds	r2, #224	; 0xe0
    e86c:	7810      	ldrb	r0, [r2, #0]
    e86e:	2403      	movs	r4, #3
    e870:	2200      	movs	r2, #0
    e872:	b2d1      	uxtb	r1, r2
    e874:	4281      	cmp	r1, r0
    e876:	d30d      	bcc.n	e894 <LorawanLinkCheckCallback+0x44>
    e878:	d113      	bne.n	e8a2 <LorawanLinkCheckCallback+0x52>
    e87a:	2203      	movs	r2, #3
    e87c:	434a      	muls	r2, r1
    e87e:	2102      	movs	r1, #2
    e880:	189a      	adds	r2, r3, r2
    e882:	3299      	adds	r2, #153	; 0x99
    e884:	7011      	strb	r1, [r2, #0]
    e886:	280f      	cmp	r0, #15
    e888:	d80b      	bhi.n	e8a2 <LorawanLinkCheckCallback+0x52>
    e88a:	001a      	movs	r2, r3
    e88c:	3001      	adds	r0, #1
    e88e:	32e0      	adds	r2, #224	; 0xe0
    e890:	7010      	strb	r0, [r2, #0]
    e892:	e006      	b.n	e8a2 <LorawanLinkCheckCallback+0x52>
    e894:	0021      	movs	r1, r4
    e896:	3201      	adds	r2, #1
    e898:	4351      	muls	r1, r2
    e89a:	3196      	adds	r1, #150	; 0x96
    e89c:	5c59      	ldrb	r1, [r3, r1]
    e89e:	2902      	cmp	r1, #2
    e8a0:	d1e7      	bne.n	e872 <LorawanLinkCheckCallback+0x22>
    e8a2:	3385      	adds	r3, #133	; 0x85
    e8a4:	781b      	ldrb	r3, [r3, #0]
    e8a6:	079b      	lsls	r3, r3, #30
    e8a8:	d501      	bpl.n	e8ae <LorawanLinkCheckCallback+0x5e>
    e8aa:	4b02      	ldr	r3, [pc, #8]	; (e8b4 <LorawanLinkCheckCallback+0x64>)
    e8ac:	4798      	blx	r3
    e8ae:	bd10      	pop	{r4, pc}
    e8b0:	20003ad4 	.word	0x20003ad4
    e8b4:	0000e825 	.word	0x0000e825

0000e8b8 <LORAWAN_Send>:
    e8b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e8ba:	4c37      	ldr	r4, [pc, #220]	; (e998 <LORAWAN_Send+0xe0>)
    e8bc:	0006      	movs	r6, r0
    e8be:	0023      	movs	r3, r4
    e8c0:	3384      	adds	r3, #132	; 0x84
    e8c2:	781b      	ldrb	r3, [r3, #0]
    e8c4:	250f      	movs	r5, #15
    e8c6:	b25a      	sxtb	r2, r3
    e8c8:	2a00      	cmp	r2, #0
    e8ca:	db0b      	blt.n	e8e4 <LORAWAN_Send+0x2c>
    e8cc:	3d03      	subs	r5, #3
    e8ce:	065a      	lsls	r2, r3, #25
    e8d0:	d408      	bmi.n	e8e4 <LORAWAN_Send+0x2c>
    e8d2:	3d03      	subs	r5, #3
    e8d4:	07db      	lsls	r3, r3, #31
    e8d6:	d505      	bpl.n	e8e4 <LORAWAN_Send+0x2c>
    e8d8:	2388      	movs	r3, #136	; 0x88
    e8da:	009b      	lsls	r3, r3, #2
    e8dc:	5ce7      	ldrb	r7, [r4, r3]
    e8de:	2f00      	cmp	r7, #0
    e8e0:	d102      	bne.n	e8e8 <LORAWAN_Send+0x30>
    e8e2:	2511      	movs	r5, #17
    e8e4:	0028      	movs	r0, r5
    e8e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e8e8:	2800      	cmp	r0, #0
    e8ea:	d10f      	bne.n	e90c <LORAWAN_Send+0x54>
    e8ec:	2700      	movs	r7, #0
    e8ee:	0023      	movs	r3, r4
    e8f0:	3388      	adds	r3, #136	; 0x88
    e8f2:	681b      	ldr	r3, [r3, #0]
    e8f4:	3301      	adds	r3, #1
    e8f6:	d123      	bne.n	e940 <LORAWAN_Send+0x88>
    e8f8:	2001      	movs	r0, #1
    e8fa:	3484      	adds	r4, #132	; 0x84
    e8fc:	78a3      	ldrb	r3, [r4, #2]
    e8fe:	210b      	movs	r1, #11
    e900:	4303      	orrs	r3, r0
    e902:	70a3      	strb	r3, [r4, #2]
    e904:	4b25      	ldr	r3, [pc, #148]	; (e99c <LORAWAN_Send+0xe4>)
    e906:	4798      	blx	r3
    e908:	250d      	movs	r5, #13
    e90a:	e7eb      	b.n	e8e4 <LORAWAN_Send+0x2c>
    e90c:	7843      	ldrb	r3, [r0, #1]
    e90e:	7a02      	ldrb	r2, [r0, #8]
    e910:	3b01      	subs	r3, #1
    e912:	b2db      	uxtb	r3, r3
    e914:	9201      	str	r2, [sp, #4]
    e916:	2bdf      	cmp	r3, #223	; 0xdf
    e918:	d902      	bls.n	e920 <LORAWAN_Send+0x68>
    e91a:	250a      	movs	r5, #10
    e91c:	2a00      	cmp	r2, #0
    e91e:	d1e1      	bne.n	e8e4 <LORAWAN_Send+0x2c>
    e920:	4b1f      	ldr	r3, [pc, #124]	; (e9a0 <LORAWAN_Send+0xe8>)
    e922:	4798      	blx	r3
    e924:	4684      	mov	ip, r0
    e926:	9b01      	ldr	r3, [sp, #4]
    e928:	9000      	str	r0, [sp, #0]
    e92a:	4463      	add	r3, ip
    e92c:	001d      	movs	r5, r3
    e92e:	4b1d      	ldr	r3, [pc, #116]	; (e9a4 <LORAWAN_Send+0xec>)
    e930:	4798      	blx	r3
    e932:	4285      	cmp	r5, r0
    e934:	ddda      	ble.n	e8ec <LORAWAN_Send+0x34>
    e936:	9b00      	ldr	r3, [sp, #0]
    e938:	250e      	movs	r5, #14
    e93a:	2b00      	cmp	r3, #0
    e93c:	d0d2      	beq.n	e8e4 <LORAWAN_Send+0x2c>
    e93e:	e7d6      	b.n	e8ee <LORAWAN_Send+0x36>
    e940:	0023      	movs	r3, r4
    e942:	33fd      	adds	r3, #253	; 0xfd
    e944:	781b      	ldrb	r3, [r3, #0]
    e946:	2b04      	cmp	r3, #4
    e948:	d01d      	beq.n	e986 <LORAWAN_Send+0xce>
    e94a:	0023      	movs	r3, r4
    e94c:	33fd      	adds	r3, #253	; 0xfd
    e94e:	781b      	ldrb	r3, [r3, #0]
    e950:	2b01      	cmp	r3, #1
    e952:	d105      	bne.n	e960 <LORAWAN_Send+0xa8>
    e954:	0023      	movs	r3, r4
    e956:	3384      	adds	r3, #132	; 0x84
    e958:	781a      	ldrb	r2, [r3, #0]
    e95a:	230e      	movs	r3, #14
    e95c:	421a      	tst	r2, r3
    e95e:	d1c0      	bne.n	e8e2 <LORAWAN_Send+0x2a>
    e960:	0023      	movs	r3, r4
    e962:	33fc      	adds	r3, #252	; 0xfc
    e964:	2f00      	cmp	r7, #0
    e966:	d113      	bne.n	e990 <LORAWAN_Send+0xd8>
    e968:	2508      	movs	r5, #8
    e96a:	60de      	str	r6, [r3, #12]
    e96c:	2388      	movs	r3, #136	; 0x88
    e96e:	2200      	movs	r2, #0
    e970:	009b      	lsls	r3, r3, #2
    e972:	54e2      	strb	r2, [r4, r3]
    e974:	2001      	movs	r0, #1
    e976:	4b0c      	ldr	r3, [pc, #48]	; (e9a8 <LORAWAN_Send+0xf0>)
    e978:	4798      	blx	r3
    e97a:	2320      	movs	r3, #32
    e97c:	3494      	adds	r4, #148	; 0x94
    e97e:	7822      	ldrb	r2, [r4, #0]
    e980:	4313      	orrs	r3, r2
    e982:	7023      	strb	r3, [r4, #0]
    e984:	e7ae      	b.n	e8e4 <LORAWAN_Send+0x2c>
    e986:	4b09      	ldr	r3, [pc, #36]	; (e9ac <LORAWAN_Send+0xf4>)
    e988:	4798      	blx	r3
    e98a:	2808      	cmp	r0, #8
    e98c:	d1a9      	bne.n	e8e2 <LORAWAN_Send+0x2a>
    e98e:	e7dc      	b.n	e94a <LORAWAN_Send+0x92>
    e990:	2200      	movs	r2, #0
    e992:	2511      	movs	r5, #17
    e994:	60da      	str	r2, [r3, #12]
    e996:	e7e9      	b.n	e96c <LORAWAN_Send+0xb4>
    e998:	20003ad4 	.word	0x20003ad4
    e99c:	00008755 	.word	0x00008755
    e9a0:	0000e385 	.word	0x0000e385
    e9a4:	0000e3c5 	.word	0x0000e3c5
    e9a8:	0000c9a9 	.word	0x0000c9a9
    e9ac:	000114f5 	.word	0x000114f5

0000e9b0 <AutomaticReplyCallback>:
    e9b0:	b510      	push	{r4, lr}
    e9b2:	4c0d      	ldr	r4, [pc, #52]	; (e9e8 <AutomaticReplyCallback+0x38>)
    e9b4:	0023      	movs	r3, r4
    e9b6:	33fd      	adds	r3, #253	; 0xfd
    e9b8:	781b      	ldrb	r3, [r3, #0]
    e9ba:	2b01      	cmp	r3, #1
    e9bc:	d10e      	bne.n	e9dc <AutomaticReplyCallback+0x2c>
    e9be:	0022      	movs	r2, r4
    e9c0:	210e      	movs	r1, #14
    e9c2:	3284      	adds	r2, #132	; 0x84
    e9c4:	7813      	ldrb	r3, [r2, #0]
    e9c6:	438b      	bics	r3, r1
    e9c8:	7013      	strb	r3, [r2, #0]
    e9ca:	4b08      	ldr	r3, [pc, #32]	; (e9ec <AutomaticReplyCallback+0x3c>)
    e9cc:	2000      	movs	r0, #0
    e9ce:	4798      	blx	r3
    e9d0:	2208      	movs	r2, #8
    e9d2:	3494      	adds	r4, #148	; 0x94
    e9d4:	7823      	ldrb	r3, [r4, #0]
    e9d6:	4393      	bics	r3, r2
    e9d8:	7023      	strb	r3, [r4, #0]
    e9da:	bd10      	pop	{r4, pc}
    e9dc:	2b04      	cmp	r3, #4
    e9de:	d1f4      	bne.n	e9ca <AutomaticReplyCallback+0x1a>
    e9e0:	4b03      	ldr	r3, [pc, #12]	; (e9f0 <AutomaticReplyCallback+0x40>)
    e9e2:	4798      	blx	r3
    e9e4:	e7f1      	b.n	e9ca <AutomaticReplyCallback+0x1a>
    e9e6:	46c0      	nop			; (mov r8, r8)
    e9e8:	20003ad4 	.word	0x20003ad4
    e9ec:	0000e8b9 	.word	0x0000e8b9
    e9f0:	0000d431 	.word	0x0000d431

0000e9f4 <LorawanLinkCheckConfigure>:
    e9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e9f6:	23fa      	movs	r3, #250	; 0xfa
    e9f8:	4c21      	ldr	r4, [pc, #132]	; (ea80 <LorawanLinkCheckConfigure+0x8c>)
    e9fa:	009b      	lsls	r3, r3, #2
    e9fc:	0022      	movs	r2, r4
    e9fe:	0025      	movs	r5, r4
    ea00:	4343      	muls	r3, r0
    ea02:	3290      	adds	r2, #144	; 0x90
    ea04:	0006      	movs	r6, r0
    ea06:	2102      	movs	r1, #2
    ea08:	2000      	movs	r0, #0
    ea0a:	4f1e      	ldr	r7, [pc, #120]	; (ea84 <LorawanLinkCheckConfigure+0x90>)
    ea0c:	6013      	str	r3, [r2, #0]
    ea0e:	3584      	adds	r5, #132	; 0x84
    ea10:	47b8      	blx	r7
    ea12:	2e00      	cmp	r6, #0
    ea14:	d127      	bne.n	ea66 <LorawanLinkCheckConfigure+0x72>
    ea16:	0023      	movs	r3, r4
    ea18:	33f0      	adds	r3, #240	; 0xf0
    ea1a:	7818      	ldrb	r0, [r3, #0]
    ea1c:	4b1a      	ldr	r3, [pc, #104]	; (ea88 <LorawanLinkCheckConfigure+0x94>)
    ea1e:	4798      	blx	r3
    ea20:	2202      	movs	r2, #2
    ea22:	786b      	ldrb	r3, [r5, #1]
    ea24:	210b      	movs	r1, #11
    ea26:	4393      	bics	r3, r2
    ea28:	706b      	strb	r3, [r5, #1]
    ea2a:	2001      	movs	r0, #1
    ea2c:	47b8      	blx	r7
    ea2e:	0023      	movs	r3, r4
    ea30:	2701      	movs	r7, #1
    ea32:	33e0      	adds	r3, #224	; 0xe0
    ea34:	781b      	ldrb	r3, [r3, #0]
    ea36:	0030      	movs	r0, r6
    ea38:	0032      	movs	r2, r6
    ea3a:	36ff      	adds	r6, #255	; 0xff
    ea3c:	429a      	cmp	r2, r3
    ea3e:	d304      	bcc.n	ea4a <LorawanLinkCheckConfigure+0x56>
    ea40:	2800      	cmp	r0, #0
    ea42:	d001      	beq.n	ea48 <LorawanLinkCheckConfigure+0x54>
    ea44:	34e0      	adds	r4, #224	; 0xe0
    ea46:	7023      	strb	r3, [r4, #0]
    ea48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ea4a:	2103      	movs	r1, #3
    ea4c:	4351      	muls	r1, r2
    ea4e:	1861      	adds	r1, r4, r1
    ea50:	3199      	adds	r1, #153	; 0x99
    ea52:	780d      	ldrb	r5, [r1, #0]
    ea54:	2d02      	cmp	r5, #2
    ea56:	d103      	bne.n	ea60 <LorawanLinkCheckConfigure+0x6c>
    ea58:	0038      	movs	r0, r7
    ea5a:	3b01      	subs	r3, #1
    ea5c:	700e      	strb	r6, [r1, #0]
    ea5e:	b2db      	uxtb	r3, r3
    ea60:	3201      	adds	r2, #1
    ea62:	b2d2      	uxtb	r2, r2
    ea64:	e7ea      	b.n	ea3c <LorawanLinkCheckConfigure+0x48>
    ea66:	2302      	movs	r3, #2
    ea68:	786a      	ldrb	r2, [r5, #1]
    ea6a:	210b      	movs	r1, #11
    ea6c:	4313      	orrs	r3, r2
    ea6e:	706b      	strb	r3, [r5, #1]
    ea70:	2001      	movs	r0, #1
    ea72:	47b8      	blx	r7
    ea74:	782b      	ldrb	r3, [r5, #0]
    ea76:	07db      	lsls	r3, r3, #31
    ea78:	d5e6      	bpl.n	ea48 <LorawanLinkCheckConfigure+0x54>
    ea7a:	4b04      	ldr	r3, [pc, #16]	; (ea8c <LorawanLinkCheckConfigure+0x98>)
    ea7c:	4798      	blx	r3
    ea7e:	e7e3      	b.n	ea48 <LorawanLinkCheckConfigure+0x54>
    ea80:	20003ad4 	.word	0x20003ad4
    ea84:	00008755 	.word	0x00008755
    ea88:	0000bef1 	.word	0x0000bef1
    ea8c:	0000e825 	.word	0x0000e825

0000ea90 <EncodeDeviceTimeReq>:
    ea90:	4b08      	ldr	r3, [pc, #32]	; (eab4 <EncodeDeviceTimeReq+0x24>)
    ea92:	b510      	push	{r4, lr}
    ea94:	001c      	movs	r4, r3
    ea96:	34e0      	adds	r4, #224	; 0xe0
    ea98:	7822      	ldrb	r2, [r4, #0]
    ea9a:	2015      	movs	r0, #21
    ea9c:	2a0f      	cmp	r2, #15
    ea9e:	d808      	bhi.n	eab2 <EncodeDeviceTimeReq+0x22>
    eaa0:	2103      	movs	r1, #3
    eaa2:	4351      	muls	r1, r2
    eaa4:	185b      	adds	r3, r3, r1
    eaa6:	210d      	movs	r1, #13
    eaa8:	3399      	adds	r3, #153	; 0x99
    eaaa:	3201      	adds	r2, #1
    eaac:	7019      	strb	r1, [r3, #0]
    eaae:	7022      	strb	r2, [r4, #0]
    eab0:	380d      	subs	r0, #13
    eab2:	bd10      	pop	{r4, pc}
    eab4:	20003ad4 	.word	0x20003ad4

0000eab8 <EncodeLinkCheckReq>:
    eab8:	4b08      	ldr	r3, [pc, #32]	; (eadc <EncodeLinkCheckReq+0x24>)
    eaba:	b510      	push	{r4, lr}
    eabc:	001c      	movs	r4, r3
    eabe:	34e0      	adds	r4, #224	; 0xe0
    eac0:	7822      	ldrb	r2, [r4, #0]
    eac2:	2015      	movs	r0, #21
    eac4:	2a0f      	cmp	r2, #15
    eac6:	d808      	bhi.n	eada <EncodeLinkCheckReq+0x22>
    eac8:	2103      	movs	r1, #3
    eaca:	4351      	muls	r1, r2
    eacc:	185b      	adds	r3, r3, r1
    eace:	2102      	movs	r1, #2
    ead0:	3399      	adds	r3, #153	; 0x99
    ead2:	3201      	adds	r2, #1
    ead4:	7019      	strb	r1, [r3, #0]
    ead6:	7022      	strb	r2, [r4, #0]
    ead8:	380d      	subs	r0, #13
    eada:	bd10      	pop	{r4, pc}
    eadc:	20003ad4 	.word	0x20003ad4

0000eae0 <UpdateCurrentDataRate>:
    eae0:	b510      	push	{r4, lr}
    eae2:	4b04      	ldr	r3, [pc, #16]	; (eaf4 <UpdateCurrentDataRate+0x14>)
    eae4:	210c      	movs	r1, #12
    eae6:	33e7      	adds	r3, #231	; 0xe7
    eae8:	7018      	strb	r0, [r3, #0]
    eaea:	2001      	movs	r0, #1
    eaec:	4b02      	ldr	r3, [pc, #8]	; (eaf8 <UpdateCurrentDataRate+0x18>)
    eaee:	4798      	blx	r3
    eaf0:	bd10      	pop	{r4, pc}
    eaf2:	46c0      	nop			; (mov r8, r8)
    eaf4:	20003ad4 	.word	0x20003ad4
    eaf8:	00008755 	.word	0x00008755

0000eafc <UpdateDLSettings>:
    eafc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    eafe:	466b      	mov	r3, sp
    eb00:	1dde      	adds	r6, r3, #7
    eb02:	1d9c      	adds	r4, r3, #6
    eb04:	71d8      	strb	r0, [r3, #7]
    eb06:	7021      	strb	r1, [r4, #0]
    eb08:	2017      	movs	r0, #23
    eb0a:	0031      	movs	r1, r6
    eb0c:	4d0c      	ldr	r5, [pc, #48]	; (eb40 <UpdateDLSettings+0x44>)
    eb0e:	47a8      	blx	r5
    eb10:	2808      	cmp	r0, #8
    eb12:	d107      	bne.n	eb24 <UpdateDLSettings+0x28>
    eb14:	4b0b      	ldr	r3, [pc, #44]	; (eb44 <UpdateDLSettings+0x48>)
    eb16:	7832      	ldrb	r2, [r6, #0]
    eb18:	336e      	adds	r3, #110	; 0x6e
    eb1a:	701a      	strb	r2, [r3, #0]
    eb1c:	2100      	movs	r1, #0
    eb1e:	3807      	subs	r0, #7
    eb20:	4b09      	ldr	r3, [pc, #36]	; (eb48 <UpdateDLSettings+0x4c>)
    eb22:	4798      	blx	r3
    eb24:	0021      	movs	r1, r4
    eb26:	2018      	movs	r0, #24
    eb28:	47a8      	blx	r5
    eb2a:	2808      	cmp	r0, #8
    eb2c:	d107      	bne.n	eb3e <UpdateDLSettings+0x42>
    eb2e:	2101      	movs	r1, #1
    eb30:	4b04      	ldr	r3, [pc, #16]	; (eb44 <UpdateDLSettings+0x48>)
    eb32:	7822      	ldrb	r2, [r4, #0]
    eb34:	33f7      	adds	r3, #247	; 0xf7
    eb36:	701a      	strb	r2, [r3, #0]
    eb38:	0008      	movs	r0, r1
    eb3a:	4b03      	ldr	r3, [pc, #12]	; (eb48 <UpdateDLSettings+0x4c>)
    eb3c:	4798      	blx	r3
    eb3e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    eb40:	0000b6ad 	.word	0x0000b6ad
    eb44:	20003ad4 	.word	0x20003ad4
    eb48:	00008755 	.word	0x00008755

0000eb4c <UpdateTxPower>:
    eb4c:	b510      	push	{r4, lr}
    eb4e:	4b04      	ldr	r3, [pc, #16]	; (eb60 <UpdateTxPower+0x14>)
    eb50:	210a      	movs	r1, #10
    eb52:	33e9      	adds	r3, #233	; 0xe9
    eb54:	7018      	strb	r0, [r3, #0]
    eb56:	2000      	movs	r0, #0
    eb58:	4b02      	ldr	r3, [pc, #8]	; (eb64 <UpdateTxPower+0x18>)
    eb5a:	4798      	blx	r3
    eb5c:	bd10      	pop	{r4, pc}
    eb5e:	46c0      	nop			; (mov r8, r8)
    eb60:	20003ad4 	.word	0x20003ad4
    eb64:	00008755 	.word	0x00008755

0000eb68 <UpdateRetransmissionAckTimeoutState>:
    eb68:	4b10      	ldr	r3, [pc, #64]	; (ebac <UpdateRetransmissionAckTimeoutState+0x44>)
    eb6a:	b513      	push	{r0, r1, r4, lr}
    eb6c:	001a      	movs	r2, r3
    eb6e:	32fd      	adds	r2, #253	; 0xfd
    eb70:	7812      	ldrb	r2, [r2, #0]
    eb72:	2a01      	cmp	r2, #1
    eb74:	d108      	bne.n	eb88 <UpdateRetransmissionAckTimeoutState+0x20>
    eb76:	0018      	movs	r0, r3
    eb78:	210e      	movs	r1, #14
    eb7a:	3084      	adds	r0, #132	; 0x84
    eb7c:	7802      	ldrb	r2, [r0, #0]
    eb7e:	438a      	bics	r2, r1
    eb80:	0011      	movs	r1, r2
    eb82:	220c      	movs	r2, #12
    eb84:	430a      	orrs	r2, r1
    eb86:	7002      	strb	r2, [r0, #0]
    eb88:	001a      	movs	r2, r3
    eb8a:	32da      	adds	r2, #218	; 0xda
    eb8c:	8811      	ldrh	r1, [r2, #0]
    eb8e:	4a08      	ldr	r2, [pc, #32]	; (ebb0 <UpdateRetransmissionAckTimeoutState+0x48>)
    eb90:	4c08      	ldr	r4, [pc, #32]	; (ebb4 <UpdateRetransmissionAckTimeoutState+0x4c>)
    eb92:	5c9a      	ldrb	r2, [r3, r2]
    eb94:	33f1      	adds	r3, #241	; 0xf1
    eb96:	1a8a      	subs	r2, r1, r2
    eb98:	21fa      	movs	r1, #250	; 0xfa
    eb9a:	0089      	lsls	r1, r1, #2
    eb9c:	4351      	muls	r1, r2
    eb9e:	2200      	movs	r2, #0
    eba0:	7818      	ldrb	r0, [r3, #0]
    eba2:	9200      	str	r2, [sp, #0]
    eba4:	4b04      	ldr	r3, [pc, #16]	; (ebb8 <UpdateRetransmissionAckTimeoutState+0x50>)
    eba6:	47a0      	blx	r4
    eba8:	bd13      	pop	{r0, r1, r4, pc}
    ebaa:	46c0      	nop			; (mov r8, r8)
    ebac:	20003ad4 	.word	0x20003ad4
    ebb0:	0000022b 	.word	0x0000022b
    ebb4:	0000bbd9 	.word	0x0000bbd9
    ebb8:	0000f8f9 	.word	0x0000f8f9

0000ebbc <UpdateReceiveWindow2Parameters>:
    ebbc:	4b0f      	ldr	r3, [pc, #60]	; (ebfc <UpdateReceiveWindow2Parameters+0x40>)
    ebbe:	b570      	push	{r4, r5, r6, lr}
    ebc0:	001a      	movs	r2, r3
    ebc2:	326e      	adds	r2, #110	; 0x6e
    ebc4:	7011      	strb	r1, [r2, #0]
    ebc6:	001a      	movs	r2, r3
    ebc8:	0c04      	lsrs	r4, r0, #16
    ebca:	326a      	adds	r2, #106	; 0x6a
    ebcc:	8010      	strh	r0, [r2, #0]
    ebce:	8054      	strh	r4, [r2, #2]
    ebd0:	001a      	movs	r2, r3
    ebd2:	25fd      	movs	r5, #253	; 0xfd
    ebd4:	32fd      	adds	r2, #253	; 0xfd
    ebd6:	7812      	ldrb	r2, [r2, #0]
    ebd8:	3a02      	subs	r2, #2
    ebda:	422a      	tst	r2, r5
    ebdc:	d109      	bne.n	ebf2 <UpdateReceiveWindow2Parameters+0x36>
    ebde:	001a      	movs	r2, r3
    ebe0:	336f      	adds	r3, #111	; 0x6f
    ebe2:	3273      	adds	r2, #115	; 0x73
    ebe4:	7011      	strb	r1, [r2, #0]
    ebe6:	7018      	strb	r0, [r3, #0]
    ebe8:	0a02      	lsrs	r2, r0, #8
    ebea:	0e00      	lsrs	r0, r0, #24
    ebec:	705a      	strb	r2, [r3, #1]
    ebee:	709c      	strb	r4, [r3, #2]
    ebf0:	70d8      	strb	r0, [r3, #3]
    ebf2:	2100      	movs	r1, #0
    ebf4:	4b02      	ldr	r3, [pc, #8]	; (ec00 <UpdateReceiveWindow2Parameters+0x44>)
    ebf6:	2001      	movs	r0, #1
    ebf8:	4798      	blx	r3
    ebfa:	bd70      	pop	{r4, r5, r6, pc}
    ebfc:	20003ad4 	.word	0x20003ad4
    ec00:	00008755 	.word	0x00008755

0000ec04 <ResetParametersForConfirmedTransmission>:
    ec04:	4b0a      	ldr	r3, [pc, #40]	; (ec30 <ResetParametersForConfirmedTransmission+0x2c>)
    ec06:	001a      	movs	r2, r3
    ec08:	32fd      	adds	r2, #253	; 0xfd
    ec0a:	7812      	ldrb	r2, [r2, #0]
    ec0c:	2a01      	cmp	r2, #1
    ec0e:	d105      	bne.n	ec1c <ResetParametersForConfirmedTransmission+0x18>
    ec10:	0019      	movs	r1, r3
    ec12:	200e      	movs	r0, #14
    ec14:	3184      	adds	r1, #132	; 0x84
    ec16:	780a      	ldrb	r2, [r1, #0]
    ec18:	4382      	bics	r2, r0
    ec1a:	700a      	strb	r2, [r1, #0]
    ec1c:	001a      	movs	r2, r3
    ec1e:	2100      	movs	r1, #0
    ec20:	3394      	adds	r3, #148	; 0x94
    ec22:	32e4      	adds	r2, #228	; 0xe4
    ec24:	7011      	strb	r1, [r2, #0]
    ec26:	781a      	ldrb	r2, [r3, #0]
    ec28:	3101      	adds	r1, #1
    ec2a:	438a      	bics	r2, r1
    ec2c:	701a      	strb	r2, [r3, #0]
    ec2e:	4770      	bx	lr
    ec30:	20003ad4 	.word	0x20003ad4

0000ec34 <ResetParametersForUnconfirmedTransmission>:
    ec34:	4b07      	ldr	r3, [pc, #28]	; (ec54 <ResetParametersForUnconfirmedTransmission+0x20>)
    ec36:	001a      	movs	r2, r3
    ec38:	32fd      	adds	r2, #253	; 0xfd
    ec3a:	7812      	ldrb	r2, [r2, #0]
    ec3c:	2a01      	cmp	r2, #1
    ec3e:	d105      	bne.n	ec4c <ResetParametersForUnconfirmedTransmission+0x18>
    ec40:	0019      	movs	r1, r3
    ec42:	200e      	movs	r0, #14
    ec44:	3184      	adds	r1, #132	; 0x84
    ec46:	780a      	ldrb	r2, [r1, #0]
    ec48:	4382      	bics	r2, r0
    ec4a:	700a      	strb	r2, [r1, #0]
    ec4c:	2200      	movs	r2, #0
    ec4e:	33e3      	adds	r3, #227	; 0xe3
    ec50:	701a      	strb	r2, [r3, #0]
    ec52:	4770      	bx	lr
    ec54:	20003ad4 	.word	0x20003ad4

0000ec58 <SetJoinFailState>:
    ec58:	b570      	push	{r4, r5, r6, lr}
    ec5a:	4c15      	ldr	r4, [pc, #84]	; (ecb0 <SetJoinFailState+0x58>)
    ec5c:	2604      	movs	r6, #4
    ec5e:	0025      	movs	r5, r4
    ec60:	3594      	adds	r5, #148	; 0x94
    ec62:	782a      	ldrb	r2, [r5, #0]
    ec64:	0021      	movs	r1, r4
    ec66:	43b2      	bics	r2, r6
    ec68:	702a      	strb	r2, [r5, #0]
    ec6a:	22f0      	movs	r2, #240	; 0xf0
    ec6c:	3184      	adds	r1, #132	; 0x84
    ec6e:	780b      	ldrb	r3, [r1, #0]
    ec70:	4013      	ands	r3, r2
    ec72:	700b      	strb	r3, [r1, #0]
    ec74:	0023      	movs	r3, r4
    ec76:	33ff      	adds	r3, #255	; 0xff
    ec78:	7f5b      	ldrb	r3, [r3, #29]
    ec7a:	069b      	lsls	r3, r3, #26
    ec7c:	d503      	bpl.n	ec86 <SetJoinFailState+0x2e>
    ec7e:	0023      	movs	r3, r4
    ec80:	2200      	movs	r2, #0
    ec82:	3380      	adds	r3, #128	; 0x80
    ec84:	701a      	strb	r2, [r3, #0]
    ec86:	490b      	ldr	r1, [pc, #44]	; (ecb4 <SetJoinFailState+0x5c>)
    ec88:	794a      	ldrb	r2, [r1, #5]
    ec8a:	790b      	ldrb	r3, [r1, #4]
    ec8c:	0212      	lsls	r2, r2, #8
    ec8e:	431a      	orrs	r2, r3
    ec90:	798b      	ldrb	r3, [r1, #6]
    ec92:	041b      	lsls	r3, r3, #16
    ec94:	431a      	orrs	r2, r3
    ec96:	79cb      	ldrb	r3, [r1, #7]
    ec98:	061b      	lsls	r3, r3, #24
    ec9a:	4313      	orrs	r3, r2
    ec9c:	d000      	beq.n	eca0 <SetJoinFailState+0x48>
    ec9e:	4798      	blx	r3
    eca0:	2300      	movs	r3, #0
    eca2:	34f9      	adds	r4, #249	; 0xf9
    eca4:	7023      	strb	r3, [r4, #0]
    eca6:	210b      	movs	r1, #11
    eca8:	4b03      	ldr	r3, [pc, #12]	; (ecb8 <SetJoinFailState+0x60>)
    ecaa:	2001      	movs	r0, #1
    ecac:	4798      	blx	r3
    ecae:	bd70      	pop	{r4, r5, r6, pc}
    ecb0:	20003ad4 	.word	0x20003ad4
    ecb4:	20003e30 	.word	0x20003e30
    ecb8:	00008755 	.word	0x00008755

0000ecbc <ExecuteRxParamSetupReq>:
    ecbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    ecbe:	b085      	sub	sp, #20
    ecc0:	7805      	ldrb	r5, [r0, #0]
    ecc2:	0004      	movs	r4, r0
    ecc4:	1c41      	adds	r1, r0, #1
    ecc6:	2204      	movs	r2, #4
    ecc8:	4b36      	ldr	r3, [pc, #216]	; (eda4 <ExecuteRxParamSetupReq+0xe8>)
    ecca:	a803      	add	r0, sp, #12
    eccc:	4798      	blx	r3
    ecce:	2264      	movs	r2, #100	; 0x64
    ecd0:	9b03      	ldr	r3, [sp, #12]
    ecd2:	a903      	add	r1, sp, #12
    ecd4:	021b      	lsls	r3, r3, #8
    ecd6:	0a1b      	lsrs	r3, r3, #8
    ecd8:	4353      	muls	r3, r2
    ecda:	9303      	str	r3, [sp, #12]
    ecdc:	1d23      	adds	r3, r4, #4
    ecde:	9301      	str	r3, [sp, #4]
    ece0:	072b      	lsls	r3, r5, #28
    ece2:	0f1b      	lsrs	r3, r3, #28
    ece4:	b2da      	uxtb	r2, r3
    ece6:	9200      	str	r2, [sp, #0]
    ece8:	aa02      	add	r2, sp, #8
    ecea:	1c96      	adds	r6, r2, #2
    ecec:	066d      	lsls	r5, r5, #25
    ecee:	7033      	strb	r3, [r6, #0]
    ecf0:	1cd7      	adds	r7, r2, #3
    ecf2:	0f6d      	lsrs	r5, r5, #29
    ecf4:	2001      	movs	r0, #1
    ecf6:	4b2c      	ldr	r3, [pc, #176]	; (eda8 <ExecuteRxParamSetupReq+0xec>)
    ecf8:	703d      	strb	r5, [r7, #0]
    ecfa:	4798      	blx	r3
    ecfc:	4c2b      	ldr	r4, [pc, #172]	; (edac <ExecuteRxParamSetupReq+0xf0>)
    ecfe:	2808      	cmp	r0, #8
    ed00:	d109      	bne.n	ed16 <ExecuteRxParamSetupReq+0x5a>
    ed02:	0023      	movs	r3, r4
    ed04:	33e0      	adds	r3, #224	; 0xe0
    ed06:	781a      	ldrb	r2, [r3, #0]
    ed08:	2303      	movs	r3, #3
    ed0a:	4353      	muls	r3, r2
    ed0c:	18e3      	adds	r3, r4, r3
    ed0e:	3398      	adds	r3, #152	; 0x98
    ed10:	789a      	ldrb	r2, [r3, #2]
    ed12:	4310      	orrs	r0, r2
    ed14:	7098      	strb	r0, [r3, #2]
    ed16:	0031      	movs	r1, r6
    ed18:	200f      	movs	r0, #15
    ed1a:	4e23      	ldr	r6, [pc, #140]	; (eda8 <ExecuteRxParamSetupReq+0xec>)
    ed1c:	47b0      	blx	r6
    ed1e:	2808      	cmp	r0, #8
    ed20:	d10a      	bne.n	ed38 <ExecuteRxParamSetupReq+0x7c>
    ed22:	0023      	movs	r3, r4
    ed24:	33e0      	adds	r3, #224	; 0xe0
    ed26:	781a      	ldrb	r2, [r3, #0]
    ed28:	2303      	movs	r3, #3
    ed2a:	4353      	muls	r3, r2
    ed2c:	2210      	movs	r2, #16
    ed2e:	18e3      	adds	r3, r4, r3
    ed30:	3398      	adds	r3, #152	; 0x98
    ed32:	7899      	ldrb	r1, [r3, #2]
    ed34:	430a      	orrs	r2, r1
    ed36:	709a      	strb	r2, [r3, #2]
    ed38:	0039      	movs	r1, r7
    ed3a:	2018      	movs	r0, #24
    ed3c:	47b0      	blx	r6
    ed3e:	2808      	cmp	r0, #8
    ed40:	d10a      	bne.n	ed58 <ExecuteRxParamSetupReq+0x9c>
    ed42:	0023      	movs	r3, r4
    ed44:	33e0      	adds	r3, #224	; 0xe0
    ed46:	781a      	ldrb	r2, [r3, #0]
    ed48:	2303      	movs	r3, #3
    ed4a:	4353      	muls	r3, r2
    ed4c:	2220      	movs	r2, #32
    ed4e:	18e3      	adds	r3, r4, r3
    ed50:	3398      	adds	r3, #152	; 0x98
    ed52:	7899      	ldrb	r1, [r3, #2]
    ed54:	430a      	orrs	r2, r1
    ed56:	709a      	strb	r2, [r3, #2]
    ed58:	0023      	movs	r3, r4
    ed5a:	33e0      	adds	r3, #224	; 0xe0
    ed5c:	781a      	ldrb	r2, [r3, #0]
    ed5e:	2303      	movs	r3, #3
    ed60:	4353      	muls	r3, r2
    ed62:	18e3      	adds	r3, r4, r3
    ed64:	3398      	adds	r3, #152	; 0x98
    ed66:	789e      	ldrb	r6, [r3, #2]
    ed68:	06f3      	lsls	r3, r6, #27
    ed6a:	d518      	bpl.n	ed9e <ExecuteRxParamSetupReq+0xe2>
    ed6c:	0733      	lsls	r3, r6, #28
    ed6e:	d516      	bpl.n	ed9e <ExecuteRxParamSetupReq+0xe2>
    ed70:	06b6      	lsls	r6, r6, #26
    ed72:	0ff6      	lsrs	r6, r6, #31
    ed74:	2e01      	cmp	r6, #1
    ed76:	d112      	bne.n	ed9e <ExecuteRxParamSetupReq+0xe2>
    ed78:	0023      	movs	r3, r4
    ed7a:	33f7      	adds	r3, #247	; 0xf7
    ed7c:	701d      	strb	r5, [r3, #0]
    ed7e:	0031      	movs	r1, r6
    ed80:	0030      	movs	r0, r6
    ed82:	4d0b      	ldr	r5, [pc, #44]	; (edb0 <ExecuteRxParamSetupReq+0xf4>)
    ed84:	47a8      	blx	r5
    ed86:	9900      	ldr	r1, [sp, #0]
    ed88:	9803      	ldr	r0, [sp, #12]
    ed8a:	4b0a      	ldr	r3, [pc, #40]	; (edb4 <ExecuteRxParamSetupReq+0xf8>)
    ed8c:	4798      	blx	r3
    ed8e:	2340      	movs	r3, #64	; 0x40
    ed90:	3484      	adds	r4, #132	; 0x84
    ed92:	7862      	ldrb	r2, [r4, #1]
    ed94:	210b      	movs	r1, #11
    ed96:	4313      	orrs	r3, r2
    ed98:	7063      	strb	r3, [r4, #1]
    ed9a:	0030      	movs	r0, r6
    ed9c:	47a8      	blx	r5
    ed9e:	9801      	ldr	r0, [sp, #4]
    eda0:	b005      	add	sp, #20
    eda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eda4:	00014fe3 	.word	0x00014fe3
    eda8:	0000b6ad 	.word	0x0000b6ad
    edac:	20003ad4 	.word	0x20003ad4
    edb0:	00008755 	.word	0x00008755
    edb4:	0000ebbd 	.word	0x0000ebbd

0000edb8 <ExecuteDutyCycle>:
    edb8:	b570      	push	{r4, r5, r6, lr}
    edba:	7803      	ldrb	r3, [r0, #0]
    edbc:	1c46      	adds	r6, r0, #1
    edbe:	2b0f      	cmp	r3, #15
    edc0:	d80f      	bhi.n	ede2 <ExecuteDutyCycle+0x2a>
    edc2:	4c09      	ldr	r4, [pc, #36]	; (ede8 <ExecuteDutyCycle+0x30>)
    edc4:	210b      	movs	r1, #11
    edc6:	0022      	movs	r2, r4
    edc8:	2000      	movs	r0, #0
    edca:	3298      	adds	r2, #152	; 0x98
    edcc:	4d07      	ldr	r5, [pc, #28]	; (edec <ExecuteDutyCycle+0x34>)
    edce:	7013      	strb	r3, [r2, #0]
    edd0:	47a8      	blx	r5
    edd2:	2320      	movs	r3, #32
    edd4:	3484      	adds	r4, #132	; 0x84
    edd6:	7862      	ldrb	r2, [r4, #1]
    edd8:	210b      	movs	r1, #11
    edda:	4313      	orrs	r3, r2
    eddc:	7063      	strb	r3, [r4, #1]
    edde:	2001      	movs	r0, #1
    ede0:	47a8      	blx	r5
    ede2:	0030      	movs	r0, r6
    ede4:	bd70      	pop	{r4, r5, r6, pc}
    ede6:	46c0      	nop			; (mov r8, r8)
    ede8:	20003ad4 	.word	0x20003ad4
    edec:	00008755 	.word	0x00008755

0000edf0 <ExecuteDlChannel>:
    edf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    edf2:	b089      	sub	sp, #36	; 0x24
    edf4:	7805      	ldrb	r5, [r0, #0]
    edf6:	ab02      	add	r3, sp, #8
    edf8:	1c41      	adds	r1, r0, #1
    edfa:	0007      	movs	r7, r0
    edfc:	719d      	strb	r5, [r3, #6]
    edfe:	1d9e      	adds	r6, r3, #6
    ee00:	2204      	movs	r2, #4
    ee02:	4b23      	ldr	r3, [pc, #140]	; (ee90 <ExecuteDlChannel+0xa0>)
    ee04:	a805      	add	r0, sp, #20
    ee06:	4798      	blx	r3
    ee08:	9b05      	ldr	r3, [sp, #20]
    ee0a:	a904      	add	r1, sp, #16
    ee0c:	021c      	lsls	r4, r3, #8
    ee0e:	2364      	movs	r3, #100	; 0x64
    ee10:	0a24      	lsrs	r4, r4, #8
    ee12:	435c      	muls	r4, r3
    ee14:	1d3b      	adds	r3, r7, #4
    ee16:	9301      	str	r3, [sp, #4]
    ee18:	2301      	movs	r3, #1
    ee1a:	2015      	movs	r0, #21
    ee1c:	704b      	strb	r3, [r1, #1]
    ee1e:	4b1d      	ldr	r3, [pc, #116]	; (ee94 <ExecuteDlChannel+0xa4>)
    ee20:	9405      	str	r4, [sp, #20]
    ee22:	700d      	strb	r5, [r1, #0]
    ee24:	4798      	blx	r3
    ee26:	2808      	cmp	r0, #8
    ee28:	d12f      	bne.n	ee8a <ExecuteDlChannel+0x9a>
    ee2a:	ab02      	add	r3, sp, #8
    ee2c:	1ddd      	adds	r5, r3, #7
    ee2e:	2300      	movs	r3, #0
    ee30:	702b      	strb	r3, [r5, #0]
    ee32:	7833      	ldrb	r3, [r6, #0]
    ee34:	af06      	add	r7, sp, #24
    ee36:	713b      	strb	r3, [r7, #4]
    ee38:	002a      	movs	r2, r5
    ee3a:	0031      	movs	r1, r6
    ee3c:	300e      	adds	r0, #14
    ee3e:	4b16      	ldr	r3, [pc, #88]	; (ee98 <ExecuteDlChannel+0xa8>)
    ee40:	9406      	str	r4, [sp, #24]
    ee42:	4798      	blx	r3
    ee44:	280a      	cmp	r0, #10
    ee46:	d00d      	beq.n	ee64 <ExecuteDlChannel+0x74>
    ee48:	782a      	ldrb	r2, [r5, #0]
    ee4a:	2a01      	cmp	r2, #1
    ee4c:	d10a      	bne.n	ee64 <ExecuteDlChannel+0x74>
    ee4e:	4b13      	ldr	r3, [pc, #76]	; (ee9c <ExecuteDlChannel+0xac>)
    ee50:	0019      	movs	r1, r3
    ee52:	31e0      	adds	r1, #224	; 0xe0
    ee54:	7808      	ldrb	r0, [r1, #0]
    ee56:	2103      	movs	r1, #3
    ee58:	4341      	muls	r1, r0
    ee5a:	185b      	adds	r3, r3, r1
    ee5c:	3398      	adds	r3, #152	; 0x98
    ee5e:	78d9      	ldrb	r1, [r3, #3]
    ee60:	430a      	orrs	r2, r1
    ee62:	70da      	strb	r2, [r3, #3]
    ee64:	0039      	movs	r1, r7
    ee66:	2033      	movs	r0, #51	; 0x33
    ee68:	4b0d      	ldr	r3, [pc, #52]	; (eea0 <ExecuteDlChannel+0xb0>)
    ee6a:	4798      	blx	r3
    ee6c:	2808      	cmp	r0, #8
    ee6e:	d10c      	bne.n	ee8a <ExecuteDlChannel+0x9a>
    ee70:	4b0a      	ldr	r3, [pc, #40]	; (ee9c <ExecuteDlChannel+0xac>)
    ee72:	001a      	movs	r2, r3
    ee74:	32e0      	adds	r2, #224	; 0xe0
    ee76:	7811      	ldrb	r1, [r2, #0]
    ee78:	2203      	movs	r2, #3
    ee7a:	434a      	muls	r2, r1
    ee7c:	189b      	adds	r3, r3, r2
    ee7e:	2280      	movs	r2, #128	; 0x80
    ee80:	3398      	adds	r3, #152	; 0x98
    ee82:	7899      	ldrb	r1, [r3, #2]
    ee84:	4252      	negs	r2, r2
    ee86:	430a      	orrs	r2, r1
    ee88:	709a      	strb	r2, [r3, #2]
    ee8a:	9801      	ldr	r0, [sp, #4]
    ee8c:	b009      	add	sp, #36	; 0x24
    ee8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee90:	00014fe3 	.word	0x00014fe3
    ee94:	0000b6ad 	.word	0x0000b6ad
    ee98:	0000b691 	.word	0x0000b691
    ee9c:	20003ad4 	.word	0x20003ad4
    eea0:	0000b6c9 	.word	0x0000b6c9

0000eea4 <ExecuteTxParamSetup>:
    eea4:	220f      	movs	r2, #15
    eea6:	b513      	push	{r0, r1, r4, lr}
    eea8:	7803      	ldrb	r3, [r0, #0]
    eeaa:	4c0f      	ldr	r4, [pc, #60]	; (eee8 <ExecuteTxParamSetup+0x44>)
    eeac:	401a      	ands	r2, r3
    eeae:	5ca2      	ldrb	r2, [r4, r2]
    eeb0:	2401      	movs	r4, #1
    eeb2:	a901      	add	r1, sp, #4
    eeb4:	700a      	strb	r2, [r1, #0]
    eeb6:	111a      	asrs	r2, r3, #4
    eeb8:	115b      	asrs	r3, r3, #5
    eeba:	4023      	ands	r3, r4
    eebc:	40a3      	lsls	r3, r4
    eebe:	4022      	ands	r2, r4
    eec0:	4313      	orrs	r3, r2
    eec2:	704b      	strb	r3, [r1, #1]
    eec4:	1904      	adds	r4, r0, r4
    eec6:	4b09      	ldr	r3, [pc, #36]	; (eeec <ExecuteTxParamSetup+0x48>)
    eec8:	2034      	movs	r0, #52	; 0x34
    eeca:	4798      	blx	r3
    eecc:	2808      	cmp	r0, #8
    eece:	d009      	beq.n	eee4 <ExecuteTxParamSetup+0x40>
    eed0:	4b07      	ldr	r3, [pc, #28]	; (eef0 <ExecuteTxParamSetup+0x4c>)
    eed2:	001a      	movs	r2, r3
    eed4:	32e0      	adds	r2, #224	; 0xe0
    eed6:	7811      	ldrb	r1, [r2, #0]
    eed8:	2203      	movs	r2, #3
    eeda:	434a      	muls	r2, r1
    eedc:	189b      	adds	r3, r3, r2
    eede:	22ff      	movs	r2, #255	; 0xff
    eee0:	3399      	adds	r3, #153	; 0x99
    eee2:	701a      	strb	r2, [r3, #0]
    eee4:	0020      	movs	r0, r4
    eee6:	bd16      	pop	{r1, r2, r4, pc}
    eee8:	00016d99 	.word	0x00016d99
    eeec:	0000b6c9 	.word	0x0000b6c9
    eef0:	20003ad4 	.word	0x20003ad4

0000eef4 <ExecuteLinkAdr>:
    eef4:	220f      	movs	r2, #15
    eef6:	b5f0      	push	{r4, r5, r6, r7, lr}
    eef8:	0006      	movs	r6, r0
    eefa:	7803      	ldrb	r3, [r0, #0]
    eefc:	b089      	sub	sp, #36	; 0x24
    eefe:	401a      	ands	r2, r3
    ef00:	a905      	add	r1, sp, #20
    ef02:	700a      	strb	r2, [r1, #0]
    ef04:	aa04      	add	r2, sp, #16
    ef06:	1d97      	adds	r7, r2, #6
    ef08:	091b      	lsrs	r3, r3, #4
    ef0a:	7153      	strb	r3, [r2, #5]
    ef0c:	1c41      	adds	r1, r0, #1
    ef0e:	2202      	movs	r2, #2
    ef10:	0038      	movs	r0, r7
    ef12:	4b3d      	ldr	r3, [pc, #244]	; (f008 <ExecuteLinkAdr+0x114>)
    ef14:	4798      	blx	r3
    ef16:	2201      	movs	r2, #1
    ef18:	1d33      	adds	r3, r6, #4
    ef1a:	9303      	str	r3, [sp, #12]
    ef1c:	78f3      	ldrb	r3, [r6, #3]
    ef1e:	4c3b      	ldr	r4, [pc, #236]	; (f00c <ExecuteLinkAdr+0x118>)
    ef20:	4d3b      	ldr	r5, [pc, #236]	; (f010 <ExecuteLinkAdr+0x11c>)
    ef22:	065b      	lsls	r3, r3, #25
    ef24:	0f5b      	lsrs	r3, r3, #29
    ef26:	9300      	str	r3, [sp, #0]
    ef28:	5d63      	ldrb	r3, [r4, r5]
    ef2a:	a906      	add	r1, sp, #24
    ef2c:	4393      	bics	r3, r2
    ef2e:	1892      	adds	r2, r2, r2
    ef30:	4393      	bics	r3, r2
    ef32:	3202      	adds	r2, #2
    ef34:	4393      	bics	r3, r2
    ef36:	5563      	strb	r3, [r4, r5]
    ef38:	883b      	ldrh	r3, [r7, #0]
    ef3a:	2037      	movs	r0, #55	; 0x37
    ef3c:	9302      	str	r3, [sp, #8]
    ef3e:	466b      	mov	r3, sp
    ef40:	891b      	ldrh	r3, [r3, #8]
    ef42:	4f34      	ldr	r7, [pc, #208]	; (f014 <ExecuteLinkAdr+0x120>)
    ef44:	804b      	strh	r3, [r1, #2]
    ef46:	466b      	mov	r3, sp
    ef48:	781b      	ldrb	r3, [r3, #0]
    ef4a:	700b      	strb	r3, [r1, #0]
    ef4c:	47b8      	blx	r7
    ef4e:	2808      	cmp	r0, #8
    ef50:	d117      	bne.n	ef82 <ExecuteLinkAdr+0x8e>
    ef52:	466b      	mov	r3, sp
    ef54:	891b      	ldrh	r3, [r3, #8]
    ef56:	a907      	add	r1, sp, #28
    ef58:	800b      	strh	r3, [r1, #0]
    ef5a:	466b      	mov	r3, sp
    ef5c:	781b      	ldrb	r3, [r3, #0]
    ef5e:	3014      	adds	r0, #20
    ef60:	708b      	strb	r3, [r1, #2]
    ef62:	4b2d      	ldr	r3, [pc, #180]	; (f018 <ExecuteLinkAdr+0x124>)
    ef64:	4798      	blx	r3
    ef66:	2201      	movs	r2, #1
    ef68:	5d63      	ldrb	r3, [r4, r5]
    ef6a:	2010      	movs	r0, #16
    ef6c:	4313      	orrs	r3, r2
    ef6e:	5563      	strb	r3, [r4, r5]
    ef70:	ab04      	add	r3, sp, #16
    ef72:	1d59      	adds	r1, r3, #5
    ef74:	47b8      	blx	r7
    ef76:	2808      	cmp	r0, #8
    ef78:	d103      	bne.n	ef82 <ExecuteLinkAdr+0x8e>
    ef7a:	2202      	movs	r2, #2
    ef7c:	5d63      	ldrb	r3, [r4, r5]
    ef7e:	4313      	orrs	r3, r2
    ef80:	5563      	strb	r3, [r4, r5]
    ef82:	af05      	add	r7, sp, #20
    ef84:	4b23      	ldr	r3, [pc, #140]	; (f014 <ExecuteLinkAdr+0x120>)
    ef86:	0039      	movs	r1, r7
    ef88:	201d      	movs	r0, #29
    ef8a:	4798      	blx	r3
    ef8c:	4b1f      	ldr	r3, [pc, #124]	; (f00c <ExecuteLinkAdr+0x118>)
    ef8e:	2808      	cmp	r0, #8
    ef90:	d103      	bne.n	ef9a <ExecuteLinkAdr+0xa6>
    ef92:	2204      	movs	r2, #4
    ef94:	5d59      	ldrb	r1, [r3, r5]
    ef96:	430a      	orrs	r2, r1
    ef98:	555a      	strb	r2, [r3, r5]
    ef9a:	5d5a      	ldrb	r2, [r3, r5]
    ef9c:	43d2      	mvns	r2, r2
    ef9e:	0752      	lsls	r2, r2, #29
    efa0:	d12a      	bne.n	eff8 <ExecuteLinkAdr+0x104>
    efa2:	4669      	mov	r1, sp
    efa4:	4a1d      	ldr	r2, [pc, #116]	; (f01c <ExecuteLinkAdr+0x128>)
    efa6:	7a09      	ldrb	r1, [r1, #8]
    efa8:	5499      	strb	r1, [r3, r2]
    efaa:	9a02      	ldr	r2, [sp, #8]
    efac:	491b      	ldr	r1, [pc, #108]	; (f01c <ExecuteLinkAdr+0x128>)
    efae:	0a12      	lsrs	r2, r2, #8
    efb0:	1859      	adds	r1, r3, r1
    efb2:	704a      	strb	r2, [r1, #1]
    efb4:	aa04      	add	r2, sp, #16
    efb6:	3205      	adds	r2, #5
    efb8:	7812      	ldrb	r2, [r2, #0]
    efba:	2a0f      	cmp	r2, #15
    efbc:	d101      	bne.n	efc2 <ExecuteLinkAdr+0xce>
    efbe:	33e7      	adds	r3, #231	; 0xe7
    efc0:	781a      	ldrb	r2, [r3, #0]
    efc2:	2389      	movs	r3, #137	; 0x89
    efc4:	2170      	movs	r1, #112	; 0x70
    efc6:	2070      	movs	r0, #112	; 0x70
    efc8:	009b      	lsls	r3, r3, #2
    efca:	54e2      	strb	r2, [r4, r3]
    efcc:	78f3      	ldrb	r3, [r6, #3]
    efce:	4a14      	ldr	r2, [pc, #80]	; (f020 <ExecuteLinkAdr+0x12c>)
    efd0:	4019      	ands	r1, r3
    efd2:	5ca3      	ldrb	r3, [r4, r2]
    efd4:	4383      	bics	r3, r0
    efd6:	430b      	orrs	r3, r1
    efd8:	54a3      	strb	r3, [r4, r2]
    efda:	78f1      	ldrb	r1, [r6, #3]
    efdc:	3861      	subs	r0, #97	; 0x61
    efde:	b2db      	uxtb	r3, r3
    efe0:	4001      	ands	r1, r0
    efe2:	4383      	bics	r3, r0
    efe4:	430b      	orrs	r3, r1
    efe6:	54a3      	strb	r3, [r4, r2]
    efe8:	783b      	ldrb	r3, [r7, #0]
    efea:	4283      	cmp	r3, r0
    efec:	d101      	bne.n	eff2 <ExecuteLinkAdr+0xfe>
    efee:	34e9      	adds	r4, #233	; 0xe9
    eff0:	7823      	ldrb	r3, [r4, #0]
    eff2:	4a0c      	ldr	r2, [pc, #48]	; (f024 <ExecuteLinkAdr+0x130>)
    eff4:	4905      	ldr	r1, [pc, #20]	; (f00c <ExecuteLinkAdr+0x118>)
    eff6:	548b      	strb	r3, [r1, r2]
    eff8:	4904      	ldr	r1, [pc, #16]	; (f00c <ExecuteLinkAdr+0x118>)
    effa:	4a0b      	ldr	r2, [pc, #44]	; (f028 <ExecuteLinkAdr+0x134>)
    effc:	9803      	ldr	r0, [sp, #12]
    effe:	5c8b      	ldrb	r3, [r1, r2]
    f000:	3301      	adds	r3, #1
    f002:	548b      	strb	r3, [r1, r2]
    f004:	b009      	add	sp, #36	; 0x24
    f006:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f008:	00014fe3 	.word	0x00014fe3
    f00c:	20003ad4 	.word	0x20003ad4
    f010:	00000223 	.word	0x00000223
    f014:	0000b6ad 	.word	0x0000b6ad
    f018:	0000b6c9 	.word	0x0000b6c9
    f01c:	00000227 	.word	0x00000227
    f020:	00000229 	.word	0x00000229
    f024:	00000225 	.word	0x00000225
    f028:	00000226 	.word	0x00000226

0000f02c <ExecuteDevTimeAns>:
    f02c:	b510      	push	{r4, lr}
    f02e:	0001      	movs	r1, r0
    f030:	0004      	movs	r4, r0
    f032:	2204      	movs	r2, #4
    f034:	4b04      	ldr	r3, [pc, #16]	; (f048 <ExecuteDevTimeAns+0x1c>)
    f036:	4805      	ldr	r0, [pc, #20]	; (f04c <ExecuteDevTimeAns+0x20>)
    f038:	4798      	blx	r3
    f03a:	238e      	movs	r3, #142	; 0x8e
    f03c:	7921      	ldrb	r1, [r4, #4]
    f03e:	4a04      	ldr	r2, [pc, #16]	; (f050 <ExecuteDevTimeAns+0x24>)
    f040:	009b      	lsls	r3, r3, #2
    f042:	1d60      	adds	r0, r4, #5
    f044:	54d1      	strb	r1, [r2, r3]
    f046:	bd10      	pop	{r4, pc}
    f048:	00014fe3 	.word	0x00014fe3
    f04c:	20003d08 	.word	0x20003d08
    f050:	20003ad4 	.word	0x20003ad4

0000f054 <PrepareJoinRequestFrame>:
    f054:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f056:	2210      	movs	r2, #16
    f058:	4d22      	ldr	r5, [pc, #136]	; (f0e4 <PrepareJoinRequestFrame+0x90>)
    f05a:	4b23      	ldr	r3, [pc, #140]	; (f0e8 <PrepareJoinRequestFrame+0x94>)
    f05c:	32ff      	adds	r2, #255	; 0xff
    f05e:	2100      	movs	r1, #0
    f060:	0028      	movs	r0, r5
    f062:	4798      	blx	r3
    f064:	2300      	movs	r3, #0
    f066:	4c21      	ldr	r4, [pc, #132]	; (f0ec <PrepareJoinRequestFrame+0x98>)
    f068:	702b      	strb	r3, [r5, #0]
    f06a:	4b21      	ldr	r3, [pc, #132]	; (f0f0 <PrepareJoinRequestFrame+0x9c>)
    f06c:	5ce3      	ldrb	r3, [r4, r3]
    f06e:	2b00      	cmp	r3, #0
    f070:	d006      	beq.n	f080 <PrepareJoinRequestFrame+0x2c>
    f072:	4920      	ldr	r1, [pc, #128]	; (f0f4 <PrepareJoinRequestFrame+0xa0>)
    f074:	2006      	movs	r0, #6
    f076:	4e20      	ldr	r6, [pc, #128]	; (f0f8 <PrepareJoinRequestFrame+0xa4>)
    f078:	47b0      	blx	r6
    f07a:	4920      	ldr	r1, [pc, #128]	; (f0fc <PrepareJoinRequestFrame+0xa8>)
    f07c:	2007      	movs	r0, #7
    f07e:	47b0      	blx	r6
    f080:	2300      	movs	r3, #0
    f082:	205c      	movs	r0, #92	; 0x5c
    f084:	1ac1      	subs	r1, r0, r3
    f086:	5c61      	ldrb	r1, [r4, r1]
    f088:	18ea      	adds	r2, r5, r3
    f08a:	3301      	adds	r3, #1
    f08c:	7051      	strb	r1, [r2, #1]
    f08e:	2b08      	cmp	r3, #8
    f090:	d1f8      	bne.n	f084 <PrepareJoinRequestFrame+0x30>
    f092:	2300      	movs	r3, #0
    f094:	2064      	movs	r0, #100	; 0x64
    f096:	1ac1      	subs	r1, r0, r3
    f098:	5c61      	ldrb	r1, [r4, r1]
    f09a:	18ea      	adds	r2, r5, r3
    f09c:	3301      	adds	r3, #1
    f09e:	7251      	strb	r1, [r2, #9]
    f0a0:	2b08      	cmp	r3, #8
    f0a2:	d1f8      	bne.n	f096 <PrepareJoinRequestFrame+0x42>
    f0a4:	4b16      	ldr	r3, [pc, #88]	; (f100 <PrepareJoinRequestFrame+0xac>)
    f0a6:	4798      	blx	r3
    f0a8:	4b16      	ldr	r3, [pc, #88]	; (f104 <PrepareJoinRequestFrame+0xb0>)
    f0aa:	4917      	ldr	r1, [pc, #92]	; (f108 <PrepareJoinRequestFrame+0xb4>)
    f0ac:	4798      	blx	r3
    f0ae:	34cc      	adds	r4, #204	; 0xcc
    f0b0:	8021      	strh	r1, [r4, #0]
    f0b2:	2202      	movs	r2, #2
    f0b4:	0021      	movs	r1, r4
    f0b6:	4815      	ldr	r0, [pc, #84]	; (f10c <PrepareJoinRequestFrame+0xb8>)
    f0b8:	4c15      	ldr	r4, [pc, #84]	; (f110 <PrepareJoinRequestFrame+0xbc>)
    f0ba:	47a0      	blx	r4
    f0bc:	2313      	movs	r3, #19
    f0be:	4e15      	ldr	r6, [pc, #84]	; (f114 <PrepareJoinRequestFrame+0xc0>)
    f0c0:	9300      	str	r3, [sp, #0]
    f0c2:	0032      	movs	r2, r6
    f0c4:	002b      	movs	r3, r5
    f0c6:	2100      	movs	r1, #0
    f0c8:	4d13      	ldr	r5, [pc, #76]	; (f118 <PrepareJoinRequestFrame+0xc4>)
    f0ca:	4814      	ldr	r0, [pc, #80]	; (f11c <PrepareJoinRequestFrame+0xc8>)
    f0cc:	47a8      	blx	r5
    f0ce:	0031      	movs	r1, r6
    f0d0:	2204      	movs	r2, #4
    f0d2:	a803      	add	r0, sp, #12
    f0d4:	47a0      	blx	r4
    f0d6:	2204      	movs	r2, #4
    f0d8:	a903      	add	r1, sp, #12
    f0da:	4811      	ldr	r0, [pc, #68]	; (f120 <PrepareJoinRequestFrame+0xcc>)
    f0dc:	47a0      	blx	r4
    f0de:	2017      	movs	r0, #23
    f0e0:	b004      	add	sp, #16
    f0e2:	bd70      	pop	{r4, r5, r6, pc}
    f0e4:	20003d1c 	.word	0x20003d1c
    f0e8:	00014ff5 	.word	0x00014ff5
    f0ec:	20003ad4 	.word	0x20003ad4
    f0f0:	0000022d 	.word	0x0000022d
    f0f4:	20003b29 	.word	0x20003b29
    f0f8:	00006985 	.word	0x00006985
    f0fc:	20003b31 	.word	0x20003b31
    f100:	0001562d 	.word	0x0001562d
    f104:	00012061 	.word	0x00012061
    f108:	0000ffff 	.word	0x0000ffff
    f10c:	20003d2d 	.word	0x20003d2d
    f110:	00014fe3 	.word	0x00014fe3
    f114:	20001df5 	.word	0x20001df5
    f118:	00006989 	.word	0x00006989
    f11c:	20003b19 	.word	0x20003b19
    f120:	20003d2f 	.word	0x20003d2f

0000f124 <ConfigureRadioRx>:
    f124:	b5f0      	push	{r4, r5, r6, r7, lr}
    f126:	b087      	sub	sp, #28
    f128:	466b      	mov	r3, sp
    f12a:	2600      	movs	r6, #0
    f12c:	1ddc      	adds	r4, r3, #7
    f12e:	71d8      	strb	r0, [r3, #7]
    f130:	729e      	strb	r6, [r3, #10]
    f132:	466a      	mov	r2, sp
    f134:	2301      	movs	r3, #1
    f136:	72d3      	strb	r3, [r2, #11]
    f138:	2215      	movs	r2, #21
    f13a:	ad03      	add	r5, sp, #12
    f13c:	4f11      	ldr	r7, [pc, #68]	; (f184 <ConfigureRadioRx+0x60>)
    f13e:	9100      	str	r1, [sp, #0]
    f140:	446a      	add	r2, sp
    f142:	0021      	movs	r1, r4
    f144:	2023      	movs	r0, #35	; 0x23
    f146:	80ae      	strh	r6, [r5, #4]
    f148:	47b8      	blx	r7
    f14a:	2216      	movs	r2, #22
    f14c:	0021      	movs	r1, r4
    f14e:	446a      	add	r2, sp
    f150:	2024      	movs	r0, #36	; 0x24
    f152:	47b8      	blx	r7
    f154:	2217      	movs	r2, #23
    f156:	0021      	movs	r1, r4
    f158:	446a      	add	r2, sp
    f15a:	2025      	movs	r0, #37	; 0x25
    f15c:	47b8      	blx	r7
    f15e:	9b00      	ldr	r3, [sp, #0]
    f160:	0028      	movs	r0, r5
    f162:	9303      	str	r3, [sp, #12]
    f164:	4b08      	ldr	r3, [pc, #32]	; (f188 <ConfigureRadioRx+0x64>)
    f166:	80ae      	strh	r6, [r5, #4]
    f168:	4798      	blx	r3
    f16a:	230a      	movs	r3, #10
    f16c:	446b      	add	r3, sp
    f16e:	0019      	movs	r1, r3
    f170:	4c06      	ldr	r4, [pc, #24]	; (f18c <ConfigureRadioRx+0x68>)
    f172:	2014      	movs	r0, #20
    f174:	47a0      	blx	r4
    f176:	230b      	movs	r3, #11
    f178:	446b      	add	r3, sp
    f17a:	0019      	movs	r1, r3
    f17c:	2006      	movs	r0, #6
    f17e:	47a0      	blx	r4
    f180:	b007      	add	sp, #28
    f182:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f184:	0000b691 	.word	0x0000b691
    f188:	0000e791 	.word	0x0000e791
    f18c:	0000cb1d 	.word	0x0000cb1d

0000f190 <ConfigureRadioTx>:
    f190:	b5f0      	push	{r4, r5, r6, r7, lr}
    f192:	2517      	movs	r5, #23
    f194:	2300      	movs	r3, #0
    f196:	2616      	movs	r6, #22
    f198:	2701      	movs	r7, #1
    f19a:	b087      	sub	sp, #28
    f19c:	ac01      	add	r4, sp, #4
    f19e:	446d      	add	r5, sp
    f1a0:	9001      	str	r0, [sp, #4]
    f1a2:	702b      	strb	r3, [r5, #0]
    f1a4:	0020      	movs	r0, r4
    f1a6:	4b10      	ldr	r3, [pc, #64]	; (f1e8 <ConfigureRadioTx+0x58>)
    f1a8:	446e      	add	r6, sp
    f1aa:	9102      	str	r1, [sp, #8]
    f1ac:	9203      	str	r2, [sp, #12]
    f1ae:	7037      	strb	r7, [r6, #0]
    f1b0:	4798      	blx	r3
    f1b2:	79e3      	ldrb	r3, [r4, #7]
    f1b4:	4c0d      	ldr	r4, [pc, #52]	; (f1ec <ConfigureRadioTx+0x5c>)
    f1b6:	2b00      	cmp	r3, #0
    f1b8:	d00a      	beq.n	f1d0 <ConfigureRadioTx+0x40>
    f1ba:	4b0d      	ldr	r3, [pc, #52]	; (f1f0 <ConfigureRadioTx+0x60>)
    f1bc:	4a0d      	ldr	r2, [pc, #52]	; (f1f4 <ConfigureRadioTx+0x64>)
    f1be:	490e      	ldr	r1, [pc, #56]	; (f1f8 <ConfigureRadioTx+0x68>)
    f1c0:	54d7      	strb	r7, [r2, r3]
    f1c2:	200b      	movs	r0, #11
    f1c4:	4b0d      	ldr	r3, [pc, #52]	; (f1fc <ConfigureRadioTx+0x6c>)
    f1c6:	4798      	blx	r3
    f1c8:	210a      	movs	r1, #10
    f1ca:	200b      	movs	r0, #11
    f1cc:	4469      	add	r1, sp
    f1ce:	47a0      	blx	r4
    f1d0:	a903      	add	r1, sp, #12
    f1d2:	2004      	movs	r0, #4
    f1d4:	47a0      	blx	r4
    f1d6:	0031      	movs	r1, r6
    f1d8:	2014      	movs	r0, #20
    f1da:	47a0      	blx	r4
    f1dc:	0029      	movs	r1, r5
    f1de:	2006      	movs	r0, #6
    f1e0:	47a0      	blx	r4
    f1e2:	b007      	add	sp, #28
    f1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1e6:	46c0      	nop			; (mov r8, r8)
    f1e8:	0000e791 	.word	0x0000e791
    f1ec:	0000cb1d 	.word	0x0000cb1d
    f1f0:	00000222 	.word	0x00000222
    f1f4:	20003ad4 	.word	0x20003ad4
    f1f8:	20003cf5 	.word	0x20003cf5
    f1fc:	0000ca2d 	.word	0x0000ca2d

0000f200 <LorawanGetChAndInitiateRadioTransmit>:
    f200:	2301      	movs	r3, #1
    f202:	b530      	push	{r4, r5, lr}
    f204:	4c46      	ldr	r4, [pc, #280]	; (f320 <LorawanGetChAndInitiateRadioTransmit+0x120>)
    f206:	b089      	sub	sp, #36	; 0x24
    f208:	a902      	add	r1, sp, #8
    f20a:	700b      	strb	r3, [r1, #0]
    f20c:	0023      	movs	r3, r4
    f20e:	33e9      	adds	r3, #233	; 0xe9
    f210:	781b      	ldrb	r3, [r3, #0]
    f212:	704b      	strb	r3, [r1, #1]
    f214:	0023      	movs	r3, r4
    f216:	33e7      	adds	r3, #231	; 0xe7
    f218:	781b      	ldrb	r3, [r3, #0]
    f21a:	708b      	strb	r3, [r1, #2]
    f21c:	0023      	movs	r3, r4
    f21e:	33fd      	adds	r3, #253	; 0xfd
    f220:	781b      	ldrb	r3, [r3, #0]
    f222:	2b01      	cmp	r3, #1
    f224:	d108      	bne.n	f238 <LorawanGetChAndInitiateRadioTransmit+0x38>
    f226:	0020      	movs	r0, r4
    f228:	220e      	movs	r2, #14
    f22a:	3084      	adds	r0, #132	; 0x84
    f22c:	7803      	ldrb	r3, [r0, #0]
    f22e:	4393      	bics	r3, r2
    f230:	001a      	movs	r2, r3
    f232:	230c      	movs	r3, #12
    f234:	4313      	orrs	r3, r2
    f236:	7003      	strb	r3, [r0, #0]
    f238:	aa05      	add	r2, sp, #20
    f23a:	202e      	movs	r0, #46	; 0x2e
    f23c:	4d39      	ldr	r5, [pc, #228]	; (f324 <LorawanGetChAndInitiateRadioTransmit+0x124>)
    f23e:	47a8      	blx	r5
    f240:	0023      	movs	r3, r4
    f242:	2808      	cmp	r0, #8
    f244:	d135      	bne.n	f2b2 <LorawanGetChAndInitiateRadioTransmit+0xb2>
    f246:	33fd      	adds	r3, #253	; 0xfd
    f248:	781b      	ldrb	r3, [r3, #0]
    f24a:	ad03      	add	r5, sp, #12
    f24c:	2b04      	cmp	r3, #4
    f24e:	d108      	bne.n	f262 <LorawanGetChAndInitiateRadioTransmit+0x62>
    f250:	2390      	movs	r3, #144	; 0x90
    f252:	2200      	movs	r2, #0
    f254:	009b      	lsls	r3, r3, #2
    f256:	54e2      	strb	r2, [r4, r3]
    f258:	2301      	movs	r3, #1
    f25a:	0028      	movs	r0, r5
    f25c:	702b      	strb	r3, [r5, #0]
    f25e:	4b32      	ldr	r3, [pc, #200]	; (f328 <LorawanGetChAndInitiateRadioTransmit+0x128>)
    f260:	4798      	blx	r3
    f262:	9805      	ldr	r0, [sp, #20]
    f264:	4b31      	ldr	r3, [pc, #196]	; (f32c <LorawanGetChAndInitiateRadioTransmit+0x12c>)
    f266:	9906      	ldr	r1, [sp, #24]
    f268:	9a07      	ldr	r2, [sp, #28]
    f26a:	4798      	blx	r3
    f26c:	0023      	movs	r3, r4
    f26e:	33ce      	adds	r3, #206	; 0xce
    f270:	881b      	ldrh	r3, [r3, #0]
    f272:	0028      	movs	r0, r5
    f274:	702b      	strb	r3, [r5, #0]
    f276:	4b2e      	ldr	r3, [pc, #184]	; (f330 <LorawanGetChAndInitiateRadioTransmit+0x130>)
    f278:	606b      	str	r3, [r5, #4]
    f27a:	4b2e      	ldr	r3, [pc, #184]	; (f334 <LorawanGetChAndInitiateRadioTransmit+0x134>)
    f27c:	4798      	blx	r3
    f27e:	2800      	cmp	r0, #0
    f280:	d109      	bne.n	f296 <LorawanGetChAndInitiateRadioTransmit+0x96>
    f282:	220e      	movs	r2, #14
    f284:	3484      	adds	r4, #132	; 0x84
    f286:	7823      	ldrb	r3, [r4, #0]
    f288:	4393      	bics	r3, r2
    f28a:	001a      	movs	r2, r3
    f28c:	2302      	movs	r3, #2
    f28e:	4313      	orrs	r3, r2
    f290:	7023      	strb	r3, [r4, #0]
    f292:	b009      	add	sp, #36	; 0x24
    f294:	bd30      	pop	{r4, r5, pc}
    f296:	2200      	movs	r2, #0
    f298:	4b27      	ldr	r3, [pc, #156]	; (f338 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    f29a:	4928      	ldr	r1, [pc, #160]	; (f33c <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    f29c:	5ce3      	ldrb	r3, [r4, r3]
    f29e:	34fc      	adds	r4, #252	; 0xfc
    f2a0:	4359      	muls	r1, r3
    f2a2:	4b27      	ldr	r3, [pc, #156]	; (f340 <LorawanGetChAndInitiateRadioTransmit+0x140>)
    f2a4:	7820      	ldrb	r0, [r4, #0]
    f2a6:	18c9      	adds	r1, r1, r3
    f2a8:	4b26      	ldr	r3, [pc, #152]	; (f344 <LorawanGetChAndInitiateRadioTransmit+0x144>)
    f2aa:	9200      	str	r2, [sp, #0]
    f2ac:	4c26      	ldr	r4, [pc, #152]	; (f348 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    f2ae:	47a0      	blx	r4
    f2b0:	e7ef      	b.n	f292 <LorawanGetChAndInitiateRadioTransmit+0x92>
    f2b2:	33ff      	adds	r3, #255	; 0xff
    f2b4:	7f5b      	ldrb	r3, [r3, #29]
    f2b6:	079a      	lsls	r2, r3, #30
    f2b8:	d515      	bpl.n	f2e6 <LorawanGetChAndInitiateRadioTransmit+0xe6>
    f2ba:	aa03      	add	r2, sp, #12
    f2bc:	4923      	ldr	r1, [pc, #140]	; (f34c <LorawanGetChAndInitiateRadioTransmit+0x14c>)
    f2be:	2026      	movs	r0, #38	; 0x26
    f2c0:	47a8      	blx	r5
    f2c2:	9b03      	ldr	r3, [sp, #12]
    f2c4:	1c5a      	adds	r2, r3, #1
    f2c6:	d001      	beq.n	f2cc <LorawanGetChAndInitiateRadioTransmit+0xcc>
    f2c8:	3314      	adds	r3, #20
    f2ca:	9303      	str	r3, [sp, #12]
    f2cc:	21fa      	movs	r1, #250	; 0xfa
    f2ce:	4b1a      	ldr	r3, [pc, #104]	; (f338 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    f2d0:	9a03      	ldr	r2, [sp, #12]
    f2d2:	5ce3      	ldrb	r3, [r4, r3]
    f2d4:	0089      	lsls	r1, r1, #2
    f2d6:	1ad3      	subs	r3, r2, r3
    f2d8:	2200      	movs	r2, #0
    f2da:	4359      	muls	r1, r3
    f2dc:	34f2      	adds	r4, #242	; 0xf2
    f2de:	7820      	ldrb	r0, [r4, #0]
    f2e0:	9200      	str	r2, [sp, #0]
    f2e2:	4b1b      	ldr	r3, [pc, #108]	; (f350 <LorawanGetChAndInitiateRadioTransmit+0x150>)
    f2e4:	e7e2      	b.n	f2ac <LorawanGetChAndInitiateRadioTransmit+0xac>
    f2e6:	075b      	lsls	r3, r3, #29
    f2e8:	d508      	bpl.n	f2fc <LorawanGetChAndInitiateRadioTransmit+0xfc>
    f2ea:	aa03      	add	r2, sp, #12
    f2ec:	4917      	ldr	r1, [pc, #92]	; (f34c <LorawanGetChAndInitiateRadioTransmit+0x14c>)
    f2ee:	2032      	movs	r0, #50	; 0x32
    f2f0:	47a8      	blx	r5
    f2f2:	9b03      	ldr	r3, [sp, #12]
    f2f4:	1c5a      	adds	r2, r3, #1
    f2f6:	d0e9      	beq.n	f2cc <LorawanGetChAndInitiateRadioTransmit+0xcc>
    f2f8:	3301      	adds	r3, #1
    f2fa:	e7e6      	b.n	f2ca <LorawanGetChAndInitiateRadioTransmit+0xca>
    f2fc:	0023      	movs	r3, r4
    f2fe:	2201      	movs	r2, #1
    f300:	3394      	adds	r3, #148	; 0x94
    f302:	781b      	ldrb	r3, [r3, #0]
    f304:	401a      	ands	r2, r3
    f306:	d108      	bne.n	f31a <LorawanGetChAndInitiateRadioTransmit+0x11a>
    f308:	4b0b      	ldr	r3, [pc, #44]	; (f338 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    f30a:	490c      	ldr	r1, [pc, #48]	; (f33c <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    f30c:	5ce3      	ldrb	r3, [r4, r3]
    f30e:	34f2      	adds	r4, #242	; 0xf2
    f310:	4359      	muls	r1, r3
    f312:	4b0b      	ldr	r3, [pc, #44]	; (f340 <LorawanGetChAndInitiateRadioTransmit+0x140>)
    f314:	7820      	ldrb	r0, [r4, #0]
    f316:	18c9      	adds	r1, r1, r3
    f318:	e7e2      	b.n	f2e0 <LorawanGetChAndInitiateRadioTransmit+0xe0>
    f31a:	4b0e      	ldr	r3, [pc, #56]	; (f354 <LorawanGetChAndInitiateRadioTransmit+0x154>)
    f31c:	4798      	blx	r3
    f31e:	e7b8      	b.n	f292 <LorawanGetChAndInitiateRadioTransmit+0x92>
    f320:	20003ad4 	.word	0x20003ad4
    f324:	0000b691 	.word	0x0000b691
    f328:	0000dd29 	.word	0x0000dd29
    f32c:	0000f191 	.word	0x0000f191
    f330:	20003d2c 	.word	0x20003d2c
    f334:	0000d44d 	.word	0x0000d44d
    f338:	0000022b 	.word	0x0000022b
    f33c:	fffffc18 	.word	0xfffffc18
    f340:	001e8480 	.word	0x001e8480
    f344:	0000f359 	.word	0x0000f359
    f348:	0000bbd9 	.word	0x0000bbd9
    f34c:	20003bbb 	.word	0x20003bbb
    f350:	0000f411 	.word	0x0000f411
    f354:	0000eb69 	.word	0x0000eb69

0000f358 <TransmissionErrorCallback>:
    f358:	b530      	push	{r4, r5, lr}
    f35a:	4c22      	ldr	r4, [pc, #136]	; (f3e4 <TransmissionErrorCallback+0x8c>)
    f35c:	2501      	movs	r5, #1
    f35e:	0023      	movs	r3, r4
    f360:	b08b      	sub	sp, #44	; 0x2c
    f362:	a903      	add	r1, sp, #12
    f364:	700d      	strb	r5, [r1, #0]
    f366:	33e9      	adds	r3, #233	; 0xe9
    f368:	781b      	ldrb	r3, [r3, #0]
    f36a:	aa07      	add	r2, sp, #28
    f36c:	704b      	strb	r3, [r1, #1]
    f36e:	0023      	movs	r3, r4
    f370:	33e7      	adds	r3, #231	; 0xe7
    f372:	781b      	ldrb	r3, [r3, #0]
    f374:	202e      	movs	r0, #46	; 0x2e
    f376:	708b      	strb	r3, [r1, #2]
    f378:	4b1b      	ldr	r3, [pc, #108]	; (f3e8 <TransmissionErrorCallback+0x90>)
    f37a:	4798      	blx	r3
    f37c:	2808      	cmp	r0, #8
    f37e:	d121      	bne.n	f3c4 <TransmissionErrorCallback+0x6c>
    f380:	a804      	add	r0, sp, #16
    f382:	4b1a      	ldr	r3, [pc, #104]	; (f3ec <TransmissionErrorCallback+0x94>)
    f384:	7005      	strb	r5, [r0, #0]
    f386:	4798      	blx	r3
    f388:	9807      	ldr	r0, [sp, #28]
    f38a:	4b19      	ldr	r3, [pc, #100]	; (f3f0 <TransmissionErrorCallback+0x98>)
    f38c:	9908      	ldr	r1, [sp, #32]
    f38e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f390:	4798      	blx	r3
    f392:	0023      	movs	r3, r4
    f394:	33ce      	adds	r3, #206	; 0xce
    f396:	881b      	ldrh	r3, [r3, #0]
    f398:	a805      	add	r0, sp, #20
    f39a:	7003      	strb	r3, [r0, #0]
    f39c:	4b15      	ldr	r3, [pc, #84]	; (f3f4 <TransmissionErrorCallback+0x9c>)
    f39e:	6043      	str	r3, [r0, #4]
    f3a0:	4b15      	ldr	r3, [pc, #84]	; (f3f8 <TransmissionErrorCallback+0xa0>)
    f3a2:	4798      	blx	r3
    f3a4:	2800      	cmp	r0, #0
    f3a6:	d01a      	beq.n	f3de <TransmissionErrorCallback+0x86>
    f3a8:	0023      	movs	r3, r4
    f3aa:	33fd      	adds	r3, #253	; 0xfd
    f3ac:	781b      	ldrb	r3, [r3, #0]
    f3ae:	42ab      	cmp	r3, r5
    f3b0:	d108      	bne.n	f3c4 <TransmissionErrorCallback+0x6c>
    f3b2:	0021      	movs	r1, r4
    f3b4:	220e      	movs	r2, #14
    f3b6:	3184      	adds	r1, #132	; 0x84
    f3b8:	780b      	ldrb	r3, [r1, #0]
    f3ba:	4393      	bics	r3, r2
    f3bc:	001a      	movs	r2, r3
    f3be:	230c      	movs	r3, #12
    f3c0:	4313      	orrs	r3, r2
    f3c2:	700b      	strb	r3, [r1, #0]
    f3c4:	2200      	movs	r2, #0
    f3c6:	4b0d      	ldr	r3, [pc, #52]	; (f3fc <TransmissionErrorCallback+0xa4>)
    f3c8:	490d      	ldr	r1, [pc, #52]	; (f400 <TransmissionErrorCallback+0xa8>)
    f3ca:	5ce3      	ldrb	r3, [r4, r3]
    f3cc:	34fc      	adds	r4, #252	; 0xfc
    f3ce:	4359      	muls	r1, r3
    f3d0:	4b0c      	ldr	r3, [pc, #48]	; (f404 <TransmissionErrorCallback+0xac>)
    f3d2:	7820      	ldrb	r0, [r4, #0]
    f3d4:	18c9      	adds	r1, r1, r3
    f3d6:	9200      	str	r2, [sp, #0]
    f3d8:	4b0b      	ldr	r3, [pc, #44]	; (f408 <TransmissionErrorCallback+0xb0>)
    f3da:	4c0c      	ldr	r4, [pc, #48]	; (f40c <TransmissionErrorCallback+0xb4>)
    f3dc:	47a0      	blx	r4
    f3de:	b00b      	add	sp, #44	; 0x2c
    f3e0:	bd30      	pop	{r4, r5, pc}
    f3e2:	46c0      	nop			; (mov r8, r8)
    f3e4:	20003ad4 	.word	0x20003ad4
    f3e8:	0000b691 	.word	0x0000b691
    f3ec:	0000dd29 	.word	0x0000dd29
    f3f0:	0000f191 	.word	0x0000f191
    f3f4:	20003d2c 	.word	0x20003d2c
    f3f8:	0000d44d 	.word	0x0000d44d
    f3fc:	0000022b 	.word	0x0000022b
    f400:	fffffc18 	.word	0xfffffc18
    f404:	001e8480 	.word	0x001e8480
    f408:	0000f359 	.word	0x0000f359
    f40c:	0000bbd9 	.word	0x0000bbd9

0000f410 <UnconfirmedTransmissionCallback>:
    f410:	b5f0      	push	{r4, r5, r6, r7, lr}
    f412:	4c3a      	ldr	r4, [pc, #232]	; (f4fc <UnconfirmedTransmissionCallback+0xec>)
    f414:	b08b      	sub	sp, #44	; 0x2c
    f416:	0023      	movs	r3, r4
    f418:	33ce      	adds	r3, #206	; 0xce
    f41a:	881b      	ldrh	r3, [r3, #0]
    f41c:	af05      	add	r7, sp, #20
    f41e:	703b      	strb	r3, [r7, #0]
    f420:	4b37      	ldr	r3, [pc, #220]	; (f500 <UnconfirmedTransmissionCallback+0xf0>)
    f422:	a903      	add	r1, sp, #12
    f424:	9306      	str	r3, [sp, #24]
    f426:	2301      	movs	r3, #1
    f428:	700b      	strb	r3, [r1, #0]
    f42a:	0023      	movs	r3, r4
    f42c:	0026      	movs	r6, r4
    f42e:	33e9      	adds	r3, #233	; 0xe9
    f430:	781b      	ldrb	r3, [r3, #0]
    f432:	36e7      	adds	r6, #231	; 0xe7
    f434:	704b      	strb	r3, [r1, #1]
    f436:	7833      	ldrb	r3, [r6, #0]
    f438:	aa07      	add	r2, sp, #28
    f43a:	202e      	movs	r0, #46	; 0x2e
    f43c:	4d31      	ldr	r5, [pc, #196]	; (f504 <UnconfirmedTransmissionCallback+0xf4>)
    f43e:	708b      	strb	r3, [r1, #2]
    f440:	47a8      	blx	r5
    f442:	2808      	cmp	r0, #8
    f444:	d12b      	bne.n	f49e <UnconfirmedTransmissionCallback+0x8e>
    f446:	2301      	movs	r3, #1
    f448:	a804      	add	r0, sp, #16
    f44a:	7003      	strb	r3, [r0, #0]
    f44c:	4b2e      	ldr	r3, [pc, #184]	; (f508 <UnconfirmedTransmissionCallback+0xf8>)
    f44e:	4798      	blx	r3
    f450:	9807      	ldr	r0, [sp, #28]
    f452:	4b2e      	ldr	r3, [pc, #184]	; (f50c <UnconfirmedTransmissionCallback+0xfc>)
    f454:	9908      	ldr	r1, [sp, #32]
    f456:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f458:	4798      	blx	r3
    f45a:	0038      	movs	r0, r7
    f45c:	4b2c      	ldr	r3, [pc, #176]	; (f510 <UnconfirmedTransmissionCallback+0x100>)
    f45e:	4798      	blx	r3
    f460:	2800      	cmp	r0, #0
    f462:	d01a      	beq.n	f49a <UnconfirmedTransmissionCallback+0x8a>
    f464:	0023      	movs	r3, r4
    f466:	33fd      	adds	r3, #253	; 0xfd
    f468:	781b      	ldrb	r3, [r3, #0]
    f46a:	2b01      	cmp	r3, #1
    f46c:	d108      	bne.n	f480 <UnconfirmedTransmissionCallback+0x70>
    f46e:	0021      	movs	r1, r4
    f470:	220e      	movs	r2, #14
    f472:	3184      	adds	r1, #132	; 0x84
    f474:	780b      	ldrb	r3, [r1, #0]
    f476:	4393      	bics	r3, r2
    f478:	001a      	movs	r2, r3
    f47a:	230c      	movs	r3, #12
    f47c:	4313      	orrs	r3, r2
    f47e:	700b      	strb	r3, [r1, #0]
    f480:	2200      	movs	r2, #0
    f482:	4b24      	ldr	r3, [pc, #144]	; (f514 <UnconfirmedTransmissionCallback+0x104>)
    f484:	4924      	ldr	r1, [pc, #144]	; (f518 <UnconfirmedTransmissionCallback+0x108>)
    f486:	5ce3      	ldrb	r3, [r4, r3]
    f488:	34fc      	adds	r4, #252	; 0xfc
    f48a:	4359      	muls	r1, r3
    f48c:	4b23      	ldr	r3, [pc, #140]	; (f51c <UnconfirmedTransmissionCallback+0x10c>)
    f48e:	7820      	ldrb	r0, [r4, #0]
    f490:	18c9      	adds	r1, r1, r3
    f492:	4b23      	ldr	r3, [pc, #140]	; (f520 <UnconfirmedTransmissionCallback+0x110>)
    f494:	9200      	str	r2, [sp, #0]
    f496:	4c23      	ldr	r4, [pc, #140]	; (f524 <UnconfirmedTransmissionCallback+0x114>)
    f498:	47a0      	blx	r4
    f49a:	b00b      	add	sp, #44	; 0x2c
    f49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f49e:	4b22      	ldr	r3, [pc, #136]	; (f528 <UnconfirmedTransmissionCallback+0x118>)
    f4a0:	4798      	blx	r3
    f4a2:	4b22      	ldr	r3, [pc, #136]	; (f52c <UnconfirmedTransmissionCallback+0x11c>)
    f4a4:	4922      	ldr	r1, [pc, #136]	; (f530 <UnconfirmedTransmissionCallback+0x120>)
    f4a6:	4798      	blx	r3
    f4a8:	23fa      	movs	r3, #250	; 0xfa
    f4aa:	009b      	lsls	r3, r3, #2
    f4ac:	18c9      	adds	r1, r1, r3
    f4ae:	0023      	movs	r3, r4
    f4b0:	9104      	str	r1, [sp, #16]
    f4b2:	33ff      	adds	r3, #255	; 0xff
    f4b4:	7f5b      	ldrb	r3, [r3, #29]
    f4b6:	079a      	lsls	r2, r3, #30
    f4b8:	d515      	bpl.n	f4e6 <UnconfirmedTransmissionCallback+0xd6>
    f4ba:	aa04      	add	r2, sp, #16
    f4bc:	0031      	movs	r1, r6
    f4be:	2026      	movs	r0, #38	; 0x26
    f4c0:	47a8      	blx	r5
    f4c2:	9b04      	ldr	r3, [sp, #16]
    f4c4:	1c5a      	adds	r2, r3, #1
    f4c6:	d001      	beq.n	f4cc <UnconfirmedTransmissionCallback+0xbc>
    f4c8:	3314      	adds	r3, #20
    f4ca:	9304      	str	r3, [sp, #16]
    f4cc:	4b11      	ldr	r3, [pc, #68]	; (f514 <UnconfirmedTransmissionCallback+0x104>)
    f4ce:	9a04      	ldr	r2, [sp, #16]
    f4d0:	5ce3      	ldrb	r3, [r4, r3]
    f4d2:	21fa      	movs	r1, #250	; 0xfa
    f4d4:	1ad3      	subs	r3, r2, r3
    f4d6:	2200      	movs	r2, #0
    f4d8:	0089      	lsls	r1, r1, #2
    f4da:	34f2      	adds	r4, #242	; 0xf2
    f4dc:	4359      	muls	r1, r3
    f4de:	7820      	ldrb	r0, [r4, #0]
    f4e0:	4b14      	ldr	r3, [pc, #80]	; (f534 <UnconfirmedTransmissionCallback+0x124>)
    f4e2:	9200      	str	r2, [sp, #0]
    f4e4:	e7d7      	b.n	f496 <UnconfirmedTransmissionCallback+0x86>
    f4e6:	075b      	lsls	r3, r3, #29
    f4e8:	d5f0      	bpl.n	f4cc <UnconfirmedTransmissionCallback+0xbc>
    f4ea:	aa04      	add	r2, sp, #16
    f4ec:	0031      	movs	r1, r6
    f4ee:	2032      	movs	r0, #50	; 0x32
    f4f0:	47a8      	blx	r5
    f4f2:	9b04      	ldr	r3, [sp, #16]
    f4f4:	1c5a      	adds	r2, r3, #1
    f4f6:	d0e9      	beq.n	f4cc <UnconfirmedTransmissionCallback+0xbc>
    f4f8:	3301      	adds	r3, #1
    f4fa:	e7e6      	b.n	f4ca <UnconfirmedTransmissionCallback+0xba>
    f4fc:	20003ad4 	.word	0x20003ad4
    f500:	20003d2c 	.word	0x20003d2c
    f504:	0000b691 	.word	0x0000b691
    f508:	0000dd29 	.word	0x0000dd29
    f50c:	0000f191 	.word	0x0000f191
    f510:	0000d44d 	.word	0x0000d44d
    f514:	0000022b 	.word	0x0000022b
    f518:	fffffc18 	.word	0xfffffc18
    f51c:	001e8480 	.word	0x001e8480
    f520:	0000f359 	.word	0x0000f359
    f524:	0000bbd9 	.word	0x0000bbd9
    f528:	0001562d 	.word	0x0001562d
    f52c:	00012061 	.word	0x00012061
    f530:	000007d1 	.word	0x000007d1
    f534:	0000f411 	.word	0x0000f411

0000f538 <EncryptFRMPayload>:
    f538:	b5f0      	push	{r4, r5, r6, r7, lr}
    f53a:	0007      	movs	r7, r0
    f53c:	2401      	movs	r4, #1
    f53e:	b089      	sub	sp, #36	; 0x24
    f540:	9306      	str	r3, [sp, #24]
    f542:	ab10      	add	r3, sp, #64	; 0x40
    f544:	881d      	ldrh	r5, [r3, #0]
    f546:	090b      	lsrs	r3, r1, #4
    f548:	9104      	str	r1, [sp, #16]
    f54a:	9205      	str	r2, [sp, #20]
    f54c:	9303      	str	r3, [sp, #12]
    f54e:	9b03      	ldr	r3, [sp, #12]
    f550:	429c      	cmp	r4, r3
    f552:	d907      	bls.n	f564 <EncryptFRMPayload+0x2c>
    f554:	260f      	movs	r6, #15
    f556:	9b04      	ldr	r3, [sp, #16]
    f558:	4033      	ands	r3, r6
    f55a:	1e1e      	subs	r6, r3, #0
    f55c:	d126      	bne.n	f5ac <EncryptFRMPayload+0x74>
    f55e:	2000      	movs	r0, #0
    f560:	b009      	add	sp, #36	; 0x24
    f562:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f564:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f566:	0022      	movs	r2, r4
    f568:	9300      	str	r3, [sp, #0]
    f56a:	9906      	ldr	r1, [sp, #24]
    f56c:	2301      	movs	r3, #1
    f56e:	9805      	ldr	r0, [sp, #20]
    f570:	4e1e      	ldr	r6, [pc, #120]	; (f5ec <EncryptFRMPayload+0xb4>)
    f572:	47b0      	blx	r6
    f574:	4e1e      	ldr	r6, [pc, #120]	; (f5f0 <EncryptFRMPayload+0xb8>)
    f576:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f578:	2101      	movs	r1, #1
    f57a:	0030      	movs	r0, r6
    f57c:	4b1d      	ldr	r3, [pc, #116]	; (f5f4 <EncryptFRMPayload+0xbc>)
    f57e:	4798      	blx	r3
    f580:	2800      	cmp	r0, #0
    f582:	d1ed      	bne.n	f560 <EncryptFRMPayload+0x28>
    f584:	1e63      	subs	r3, r4, #1
    f586:	011b      	lsls	r3, r3, #4
    f588:	18fb      	adds	r3, r7, r3
    f58a:	9307      	str	r3, [sp, #28]
    f58c:	9b07      	ldr	r3, [sp, #28]
    f58e:	182a      	adds	r2, r5, r0
    f590:	5c19      	ldrb	r1, [r3, r0]
    f592:	5d83      	ldrb	r3, [r0, r6]
    f594:	b292      	uxth	r2, r2
    f596:	4059      	eors	r1, r3
    f598:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f59a:	3001      	adds	r0, #1
    f59c:	5499      	strb	r1, [r3, r2]
    f59e:	2810      	cmp	r0, #16
    f5a0:	d1f4      	bne.n	f58c <EncryptFRMPayload+0x54>
    f5a2:	3510      	adds	r5, #16
    f5a4:	3401      	adds	r4, #1
    f5a6:	b2ad      	uxth	r5, r5
    f5a8:	b2e4      	uxtb	r4, r4
    f5aa:	e7d0      	b.n	f54e <EncryptFRMPayload+0x16>
    f5ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f5ae:	0022      	movs	r2, r4
    f5b0:	9300      	str	r3, [sp, #0]
    f5b2:	9906      	ldr	r1, [sp, #24]
    f5b4:	2301      	movs	r3, #1
    f5b6:	9805      	ldr	r0, [sp, #20]
    f5b8:	4c0c      	ldr	r4, [pc, #48]	; (f5ec <EncryptFRMPayload+0xb4>)
    f5ba:	47a0      	blx	r4
    f5bc:	4c0c      	ldr	r4, [pc, #48]	; (f5f0 <EncryptFRMPayload+0xb8>)
    f5be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f5c0:	2101      	movs	r1, #1
    f5c2:	0020      	movs	r0, r4
    f5c4:	4b0b      	ldr	r3, [pc, #44]	; (f5f4 <EncryptFRMPayload+0xbc>)
    f5c6:	4798      	blx	r3
    f5c8:	2800      	cmp	r0, #0
    f5ca:	d1c9      	bne.n	f560 <EncryptFRMPayload+0x28>
    f5cc:	9b03      	ldr	r3, [sp, #12]
    f5ce:	011b      	lsls	r3, r3, #4
    f5d0:	18fb      	adds	r3, r7, r3
    f5d2:	5d07      	ldrb	r7, [r0, r4]
    f5d4:	5c19      	ldrb	r1, [r3, r0]
    f5d6:	182a      	adds	r2, r5, r0
    f5d8:	4079      	eors	r1, r7
    f5da:	9f11      	ldr	r7, [sp, #68]	; 0x44
    f5dc:	b292      	uxth	r2, r2
    f5de:	3001      	adds	r0, #1
    f5e0:	54b9      	strb	r1, [r7, r2]
    f5e2:	b2c2      	uxtb	r2, r0
    f5e4:	4296      	cmp	r6, r2
    f5e6:	d8f4      	bhi.n	f5d2 <EncryptFRMPayload+0x9a>
    f5e8:	e7b9      	b.n	f55e <EncryptFRMPayload+0x26>
    f5ea:	46c0      	nop			; (mov r8, r8)
    f5ec:	0000e751 	.word	0x0000e751
    f5f0:	20001df5 	.word	0x20001df5
    f5f4:	00006951 	.word	0x00006951

0000f5f8 <UpdateTransactionCompleteCbParams>:
    f5f8:	2388      	movs	r3, #136	; 0x88
    f5fa:	2201      	movs	r2, #1
    f5fc:	b570      	push	{r4, r5, r6, lr}
    f5fe:	0001      	movs	r1, r0
    f600:	4c13      	ldr	r4, [pc, #76]	; (f650 <UpdateTransactionCompleteCbParams+0x58>)
    f602:	4814      	ldr	r0, [pc, #80]	; (f654 <UpdateTransactionCompleteCbParams+0x5c>)
    f604:	009b      	lsls	r3, r3, #2
    f606:	54e2      	strb	r2, [r4, r3]
    f608:	7842      	ldrb	r2, [r0, #1]
    f60a:	7803      	ldrb	r3, [r0, #0]
    f60c:	0212      	lsls	r2, r2, #8
    f60e:	431a      	orrs	r2, r3
    f610:	7883      	ldrb	r3, [r0, #2]
    f612:	041b      	lsls	r3, r3, #16
    f614:	431a      	orrs	r2, r3
    f616:	78c3      	ldrb	r3, [r0, #3]
    f618:	061b      	lsls	r3, r3, #24
    f61a:	4313      	orrs	r3, r2
    f61c:	d00e      	beq.n	f63c <UpdateTransactionCompleteCbParams+0x44>
    f61e:	0022      	movs	r2, r4
    f620:	2504      	movs	r5, #4
    f622:	32fc      	adds	r2, #252	; 0xfc
    f624:	6890      	ldr	r0, [r2, #8]
    f626:	4228      	tst	r0, r5
    f628:	d008      	beq.n	f63c <UpdateTransactionCompleteCbParams+0x44>
    f62a:	68d0      	ldr	r0, [r2, #12]
    f62c:	2800      	cmp	r0, #0
    f62e:	d005      	beq.n	f63c <UpdateTransactionCompleteCbParams+0x44>
    f630:	0022      	movs	r2, r4
    f632:	32ff      	adds	r2, #255	; 0xff
    f634:	7451      	strb	r1, [r2, #17]
    f636:	7355      	strb	r5, [r2, #13]
    f638:	4907      	ldr	r1, [pc, #28]	; (f658 <UpdateTransactionCompleteCbParams+0x60>)
    f63a:	4798      	blx	r3
    f63c:	2388      	movs	r3, #136	; 0x88
    f63e:	009b      	lsls	r3, r3, #2
    f640:	5ce3      	ldrb	r3, [r4, r3]
    f642:	2b00      	cmp	r3, #0
    f644:	d002      	beq.n	f64c <UpdateTransactionCompleteCbParams+0x54>
    f646:	2300      	movs	r3, #0
    f648:	34fc      	adds	r4, #252	; 0xfc
    f64a:	60e3      	str	r3, [r4, #12]
    f64c:	bd70      	pop	{r4, r5, r6, pc}
    f64e:	46c0      	nop			; (mov r8, r8)
    f650:	20003ad4 	.word	0x20003ad4
    f654:	20003e30 	.word	0x20003e30
    f658:	20003be0 	.word	0x20003be0

0000f65c <UpdateRxDataAvailableCbParams>:
    f65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f65e:	4e0f      	ldr	r6, [pc, #60]	; (f69c <UpdateRxDataAvailableCbParams+0x40>)
    f660:	469c      	mov	ip, r3
    f662:	7875      	ldrb	r5, [r6, #1]
    f664:	7834      	ldrb	r4, [r6, #0]
    f666:	022d      	lsls	r5, r5, #8
    f668:	4325      	orrs	r5, r4
    f66a:	78b4      	ldrb	r4, [r6, #2]
    f66c:	0424      	lsls	r4, r4, #16
    f66e:	4325      	orrs	r5, r4
    f670:	78f4      	ldrb	r4, [r6, #3]
    f672:	0624      	lsls	r4, r4, #24
    f674:	432c      	orrs	r4, r5
    f676:	d010      	beq.n	f69a <UpdateRxDataAvailableCbParams+0x3e>
    f678:	4d09      	ldr	r5, [pc, #36]	; (f6a0 <UpdateRxDataAvailableCbParams+0x44>)
    f67a:	2702      	movs	r7, #2
    f67c:	002e      	movs	r6, r5
    f67e:	36fc      	adds	r6, #252	; 0xfc
    f680:	68b3      	ldr	r3, [r6, #8]
    f682:	423b      	tst	r3, r7
    f684:	d009      	beq.n	f69a <UpdateRxDataAvailableCbParams+0x3e>
    f686:	4663      	mov	r3, ip
    f688:	35ff      	adds	r5, #255	; 0xff
    f68a:	6170      	str	r0, [r6, #20]
    f68c:	61b1      	str	r1, [r6, #24]
    f68e:	736f      	strb	r7, [r5, #13]
    f690:	766a      	strb	r2, [r5, #25]
    f692:	76ab      	strb	r3, [r5, #26]
    f694:	4903      	ldr	r1, [pc, #12]	; (f6a4 <UpdateRxDataAvailableCbParams+0x48>)
    f696:	68f0      	ldr	r0, [r6, #12]
    f698:	47a0      	blx	r4
    f69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f69c:	20003e30 	.word	0x20003e30
    f6a0:	20003ad4 	.word	0x20003ad4
    f6a4:	20003be0 	.word	0x20003be0

0000f6a8 <LorawanNotifyAppOnRxdone>:
    f6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f6aa:	4c25      	ldr	r4, [pc, #148]	; (f740 <LorawanNotifyAppOnRxdone+0x98>)
    f6ac:	0007      	movs	r7, r0
    f6ae:	0023      	movs	r3, r4
    f6b0:	33fd      	adds	r3, #253	; 0xfd
    f6b2:	781b      	ldrb	r3, [r3, #0]
    f6b4:	000d      	movs	r5, r1
    f6b6:	0016      	movs	r6, r2
    f6b8:	2b01      	cmp	r3, #1
    f6ba:	d136      	bne.n	f72a <LorawanNotifyAppOnRxdone+0x82>
    f6bc:	0022      	movs	r2, r4
    f6be:	210e      	movs	r1, #14
    f6c0:	3284      	adds	r2, #132	; 0x84
    f6c2:	7813      	ldrb	r3, [r2, #0]
    f6c4:	438b      	bics	r3, r1
    f6c6:	7013      	strb	r3, [r2, #0]
    f6c8:	491e      	ldr	r1, [pc, #120]	; (f744 <LorawanNotifyAppOnRxdone+0x9c>)
    f6ca:	784a      	ldrb	r2, [r1, #1]
    f6cc:	780b      	ldrb	r3, [r1, #0]
    f6ce:	0212      	lsls	r2, r2, #8
    f6d0:	431a      	orrs	r2, r3
    f6d2:	788b      	ldrb	r3, [r1, #2]
    f6d4:	041b      	lsls	r3, r3, #16
    f6d6:	431a      	orrs	r2, r3
    f6d8:	78cb      	ldrb	r3, [r1, #3]
    f6da:	061b      	lsls	r3, r3, #24
    f6dc:	4313      	orrs	r3, r2
    f6de:	d023      	beq.n	f728 <LorawanNotifyAppOnRxdone+0x80>
    f6e0:	0022      	movs	r2, r4
    f6e2:	2120      	movs	r1, #32
    f6e4:	3294      	adds	r2, #148	; 0x94
    f6e6:	7813      	ldrb	r3, [r2, #0]
    f6e8:	438b      	bics	r3, r1
    f6ea:	7013      	strb	r3, [r2, #0]
    f6ec:	0023      	movs	r3, r4
    f6ee:	33fd      	adds	r3, #253	; 0xfd
    f6f0:	781b      	ldrb	r3, [r3, #0]
    f6f2:	7878      	ldrb	r0, [r7, #1]
    f6f4:	469c      	mov	ip, r3
    f6f6:	78fa      	ldrb	r2, [r7, #3]
    f6f8:	78b9      	ldrb	r1, [r7, #2]
    f6fa:	793b      	ldrb	r3, [r7, #4]
    f6fc:	4667      	mov	r7, ip
    f6fe:	0209      	lsls	r1, r1, #8
    f700:	4301      	orrs	r1, r0
    f702:	0410      	lsls	r0, r2, #16
    f704:	4308      	orrs	r0, r1
    f706:	061b      	lsls	r3, r3, #24
    f708:	4318      	orrs	r0, r3
    f70a:	0032      	movs	r2, r6
    f70c:	2308      	movs	r3, #8
    f70e:	0029      	movs	r1, r5
    f710:	2f04      	cmp	r7, #4
    f712:	d112      	bne.n	f73a <LorawanNotifyAppOnRxdone+0x92>
    f714:	4d0c      	ldr	r5, [pc, #48]	; (f748 <LorawanNotifyAppOnRxdone+0xa0>)
    f716:	47a8      	blx	r5
    f718:	2388      	movs	r3, #136	; 0x88
    f71a:	009b      	lsls	r3, r3, #2
    f71c:	5ce3      	ldrb	r3, [r4, r3]
    f71e:	2b00      	cmp	r3, #0
    f720:	d102      	bne.n	f728 <LorawanNotifyAppOnRxdone+0x80>
    f722:	2008      	movs	r0, #8
    f724:	4b09      	ldr	r3, [pc, #36]	; (f74c <LorawanNotifyAppOnRxdone+0xa4>)
    f726:	4798      	blx	r3
    f728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f72a:	2b04      	cmp	r3, #4
    f72c:	d1cc      	bne.n	f6c8 <LorawanNotifyAppOnRxdone+0x20>
    f72e:	0023      	movs	r3, r4
    f730:	33f1      	adds	r3, #241	; 0xf1
    f732:	7818      	ldrb	r0, [r3, #0]
    f734:	4b06      	ldr	r3, [pc, #24]	; (f750 <LorawanNotifyAppOnRxdone+0xa8>)
    f736:	4798      	blx	r3
    f738:	e7c6      	b.n	f6c8 <LorawanNotifyAppOnRxdone+0x20>
    f73a:	4d06      	ldr	r5, [pc, #24]	; (f754 <LorawanNotifyAppOnRxdone+0xac>)
    f73c:	47a8      	blx	r5
    f73e:	e7eb      	b.n	f718 <LorawanNotifyAppOnRxdone+0x70>
    f740:	20003ad4 	.word	0x20003ad4
    f744:	20003e30 	.word	0x20003e30
    f748:	00011601 	.word	0x00011601
    f74c:	0000f5f9 	.word	0x0000f5f9
    f750:	0000bef1 	.word	0x0000bef1
    f754:	0000f65d 	.word	0x0000f65d

0000f758 <LorawanSetReceiveWindow2Parameters>:
    f758:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f75a:	466b      	mov	r3, sp
    f75c:	1cdd      	adds	r5, r3, #3
    f75e:	9001      	str	r0, [sp, #4]
    f760:	7029      	strb	r1, [r5, #0]
    f762:	2001      	movs	r0, #1
    f764:	a901      	add	r1, sp, #4
    f766:	4c09      	ldr	r4, [pc, #36]	; (f78c <LorawanSetReceiveWindow2Parameters+0x34>)
    f768:	47a0      	blx	r4
    f76a:	2808      	cmp	r0, #8
    f76c:	d002      	beq.n	f774 <LorawanSetReceiveWindow2Parameters+0x1c>
    f76e:	240a      	movs	r4, #10
    f770:	0020      	movs	r0, r4
    f772:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f774:	0029      	movs	r1, r5
    f776:	200f      	movs	r0, #15
    f778:	47a0      	blx	r4
    f77a:	0004      	movs	r4, r0
    f77c:	2808      	cmp	r0, #8
    f77e:	d1f6      	bne.n	f76e <LorawanSetReceiveWindow2Parameters+0x16>
    f780:	7829      	ldrb	r1, [r5, #0]
    f782:	9801      	ldr	r0, [sp, #4]
    f784:	4b02      	ldr	r3, [pc, #8]	; (f790 <LorawanSetReceiveWindow2Parameters+0x38>)
    f786:	4798      	blx	r3
    f788:	e7f2      	b.n	f770 <LorawanSetReceiveWindow2Parameters+0x18>
    f78a:	46c0      	nop			; (mov r8, r8)
    f78c:	0000b6ad 	.word	0x0000b6ad
    f790:	0000ebbd 	.word	0x0000ebbd

0000f794 <LorawanSetReceiveWindowCParameters>:
    f794:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f796:	466b      	mov	r3, sp
    f798:	1cdc      	adds	r4, r3, #3
    f79a:	9001      	str	r0, [sp, #4]
    f79c:	7021      	strb	r1, [r4, #0]
    f79e:	2001      	movs	r0, #1
    f7a0:	a901      	add	r1, sp, #4
    f7a2:	4d0d      	ldr	r5, [pc, #52]	; (f7d8 <LorawanSetReceiveWindowCParameters+0x44>)
    f7a4:	47a8      	blx	r5
    f7a6:	2808      	cmp	r0, #8
    f7a8:	d001      	beq.n	f7ae <LorawanSetReceiveWindowCParameters+0x1a>
    f7aa:	200a      	movs	r0, #10
    f7ac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f7ae:	0021      	movs	r1, r4
    f7b0:	200f      	movs	r0, #15
    f7b2:	47a8      	blx	r5
    f7b4:	2808      	cmp	r0, #8
    f7b6:	d1f8      	bne.n	f7aa <LorawanSetReceiveWindowCParameters+0x16>
    f7b8:	4b08      	ldr	r3, [pc, #32]	; (f7dc <LorawanSetReceiveWindowCParameters+0x48>)
    f7ba:	9a01      	ldr	r2, [sp, #4]
    f7bc:	0019      	movs	r1, r3
    f7be:	7824      	ldrb	r4, [r4, #0]
    f7c0:	3173      	adds	r1, #115	; 0x73
    f7c2:	336f      	adds	r3, #111	; 0x6f
    f7c4:	700c      	strb	r4, [r1, #0]
    f7c6:	0a11      	lsrs	r1, r2, #8
    f7c8:	701a      	strb	r2, [r3, #0]
    f7ca:	7059      	strb	r1, [r3, #1]
    f7cc:	0c11      	lsrs	r1, r2, #16
    f7ce:	0e12      	lsrs	r2, r2, #24
    f7d0:	7099      	strb	r1, [r3, #2]
    f7d2:	70da      	strb	r2, [r3, #3]
    f7d4:	e7ea      	b.n	f7ac <LorawanSetReceiveWindowCParameters+0x18>
    f7d6:	46c0      	nop			; (mov r8, r8)
    f7d8:	0000b6ad 	.word	0x0000b6ad
    f7dc:	20003ad4 	.word	0x20003ad4

0000f7e0 <LorawanSetFrequency>:
    f7e0:	b507      	push	{r0, r1, r2, lr}
    f7e2:	466b      	mov	r3, sp
    f7e4:	9100      	str	r1, [sp, #0]
    f7e6:	7118      	strb	r0, [r3, #4]
    f7e8:	4669      	mov	r1, sp
    f7ea:	2000      	movs	r0, #0
    f7ec:	4b01      	ldr	r3, [pc, #4]	; (f7f4 <LorawanSetFrequency+0x14>)
    f7ee:	4798      	blx	r3
    f7f0:	bd0e      	pop	{r1, r2, r3, pc}
    f7f2:	46c0      	nop			; (mov r8, r8)
    f7f4:	0000b6c9 	.word	0x0000b6c9

0000f7f8 <LorawanCheckAndDoRetryOnTimeout>:
    f7f8:	b513      	push	{r0, r1, r4, lr}
    f7fa:	4c33      	ldr	r4, [pc, #204]	; (f8c8 <LorawanCheckAndDoRetryOnTimeout+0xd0>)
    f7fc:	0023      	movs	r3, r4
    f7fe:	3394      	adds	r3, #148	; 0x94
    f800:	781b      	ldrb	r3, [r3, #0]
    f802:	0022      	movs	r2, r4
    f804:	07db      	lsls	r3, r3, #31
    f806:	d54b      	bpl.n	f8a0 <LorawanCheckAndDoRetryOnTimeout+0xa8>
    f808:	0023      	movs	r3, r4
    f80a:	32e4      	adds	r2, #228	; 0xe4
    f80c:	33e2      	adds	r3, #226	; 0xe2
    f80e:	7812      	ldrb	r2, [r2, #0]
    f810:	781b      	ldrb	r3, [r3, #0]
    f812:	429a      	cmp	r2, r3
    f814:	d836      	bhi.n	f884 <LorawanCheckAndDoRetryOnTimeout+0x8c>
    f816:	4b2d      	ldr	r3, [pc, #180]	; (f8cc <LorawanCheckAndDoRetryOnTimeout+0xd4>)
    f818:	5ce3      	ldrb	r3, [r4, r3]
    f81a:	2b00      	cmp	r3, #0
    f81c:	d032      	beq.n	f884 <LorawanCheckAndDoRetryOnTimeout+0x8c>
    f81e:	0023      	movs	r3, r4
    f820:	33fd      	adds	r3, #253	; 0xfd
    f822:	781b      	ldrb	r3, [r3, #0]
    f824:	2b01      	cmp	r3, #1
    f826:	d119      	bne.n	f85c <LorawanCheckAndDoRetryOnTimeout+0x64>
    f828:	0021      	movs	r1, r4
    f82a:	220e      	movs	r2, #14
    f82c:	3184      	adds	r1, #132	; 0x84
    f82e:	780b      	ldrb	r3, [r1, #0]
    f830:	4393      	bics	r3, r2
    f832:	001a      	movs	r2, r3
    f834:	230c      	movs	r3, #12
    f836:	4313      	orrs	r3, r2
    f838:	700b      	strb	r3, [r1, #0]
    f83a:	0023      	movs	r3, r4
    f83c:	33da      	adds	r3, #218	; 0xda
    f83e:	8819      	ldrh	r1, [r3, #0]
    f840:	4b23      	ldr	r3, [pc, #140]	; (f8d0 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
    f842:	2200      	movs	r2, #0
    f844:	5ce3      	ldrb	r3, [r4, r3]
    f846:	34f1      	adds	r4, #241	; 0xf1
    f848:	1acb      	subs	r3, r1, r3
    f84a:	21fa      	movs	r1, #250	; 0xfa
    f84c:	0089      	lsls	r1, r1, #2
    f84e:	7820      	ldrb	r0, [r4, #0]
    f850:	4359      	muls	r1, r3
    f852:	9200      	str	r2, [sp, #0]
    f854:	4b1f      	ldr	r3, [pc, #124]	; (f8d4 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
    f856:	4c20      	ldr	r4, [pc, #128]	; (f8d8 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
    f858:	47a0      	blx	r4
    f85a:	bd13      	pop	{r0, r1, r4, pc}
    f85c:	2b04      	cmp	r3, #4
    f85e:	d1fc      	bne.n	f85a <LorawanCheckAndDoRetryOnTimeout+0x62>
    f860:	4b1e      	ldr	r3, [pc, #120]	; (f8dc <LorawanCheckAndDoRetryOnTimeout+0xe4>)
    f862:	4798      	blx	r3
    f864:	34ce      	adds	r4, #206	; 0xce
    f866:	300d      	adds	r0, #13
    f868:	8823      	ldrh	r3, [r4, #0]
    f86a:	b280      	uxth	r0, r0
    f86c:	4283      	cmp	r3, r0
    f86e:	d802      	bhi.n	f876 <LorawanCheckAndDoRetryOnTimeout+0x7e>
    f870:	4b1b      	ldr	r3, [pc, #108]	; (f8e0 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    f872:	4798      	blx	r3
    f874:	e7f1      	b.n	f85a <LorawanCheckAndDoRetryOnTimeout+0x62>
    f876:	200e      	movs	r0, #14
    f878:	4b1a      	ldr	r3, [pc, #104]	; (f8e4 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    f87a:	4798      	blx	r3
    f87c:	4b1a      	ldr	r3, [pc, #104]	; (f8e8 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    f87e:	4798      	blx	r3
    f880:	4b1a      	ldr	r3, [pc, #104]	; (f8ec <LorawanCheckAndDoRetryOnTimeout+0xf4>)
    f882:	e7f6      	b.n	f872 <LorawanCheckAndDoRetryOnTimeout+0x7a>
    f884:	2012      	movs	r0, #18
    f886:	4b17      	ldr	r3, [pc, #92]	; (f8e4 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    f888:	4798      	blx	r3
    f88a:	4b17      	ldr	r3, [pc, #92]	; (f8e8 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    f88c:	4798      	blx	r3
    f88e:	34fd      	adds	r4, #253	; 0xfd
    f890:	4b16      	ldr	r3, [pc, #88]	; (f8ec <LorawanCheckAndDoRetryOnTimeout+0xf4>)
    f892:	4798      	blx	r3
    f894:	7823      	ldrb	r3, [r4, #0]
    f896:	2b04      	cmp	r3, #4
    f898:	d1df      	bne.n	f85a <LorawanCheckAndDoRetryOnTimeout+0x62>
    f89a:	4b15      	ldr	r3, [pc, #84]	; (f8f0 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
    f89c:	4798      	blx	r3
    f89e:	e7dc      	b.n	f85a <LorawanCheckAndDoRetryOnTimeout+0x62>
    f8a0:	0023      	movs	r3, r4
    f8a2:	32e3      	adds	r2, #227	; 0xe3
    f8a4:	33e1      	adds	r3, #225	; 0xe1
    f8a6:	7812      	ldrb	r2, [r2, #0]
    f8a8:	781b      	ldrb	r3, [r3, #0]
    f8aa:	429a      	cmp	r2, r3
    f8ac:	d803      	bhi.n	f8b6 <LorawanCheckAndDoRetryOnTimeout+0xbe>
    f8ae:	4b07      	ldr	r3, [pc, #28]	; (f8cc <LorawanCheckAndDoRetryOnTimeout+0xd4>)
    f8b0:	5ce3      	ldrb	r3, [r4, r3]
    f8b2:	2b00      	cmp	r3, #0
    f8b4:	d1dc      	bne.n	f870 <LorawanCheckAndDoRetryOnTimeout+0x78>
    f8b6:	4b0f      	ldr	r3, [pc, #60]	; (f8f4 <LorawanCheckAndDoRetryOnTimeout+0xfc>)
    f8b8:	4798      	blx	r3
    f8ba:	4b0c      	ldr	r3, [pc, #48]	; (f8ec <LorawanCheckAndDoRetryOnTimeout+0xf4>)
    f8bc:	4798      	blx	r3
    f8be:	2008      	movs	r0, #8
    f8c0:	4b08      	ldr	r3, [pc, #32]	; (f8e4 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    f8c2:	4798      	blx	r3
    f8c4:	e7c9      	b.n	f85a <LorawanCheckAndDoRetryOnTimeout+0x62>
    f8c6:	46c0      	nop			; (mov r8, r8)
    f8c8:	20003ad4 	.word	0x20003ad4
    f8cc:	0000022a 	.word	0x0000022a
    f8d0:	0000022b 	.word	0x0000022b
    f8d4:	0000f8f9 	.word	0x0000f8f9
    f8d8:	0000bbd9 	.word	0x0000bbd9
    f8dc:	0000e3c5 	.word	0x0000e3c5
    f8e0:	0000f201 	.word	0x0000f201
    f8e4:	0000f5f9 	.word	0x0000f5f9
    f8e8:	0000ec05 	.word	0x0000ec05
    f8ec:	0000e341 	.word	0x0000e341
    f8f0:	0000d431 	.word	0x0000d431
    f8f4:	0000ec35 	.word	0x0000ec35

0000f8f8 <AckRetransmissionCallback>:
    f8f8:	b510      	push	{r4, lr}
    f8fa:	4c1c      	ldr	r4, [pc, #112]	; (f96c <AckRetransmissionCallback+0x74>)
    f8fc:	0023      	movs	r3, r4
    f8fe:	3384      	adds	r3, #132	; 0x84
    f900:	781b      	ldrb	r3, [r3, #0]
    f902:	2b7f      	cmp	r3, #127	; 0x7f
    f904:	d82d      	bhi.n	f962 <AckRetransmissionCallback+0x6a>
    f906:	0023      	movs	r3, r4
    f908:	33fd      	adds	r3, #253	; 0xfd
    f90a:	781b      	ldrb	r3, [r3, #0]
    f90c:	2b04      	cmp	r3, #4
    f90e:	d102      	bne.n	f916 <AckRetransmissionCallback+0x1e>
    f910:	4b17      	ldr	r3, [pc, #92]	; (f970 <AckRetransmissionCallback+0x78>)
    f912:	4798      	blx	r3
    f914:	e01e      	b.n	f954 <AckRetransmissionCallback+0x5c>
    f916:	2b01      	cmp	r3, #1
    f918:	d11c      	bne.n	f954 <AckRetransmissionCallback+0x5c>
    f91a:	0022      	movs	r2, r4
    f91c:	0023      	movs	r3, r4
    f91e:	32e4      	adds	r2, #228	; 0xe4
    f920:	33e2      	adds	r3, #226	; 0xe2
    f922:	7812      	ldrb	r2, [r2, #0]
    f924:	781b      	ldrb	r3, [r3, #0]
    f926:	429a      	cmp	r2, r3
    f928:	d815      	bhi.n	f956 <AckRetransmissionCallback+0x5e>
    f92a:	4b12      	ldr	r3, [pc, #72]	; (f974 <AckRetransmissionCallback+0x7c>)
    f92c:	5ce3      	ldrb	r3, [r4, r3]
    f92e:	2b00      	cmp	r3, #0
    f930:	d011      	beq.n	f956 <AckRetransmissionCallback+0x5e>
    f932:	4b11      	ldr	r3, [pc, #68]	; (f978 <AckRetransmissionCallback+0x80>)
    f934:	4798      	blx	r3
    f936:	34ce      	adds	r4, #206	; 0xce
    f938:	300d      	adds	r0, #13
    f93a:	8823      	ldrh	r3, [r4, #0]
    f93c:	b280      	uxth	r0, r0
    f93e:	4283      	cmp	r3, r0
    f940:	d801      	bhi.n	f946 <AckRetransmissionCallback+0x4e>
    f942:	4b0e      	ldr	r3, [pc, #56]	; (f97c <AckRetransmissionCallback+0x84>)
    f944:	e7e5      	b.n	f912 <AckRetransmissionCallback+0x1a>
    f946:	4b0e      	ldr	r3, [pc, #56]	; (f980 <AckRetransmissionCallback+0x88>)
    f948:	4798      	blx	r3
    f94a:	4b0e      	ldr	r3, [pc, #56]	; (f984 <AckRetransmissionCallback+0x8c>)
    f94c:	4798      	blx	r3
    f94e:	200e      	movs	r0, #14
    f950:	4b0d      	ldr	r3, [pc, #52]	; (f988 <AckRetransmissionCallback+0x90>)
    f952:	4798      	blx	r3
    f954:	bd10      	pop	{r4, pc}
    f956:	4b0a      	ldr	r3, [pc, #40]	; (f980 <AckRetransmissionCallback+0x88>)
    f958:	4798      	blx	r3
    f95a:	4b0a      	ldr	r3, [pc, #40]	; (f984 <AckRetransmissionCallback+0x8c>)
    f95c:	4798      	blx	r3
    f95e:	2012      	movs	r0, #18
    f960:	e7f6      	b.n	f950 <AckRetransmissionCallback+0x58>
    f962:	4b07      	ldr	r3, [pc, #28]	; (f980 <AckRetransmissionCallback+0x88>)
    f964:	4798      	blx	r3
    f966:	4b07      	ldr	r3, [pc, #28]	; (f984 <AckRetransmissionCallback+0x8c>)
    f968:	e7d3      	b.n	f912 <AckRetransmissionCallback+0x1a>
    f96a:	46c0      	nop			; (mov r8, r8)
    f96c:	20003ad4 	.word	0x20003ad4
    f970:	0000f7f9 	.word	0x0000f7f9
    f974:	0000022a 	.word	0x0000022a
    f978:	0000e3c5 	.word	0x0000e3c5
    f97c:	0000f201 	.word	0x0000f201
    f980:	0000ec05 	.word	0x0000ec05
    f984:	0000e341 	.word	0x0000e341
    f988:	0000f5f9 	.word	0x0000f5f9

0000f98c <LORAWAN_RxTimeout>:
    f98c:	4b24      	ldr	r3, [pc, #144]	; (fa20 <LORAWAN_RxTimeout+0x94>)
    f98e:	b510      	push	{r4, lr}
    f990:	001a      	movs	r2, r3
    f992:	3284      	adds	r2, #132	; 0x84
    f994:	7812      	ldrb	r2, [r2, #0]
    f996:	b251      	sxtb	r1, r2
    f998:	2900      	cmp	r1, #0
    f99a:	db27      	blt.n	f9ec <LORAWAN_RxTimeout+0x60>
    f99c:	0019      	movs	r1, r3
    f99e:	31fd      	adds	r1, #253	; 0xfd
    f9a0:	7809      	ldrb	r1, [r1, #0]
    f9a2:	2904      	cmp	r1, #4
    f9a4:	d108      	bne.n	f9b8 <LORAWAN_RxTimeout+0x2c>
    f9a6:	3903      	subs	r1, #3
    f9a8:	420a      	tst	r2, r1
    f9aa:	d005      	beq.n	f9b8 <LORAWAN_RxTimeout+0x2c>
    f9ac:	2290      	movs	r2, #144	; 0x90
    f9ae:	0092      	lsls	r2, r2, #2
    f9b0:	5499      	strb	r1, [r3, r2]
    f9b2:	4b1c      	ldr	r3, [pc, #112]	; (fa24 <LORAWAN_RxTimeout+0x98>)
    f9b4:	4798      	blx	r3
    f9b6:	bd10      	pop	{r4, pc}
    f9b8:	210e      	movs	r1, #14
    f9ba:	0010      	movs	r0, r2
    f9bc:	4008      	ands	r0, r1
    f9be:	2806      	cmp	r0, #6
    f9c0:	d107      	bne.n	f9d2 <LORAWAN_RxTimeout+0x46>
    f9c2:	3384      	adds	r3, #132	; 0x84
    f9c4:	781a      	ldrb	r2, [r3, #0]
    f9c6:	438a      	bics	r2, r1
    f9c8:	0011      	movs	r1, r2
    f9ca:	2208      	movs	r2, #8
    f9cc:	430a      	orrs	r2, r1
    f9ce:	701a      	strb	r2, [r3, #0]
    f9d0:	e7f1      	b.n	f9b6 <LORAWAN_RxTimeout+0x2a>
    f9d2:	2004      	movs	r0, #4
    f9d4:	3394      	adds	r3, #148	; 0x94
    f9d6:	781b      	ldrb	r3, [r3, #0]
    f9d8:	4203      	tst	r3, r0
    f9da:	d002      	beq.n	f9e2 <LORAWAN_RxTimeout+0x56>
    f9dc:	4b12      	ldr	r3, [pc, #72]	; (fa28 <LORAWAN_RxTimeout+0x9c>)
    f9de:	4798      	blx	r3
    f9e0:	e7e9      	b.n	f9b6 <LORAWAN_RxTimeout+0x2a>
    f9e2:	07d3      	lsls	r3, r2, #31
    f9e4:	d5e7      	bpl.n	f9b6 <LORAWAN_RxTimeout+0x2a>
    f9e6:	4b11      	ldr	r3, [pc, #68]	; (fa2c <LORAWAN_RxTimeout+0xa0>)
    f9e8:	4798      	blx	r3
    f9ea:	e7e4      	b.n	f9b6 <LORAWAN_RxTimeout+0x2a>
    f9ec:	4810      	ldr	r0, [pc, #64]	; (fa30 <LORAWAN_RxTimeout+0xa4>)
    f9ee:	7841      	ldrb	r1, [r0, #1]
    f9f0:	7802      	ldrb	r2, [r0, #0]
    f9f2:	0209      	lsls	r1, r1, #8
    f9f4:	4311      	orrs	r1, r2
    f9f6:	7882      	ldrb	r2, [r0, #2]
    f9f8:	0412      	lsls	r2, r2, #16
    f9fa:	4311      	orrs	r1, r2
    f9fc:	78c2      	ldrb	r2, [r0, #3]
    f9fe:	0612      	lsls	r2, r2, #24
    fa00:	430a      	orrs	r2, r1
    fa02:	d0d8      	beq.n	f9b6 <LORAWAN_RxTimeout+0x2a>
    fa04:	2188      	movs	r1, #136	; 0x88
    fa06:	2001      	movs	r0, #1
    fa08:	0089      	lsls	r1, r1, #2
    fa0a:	5458      	strb	r0, [r3, r1]
    fa0c:	0019      	movs	r1, r3
    fa0e:	2404      	movs	r4, #4
    fa10:	31ff      	adds	r1, #255	; 0xff
    fa12:	33fc      	adds	r3, #252	; 0xfc
    fa14:	734c      	strb	r4, [r1, #13]
    fa16:	7448      	strb	r0, [r1, #17]
    fa18:	4906      	ldr	r1, [pc, #24]	; (fa34 <LORAWAN_RxTimeout+0xa8>)
    fa1a:	68d8      	ldr	r0, [r3, #12]
    fa1c:	4790      	blx	r2
    fa1e:	e7ca      	b.n	f9b6 <LORAWAN_RxTimeout+0x2a>
    fa20:	20003ad4 	.word	0x20003ad4
    fa24:	000115c5 	.word	0x000115c5
    fa28:	0000ec59 	.word	0x0000ec59
    fa2c:	0000f7f9 	.word	0x0000f7f9
    fa30:	20003e30 	.word	0x20003e30
    fa34:	20003be0 	.word	0x20003be0

0000fa38 <LorawanConfigureRadioForRX2>:
    fa38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fa3a:	466b      	mov	r3, sp
    fa3c:	1cdd      	adds	r5, r3, #3
    fa3e:	2300      	movs	r3, #0
    fa40:	702b      	strb	r3, [r5, #0]
    fa42:	2390      	movs	r3, #144	; 0x90
    fa44:	4c29      	ldr	r4, [pc, #164]	; (faec <LorawanConfigureRadioForRX2+0xb4>)
    fa46:	009b      	lsls	r3, r3, #2
    fa48:	5ce1      	ldrb	r1, [r4, r3]
    fa4a:	0006      	movs	r6, r0
    fa4c:	0023      	movs	r3, r4
    fa4e:	2900      	cmp	r1, #0
    fa50:	d02f      	beq.n	fab2 <LorawanConfigureRadioForRX2+0x7a>
    fa52:	3373      	adds	r3, #115	; 0x73
    fa54:	781b      	ldrb	r3, [r3, #0]
    fa56:	702b      	strb	r3, [r5, #0]
    fa58:	0023      	movs	r3, r4
    fa5a:	6f22      	ldr	r2, [r4, #112]	; 0x70
    fa5c:	336f      	adds	r3, #111	; 0x6f
    fa5e:	781b      	ldrb	r3, [r3, #0]
    fa60:	0211      	lsls	r1, r2, #8
    fa62:	4319      	orrs	r1, r3
    fa64:	7828      	ldrb	r0, [r5, #0]
    fa66:	4b22      	ldr	r3, [pc, #136]	; (faf0 <LorawanConfigureRadioForRX2+0xb8>)
    fa68:	4798      	blx	r3
    fa6a:	2300      	movs	r3, #0
    fa6c:	0022      	movs	r2, r4
    fa6e:	af01      	add	r7, sp, #4
    fa70:	703b      	strb	r3, [r7, #0]
    fa72:	32fd      	adds	r2, #253	; 0xfd
    fa74:	7812      	ldrb	r2, [r2, #0]
    fa76:	2a04      	cmp	r2, #4
    fa78:	d130      	bne.n	fadc <LorawanConfigureRadioForRX2+0xa4>
    fa7a:	0022      	movs	r2, r4
    fa7c:	3284      	adds	r2, #132	; 0x84
    fa7e:	7812      	ldrb	r2, [r2, #0]
    fa80:	07d2      	lsls	r2, r2, #31
    fa82:	d52b      	bpl.n	fadc <LorawanConfigureRadioForRX2+0xa4>
    fa84:	2290      	movs	r2, #144	; 0x90
    fa86:	0092      	lsls	r2, r2, #2
    fa88:	5ca2      	ldrb	r2, [r4, r2]
    fa8a:	429a      	cmp	r2, r3
    fa8c:	d026      	beq.n	fadc <LorawanConfigureRadioForRX2+0xa4>
    fa8e:	807b      	strh	r3, [r7, #2]
    fa90:	0038      	movs	r0, r7
    fa92:	4b18      	ldr	r3, [pc, #96]	; (faf4 <LorawanConfigureRadioForRX2+0xbc>)
    fa94:	4798      	blx	r3
    fa96:	1e04      	subs	r4, r0, #0
    fa98:	d00a      	beq.n	fab0 <LorawanConfigureRadioForRX2+0x78>
    fa9a:	4b17      	ldr	r3, [pc, #92]	; (faf8 <LorawanConfigureRadioForRX2+0xc0>)
    fa9c:	4798      	blx	r3
    fa9e:	4b17      	ldr	r3, [pc, #92]	; (fafc <LorawanConfigureRadioForRX2+0xc4>)
    faa0:	4798      	blx	r3
    faa2:	4b17      	ldr	r3, [pc, #92]	; (fb00 <LorawanConfigureRadioForRX2+0xc8>)
    faa4:	4798      	blx	r3
    faa6:	2e00      	cmp	r6, #0
    faa8:	d002      	beq.n	fab0 <LorawanConfigureRadioForRX2+0x78>
    faaa:	0020      	movs	r0, r4
    faac:	4b15      	ldr	r3, [pc, #84]	; (fb04 <LorawanConfigureRadioForRX2+0xcc>)
    faae:	4798      	blx	r3
    fab0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    fab2:	3394      	adds	r3, #148	; 0x94
    fab4:	781b      	ldrb	r3, [r3, #0]
    fab6:	075b      	lsls	r3, r3, #29
    fab8:	d50b      	bpl.n	fad2 <LorawanConfigureRadioForRX2+0x9a>
    faba:	002a      	movs	r2, r5
    fabc:	2009      	movs	r0, #9
    fabe:	4b12      	ldr	r3, [pc, #72]	; (fb08 <LorawanConfigureRadioForRX2+0xd0>)
    fac0:	4798      	blx	r3
    fac2:	0022      	movs	r2, r4
    fac4:	0023      	movs	r3, r4
    fac6:	326c      	adds	r2, #108	; 0x6c
    fac8:	8811      	ldrh	r1, [r2, #0]
    faca:	336a      	adds	r3, #106	; 0x6a
    facc:	881b      	ldrh	r3, [r3, #0]
    face:	0409      	lsls	r1, r1, #16
    fad0:	e7c7      	b.n	fa62 <LorawanConfigureRadioForRX2+0x2a>
    fad2:	0023      	movs	r3, r4
    fad4:	336e      	adds	r3, #110	; 0x6e
    fad6:	781b      	ldrb	r3, [r3, #0]
    fad8:	702b      	strb	r3, [r5, #0]
    fada:	e7f2      	b.n	fac2 <LorawanConfigureRadioForRX2+0x8a>
    fadc:	466b      	mov	r3, sp
    fade:	0029      	movs	r1, r5
    fae0:	1d9a      	adds	r2, r3, #6
    fae2:	2003      	movs	r0, #3
    fae4:	4b08      	ldr	r3, [pc, #32]	; (fb08 <LorawanConfigureRadioForRX2+0xd0>)
    fae6:	4798      	blx	r3
    fae8:	e7d2      	b.n	fa90 <LorawanConfigureRadioForRX2+0x58>
    faea:	46c0      	nop			; (mov r8, r8)
    faec:	20003ad4 	.word	0x20003ad4
    faf0:	0000f125 	.word	0x0000f125
    faf4:	0000dd29 	.word	0x0000dd29
    faf8:	0000ec05 	.word	0x0000ec05
    fafc:	0000ec35 	.word	0x0000ec35
    fb00:	0000e341 	.word	0x0000e341
    fb04:	0000f5f9 	.word	0x0000f5f9
    fb08:	0000b691 	.word	0x0000b691

0000fb0c <SetReceptionNotOkState>:
    fb0c:	4a0c      	ldr	r2, [pc, #48]	; (fb40 <SetReceptionNotOkState+0x34>)
    fb0e:	b510      	push	{r4, lr}
    fb10:	0013      	movs	r3, r2
    fb12:	33fd      	adds	r3, #253	; 0xfd
    fb14:	7819      	ldrb	r1, [r3, #0]
    fb16:	0013      	movs	r3, r2
    fb18:	4c0a      	ldr	r4, [pc, #40]	; (fb44 <SetReceptionNotOkState+0x38>)
    fb1a:	3384      	adds	r3, #132	; 0x84
    fb1c:	2904      	cmp	r1, #4
    fb1e:	d105      	bne.n	fb2c <SetReceptionNotOkState+0x20>
    fb20:	2088      	movs	r0, #136	; 0x88
    fb22:	3903      	subs	r1, #3
    fb24:	0080      	lsls	r0, r0, #2
    fb26:	5411      	strb	r1, [r2, r0]
    fb28:	3020      	adds	r0, #32
    fb2a:	5411      	strb	r1, [r2, r0]
    fb2c:	210e      	movs	r1, #14
    fb2e:	781a      	ldrb	r2, [r3, #0]
    fb30:	2000      	movs	r0, #0
    fb32:	438a      	bics	r2, r1
    fb34:	0011      	movs	r1, r2
    fb36:	220a      	movs	r2, #10
    fb38:	430a      	orrs	r2, r1
    fb3a:	701a      	strb	r2, [r3, #0]
    fb3c:	47a0      	blx	r4
    fb3e:	bd10      	pop	{r4, pc}
    fb40:	20003ad4 	.word	0x20003ad4
    fb44:	0000fa39 	.word	0x0000fa39

0000fb48 <LorawanProcessFcntDown>:
    fb48:	b570      	push	{r4, r5, r6, lr}
    fb4a:	79c3      	ldrb	r3, [r0, #7]
    fb4c:	7982      	ldrb	r2, [r0, #6]
    fb4e:	4c1f      	ldr	r4, [pc, #124]	; (fbcc <LorawanProcessFcntDown+0x84>)
    fb50:	021b      	lsls	r3, r3, #8
    fb52:	4313      	orrs	r3, r2
    fb54:	0022      	movs	r2, r4
    fb56:	218b      	movs	r1, #139	; 0x8b
    fb58:	328c      	adds	r2, #140	; 0x8c
    fb5a:	8810      	ldrh	r0, [r2, #0]
    fb5c:	0089      	lsls	r1, r1, #2
    fb5e:	8013      	strh	r3, [r2, #0]
    fb60:	4298      	cmp	r0, r3
    fb62:	d80f      	bhi.n	fb84 <LorawanProcessFcntDown+0x3c>
    fb64:	5c61      	ldrb	r1, [r4, r1]
    fb66:	2900      	cmp	r1, #0
    fb68:	d007      	beq.n	fb7a <LorawanProcessFcntDown+0x32>
    fb6a:	2301      	movs	r3, #1
    fb6c:	408b      	lsls	r3, r1
    fb6e:	6812      	ldr	r2, [r2, #0]
    fb70:	3b01      	subs	r3, #1
    fb72:	421a      	tst	r2, r3
    fb74:	d001      	beq.n	fb7a <LorawanProcessFcntDown+0x32>
    fb76:	2008      	movs	r0, #8
    fb78:	bd70      	pop	{r4, r5, r6, pc}
    fb7a:	210a      	movs	r1, #10
    fb7c:	4b14      	ldr	r3, [pc, #80]	; (fbd0 <LorawanProcessFcntDown+0x88>)
    fb7e:	2001      	movs	r0, #1
    fb80:	4798      	blx	r3
    fb82:	e7f8      	b.n	fb76 <LorawanProcessFcntDown+0x2e>
    fb84:	0020      	movs	r0, r4
    fb86:	308e      	adds	r0, #142	; 0x8e
    fb88:	8803      	ldrh	r3, [r0, #0]
    fb8a:	3301      	adds	r3, #1
    fb8c:	8003      	strh	r3, [r0, #0]
    fb8e:	5c61      	ldrb	r1, [r4, r1]
    fb90:	2900      	cmp	r1, #0
    fb92:	d005      	beq.n	fba0 <LorawanProcessFcntDown+0x58>
    fb94:	2301      	movs	r3, #1
    fb96:	408b      	lsls	r3, r1
    fb98:	6812      	ldr	r2, [r2, #0]
    fb9a:	3b01      	subs	r3, #1
    fb9c:	421a      	tst	r2, r3
    fb9e:	d103      	bne.n	fba8 <LorawanProcessFcntDown+0x60>
    fba0:	210a      	movs	r1, #10
    fba2:	2001      	movs	r0, #1
    fba4:	4b0a      	ldr	r3, [pc, #40]	; (fbd0 <LorawanProcessFcntDown+0x88>)
    fba6:	4798      	blx	r3
    fba8:	0023      	movs	r3, r4
    fbaa:	338c      	adds	r3, #140	; 0x8c
    fbac:	681b      	ldr	r3, [r3, #0]
    fbae:	3301      	adds	r3, #1
    fbb0:	d1e1      	bne.n	fb76 <LorawanProcessFcntDown+0x2e>
    fbb2:	2501      	movs	r5, #1
    fbb4:	3484      	adds	r4, #132	; 0x84
    fbb6:	78a3      	ldrb	r3, [r4, #2]
    fbb8:	432b      	orrs	r3, r5
    fbba:	70a3      	strb	r3, [r4, #2]
    fbbc:	4b05      	ldr	r3, [pc, #20]	; (fbd4 <LorawanProcessFcntDown+0x8c>)
    fbbe:	4798      	blx	r3
    fbc0:	210b      	movs	r1, #11
    fbc2:	0028      	movs	r0, r5
    fbc4:	4b02      	ldr	r3, [pc, #8]	; (fbd0 <LorawanProcessFcntDown+0x88>)
    fbc6:	4798      	blx	r3
    fbc8:	200d      	movs	r0, #13
    fbca:	e7d5      	b.n	fb78 <LorawanProcessFcntDown+0x30>
    fbcc:	20003ad4 	.word	0x20003ad4
    fbd0:	00008755 	.word	0x00008755
    fbd4:	0000fb0d 	.word	0x0000fb0d

0000fbd8 <UpdateCurrentDataRateAfterDataRangeChanges>:
    fbd8:	4b09      	ldr	r3, [pc, #36]	; (fc00 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
    fbda:	001a      	movs	r2, r3
    fbdc:	32f4      	adds	r2, #244	; 0xf4
    fbde:	7811      	ldrb	r1, [r2, #0]
    fbe0:	001a      	movs	r2, r3
    fbe2:	32e7      	adds	r2, #231	; 0xe7
    fbe4:	7810      	ldrb	r0, [r2, #0]
    fbe6:	4288      	cmp	r0, r1
    fbe8:	d900      	bls.n	fbec <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
    fbea:	7011      	strb	r1, [r2, #0]
    fbec:	001a      	movs	r2, r3
    fbee:	33e7      	adds	r3, #231	; 0xe7
    fbf0:	32f3      	adds	r2, #243	; 0xf3
    fbf2:	7812      	ldrb	r2, [r2, #0]
    fbf4:	7819      	ldrb	r1, [r3, #0]
    fbf6:	4291      	cmp	r1, r2
    fbf8:	d200      	bcs.n	fbfc <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
    fbfa:	701a      	strb	r2, [r3, #0]
    fbfc:	4770      	bx	lr
    fbfe:	46c0      	nop			; (mov r8, r8)
    fc00:	20003ad4 	.word	0x20003ad4

0000fc04 <ExecuteNewChannel>:
    fc04:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc06:	b08d      	sub	sp, #52	; 0x34
    fc08:	7807      	ldrb	r7, [r0, #0]
    fc0a:	ab02      	add	r3, sp, #8
    fc0c:	0006      	movs	r6, r0
    fc0e:	71df      	strb	r7, [r3, #7]
    fc10:	1c41      	adds	r1, r0, #1
    fc12:	4b59      	ldr	r3, [pc, #356]	; (fd78 <ExecuteNewChannel+0x174>)
    fc14:	2204      	movs	r2, #4
    fc16:	a808      	add	r0, sp, #32
    fc18:	4798      	blx	r3
    fc1a:	9b08      	ldr	r3, [sp, #32]
    fc1c:	4c57      	ldr	r4, [pc, #348]	; (fd7c <ExecuteNewChannel+0x178>)
    fc1e:	021d      	lsls	r5, r3, #8
    fc20:	2364      	movs	r3, #100	; 0x64
    fc22:	0a2d      	lsrs	r5, r5, #8
    fc24:	435d      	muls	r5, r3
    fc26:	1d73      	adds	r3, r6, #5
    fc28:	9301      	str	r3, [sp, #4]
    fc2a:	0023      	movs	r3, r4
    fc2c:	9508      	str	r5, [sp, #32]
    fc2e:	33ff      	adds	r3, #255	; 0xff
    fc30:	781b      	ldrb	r3, [r3, #0]
    fc32:	3b02      	subs	r3, #2
    fc34:	2b01      	cmp	r3, #1
    fc36:	d800      	bhi.n	fc3a <ExecuteNewChannel+0x36>
    fc38:	e092      	b.n	fd60 <ExecuteNewChannel+0x15c>
    fc3a:	7933      	ldrb	r3, [r6, #4]
    fc3c:	a904      	add	r1, sp, #16
    fc3e:	9300      	str	r3, [sp, #0]
    fc40:	2300      	movs	r3, #0
    fc42:	2015      	movs	r0, #21
    fc44:	4e4e      	ldr	r6, [pc, #312]	; (fd80 <ExecuteNewChannel+0x17c>)
    fc46:	700f      	strb	r7, [r1, #0]
    fc48:	704b      	strb	r3, [r1, #1]
    fc4a:	47b0      	blx	r6
    fc4c:	2808      	cmp	r0, #8
    fc4e:	d12b      	bne.n	fca8 <ExecuteNewChannel+0xa4>
    fc50:	466a      	mov	r2, sp
    fc52:	ab02      	add	r3, sp, #8
    fc54:	79db      	ldrb	r3, [r3, #7]
    fc56:	7812      	ldrb	r2, [r2, #0]
    fc58:	af06      	add	r7, sp, #24
    fc5a:	a90a      	add	r1, sp, #40	; 0x28
    fc5c:	3806      	subs	r0, #6
    fc5e:	703b      	strb	r3, [r7, #0]
    fc60:	707a      	strb	r2, [r7, #1]
    fc62:	710b      	strb	r3, [r1, #4]
    fc64:	950a      	str	r5, [sp, #40]	; 0x28
    fc66:	47b0      	blx	r6
    fc68:	2808      	cmp	r0, #8
    fc6a:	d001      	beq.n	fc70 <ExecuteNewChannel+0x6c>
    fc6c:	2d00      	cmp	r5, #0
    fc6e:	d10b      	bne.n	fc88 <ExecuteNewChannel+0x84>
    fc70:	0023      	movs	r3, r4
    fc72:	33e0      	adds	r3, #224	; 0xe0
    fc74:	781a      	ldrb	r2, [r3, #0]
    fc76:	2303      	movs	r3, #3
    fc78:	4353      	muls	r3, r2
    fc7a:	2280      	movs	r2, #128	; 0x80
    fc7c:	18e3      	adds	r3, r4, r3
    fc7e:	3398      	adds	r3, #152	; 0x98
    fc80:	7899      	ldrb	r1, [r3, #2]
    fc82:	4252      	negs	r2, r2
    fc84:	430a      	orrs	r2, r1
    fc86:	709a      	strb	r2, [r3, #2]
    fc88:	0039      	movs	r1, r7
    fc8a:	2012      	movs	r0, #18
    fc8c:	47b0      	blx	r6
    fc8e:	2808      	cmp	r0, #8
    fc90:	d10a      	bne.n	fca8 <ExecuteNewChannel+0xa4>
    fc92:	0023      	movs	r3, r4
    fc94:	33e0      	adds	r3, #224	; 0xe0
    fc96:	781a      	ldrb	r2, [r3, #0]
    fc98:	2303      	movs	r3, #3
    fc9a:	4353      	muls	r3, r2
    fc9c:	2240      	movs	r2, #64	; 0x40
    fc9e:	18e3      	adds	r3, r4, r3
    fca0:	3398      	adds	r3, #152	; 0x98
    fca2:	7899      	ldrb	r1, [r3, #2]
    fca4:	430a      	orrs	r2, r1
    fca6:	709a      	strb	r2, [r3, #2]
    fca8:	0023      	movs	r3, r4
    fcaa:	33e0      	adds	r3, #224	; 0xe0
    fcac:	781a      	ldrb	r2, [r3, #0]
    fcae:	2303      	movs	r3, #3
    fcb0:	4353      	muls	r3, r2
    fcb2:	18e3      	adds	r3, r4, r3
    fcb4:	3398      	adds	r3, #152	; 0x98
    fcb6:	789b      	ldrb	r3, [r3, #2]
    fcb8:	09da      	lsrs	r2, r3, #7
    fcba:	2a01      	cmp	r2, #1
    fcbc:	d150      	bne.n	fd60 <ExecuteNewChannel+0x15c>
    fcbe:	065b      	lsls	r3, r3, #25
    fcc0:	d54e      	bpl.n	fd60 <ExecuteNewChannel+0x15c>
    fcc2:	4e30      	ldr	r6, [pc, #192]	; (fd84 <ExecuteNewChannel+0x180>)
    fcc4:	2d00      	cmp	r5, #0
    fcc6:	d04e      	beq.n	fd66 <ExecuteNewChannel+0x162>
    fcc8:	a906      	add	r1, sp, #24
    fcca:	2012      	movs	r0, #18
    fccc:	47b0      	blx	r6
    fcce:	ad07      	add	r5, sp, #28
    fcd0:	a90a      	add	r1, sp, #40	; 0x28
    fcd2:	2000      	movs	r0, #0
    fcd4:	47b0      	blx	r6
    fcd6:	002a      	movs	r2, r5
    fcd8:	2100      	movs	r1, #0
    fcda:	2014      	movs	r0, #20
    fcdc:	4f2a      	ldr	r7, [pc, #168]	; (fd88 <ExecuteNewChannel+0x184>)
    fcde:	47b8      	blx	r7
    fce0:	0023      	movs	r3, r4
    fce2:	782a      	ldrb	r2, [r5, #0]
    fce4:	33f3      	adds	r3, #243	; 0xf3
    fce6:	701a      	strb	r2, [r3, #0]
    fce8:	0023      	movs	r3, r4
    fcea:	786a      	ldrb	r2, [r5, #1]
    fcec:	33f4      	adds	r3, #244	; 0xf4
    fcee:	701a      	strb	r2, [r3, #0]
    fcf0:	34ff      	adds	r4, #255	; 0xff
    fcf2:	4b26      	ldr	r3, [pc, #152]	; (fd8c <ExecuteNewChannel+0x188>)
    fcf4:	4798      	blx	r3
    fcf6:	7f63      	ldrb	r3, [r4, #29]
    fcf8:	079b      	lsls	r3, r3, #30
    fcfa:	d50e      	bpl.n	fd1a <ExecuteNewChannel+0x116>
    fcfc:	2416      	movs	r4, #22
    fcfe:	ab02      	add	r3, sp, #8
    fd00:	18e4      	adds	r4, r4, r3
    fd02:	1dd9      	adds	r1, r3, #7
    fd04:	0022      	movs	r2, r4
    fd06:	201e      	movs	r0, #30
    fd08:	47b8      	blx	r7
    fd0a:	ab02      	add	r3, sp, #8
    fd0c:	79db      	ldrb	r3, [r3, #7]
    fd0e:	a909      	add	r1, sp, #36	; 0x24
    fd10:	708b      	strb	r3, [r1, #2]
    fd12:	8823      	ldrh	r3, [r4, #0]
    fd14:	201e      	movs	r0, #30
    fd16:	800b      	strh	r3, [r1, #0]
    fd18:	47b0      	blx	r6
    fd1a:	ab02      	add	r3, sp, #8
    fd1c:	79db      	ldrb	r3, [r3, #7]
    fd1e:	a905      	add	r1, sp, #20
    fd20:	700b      	strb	r3, [r1, #0]
    fd22:	2301      	movs	r3, #1
    fd24:	2016      	movs	r0, #22
    fd26:	704b      	strb	r3, [r1, #1]
    fd28:	4b16      	ldr	r3, [pc, #88]	; (fd84 <ExecuteNewChannel+0x180>)
    fd2a:	4798      	blx	r3
    fd2c:	ad09      	add	r5, sp, #36	; 0x24
    fd2e:	2100      	movs	r1, #0
    fd30:	002a      	movs	r2, r5
    fd32:	4b15      	ldr	r3, [pc, #84]	; (fd88 <ExecuteNewChannel+0x184>)
    fd34:	2014      	movs	r0, #20
    fd36:	4798      	blx	r3
    fd38:	4c10      	ldr	r4, [pc, #64]	; (fd7c <ExecuteNewChannel+0x178>)
    fd3a:	782a      	ldrb	r2, [r5, #0]
    fd3c:	0023      	movs	r3, r4
    fd3e:	33f3      	adds	r3, #243	; 0xf3
    fd40:	701a      	strb	r2, [r3, #0]
    fd42:	0023      	movs	r3, r4
    fd44:	786a      	ldrb	r2, [r5, #1]
    fd46:	33f4      	adds	r3, #244	; 0xf4
    fd48:	701a      	strb	r2, [r3, #0]
    fd4a:	4b10      	ldr	r3, [pc, #64]	; (fd8c <ExecuteNewChannel+0x188>)
    fd4c:	4798      	blx	r3
    fd4e:	2304      	movs	r3, #4
    fd50:	3484      	adds	r4, #132	; 0x84
    fd52:	7862      	ldrb	r2, [r4, #1]
    fd54:	210b      	movs	r1, #11
    fd56:	4313      	orrs	r3, r2
    fd58:	7063      	strb	r3, [r4, #1]
    fd5a:	2001      	movs	r0, #1
    fd5c:	4b0c      	ldr	r3, [pc, #48]	; (fd90 <ExecuteNewChannel+0x18c>)
    fd5e:	4798      	blx	r3
    fd60:	9801      	ldr	r0, [sp, #4]
    fd62:	b00d      	add	sp, #52	; 0x34
    fd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd66:	ab02      	add	r3, sp, #8
    fd68:	79db      	ldrb	r3, [r3, #7]
    fd6a:	a905      	add	r1, sp, #20
    fd6c:	2016      	movs	r0, #22
    fd6e:	700b      	strb	r3, [r1, #0]
    fd70:	704d      	strb	r5, [r1, #1]
    fd72:	47b0      	blx	r6
    fd74:	e7da      	b.n	fd2c <ExecuteNewChannel+0x128>
    fd76:	46c0      	nop			; (mov r8, r8)
    fd78:	00014fe3 	.word	0x00014fe3
    fd7c:	20003ad4 	.word	0x20003ad4
    fd80:	0000b6ad 	.word	0x0000b6ad
    fd84:	0000b6c9 	.word	0x0000b6c9
    fd88:	0000b691 	.word	0x0000b691
    fd8c:	0000fbd9 	.word	0x0000fbd9
    fd90:	00008755 	.word	0x00008755

0000fd94 <MacExecuteCommands>:
    fd94:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd96:	1843      	adds	r3, r0, r1
    fd98:	b087      	sub	sp, #28
    fd9a:	9301      	str	r3, [sp, #4]
    fd9c:	2300      	movs	r3, #0
    fd9e:	0007      	movs	r7, r0
    fda0:	2501      	movs	r5, #1
    fda2:	9302      	str	r3, [sp, #8]
    fda4:	9b01      	ldr	r3, [sp, #4]
    fda6:	4e71      	ldr	r6, [pc, #452]	; (ff6c <MacExecuteCommands+0x1d8>)
    fda8:	429f      	cmp	r7, r3
    fdaa:	d362      	bcc.n	fe72 <MacExecuteCommands+0xde>
    fdac:	4b70      	ldr	r3, [pc, #448]	; (ff70 <MacExecuteCommands+0x1dc>)
    fdae:	5cf3      	ldrb	r3, [r6, r3]
    fdb0:	2b00      	cmp	r3, #0
    fdb2:	d000      	beq.n	fdb6 <MacExecuteCommands+0x22>
    fdb4:	e08f      	b.n	fed6 <MacExecuteCommands+0x142>
    fdb6:	0038      	movs	r0, r7
    fdb8:	b007      	add	sp, #28
    fdba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fdbc:	0032      	movs	r2, r6
    fdbe:	7879      	ldrb	r1, [r7, #1]
    fdc0:	32e5      	adds	r2, #229	; 0xe5
    fdc2:	7011      	strb	r1, [r2, #0]
    fdc4:	0032      	movs	r2, r6
    fdc6:	78b9      	ldrb	r1, [r7, #2]
    fdc8:	32e6      	adds	r2, #230	; 0xe6
    fdca:	1cfc      	adds	r4, r7, #3
    fdcc:	7011      	strb	r1, [r2, #0]
    fdce:	2203      	movs	r2, #3
    fdd0:	4353      	muls	r3, r2
    fdd2:	18f3      	adds	r3, r6, r3
    fdd4:	3399      	adds	r3, #153	; 0x99
    fdd6:	32fc      	adds	r2, #252	; 0xfc
    fdd8:	701a      	strb	r2, [r3, #0]
    fdda:	e020      	b.n	fe1e <MacExecuteCommands+0x8a>
    fddc:	0020      	movs	r0, r4
    fdde:	4b65      	ldr	r3, [pc, #404]	; (ff74 <MacExecuteCommands+0x1e0>)
    fde0:	4798      	blx	r3
    fde2:	0004      	movs	r4, r0
    fde4:	e01b      	b.n	fe1e <MacExecuteCommands+0x8a>
    fde6:	0020      	movs	r0, r4
    fde8:	4b63      	ldr	r3, [pc, #396]	; (ff78 <MacExecuteCommands+0x1e4>)
    fdea:	e7f9      	b.n	fde0 <MacExecuteCommands+0x4c>
    fdec:	0020      	movs	r0, r4
    fdee:	4b63      	ldr	r3, [pc, #396]	; (ff7c <MacExecuteCommands+0x1e8>)
    fdf0:	e7f6      	b.n	fde0 <MacExecuteCommands+0x4c>
    fdf2:	0020      	movs	r0, r4
    fdf4:	4b62      	ldr	r3, [pc, #392]	; (ff80 <MacExecuteCommands+0x1ec>)
    fdf6:	e7f3      	b.n	fde0 <MacExecuteCommands+0x4c>
    fdf8:	7878      	ldrb	r0, [r7, #1]
    fdfa:	230f      	movs	r3, #15
    fdfc:	0002      	movs	r2, r0
    fdfe:	1cbc      	adds	r4, r7, #2
    fe00:	439a      	bics	r2, r3
    fe02:	d10c      	bne.n	fe1e <MacExecuteCommands+0x8a>
    fe04:	4b5f      	ldr	r3, [pc, #380]	; (ff84 <MacExecuteCommands+0x1f0>)
    fe06:	4798      	blx	r3
    fe08:	0032      	movs	r2, r6
    fe0a:	2380      	movs	r3, #128	; 0x80
    fe0c:	3284      	adds	r2, #132	; 0x84
    fe0e:	7851      	ldrb	r1, [r2, #1]
    fe10:	425b      	negs	r3, r3
    fe12:	430b      	orrs	r3, r1
    fe14:	7053      	strb	r3, [r2, #1]
    fe16:	210b      	movs	r1, #11
    fe18:	0028      	movs	r0, r5
    fe1a:	4b5b      	ldr	r3, [pc, #364]	; (ff88 <MacExecuteCommands+0x1f4>)
    fe1c:	4798      	blx	r3
    fe1e:	0032      	movs	r2, r6
    fe20:	2103      	movs	r1, #3
    fe22:	32e0      	adds	r2, #224	; 0xe0
    fe24:	7813      	ldrb	r3, [r2, #0]
    fe26:	4359      	muls	r1, r3
    fe28:	1876      	adds	r6, r6, r1
    fe2a:	3699      	adds	r6, #153	; 0x99
    fe2c:	7831      	ldrb	r1, [r6, #0]
    fe2e:	29ff      	cmp	r1, #255	; 0xff
    fe30:	d003      	beq.n	fe3a <MacExecuteCommands+0xa6>
    fe32:	2b0f      	cmp	r3, #15
    fe34:	d801      	bhi.n	fe3a <MacExecuteCommands+0xa6>
    fe36:	3301      	adds	r3, #1
    fe38:	7013      	strb	r3, [r2, #0]
    fe3a:	0027      	movs	r7, r4
    fe3c:	e7b2      	b.n	fda4 <MacExecuteCommands+0x10>
    fe3e:	0020      	movs	r0, r4
    fe40:	4b52      	ldr	r3, [pc, #328]	; (ff8c <MacExecuteCommands+0x1f8>)
    fe42:	e7cd      	b.n	fde0 <MacExecuteCommands+0x4c>
    fe44:	0020      	movs	r0, r4
    fe46:	4b52      	ldr	r3, [pc, #328]	; (ff90 <MacExecuteCommands+0x1fc>)
    fe48:	e7ca      	b.n	fde0 <MacExecuteCommands+0x4c>
    fe4a:	0020      	movs	r0, r4
    fe4c:	4b51      	ldr	r3, [pc, #324]	; (ff94 <MacExecuteCommands+0x200>)
    fe4e:	4798      	blx	r3
    fe50:	0033      	movs	r3, r6
    fe52:	33e0      	adds	r3, #224	; 0xe0
    fe54:	0004      	movs	r4, r0
    fe56:	781b      	ldrb	r3, [r3, #0]
    fe58:	e7b9      	b.n	fdce <MacExecuteCommands+0x3a>
    fe5a:	2203      	movs	r2, #3
    fe5c:	4353      	muls	r3, r2
    fe5e:	18f3      	adds	r3, r6, r3
    fe60:	3399      	adds	r3, #153	; 0x99
    fe62:	32fc      	adds	r2, #252	; 0xfc
    fe64:	701a      	strb	r2, [r3, #0]
    fe66:	9c01      	ldr	r4, [sp, #4]
    fe68:	9502      	str	r5, [sp, #8]
    fe6a:	e7d8      	b.n	fe1e <MacExecuteCommands+0x8a>
    fe6c:	23ff      	movs	r3, #255	; 0xff
    fe6e:	7013      	strb	r3, [r2, #0]
    fe70:	e7f9      	b.n	fe66 <MacExecuteCommands+0xd2>
    fe72:	9b02      	ldr	r3, [sp, #8]
    fe74:	2b00      	cmp	r3, #0
    fe76:	d199      	bne.n	fdac <MacExecuteCommands+0x18>
    fe78:	0033      	movs	r3, r6
    fe7a:	2203      	movs	r2, #3
    fe7c:	33e0      	adds	r3, #224	; 0xe0
    fe7e:	781b      	ldrb	r3, [r3, #0]
    fe80:	2401      	movs	r4, #1
    fe82:	435a      	muls	r2, r3
    fe84:	18b2      	adds	r2, r6, r2
    fe86:	0010      	movs	r0, r2
    fe88:	3098      	adds	r0, #152	; 0x98
    fe8a:	7881      	ldrb	r1, [r0, #2]
    fe8c:	3299      	adds	r2, #153	; 0x99
    fe8e:	43a9      	bics	r1, r5
    fe90:	4021      	ands	r1, r4
    fe92:	7081      	strb	r1, [r0, #2]
    fe94:	78c1      	ldrb	r1, [r0, #3]
    fe96:	193c      	adds	r4, r7, r4
    fe98:	43a9      	bics	r1, r5
    fe9a:	70c1      	strb	r1, [r0, #3]
    fe9c:	7839      	ldrb	r1, [r7, #0]
    fe9e:	7011      	strb	r1, [r2, #0]
    fea0:	7838      	ldrb	r0, [r7, #0]
    fea2:	493d      	ldr	r1, [pc, #244]	; (ff98 <MacExecuteCommands+0x204>)
    fea4:	1809      	adds	r1, r1, r0
    fea6:	3902      	subs	r1, #2
    fea8:	7809      	ldrb	r1, [r1, #0]
    feaa:	1861      	adds	r1, r4, r1
    feac:	468c      	mov	ip, r1
    feae:	9901      	ldr	r1, [sp, #4]
    feb0:	4561      	cmp	r1, ip
    feb2:	d3db      	bcc.n	fe6c <MacExecuteCommands+0xd8>
    feb4:	3802      	subs	r0, #2
    feb6:	280b      	cmp	r0, #11
    feb8:	d8cf      	bhi.n	fe5a <MacExecuteCommands+0xc6>
    feba:	f001 ff4d 	bl	11d58 <__gnu_thumb1_case_shi>
    febe:	ff7f      	.short	0xff7f
    fec0:	ff94ff8f 	.word	0xff94ff8f
    fec4:	ffb0ff97 	.word	0xffb0ff97
    fec8:	ff9dff9a 	.word	0xff9dff9a
    fecc:	ffc3ffc0 	.word	0xffc3ffc0
    fed0:	ffceffce 	.word	0xffceffce
    fed4:	ffc6      	.short	0xffc6
    fed6:	4b31      	ldr	r3, [pc, #196]	; (ff9c <MacExecuteCommands+0x208>)
    fed8:	5cf3      	ldrb	r3, [r6, r3]
    feda:	43db      	mvns	r3, r3
    fedc:	075b      	lsls	r3, r3, #29
    fede:	d000      	beq.n	fee2 <MacExecuteCommands+0x14e>
    fee0:	e769      	b.n	fdb6 <MacExecuteCommands+0x22>
    fee2:	4b2f      	ldr	r3, [pc, #188]	; (ffa0 <MacExecuteCommands+0x20c>)
    fee4:	ad05      	add	r5, sp, #20
    fee6:	5cf4      	ldrb	r4, [r6, r3]
    fee8:	2100      	movs	r1, #0
    feea:	0724      	lsls	r4, r4, #28
    feec:	0f24      	lsrs	r4, r4, #28
    feee:	b2e3      	uxtb	r3, r4
    fef0:	9301      	str	r3, [sp, #4]
    fef2:	4b2c      	ldr	r3, [pc, #176]	; (ffa4 <MacExecuteCommands+0x210>)
    fef4:	002a      	movs	r2, r5
    fef6:	5cf3      	ldrb	r3, [r6, r3]
    fef8:	2014      	movs	r0, #20
    fefa:	9302      	str	r3, [sp, #8]
    fefc:	2389      	movs	r3, #137	; 0x89
    fefe:	009b      	lsls	r3, r3, #2
    ff00:	5cf3      	ldrb	r3, [r6, r3]
    ff02:	9303      	str	r3, [sp, #12]
    ff04:	4b28      	ldr	r3, [pc, #160]	; (ffa8 <MacExecuteCommands+0x214>)
    ff06:	4798      	blx	r3
    ff08:	0033      	movs	r3, r6
    ff0a:	782a      	ldrb	r2, [r5, #0]
    ff0c:	33f3      	adds	r3, #243	; 0xf3
    ff0e:	701a      	strb	r2, [r3, #0]
    ff10:	0033      	movs	r3, r6
    ff12:	786a      	ldrb	r2, [r5, #1]
    ff14:	33f4      	adds	r3, #244	; 0xf4
    ff16:	701a      	strb	r2, [r3, #0]
    ff18:	4b24      	ldr	r3, [pc, #144]	; (ffac <MacExecuteCommands+0x218>)
    ff1a:	4798      	blx	r3
    ff1c:	9802      	ldr	r0, [sp, #8]
    ff1e:	4b24      	ldr	r3, [pc, #144]	; (ffb0 <MacExecuteCommands+0x21c>)
    ff20:	4798      	blx	r3
    ff22:	0032      	movs	r2, r6
    ff24:	2308      	movs	r3, #8
    ff26:	3284      	adds	r2, #132	; 0x84
    ff28:	7851      	ldrb	r1, [r2, #1]
    ff2a:	430b      	orrs	r3, r1
    ff2c:	7053      	strb	r3, [r2, #1]
    ff2e:	9803      	ldr	r0, [sp, #12]
    ff30:	4b20      	ldr	r3, [pc, #128]	; (ffb4 <MacExecuteCommands+0x220>)
    ff32:	4798      	blx	r3
    ff34:	0033      	movs	r3, r6
    ff36:	b2e2      	uxtb	r2, r4
    ff38:	33e1      	adds	r3, #225	; 0xe1
    ff3a:	2a00      	cmp	r2, #0
    ff3c:	d10e      	bne.n	ff5c <MacExecuteCommands+0x1c8>
    ff3e:	701c      	strb	r4, [r3, #0]
    ff40:	2113      	movs	r1, #19
    ff42:	4c11      	ldr	r4, [pc, #68]	; (ff88 <MacExecuteCommands+0x1f4>)
    ff44:	2000      	movs	r0, #0
    ff46:	47a0      	blx	r4
    ff48:	2210      	movs	r2, #16
    ff4a:	4b08      	ldr	r3, [pc, #32]	; (ff6c <MacExecuteCommands+0x1d8>)
    ff4c:	2001      	movs	r0, #1
    ff4e:	3384      	adds	r3, #132	; 0x84
    ff50:	7859      	ldrb	r1, [r3, #1]
    ff52:	430a      	orrs	r2, r1
    ff54:	705a      	strb	r2, [r3, #1]
    ff56:	210b      	movs	r1, #11
    ff58:	47a0      	blx	r4
    ff5a:	e72c      	b.n	fdb6 <MacExecuteCommands+0x22>
    ff5c:	9a01      	ldr	r2, [sp, #4]
    ff5e:	3a01      	subs	r2, #1
    ff60:	b2d2      	uxtb	r2, r2
    ff62:	701a      	strb	r2, [r3, #0]
    ff64:	0033      	movs	r3, r6
    ff66:	33e2      	adds	r3, #226	; 0xe2
    ff68:	701a      	strb	r2, [r3, #0]
    ff6a:	e7e9      	b.n	ff40 <MacExecuteCommands+0x1ac>
    ff6c:	20003ad4 	.word	0x20003ad4
    ff70:	00000226 	.word	0x00000226
    ff74:	0000eef5 	.word	0x0000eef5
    ff78:	0000edb9 	.word	0x0000edb9
    ff7c:	0000ecbd 	.word	0x0000ecbd
    ff80:	0000fc05 	.word	0x0000fc05
    ff84:	0000e3e9 	.word	0x0000e3e9
    ff88:	00008755 	.word	0x00008755
    ff8c:	0000eea5 	.word	0x0000eea5
    ff90:	0000edf1 	.word	0x0000edf1
    ff94:	0000f02d 	.word	0x0000f02d
    ff98:	00016d7b 	.word	0x00016d7b
    ff9c:	00000223 	.word	0x00000223
    ffa0:	00000229 	.word	0x00000229
    ffa4:	00000225 	.word	0x00000225
    ffa8:	0000b691 	.word	0x0000b691
    ffac:	0000fbd9 	.word	0x0000fbd9
    ffb0:	0000eb4d 	.word	0x0000eb4d
    ffb4:	0000eae1 	.word	0x0000eae1

0000ffb8 <LorawanSetDataRange>:
    ffb8:	2201      	movs	r2, #1
    ffba:	b530      	push	{r4, r5, lr}
    ffbc:	b085      	sub	sp, #20
    ffbe:	ab01      	add	r3, sp, #4
    ffc0:	ac02      	add	r4, sp, #8
    ffc2:	7018      	strb	r0, [r3, #0]
    ffc4:	7020      	strb	r0, [r4, #0]
    ffc6:	7061      	strb	r1, [r4, #1]
    ffc8:	2015      	movs	r0, #21
    ffca:	0019      	movs	r1, r3
    ffcc:	4d11      	ldr	r5, [pc, #68]	; (10014 <LorawanSetDataRange+0x5c>)
    ffce:	705a      	strb	r2, [r3, #1]
    ffd0:	47a8      	blx	r5
    ffd2:	2808      	cmp	r0, #8
    ffd4:	d003      	beq.n	ffde <LorawanSetDataRange+0x26>
    ffd6:	250a      	movs	r5, #10
    ffd8:	0028      	movs	r0, r5
    ffda:	b005      	add	sp, #20
    ffdc:	bd30      	pop	{r4, r5, pc}
    ffde:	0021      	movs	r1, r4
    ffe0:	2012      	movs	r0, #18
    ffe2:	47a8      	blx	r5
    ffe4:	0005      	movs	r5, r0
    ffe6:	2808      	cmp	r0, #8
    ffe8:	d1f5      	bne.n	ffd6 <LorawanSetDataRange+0x1e>
    ffea:	0021      	movs	r1, r4
    ffec:	4b0a      	ldr	r3, [pc, #40]	; (10018 <LorawanSetDataRange+0x60>)
    ffee:	ac03      	add	r4, sp, #12
    fff0:	2012      	movs	r0, #18
    fff2:	4798      	blx	r3
    fff4:	0022      	movs	r2, r4
    fff6:	2100      	movs	r1, #0
    fff8:	4b08      	ldr	r3, [pc, #32]	; (1001c <LorawanSetDataRange+0x64>)
    fffa:	2014      	movs	r0, #20
    fffc:	4798      	blx	r3
    fffe:	4b08      	ldr	r3, [pc, #32]	; (10020 <LorawanSetDataRange+0x68>)
   10000:	7821      	ldrb	r1, [r4, #0]
   10002:	001a      	movs	r2, r3
   10004:	32f3      	adds	r2, #243	; 0xf3
   10006:	7011      	strb	r1, [r2, #0]
   10008:	7862      	ldrb	r2, [r4, #1]
   1000a:	33f4      	adds	r3, #244	; 0xf4
   1000c:	701a      	strb	r2, [r3, #0]
   1000e:	4b05      	ldr	r3, [pc, #20]	; (10024 <LorawanSetDataRange+0x6c>)
   10010:	4798      	blx	r3
   10012:	e7e1      	b.n	ffd8 <LorawanSetDataRange+0x20>
   10014:	0000b6ad 	.word	0x0000b6ad
   10018:	0000b6c9 	.word	0x0000b6c9
   1001c:	0000b691 	.word	0x0000b691
   10020:	20003ad4 	.word	0x20003ad4
   10024:	0000fbd9 	.word	0x0000fbd9

00010028 <LorawanSetChannelIdStatus>:
   10028:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1002a:	466b      	mov	r3, sp
   1002c:	7018      	strb	r0, [r3, #0]
   1002e:	7059      	strb	r1, [r3, #1]
   10030:	2016      	movs	r0, #22
   10032:	4669      	mov	r1, sp
   10034:	4b0c      	ldr	r3, [pc, #48]	; (10068 <LorawanSetChannelIdStatus+0x40>)
   10036:	4798      	blx	r3
   10038:	0004      	movs	r4, r0
   1003a:	2808      	cmp	r0, #8
   1003c:	d111      	bne.n	10062 <LorawanSetChannelIdStatus+0x3a>
   1003e:	ad01      	add	r5, sp, #4
   10040:	002a      	movs	r2, r5
   10042:	2100      	movs	r1, #0
   10044:	4b09      	ldr	r3, [pc, #36]	; (1006c <LorawanSetChannelIdStatus+0x44>)
   10046:	2014      	movs	r0, #20
   10048:	4798      	blx	r3
   1004a:	4b09      	ldr	r3, [pc, #36]	; (10070 <LorawanSetChannelIdStatus+0x48>)
   1004c:	7829      	ldrb	r1, [r5, #0]
   1004e:	001a      	movs	r2, r3
   10050:	32f3      	adds	r2, #243	; 0xf3
   10052:	7011      	strb	r1, [r2, #0]
   10054:	786a      	ldrb	r2, [r5, #1]
   10056:	33f4      	adds	r3, #244	; 0xf4
   10058:	701a      	strb	r2, [r3, #0]
   1005a:	4b06      	ldr	r3, [pc, #24]	; (10074 <LorawanSetChannelIdStatus+0x4c>)
   1005c:	4798      	blx	r3
   1005e:	0020      	movs	r0, r4
   10060:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10062:	240a      	movs	r4, #10
   10064:	e7fb      	b.n	1005e <LorawanSetChannelIdStatus+0x36>
   10066:	46c0      	nop			; (mov r8, r8)
   10068:	0000b6c9 	.word	0x0000b6c9
   1006c:	0000b691 	.word	0x0000b691
   10070:	20003ad4 	.word	0x20003ad4
   10074:	0000fbd9 	.word	0x0000fbd9

00010078 <LORAWAN_RxDone>:
   10078:	b5f0      	push	{r4, r5, r6, r7, lr}
   1007a:	4bc4      	ldr	r3, [pc, #784]	; (1038c <LORAWAN_RxDone+0x314>)
   1007c:	b093      	sub	sp, #76	; 0x4c
   1007e:	781b      	ldrb	r3, [r3, #0]
   10080:	0007      	movs	r7, r0
   10082:	b25a      	sxtb	r2, r3
   10084:	9106      	str	r1, [sp, #24]
   10086:	4cc2      	ldr	r4, [pc, #776]	; (10390 <LORAWAN_RxDone+0x318>)
   10088:	2a00      	cmp	r2, #0
   1008a:	da01      	bge.n	10090 <LORAWAN_RxDone+0x18>
   1008c:	f000 fc86 	bl	1099c <LORAWAN_RxDone+0x924>
   10090:	7801      	ldrb	r1, [r0, #0]
   10092:	221f      	movs	r2, #31
   10094:	000e      	movs	r6, r1
   10096:	4396      	bics	r6, r2
   10098:	2e20      	cmp	r6, #32
   1009a:	d000      	beq.n	1009e <LORAWAN_RxDone+0x26>
   1009c:	e1ae      	b.n	103fc <LORAWAN_RxDone+0x384>
   1009e:	7822      	ldrb	r2, [r4, #0]
   100a0:	2a00      	cmp	r2, #0
   100a2:	d001      	beq.n	100a8 <LORAWAN_RxDone+0x30>
   100a4:	f000 fc66 	bl	10974 <LORAWAN_RxDone+0x8fc>
   100a8:	0022      	movs	r2, r4
   100aa:	3294      	adds	r2, #148	; 0x94
   100ac:	7812      	ldrb	r2, [r2, #0]
   100ae:	0752      	lsls	r2, r2, #29
   100b0:	d401      	bmi.n	100b6 <LORAWAN_RxDone+0x3e>
   100b2:	f000 fc5f 	bl	10974 <LORAWAN_RxDone+0x8fc>
   100b6:	9b06      	ldr	r3, [sp, #24]
   100b8:	3b01      	subs	r3, #1
   100ba:	b2db      	uxtb	r3, r3
   100bc:	9307      	str	r3, [sp, #28]
   100be:	4bb5      	ldr	r3, [pc, #724]	; (10394 <LORAWAN_RxDone+0x31c>)
   100c0:	469c      	mov	ip, r3
   100c2:	9b07      	ldr	r3, [sp, #28]
   100c4:	2b00      	cmp	r3, #0
   100c6:	d12c      	bne.n	10122 <LORAWAN_RxDone+0xaa>
   100c8:	9b06      	ldr	r3, [sp, #24]
   100ca:	4660      	mov	r0, ip
   100cc:	1f1d      	subs	r5, r3, #4
   100ce:	b2eb      	uxtb	r3, r5
   100d0:	9300      	str	r3, [sp, #0]
   100d2:	4ab1      	ldr	r2, [pc, #708]	; (10398 <LORAWAN_RxDone+0x320>)
   100d4:	003b      	movs	r3, r7
   100d6:	9907      	ldr	r1, [sp, #28]
   100d8:	4eb0      	ldr	r6, [pc, #704]	; (1039c <LORAWAN_RxDone+0x324>)
   100da:	47b0      	blx	r6
   100dc:	2204      	movs	r2, #4
   100de:	49ae      	ldr	r1, [pc, #696]	; (10398 <LORAWAN_RxDone+0x320>)
   100e0:	4baf      	ldr	r3, [pc, #700]	; (103a0 <LORAWAN_RxDone+0x328>)
   100e2:	a810      	add	r0, sp, #64	; 0x40
   100e4:	4798      	blx	r3
   100e6:	9e10      	ldr	r6, [sp, #64]	; 0x40
   100e8:	1979      	adds	r1, r7, r5
   100ea:	2204      	movs	r2, #4
   100ec:	4bac      	ldr	r3, [pc, #688]	; (103a0 <LORAWAN_RxDone+0x328>)
   100ee:	a810      	add	r0, sp, #64	; 0x40
   100f0:	960d      	str	r6, [sp, #52]	; 0x34
   100f2:	4798      	blx	r3
   100f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   100f6:	4ba6      	ldr	r3, [pc, #664]	; (10390 <LORAWAN_RxDone+0x318>)
   100f8:	210e      	movs	r1, #14
   100fa:	42b2      	cmp	r2, r6
   100fc:	d029      	beq.n	10152 <LORAWAN_RxDone+0xda>
   100fe:	001a      	movs	r2, r3
   10100:	3284      	adds	r2, #132	; 0x84
   10102:	7812      	ldrb	r2, [r2, #0]
   10104:	400a      	ands	r2, r1
   10106:	2a0a      	cmp	r2, #10
   10108:	d005      	beq.n	10116 <LORAWAN_RxDone+0x9e>
   1010a:	2a06      	cmp	r2, #6
   1010c:	d106      	bne.n	1011c <LORAWAN_RxDone+0xa4>
   1010e:	33f9      	adds	r3, #249	; 0xf9
   10110:	781b      	ldrb	r3, [r3, #0]
   10112:	2b00      	cmp	r3, #0
   10114:	d002      	beq.n	1011c <LORAWAN_RxDone+0xa4>
   10116:	2018      	movs	r0, #24
   10118:	4ba2      	ldr	r3, [pc, #648]	; (103a4 <LORAWAN_RxDone+0x32c>)
   1011a:	4798      	blx	r3
   1011c:	4ba2      	ldr	r3, [pc, #648]	; (103a8 <LORAWAN_RxDone+0x330>)
   1011e:	4798      	blx	r3
   10120:	e1d0      	b.n	104c4 <LORAWAN_RxDone+0x44c>
   10122:	9b06      	ldr	r3, [sp, #24]
   10124:	9a07      	ldr	r2, [sp, #28]
   10126:	2100      	movs	r1, #0
   10128:	1a98      	subs	r0, r3, r2
   1012a:	1838      	adds	r0, r7, r0
   1012c:	4662      	mov	r2, ip
   1012e:	4b9f      	ldr	r3, [pc, #636]	; (103ac <LORAWAN_RxDone+0x334>)
   10130:	4798      	blx	r3
   10132:	2800      	cmp	r0, #0
   10134:	d006      	beq.n	10144 <LORAWAN_RxDone+0xcc>
   10136:	4b9b      	ldr	r3, [pc, #620]	; (103a4 <LORAWAN_RxDone+0x32c>)
   10138:	4798      	blx	r3
   1013a:	4b9b      	ldr	r3, [pc, #620]	; (103a8 <LORAWAN_RxDone+0x330>)
   1013c:	4798      	blx	r3
   1013e:	201f      	movs	r0, #31
   10140:	b013      	add	sp, #76	; 0x4c
   10142:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10144:	9b07      	ldr	r3, [sp, #28]
   10146:	2b10      	cmp	r3, #16
   10148:	d901      	bls.n	1014e <LORAWAN_RxDone+0xd6>
   1014a:	3b10      	subs	r3, #16
   1014c:	e7b5      	b.n	100ba <LORAWAN_RxDone+0x42>
   1014e:	9007      	str	r0, [sp, #28]
   10150:	e7b5      	b.n	100be <LORAWAN_RxDone+0x46>
   10152:	001a      	movs	r2, r3
   10154:	3284      	adds	r2, #132	; 0x84
   10156:	7812      	ldrb	r2, [r2, #0]
   10158:	400a      	ands	r2, r1
   1015a:	2a06      	cmp	r2, #6
   1015c:	d103      	bne.n	10166 <LORAWAN_RxDone+0xee>
   1015e:	33ec      	adds	r3, #236	; 0xec
   10160:	7818      	ldrb	r0, [r3, #0]
   10162:	4b93      	ldr	r3, [pc, #588]	; (103b0 <LORAWAN_RxDone+0x338>)
   10164:	4798      	blx	r3
   10166:	7a3a      	ldrb	r2, [r7, #8]
   10168:	79fb      	ldrb	r3, [r7, #7]
   1016a:	0212      	lsls	r2, r2, #8
   1016c:	431a      	orrs	r2, r3
   1016e:	7a7b      	ldrb	r3, [r7, #9]
   10170:	2001      	movs	r0, #1
   10172:	041b      	lsls	r3, r3, #16
   10174:	431a      	orrs	r2, r3
   10176:	7abb      	ldrb	r3, [r7, #10]
   10178:	061b      	lsls	r3, r3, #24
   1017a:	4313      	orrs	r3, r2
   1017c:	0a19      	lsrs	r1, r3, #8
   1017e:	7063      	strb	r3, [r4, #1]
   10180:	70a1      	strb	r1, [r4, #2]
   10182:	0c19      	lsrs	r1, r3, #16
   10184:	0e1b      	lsrs	r3, r3, #24
   10186:	70e1      	strb	r1, [r4, #3]
   10188:	7123      	strb	r3, [r4, #4]
   1018a:	240f      	movs	r4, #15
   1018c:	2103      	movs	r1, #3
   1018e:	4b89      	ldr	r3, [pc, #548]	; (103b4 <LORAWAN_RxDone+0x33c>)
   10190:	4798      	blx	r3
   10192:	7b38      	ldrb	r0, [r7, #12]
   10194:	4b88      	ldr	r3, [pc, #544]	; (103b8 <LORAWAN_RxDone+0x340>)
   10196:	4020      	ands	r0, r4
   10198:	4798      	blx	r3
   1019a:	7af8      	ldrb	r0, [r7, #11]
   1019c:	4b87      	ldr	r3, [pc, #540]	; (103bc <LORAWAN_RxDone+0x344>)
   1019e:	0641      	lsls	r1, r0, #25
   101a0:	0700      	lsls	r0, r0, #28
   101a2:	0f49      	lsrs	r1, r1, #29
   101a4:	0f00      	lsrs	r0, r0, #28
   101a6:	4798      	blx	r3
   101a8:	4b85      	ldr	r3, [pc, #532]	; (103c0 <LORAWAN_RxDone+0x348>)
   101aa:	2100      	movs	r1, #0
   101ac:	203b      	movs	r0, #59	; 0x3b
   101ae:	4798      	blx	r3
   101b0:	9b06      	ldr	r3, [sp, #24]
   101b2:	2b21      	cmp	r3, #33	; 0x21
   101b4:	d000      	beq.n	101b8 <LORAWAN_RxDone+0x140>
   101b6:	e08c      	b.n	102d2 <LORAWAN_RxDone+0x25a>
   101b8:	251a      	movs	r5, #26
   101ba:	ab04      	add	r3, sp, #16
   101bc:	18ed      	adds	r5, r5, r3
   101be:	002a      	movs	r2, r5
   101c0:	4b80      	ldr	r3, [pc, #512]	; (103c4 <LORAWAN_RxDone+0x34c>)
   101c2:	4981      	ldr	r1, [pc, #516]	; (103c8 <LORAWAN_RxDone+0x350>)
   101c4:	2007      	movs	r0, #7
   101c6:	4798      	blx	r3
   101c8:	782b      	ldrb	r3, [r5, #0]
   101ca:	2bff      	cmp	r3, #255	; 0xff
   101cc:	d100      	bne.n	101d0 <LORAWAN_RxDone+0x158>
   101ce:	e080      	b.n	102d2 <LORAWAN_RxDone+0x25a>
   101d0:	2350      	movs	r3, #80	; 0x50
   101d2:	43a3      	bics	r3, r4
   101d4:	9308      	str	r3, [sp, #32]
   101d6:	003b      	movs	r3, r7
   101d8:	330d      	adds	r3, #13
   101da:	9306      	str	r3, [sp, #24]
   101dc:	2600      	movs	r6, #0
   101de:	2203      	movs	r2, #3
   101e0:	9906      	ldr	r1, [sp, #24]
   101e2:	4b6f      	ldr	r3, [pc, #444]	; (103a0 <LORAWAN_RxDone+0x328>)
   101e4:	a80e      	add	r0, sp, #56	; 0x38
   101e6:	960e      	str	r6, [sp, #56]	; 0x38
   101e8:	4798      	blx	r3
   101ea:	2364      	movs	r3, #100	; 0x64
   101ec:	990e      	ldr	r1, [sp, #56]	; 0x38
   101ee:	aa04      	add	r2, sp, #16
   101f0:	4359      	muls	r1, r3
   101f2:	3b4a      	subs	r3, #74	; 0x4a
   101f4:	189b      	adds	r3, r3, r2
   101f6:	7818      	ldrb	r0, [r3, #0]
   101f8:	9b07      	ldr	r3, [sp, #28]
   101fa:	910e      	str	r1, [sp, #56]	; 0x38
   101fc:	1818      	adds	r0, r3, r0
   101fe:	b2c0      	uxtb	r0, r0
   10200:	76d0      	strb	r0, [r2, #27]
   10202:	42b1      	cmp	r1, r6
   10204:	d100      	bne.n	10208 <LORAWAN_RxDone+0x190>
   10206:	e0a7      	b.n	10358 <LORAWAN_RxDone+0x2e0>
   10208:	466b      	mov	r3, sp
   1020a:	2220      	movs	r2, #32
   1020c:	189b      	adds	r3, r3, r2
   1020e:	781b      	ldrb	r3, [r3, #0]
   10210:	ad10      	add	r5, sp, #64	; 0x40
   10212:	ac0b      	add	r4, sp, #44	; 0x2c
   10214:	7128      	strb	r0, [r5, #4]
   10216:	9110      	str	r1, [sp, #64]	; 0x40
   10218:	7020      	strb	r0, [r4, #0]
   1021a:	7063      	strb	r3, [r4, #1]
   1021c:	0029      	movs	r1, r5
   1021e:	2002      	movs	r0, #2
   10220:	4b6a      	ldr	r3, [pc, #424]	; (103cc <LORAWAN_RxDone+0x354>)
   10222:	4798      	blx	r3
   10224:	2808      	cmp	r0, #8
   10226:	d140      	bne.n	102aa <LORAWAN_RxDone+0x232>
   10228:	0029      	movs	r1, r5
   1022a:	0030      	movs	r0, r6
   1022c:	4b64      	ldr	r3, [pc, #400]	; (103c0 <LORAWAN_RxDone+0x348>)
   1022e:	4798      	blx	r3
   10230:	ad0c      	add	r5, sp, #48	; 0x30
   10232:	0021      	movs	r1, r4
   10234:	4b62      	ldr	r3, [pc, #392]	; (103c0 <LORAWAN_RxDone+0x348>)
   10236:	2012      	movs	r0, #18
   10238:	4798      	blx	r3
   1023a:	0031      	movs	r1, r6
   1023c:	002a      	movs	r2, r5
   1023e:	4e61      	ldr	r6, [pc, #388]	; (103c4 <LORAWAN_RxDone+0x34c>)
   10240:	2014      	movs	r0, #20
   10242:	47b0      	blx	r6
   10244:	4c52      	ldr	r4, [pc, #328]	; (10390 <LORAWAN_RxDone+0x318>)
   10246:	782a      	ldrb	r2, [r5, #0]
   10248:	0023      	movs	r3, r4
   1024a:	33f3      	adds	r3, #243	; 0xf3
   1024c:	701a      	strb	r2, [r3, #0]
   1024e:	0023      	movs	r3, r4
   10250:	786a      	ldrb	r2, [r5, #1]
   10252:	2522      	movs	r5, #34	; 0x22
   10254:	33f4      	adds	r3, #244	; 0xf4
   10256:	701a      	strb	r2, [r3, #0]
   10258:	4b5d      	ldr	r3, [pc, #372]	; (103d0 <LORAWAN_RxDone+0x358>)
   1025a:	4798      	blx	r3
   1025c:	ab04      	add	r3, sp, #16
   1025e:	18ed      	adds	r5, r5, r3
   10260:	231b      	movs	r3, #27
   10262:	a904      	add	r1, sp, #16
   10264:	185b      	adds	r3, r3, r1
   10266:	0019      	movs	r1, r3
   10268:	002a      	movs	r2, r5
   1026a:	201e      	movs	r0, #30
   1026c:	47b0      	blx	r6
   1026e:	0023      	movs	r3, r4
   10270:	33ff      	adds	r3, #255	; 0xff
   10272:	7f5b      	ldrb	r3, [r3, #29]
   10274:	079b      	lsls	r3, r3, #30
   10276:	d508      	bpl.n	1028a <LORAWAN_RxDone+0x212>
   10278:	ab04      	add	r3, sp, #16
   1027a:	7edb      	ldrb	r3, [r3, #27]
   1027c:	a90f      	add	r1, sp, #60	; 0x3c
   1027e:	708b      	strb	r3, [r1, #2]
   10280:	882b      	ldrh	r3, [r5, #0]
   10282:	201e      	movs	r0, #30
   10284:	800b      	strh	r3, [r1, #0]
   10286:	4b4e      	ldr	r3, [pc, #312]	; (103c0 <LORAWAN_RxDone+0x348>)
   10288:	4798      	blx	r3
   1028a:	231b      	movs	r3, #27
   1028c:	aa04      	add	r2, sp, #16
   1028e:	189b      	adds	r3, r3, r2
   10290:	7818      	ldrb	r0, [r3, #0]
   10292:	2101      	movs	r1, #1
   10294:	4b4f      	ldr	r3, [pc, #316]	; (103d4 <LORAWAN_RxDone+0x35c>)
   10296:	4798      	blx	r3
   10298:	2204      	movs	r2, #4
   1029a:	3484      	adds	r4, #132	; 0x84
   1029c:	7863      	ldrb	r3, [r4, #1]
   1029e:	210b      	movs	r1, #11
   102a0:	4313      	orrs	r3, r2
   102a2:	7063      	strb	r3, [r4, #1]
   102a4:	2001      	movs	r0, #1
   102a6:	4b43      	ldr	r3, [pc, #268]	; (103b4 <LORAWAN_RxDone+0x33c>)
   102a8:	4798      	blx	r3
   102aa:	9b07      	ldr	r3, [sp, #28]
   102ac:	3301      	adds	r3, #1
   102ae:	b2db      	uxtb	r3, r3
   102b0:	9307      	str	r3, [sp, #28]
   102b2:	9b06      	ldr	r3, [sp, #24]
   102b4:	3303      	adds	r3, #3
   102b6:	9306      	str	r3, [sp, #24]
   102b8:	9b07      	ldr	r3, [sp, #28]
   102ba:	2b05      	cmp	r3, #5
   102bc:	d18e      	bne.n	101dc <LORAWAN_RxDone+0x164>
   102be:	2204      	movs	r2, #4
   102c0:	4b33      	ldr	r3, [pc, #204]	; (10390 <LORAWAN_RxDone+0x318>)
   102c2:	2001      	movs	r0, #1
   102c4:	3384      	adds	r3, #132	; 0x84
   102c6:	7859      	ldrb	r1, [r3, #1]
   102c8:	430a      	orrs	r2, r1
   102ca:	705a      	strb	r2, [r3, #1]
   102cc:	210b      	movs	r1, #11
   102ce:	4b39      	ldr	r3, [pc, #228]	; (103b4 <LORAWAN_RxDone+0x33c>)
   102d0:	4798      	blx	r3
   102d2:	4d41      	ldr	r5, [pc, #260]	; (103d8 <LORAWAN_RxDone+0x360>)
   102d4:	1c7e      	adds	r6, r7, #1
   102d6:	3704      	adds	r7, #4
   102d8:	0028      	movs	r0, r5
   102da:	003a      	movs	r2, r7
   102dc:	0031      	movs	r1, r6
   102de:	4b3f      	ldr	r3, [pc, #252]	; (103dc <LORAWAN_RxDone+0x364>)
   102e0:	4798      	blx	r3
   102e2:	2302      	movs	r3, #2
   102e4:	4c2a      	ldr	r4, [pc, #168]	; (10390 <LORAWAN_RxDone+0x318>)
   102e6:	0028      	movs	r0, r5
   102e8:	7563      	strb	r3, [r4, #21]
   102ea:	4a2a      	ldr	r2, [pc, #168]	; (10394 <LORAWAN_RxDone+0x31c>)
   102ec:	3b01      	subs	r3, #1
   102ee:	2100      	movs	r1, #0
   102f0:	4d3b      	ldr	r5, [pc, #236]	; (103e0 <LORAWAN_RxDone+0x368>)
   102f2:	47a8      	blx	r5
   102f4:	2800      	cmp	r0, #0
   102f6:	d003      	beq.n	10300 <LORAWAN_RxDone+0x288>
   102f8:	4b2a      	ldr	r3, [pc, #168]	; (103a4 <LORAWAN_RxDone+0x32c>)
   102fa:	4798      	blx	r3
   102fc:	4b2a      	ldr	r3, [pc, #168]	; (103a8 <LORAWAN_RxDone+0x330>)
   102fe:	4798      	blx	r3
   10300:	2105      	movs	r1, #5
   10302:	4b2c      	ldr	r3, [pc, #176]	; (103b4 <LORAWAN_RxDone+0x33c>)
   10304:	2001      	movs	r0, #1
   10306:	4798      	blx	r3
   10308:	4d36      	ldr	r5, [pc, #216]	; (103e4 <LORAWAN_RxDone+0x36c>)
   1030a:	003a      	movs	r2, r7
   1030c:	0028      	movs	r0, r5
   1030e:	0031      	movs	r1, r6
   10310:	4b32      	ldr	r3, [pc, #200]	; (103dc <LORAWAN_RxDone+0x364>)
   10312:	4798      	blx	r3
   10314:	2301      	movs	r3, #1
   10316:	0028      	movs	r0, r5
   10318:	7163      	strb	r3, [r4, #5]
   1031a:	4a1e      	ldr	r2, [pc, #120]	; (10394 <LORAWAN_RxDone+0x31c>)
   1031c:	18db      	adds	r3, r3, r3
   1031e:	2100      	movs	r1, #0
   10320:	4d2f      	ldr	r5, [pc, #188]	; (103e0 <LORAWAN_RxDone+0x368>)
   10322:	47a8      	blx	r5
   10324:	2800      	cmp	r0, #0
   10326:	d003      	beq.n	10330 <LORAWAN_RxDone+0x2b8>
   10328:	4b1e      	ldr	r3, [pc, #120]	; (103a4 <LORAWAN_RxDone+0x32c>)
   1032a:	4798      	blx	r3
   1032c:	4b1e      	ldr	r3, [pc, #120]	; (103a8 <LORAWAN_RxDone+0x330>)
   1032e:	4798      	blx	r3
   10330:	4b20      	ldr	r3, [pc, #128]	; (103b4 <LORAWAN_RxDone+0x33c>)
   10332:	2104      	movs	r1, #4
   10334:	2001      	movs	r0, #1
   10336:	4798      	blx	r3
   10338:	4b2b      	ldr	r3, [pc, #172]	; (103e8 <LORAWAN_RxDone+0x370>)
   1033a:	5ce3      	ldrb	r3, [r4, r3]
   1033c:	2b00      	cmp	r3, #0
   1033e:	d017      	beq.n	10370 <LORAWAN_RxDone+0x2f8>
   10340:	492a      	ldr	r1, [pc, #168]	; (103ec <LORAWAN_RxDone+0x374>)
   10342:	2002      	movs	r0, #2
   10344:	4c2a      	ldr	r4, [pc, #168]	; (103f0 <LORAWAN_RxDone+0x378>)
   10346:	47a0      	blx	r4
   10348:	2800      	cmp	r0, #0
   1034a:	d008      	beq.n	1035e <LORAWAN_RxDone+0x2e6>
   1034c:	4b15      	ldr	r3, [pc, #84]	; (103a4 <LORAWAN_RxDone+0x32c>)
   1034e:	4798      	blx	r3
   10350:	4b15      	ldr	r3, [pc, #84]	; (103a8 <LORAWAN_RxDone+0x330>)
   10352:	4798      	blx	r3
   10354:	2023      	movs	r0, #35	; 0x23
   10356:	e6f3      	b.n	10140 <LORAWAN_RxDone+0xc8>
   10358:	4b1e      	ldr	r3, [pc, #120]	; (103d4 <LORAWAN_RxDone+0x35c>)
   1035a:	4798      	blx	r3
   1035c:	e7a5      	b.n	102aa <LORAWAN_RxDone+0x232>
   1035e:	4925      	ldr	r1, [pc, #148]	; (103f4 <LORAWAN_RxDone+0x37c>)
   10360:	2001      	movs	r0, #1
   10362:	47a0      	blx	r4
   10364:	2800      	cmp	r0, #0
   10366:	d1f1      	bne.n	1034c <LORAWAN_RxDone+0x2d4>
   10368:	4b23      	ldr	r3, [pc, #140]	; (103f8 <LORAWAN_RxDone+0x380>)
   1036a:	4798      	blx	r3
   1036c:	2008      	movs	r0, #8
   1036e:	e6e7      	b.n	10140 <LORAWAN_RxDone+0xc8>
   10370:	0020      	movs	r0, r4
   10372:	0021      	movs	r1, r4
   10374:	2210      	movs	r2, #16
   10376:	3115      	adds	r1, #21
   10378:	4d09      	ldr	r5, [pc, #36]	; (103a0 <LORAWAN_RxDone+0x328>)
   1037a:	3035      	adds	r0, #53	; 0x35
   1037c:	47a8      	blx	r5
   1037e:	0020      	movs	r0, r4
   10380:	1d61      	adds	r1, r4, #5
   10382:	2210      	movs	r2, #16
   10384:	3025      	adds	r0, #37	; 0x25
   10386:	47a8      	blx	r5
   10388:	e7ee      	b.n	10368 <LORAWAN_RxDone+0x2f0>
   1038a:	46c0      	nop			; (mov r8, r8)
   1038c:	20003b58 	.word	0x20003b58
   10390:	20003ad4 	.word	0x20003ad4
   10394:	20003b19 	.word	0x20003b19
   10398:	20001df5 	.word	0x20001df5
   1039c:	00006989 	.word	0x00006989
   103a0:	00014fe3 	.word	0x00014fe3
   103a4:	0000ec59 	.word	0x0000ec59
   103a8:	0000fb0d 	.word	0x0000fb0d
   103ac:	00006951 	.word	0x00006951
   103b0:	0000bef1 	.word	0x0000bef1
   103b4:	00008755 	.word	0x00008755
   103b8:	0000e3e9 	.word	0x0000e3e9
   103bc:	0000eafd 	.word	0x0000eafd
   103c0:	0000b6c9 	.word	0x0000b6c9
   103c4:	0000b691 	.word	0x0000b691
   103c8:	20003bbb 	.word	0x20003bbb
   103cc:	0000b6ad 	.word	0x0000b6ad
   103d0:	0000fbd9 	.word	0x0000fbd9
   103d4:	00010029 	.word	0x00010029
   103d8:	20003ae9 	.word	0x20003ae9
   103dc:	0000e715 	.word	0x0000e715
   103e0:	00006979 	.word	0x00006979
   103e4:	20003ad9 	.word	0x20003ad9
   103e8:	0000022d 	.word	0x0000022d
   103ec:	20003af9 	.word	0x20003af9
   103f0:	00006985 	.word	0x00006985
   103f4:	20003b09 	.word	0x20003b09
   103f8:	0000e631 	.word	0x0000e631
   103fc:	22bf      	movs	r2, #191	; 0xbf
   103fe:	3e60      	subs	r6, #96	; 0x60
   10400:	4016      	ands	r6, r2
   10402:	d000      	beq.n	10406 <LORAWAN_RxDone+0x38e>
   10404:	e2b6      	b.n	10974 <LORAWAN_RxDone+0x8fc>
   10406:	2501      	movs	r5, #1
   10408:	422b      	tst	r3, r5
   1040a:	d100      	bne.n	1040e <LORAWAN_RxDone+0x396>
   1040c:	e2b2      	b.n	10974 <LORAWAN_RxDone+0x8fc>
   1040e:	7922      	ldrb	r2, [r4, #4]
   10410:	6823      	ldr	r3, [r4, #0]
   10412:	0612      	lsls	r2, r2, #24
   10414:	0a1b      	lsrs	r3, r3, #8
   10416:	431a      	orrs	r2, r3
   10418:	0023      	movs	r3, r4
   1041a:	33e0      	adds	r3, #224	; 0xe0
   1041c:	701e      	strb	r6, [r3, #0]
   1041e:	9207      	str	r2, [sp, #28]
   10420:	7882      	ldrb	r2, [r0, #2]
   10422:	7843      	ldrb	r3, [r0, #1]
   10424:	0212      	lsls	r2, r2, #8
   10426:	431a      	orrs	r2, r3
   10428:	78c3      	ldrb	r3, [r0, #3]
   1042a:	041b      	lsls	r3, r3, #16
   1042c:	431a      	orrs	r2, r3
   1042e:	7903      	ldrb	r3, [r0, #4]
   10430:	061b      	lsls	r3, r3, #24
   10432:	4313      	orrs	r3, r2
   10434:	9a07      	ldr	r2, [sp, #28]
   10436:	429a      	cmp	r2, r3
   10438:	d100      	bne.n	1043c <LORAWAN_RxDone+0x3c4>
   1043a:	e2cc      	b.n	109d6 <LORAWAN_RxDone+0x95e>
   1043c:	ab04      	add	r3, sp, #16
   1043e:	3521      	adds	r5, #33	; 0x21
   10440:	18ed      	adds	r5, r5, r3
   10442:	7a02      	ldrb	r2, [r0, #8]
   10444:	0949      	lsrs	r1, r1, #5
   10446:	002b      	movs	r3, r5
   10448:	4eda      	ldr	r6, [pc, #872]	; (107b4 <LORAWAN_RxDone+0x73c>)
   1044a:	47b0      	blx	r6
   1044c:	2808      	cmp	r0, #8
   1044e:	d131      	bne.n	104b4 <LORAWAN_RxDone+0x43c>
   10450:	233c      	movs	r3, #60	; 0x3c
   10452:	7829      	ldrb	r1, [r5, #0]
   10454:	434b      	muls	r3, r1
   10456:	001d      	movs	r5, r3
   10458:	3535      	adds	r5, #53	; 0x35
   1045a:	35ff      	adds	r5, #255	; 0xff
   1045c:	192d      	adds	r5, r5, r4
   1045e:	18e4      	adds	r4, r4, r3
   10460:	0023      	movs	r3, r4
   10462:	33fc      	adds	r3, #252	; 0xfc
   10464:	6b58      	ldr	r0, [r3, #52]	; 0x34
   10466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10468:	9308      	str	r3, [sp, #32]
   1046a:	79fb      	ldrb	r3, [r7, #7]
   1046c:	79ba      	ldrb	r2, [r7, #6]
   1046e:	021b      	lsls	r3, r3, #8
   10470:	4313      	orrs	r3, r2
   10472:	0022      	movs	r2, r4
   10474:	3255      	adds	r2, #85	; 0x55
   10476:	32ff      	adds	r2, #255	; 0xff
   10478:	8816      	ldrh	r6, [r2, #0]
   1047a:	429e      	cmp	r6, r3
   1047c:	d908      	bls.n	10490 <LORAWAN_RxDone+0x418>
   1047e:	3457      	adds	r4, #87	; 0x57
   10480:	34ff      	adds	r4, #255	; 0xff
   10482:	8823      	ldrh	r3, [r4, #0]
   10484:	3301      	adds	r3, #1
   10486:	8023      	strh	r3, [r4, #0]
   10488:	79fb      	ldrb	r3, [r7, #7]
   1048a:	79bc      	ldrb	r4, [r7, #6]
   1048c:	021b      	lsls	r3, r3, #8
   1048e:	4323      	orrs	r3, r4
   10490:	8013      	strh	r3, [r2, #0]
   10492:	9b06      	ldr	r3, [sp, #24]
   10494:	9000      	str	r0, [sp, #0]
   10496:	1f1a      	subs	r2, r3, #4
   10498:	233c      	movs	r3, #60	; 0x3c
   1049a:	434b      	muls	r3, r1
   1049c:	49c6      	ldr	r1, [pc, #792]	; (107b8 <LORAWAN_RxDone+0x740>)
   1049e:	b2d2      	uxtb	r2, r2
   104a0:	18c9      	adds	r1, r1, r3
   104a2:	31fc      	adds	r1, #252	; 0xfc
   104a4:	2349      	movs	r3, #73	; 0x49
   104a6:	6d89      	ldr	r1, [r1, #88]	; 0x58
   104a8:	2001      	movs	r0, #1
   104aa:	4cc4      	ldr	r4, [pc, #784]	; (107bc <LORAWAN_RxDone+0x744>)
   104ac:	47a0      	blx	r4
   104ae:	2301      	movs	r3, #1
   104b0:	9307      	str	r3, [sp, #28]
   104b2:	e2a6      	b.n	10a02 <LORAWAN_RxDone+0x98a>
   104b4:	220e      	movs	r2, #14
   104b6:	4bc2      	ldr	r3, [pc, #776]	; (107c0 <LORAWAN_RxDone+0x748>)
   104b8:	781b      	ldrb	r3, [r3, #0]
   104ba:	4013      	ands	r3, r2
   104bc:	2b0a      	cmp	r3, #10
   104be:	d008      	beq.n	104d2 <LORAWAN_RxDone+0x45a>
   104c0:	2b06      	cmp	r3, #6
   104c2:	d001      	beq.n	104c8 <LORAWAN_RxDone+0x450>
   104c4:	200a      	movs	r0, #10
   104c6:	e63b      	b.n	10140 <LORAWAN_RxDone+0xc8>
   104c8:	0023      	movs	r3, r4
   104ca:	33f9      	adds	r3, #249	; 0xf9
   104cc:	781b      	ldrb	r3, [r3, #0]
   104ce:	2b00      	cmp	r3, #0
   104d0:	d0f8      	beq.n	104c4 <LORAWAN_RxDone+0x44c>
   104d2:	2220      	movs	r2, #32
   104d4:	201e      	movs	r0, #30
   104d6:	3494      	adds	r4, #148	; 0x94
   104d8:	7823      	ldrb	r3, [r4, #0]
   104da:	4393      	bics	r3, r2
   104dc:	7023      	strb	r3, [r4, #0]
   104de:	4bb9      	ldr	r3, [pc, #740]	; (107c4 <LORAWAN_RxDone+0x74c>)
   104e0:	e61b      	b.n	1011a <LORAWAN_RxDone+0xa2>
   104e2:	0022      	movs	r2, r4
   104e4:	2102      	movs	r1, #2
   104e6:	e2a6      	b.n	10a36 <LORAWAN_RxDone+0x9be>
   104e8:	9b08      	ldr	r3, [sp, #32]
   104ea:	328c      	adds	r2, #140	; 0x8c
   104ec:	6013      	str	r3, [r2, #0]
   104ee:	e2e3      	b.n	10ab8 <LORAWAN_RxDone+0xa40>
   104f0:	9b07      	ldr	r3, [sp, #28]
   104f2:	4cb1      	ldr	r4, [pc, #708]	; (107b8 <LORAWAN_RxDone+0x740>)
   104f4:	2b00      	cmp	r3, #0
   104f6:	d000      	beq.n	104fa <LORAWAN_RxDone+0x482>
   104f8:	e224      	b.n	10944 <LORAWAN_RxDone+0x8cc>
   104fa:	466a      	mov	r2, sp
   104fc:	0023      	movs	r3, r4
   104fe:	7f12      	ldrb	r2, [r2, #28]
   10500:	33e3      	adds	r3, #227	; 0xe3
   10502:	701a      	strb	r2, [r3, #0]
   10504:	797b      	ldrb	r3, [r7, #5]
   10506:	2b7f      	cmp	r3, #127	; 0x7f
   10508:	d909      	bls.n	1051e <LORAWAN_RxDone+0x4a6>
   1050a:	0022      	movs	r2, r4
   1050c:	2320      	movs	r3, #32
   1050e:	3284      	adds	r2, #132	; 0x84
   10510:	7811      	ldrb	r1, [r2, #0]
   10512:	2001      	movs	r0, #1
   10514:	430b      	orrs	r3, r1
   10516:	7013      	strb	r3, [r2, #0]
   10518:	210b      	movs	r1, #11
   1051a:	4bab      	ldr	r3, [pc, #684]	; (107c8 <LORAWAN_RxDone+0x750>)
   1051c:	4798      	blx	r3
   1051e:	797b      	ldrb	r3, [r7, #5]
   10520:	06db      	lsls	r3, r3, #27
   10522:	d505      	bpl.n	10530 <LORAWAN_RxDone+0x4b8>
   10524:	0022      	movs	r2, r4
   10526:	2308      	movs	r3, #8
   10528:	3294      	adds	r2, #148	; 0x94
   1052a:	7811      	ldrb	r1, [r2, #0]
   1052c:	430b      	orrs	r3, r1
   1052e:	7013      	strb	r3, [r2, #0]
   10530:	797b      	ldrb	r3, [r7, #5]
   10532:	065b      	lsls	r3, r3, #25
   10534:	d505      	bpl.n	10542 <LORAWAN_RxDone+0x4ca>
   10536:	0022      	movs	r2, r4
   10538:	2310      	movs	r3, #16
   1053a:	3294      	adds	r2, #148	; 0x94
   1053c:	7811      	ldrb	r1, [r2, #0]
   1053e:	430b      	orrs	r3, r1
   10540:	7013      	strb	r3, [r2, #0]
   10542:	221f      	movs	r2, #31
   10544:	783b      	ldrb	r3, [r7, #0]
   10546:	4393      	bics	r3, r2
   10548:	2ba0      	cmp	r3, #160	; 0xa0
   1054a:	d105      	bne.n	10558 <LORAWAN_RxDone+0x4e0>
   1054c:	0022      	movs	r2, r4
   1054e:	3294      	adds	r2, #148	; 0x94
   10550:	7811      	ldrb	r1, [r2, #0]
   10552:	3b9e      	subs	r3, #158	; 0x9e
   10554:	430b      	orrs	r3, r1
   10556:	7013      	strb	r3, [r2, #0]
   10558:	7979      	ldrb	r1, [r7, #5]
   1055a:	070b      	lsls	r3, r1, #28
   1055c:	d100      	bne.n	10560 <LORAWAN_RxDone+0x4e8>
   1055e:	e0d4      	b.n	1070a <LORAWAN_RxDone+0x692>
   10560:	0709      	lsls	r1, r1, #28
   10562:	0f09      	lsrs	r1, r1, #28
   10564:	187b      	adds	r3, r7, r1
   10566:	7a1b      	ldrb	r3, [r3, #8]
   10568:	2b00      	cmp	r3, #0
   1056a:	d100      	bne.n	1056e <LORAWAN_RxDone+0x4f6>
   1056c:	e0a9      	b.n	106c2 <LORAWAN_RxDone+0x64a>
   1056e:	0038      	movs	r0, r7
   10570:	4b96      	ldr	r3, [pc, #600]	; (107cc <LORAWAN_RxDone+0x754>)
   10572:	3008      	adds	r0, #8
   10574:	4798      	blx	r3
   10576:	2301      	movs	r3, #1
   10578:	0006      	movs	r6, r0
   1057a:	9307      	str	r3, [sp, #28]
   1057c:	7978      	ldrb	r0, [r7, #5]
   1057e:	9906      	ldr	r1, [sp, #24]
   10580:	0703      	lsls	r3, r0, #28
   10582:	0f1b      	lsrs	r3, r3, #28
   10584:	001a      	movs	r2, r3
   10586:	320c      	adds	r2, #12
   10588:	4291      	cmp	r1, r2
   1058a:	d100      	bne.n	1058e <LORAWAN_RxDone+0x516>
   1058c:	e0f1      	b.n	10772 <LORAWAN_RxDone+0x6fa>
   1058e:	7832      	ldrb	r2, [r6, #0]
   10590:	1ac9      	subs	r1, r1, r3
   10592:	b2c9      	uxtb	r1, r1
   10594:	9208      	str	r2, [sp, #32]
   10596:	000a      	movs	r2, r1
   10598:	3319      	adds	r3, #25
   1059a:	3a0c      	subs	r2, #12
   1059c:	469c      	mov	ip, r3
   1059e:	9b08      	ldr	r3, [sp, #32]
   105a0:	b2d2      	uxtb	r2, r2
   105a2:	9206      	str	r2, [sp, #24]
   105a4:	1c75      	adds	r5, r6, #1
   105a6:	4a84      	ldr	r2, [pc, #528]	; (107b8 <LORAWAN_RxDone+0x740>)
   105a8:	2b00      	cmp	r3, #0
   105aa:	d100      	bne.n	105ae <LORAWAN_RxDone+0x536>
   105ac:	e0b0      	b.n	10710 <LORAWAN_RxDone+0x698>
   105ae:	6813      	ldr	r3, [r2, #0]
   105b0:	0010      	movs	r0, r2
   105b2:	7912      	ldrb	r2, [r2, #4]
   105b4:	0a1c      	lsrs	r4, r3, #8
   105b6:	0612      	lsls	r2, r2, #24
   105b8:	4322      	orrs	r2, r4
   105ba:	9204      	str	r2, [sp, #16]
   105bc:	4a84      	ldr	r2, [pc, #528]	; (107d0 <LORAWAN_RxDone+0x758>)
   105be:	4663      	mov	r3, ip
   105c0:	9203      	str	r2, [sp, #12]
   105c2:	466a      	mov	r2, sp
   105c4:	8493      	strh	r3, [r2, #36]	; 0x24
   105c6:	8c93      	ldrh	r3, [r2, #36]	; 0x24
   105c8:	2201      	movs	r2, #1
   105ca:	9302      	str	r3, [sp, #8]
   105cc:	4b81      	ldr	r3, [pc, #516]	; (107d4 <LORAWAN_RxDone+0x75c>)
   105ce:	308c      	adds	r0, #140	; 0x8c
   105d0:	390d      	subs	r1, #13
   105d2:	9201      	str	r2, [sp, #4]
   105d4:	9300      	str	r3, [sp, #0]
   105d6:	6803      	ldr	r3, [r0, #0]
   105d8:	b2c9      	uxtb	r1, r1
   105da:	0028      	movs	r0, r5
   105dc:	4c7e      	ldr	r4, [pc, #504]	; (107d8 <LORAWAN_RxDone+0x760>)
   105de:	47a0      	blx	r4
   105e0:	2800      	cmp	r0, #0
   105e2:	d004      	beq.n	105ee <LORAWAN_RxDone+0x576>
   105e4:	4b7d      	ldr	r3, [pc, #500]	; (107dc <LORAWAN_RxDone+0x764>)
   105e6:	4798      	blx	r3
   105e8:	201f      	movs	r0, #31
   105ea:	4b76      	ldr	r3, [pc, #472]	; (107c4 <LORAWAN_RxDone+0x74c>)
   105ec:	4798      	blx	r3
   105ee:	4c72      	ldr	r4, [pc, #456]	; (107b8 <LORAWAN_RxDone+0x740>)
   105f0:	2300      	movs	r3, #0
   105f2:	0022      	movs	r2, r4
   105f4:	32ca      	adds	r2, #202	; 0xca
   105f6:	8013      	strh	r3, [r2, #0]
   105f8:	0022      	movs	r2, r4
   105fa:	32f6      	adds	r2, #246	; 0xf6
   105fc:	7013      	strb	r3, [r2, #0]
   105fe:	0022      	movs	r2, r4
   10600:	2110      	movs	r1, #16
   10602:	3294      	adds	r2, #148	; 0x94
   10604:	7813      	ldrb	r3, [r2, #0]
   10606:	438b      	bics	r3, r1
   10608:	7013      	strb	r3, [r2, #0]
   1060a:	0023      	movs	r3, r4
   1060c:	2201      	movs	r2, #1
   1060e:	3384      	adds	r3, #132	; 0x84
   10610:	7859      	ldrb	r1, [r3, #1]
   10612:	430a      	orrs	r2, r1
   10614:	705a      	strb	r2, [r3, #1]
   10616:	220e      	movs	r2, #14
   10618:	781b      	ldrb	r3, [r3, #0]
   1061a:	4013      	ands	r3, r2
   1061c:	2b06      	cmp	r3, #6
   1061e:	d104      	bne.n	1062a <LORAWAN_RxDone+0x5b2>
   10620:	0023      	movs	r3, r4
   10622:	33ee      	adds	r3, #238	; 0xee
   10624:	7818      	ldrb	r0, [r3, #0]
   10626:	4b6e      	ldr	r3, [pc, #440]	; (107e0 <LORAWAN_RxDone+0x768>)
   10628:	4798      	blx	r3
   1062a:	0025      	movs	r5, r4
   1062c:	2201      	movs	r2, #1
   1062e:	3594      	adds	r5, #148	; 0x94
   10630:	782b      	ldrb	r3, [r5, #0]
   10632:	4213      	tst	r3, r2
   10634:	d100      	bne.n	10638 <LORAWAN_RxDone+0x5c0>
   10636:	e107      	b.n	10848 <LORAWAN_RxDone+0x7d0>
   10638:	797b      	ldrb	r3, [r7, #5]
   1063a:	321f      	adds	r2, #31
   1063c:	4213      	tst	r3, r2
   1063e:	d100      	bne.n	10642 <LORAWAN_RxDone+0x5ca>
   10640:	e0e8      	b.n	10814 <LORAWAN_RxDone+0x79c>
   10642:	4b68      	ldr	r3, [pc, #416]	; (107e4 <LORAWAN_RxDone+0x76c>)
   10644:	4798      	blx	r3
   10646:	0023      	movs	r3, r4
   10648:	2101      	movs	r1, #1
   1064a:	3384      	adds	r3, #132	; 0x84
   1064c:	785a      	ldrb	r2, [r3, #1]
   1064e:	438a      	bics	r2, r1
   10650:	705a      	strb	r2, [r3, #1]
   10652:	9a08      	ldr	r2, [sp, #32]
   10654:	2a00      	cmp	r2, #0
   10656:	d100      	bne.n	1065a <LORAWAN_RxDone+0x5e2>
   10658:	e093      	b.n	10782 <LORAWAN_RxDone+0x70a>
   1065a:	9a06      	ldr	r2, [sp, #24]
   1065c:	0031      	movs	r1, r6
   1065e:	0038      	movs	r0, r7
   10660:	4b61      	ldr	r3, [pc, #388]	; (107e8 <LORAWAN_RxDone+0x770>)
   10662:	4798      	blx	r3
   10664:	4b56      	ldr	r3, [pc, #344]	; (107c0 <LORAWAN_RxDone+0x748>)
   10666:	4d54      	ldr	r5, [pc, #336]	; (107b8 <LORAWAN_RxDone+0x740>)
   10668:	781b      	ldrb	r3, [r3, #0]
   1066a:	06db      	lsls	r3, r3, #27
   1066c:	d400      	bmi.n	10670 <LORAWAN_RxDone+0x5f8>
   1066e:	e160      	b.n	10932 <LORAWAN_RxDone+0x8ba>
   10670:	2220      	movs	r2, #32
   10672:	4b5e      	ldr	r3, [pc, #376]	; (107ec <LORAWAN_RxDone+0x774>)
   10674:	781b      	ldrb	r3, [r3, #0]
   10676:	401a      	ands	r2, r3
   10678:	9206      	str	r2, [sp, #24]
   1067a:	d000      	beq.n	1067e <LORAWAN_RxDone+0x606>
   1067c:	e159      	b.n	10932 <LORAWAN_RxDone+0x8ba>
   1067e:	320a      	adds	r2, #10
   10680:	4213      	tst	r3, r2
   10682:	d100      	bne.n	10686 <LORAWAN_RxDone+0x60e>
   10684:	e155      	b.n	10932 <LORAWAN_RxDone+0x8ba>
   10686:	002b      	movs	r3, r5
   10688:	33f5      	adds	r3, #245	; 0xf5
   1068a:	781b      	ldrb	r3, [r3, #0]
   1068c:	a90f      	add	r1, sp, #60	; 0x3c
   1068e:	704b      	strb	r3, [r1, #1]
   10690:	002e      	movs	r6, r5
   10692:	2301      	movs	r3, #1
   10694:	36e7      	adds	r6, #231	; 0xe7
   10696:	700b      	strb	r3, [r1, #0]
   10698:	7833      	ldrb	r3, [r6, #0]
   1069a:	aa0e      	add	r2, sp, #56	; 0x38
   1069c:	202f      	movs	r0, #47	; 0x2f
   1069e:	4f54      	ldr	r7, [pc, #336]	; (107f0 <LORAWAN_RxDone+0x778>)
   106a0:	708b      	strb	r3, [r1, #2]
   106a2:	47b8      	blx	r7
   106a4:	9007      	str	r0, [sp, #28]
   106a6:	2808      	cmp	r0, #8
   106a8:	d000      	beq.n	106ac <LORAWAN_RxDone+0x634>
   106aa:	e0fb      	b.n	108a4 <LORAWAN_RxDone+0x82c>
   106ac:	4b51      	ldr	r3, [pc, #324]	; (107f4 <LORAWAN_RxDone+0x77c>)
   106ae:	9806      	ldr	r0, [sp, #24]
   106b0:	4798      	blx	r3
   106b2:	4b4e      	ldr	r3, [pc, #312]	; (107ec <LORAWAN_RxDone+0x774>)
   106b4:	9a07      	ldr	r2, [sp, #28]
   106b6:	781b      	ldrb	r3, [r3, #0]
   106b8:	4393      	bics	r3, r2
   106ba:	4a4c      	ldr	r2, [pc, #304]	; (107ec <LORAWAN_RxDone+0x774>)
   106bc:	7013      	strb	r3, [r2, #0]
   106be:	2001      	movs	r0, #1
   106c0:	e53e      	b.n	10140 <LORAWAN_RxDone+0xc8>
   106c2:	0023      	movs	r3, r4
   106c4:	220e      	movs	r2, #14
   106c6:	3384      	adds	r3, #132	; 0x84
   106c8:	781b      	ldrb	r3, [r3, #0]
   106ca:	4013      	ands	r3, r2
   106cc:	2b06      	cmp	r3, #6
   106ce:	d101      	bne.n	106d4 <LORAWAN_RxDone+0x65c>
   106d0:	4b49      	ldr	r3, [pc, #292]	; (107f8 <LORAWAN_RxDone+0x780>)
   106d2:	4798      	blx	r3
   106d4:	4949      	ldr	r1, [pc, #292]	; (107fc <LORAWAN_RxDone+0x784>)
   106d6:	784a      	ldrb	r2, [r1, #1]
   106d8:	780b      	ldrb	r3, [r1, #0]
   106da:	0212      	lsls	r2, r2, #8
   106dc:	431a      	orrs	r2, r3
   106de:	788b      	ldrb	r3, [r1, #2]
   106e0:	041b      	lsls	r3, r3, #16
   106e2:	431a      	orrs	r2, r3
   106e4:	78cb      	ldrb	r3, [r1, #3]
   106e6:	061b      	lsls	r3, r3, #24
   106e8:	4313      	orrs	r3, r2
   106ea:	d008      	beq.n	106fe <LORAWAN_RxDone+0x686>
   106ec:	0022      	movs	r2, r4
   106ee:	2120      	movs	r1, #32
   106f0:	3294      	adds	r2, #148	; 0x94
   106f2:	7813      	ldrb	r3, [r2, #0]
   106f4:	201e      	movs	r0, #30
   106f6:	438b      	bics	r3, r1
   106f8:	7013      	strb	r3, [r2, #0]
   106fa:	4b32      	ldr	r3, [pc, #200]	; (107c4 <LORAWAN_RxDone+0x74c>)
   106fc:	4798      	blx	r3
   106fe:	2300      	movs	r3, #0
   10700:	34e0      	adds	r4, #224	; 0xe0
   10702:	7023      	strb	r3, [r4, #0]
   10704:	4b35      	ldr	r3, [pc, #212]	; (107dc <LORAWAN_RxDone+0x764>)
   10706:	4798      	blx	r3
   10708:	e7d9      	b.n	106be <LORAWAN_RxDone+0x646>
   1070a:	003e      	movs	r6, r7
   1070c:	3608      	adds	r6, #8
   1070e:	e735      	b.n	1057c <LORAWAN_RxDone+0x504>
   10710:	9b06      	ldr	r3, [sp, #24]
   10712:	2b00      	cmp	r3, #0
   10714:	d031      	beq.n	1077a <LORAWAN_RxDone+0x702>
   10716:	0703      	lsls	r3, r0, #28
   10718:	d1d3      	bne.n	106c2 <LORAWAN_RxDone+0x64a>
   1071a:	390d      	subs	r1, #13
   1071c:	6813      	ldr	r3, [r2, #0]
   1071e:	b2cc      	uxtb	r4, r1
   10720:	0011      	movs	r1, r2
   10722:	7912      	ldrb	r2, [r2, #4]
   10724:	0a18      	lsrs	r0, r3, #8
   10726:	0612      	lsls	r2, r2, #24
   10728:	4302      	orrs	r2, r0
   1072a:	9204      	str	r2, [sp, #16]
   1072c:	4a28      	ldr	r2, [pc, #160]	; (107d0 <LORAWAN_RxDone+0x758>)
   1072e:	4663      	mov	r3, ip
   10730:	9203      	str	r2, [sp, #12]
   10732:	466a      	mov	r2, sp
   10734:	8313      	strh	r3, [r2, #24]
   10736:	8b13      	ldrh	r3, [r2, #24]
   10738:	318c      	adds	r1, #140	; 0x8c
   1073a:	9302      	str	r3, [sp, #8]
   1073c:	2302      	movs	r3, #2
   1073e:	9301      	str	r3, [sp, #4]
   10740:	4b2f      	ldr	r3, [pc, #188]	; (10800 <LORAWAN_RxDone+0x788>)
   10742:	2201      	movs	r2, #1
   10744:	9300      	str	r3, [sp, #0]
   10746:	680b      	ldr	r3, [r1, #0]
   10748:	0028      	movs	r0, r5
   1074a:	0021      	movs	r1, r4
   1074c:	4e22      	ldr	r6, [pc, #136]	; (107d8 <LORAWAN_RxDone+0x760>)
   1074e:	47b0      	blx	r6
   10750:	2800      	cmp	r0, #0
   10752:	d004      	beq.n	1075e <LORAWAN_RxDone+0x6e6>
   10754:	4b21      	ldr	r3, [pc, #132]	; (107dc <LORAWAN_RxDone+0x764>)
   10756:	4798      	blx	r3
   10758:	201f      	movs	r0, #31
   1075a:	4b1a      	ldr	r3, [pc, #104]	; (107c4 <LORAWAN_RxDone+0x74c>)
   1075c:	4798      	blx	r3
   1075e:	4b1b      	ldr	r3, [pc, #108]	; (107cc <LORAWAN_RxDone+0x754>)
   10760:	0021      	movs	r1, r4
   10762:	0028      	movs	r0, r5
   10764:	4798      	blx	r3
   10766:	2300      	movs	r3, #0
   10768:	9306      	str	r3, [sp, #24]
   1076a:	3301      	adds	r3, #1
   1076c:	9307      	str	r3, [sp, #28]
   1076e:	2600      	movs	r6, #0
   10770:	e73d      	b.n	105ee <LORAWAN_RxDone+0x576>
   10772:	2600      	movs	r6, #0
   10774:	9608      	str	r6, [sp, #32]
   10776:	9606      	str	r6, [sp, #24]
   10778:	e739      	b.n	105ee <LORAWAN_RxDone+0x576>
   1077a:	9b06      	ldr	r3, [sp, #24]
   1077c:	9308      	str	r3, [sp, #32]
   1077e:	001e      	movs	r6, r3
   10780:	e735      	b.n	105ee <LORAWAN_RxDone+0x576>
   10782:	2120      	movs	r1, #32
   10784:	782a      	ldrb	r2, [r5, #0]
   10786:	438a      	bics	r2, r1
   10788:	702a      	strb	r2, [r5, #0]
   1078a:	0022      	movs	r2, r4
   1078c:	32fd      	adds	r2, #253	; 0xfd
   1078e:	7812      	ldrb	r2, [r2, #0]
   10790:	2a01      	cmp	r2, #1
   10792:	d137      	bne.n	10804 <LORAWAN_RxDone+0x78c>
   10794:	781a      	ldrb	r2, [r3, #0]
   10796:	3912      	subs	r1, #18
   10798:	438a      	bics	r2, r1
   1079a:	701a      	strb	r2, [r3, #0]
   1079c:	2388      	movs	r3, #136	; 0x88
   1079e:	4a06      	ldr	r2, [pc, #24]	; (107b8 <LORAWAN_RxDone+0x740>)
   107a0:	009b      	lsls	r3, r3, #2
   107a2:	5cd3      	ldrb	r3, [r2, r3]
   107a4:	2b00      	cmp	r3, #0
   107a6:	d000      	beq.n	107aa <LORAWAN_RxDone+0x732>
   107a8:	e75c      	b.n	10664 <LORAWAN_RxDone+0x5ec>
   107aa:	2008      	movs	r0, #8
   107ac:	4b05      	ldr	r3, [pc, #20]	; (107c4 <LORAWAN_RxDone+0x74c>)
   107ae:	4798      	blx	r3
   107b0:	e758      	b.n	10664 <LORAWAN_RxDone+0x5ec>
   107b2:	46c0      	nop			; (mov r8, r8)
   107b4:	000116ad 	.word	0x000116ad
   107b8:	20003ad4 	.word	0x20003ad4
   107bc:	0000e751 	.word	0x0000e751
   107c0:	20003b58 	.word	0x20003b58
   107c4:	0000f5f9 	.word	0x0000f5f9
   107c8:	00008755 	.word	0x00008755
   107cc:	0000fd95 	.word	0x0000fd95
   107d0:	20003898 	.word	0x20003898
   107d4:	20003b09 	.word	0x20003b09
   107d8:	0000f539 	.word	0x0000f539
   107dc:	0000fb0d 	.word	0x0000fb0d
   107e0:	0000bef1 	.word	0x0000bef1
   107e4:	0000ec05 	.word	0x0000ec05
   107e8:	0000f6a9 	.word	0x0000f6a9
   107ec:	20003b68 	.word	0x20003b68
   107f0:	0000b691 	.word	0x0000b691
   107f4:	0000e8b9 	.word	0x0000e8b9
   107f8:	0000e7e9 	.word	0x0000e7e9
   107fc:	20003e30 	.word	0x20003e30
   10800:	20003af9 	.word	0x20003af9
   10804:	2a04      	cmp	r2, #4
   10806:	d1c9      	bne.n	1079c <LORAWAN_RxDone+0x724>
   10808:	0023      	movs	r3, r4
   1080a:	33f1      	adds	r3, #241	; 0xf1
   1080c:	7818      	ldrb	r0, [r3, #0]
   1080e:	4bab      	ldr	r3, [pc, #684]	; (10abc <LORAWAN_RxDone+0xa44>)
   10810:	4798      	blx	r3
   10812:	e7c3      	b.n	1079c <LORAWAN_RxDone+0x724>
   10814:	9b07      	ldr	r3, [sp, #28]
   10816:	2b00      	cmp	r3, #0
   10818:	d013      	beq.n	10842 <LORAWAN_RxDone+0x7ca>
   1081a:	0023      	movs	r3, r4
   1081c:	33fd      	adds	r3, #253	; 0xfd
   1081e:	781e      	ldrb	r6, [r3, #0]
   10820:	2e01      	cmp	r6, #1
   10822:	d10e      	bne.n	10842 <LORAWAN_RxDone+0x7ca>
   10824:	4ba6      	ldr	r3, [pc, #664]	; (10ac0 <LORAWAN_RxDone+0xa48>)
   10826:	4798      	blx	r3
   10828:	0022      	movs	r2, r4
   1082a:	3284      	adds	r2, #132	; 0x84
   1082c:	7853      	ldrb	r3, [r2, #1]
   1082e:	43b3      	bics	r3, r6
   10830:	7053      	strb	r3, [r2, #1]
   10832:	2220      	movs	r2, #32
   10834:	782b      	ldrb	r3, [r5, #0]
   10836:	4393      	bics	r3, r2
   10838:	702b      	strb	r3, [r5, #0]
   1083a:	2388      	movs	r3, #136	; 0x88
   1083c:	009b      	lsls	r3, r3, #2
   1083e:	5ce3      	ldrb	r3, [r4, r3]
   10840:	e7b0      	b.n	107a4 <LORAWAN_RxDone+0x72c>
   10842:	4ba0      	ldr	r3, [pc, #640]	; (10ac4 <LORAWAN_RxDone+0xa4c>)
   10844:	4798      	blx	r3
   10846:	e70d      	b.n	10664 <LORAWAN_RxDone+0x5ec>
   10848:	9a08      	ldr	r2, [sp, #32]
   1084a:	2a00      	cmp	r2, #0
   1084c:	d00b      	beq.n	10866 <LORAWAN_RxDone+0x7ee>
   1084e:	9a06      	ldr	r2, [sp, #24]
   10850:	0031      	movs	r1, r6
   10852:	0038      	movs	r0, r7
   10854:	4b9c      	ldr	r3, [pc, #624]	; (10ac8 <LORAWAN_RxDone+0xa50>)
   10856:	4798      	blx	r3
   10858:	0022      	movs	r2, r4
   1085a:	2101      	movs	r1, #1
   1085c:	3284      	adds	r2, #132	; 0x84
   1085e:	7853      	ldrb	r3, [r2, #1]
   10860:	438b      	bics	r3, r1
   10862:	7053      	strb	r3, [r2, #1]
   10864:	e6fe      	b.n	10664 <LORAWAN_RxDone+0x5ec>
   10866:	2220      	movs	r2, #32
   10868:	4393      	bics	r3, r2
   1086a:	702b      	strb	r3, [r5, #0]
   1086c:	0023      	movs	r3, r4
   1086e:	33fd      	adds	r3, #253	; 0xfd
   10870:	781b      	ldrb	r3, [r3, #0]
   10872:	2b01      	cmp	r3, #1
   10874:	d10e      	bne.n	10894 <LORAWAN_RxDone+0x81c>
   10876:	0022      	movs	r2, r4
   10878:	210e      	movs	r1, #14
   1087a:	3284      	adds	r2, #132	; 0x84
   1087c:	7813      	ldrb	r3, [r2, #0]
   1087e:	438b      	bics	r3, r1
   10880:	7013      	strb	r3, [r2, #0]
   10882:	2388      	movs	r3, #136	; 0x88
   10884:	009b      	lsls	r3, r3, #2
   10886:	5ce3      	ldrb	r3, [r4, r3]
   10888:	2b00      	cmp	r3, #0
   1088a:	d1e5      	bne.n	10858 <LORAWAN_RxDone+0x7e0>
   1088c:	2008      	movs	r0, #8
   1088e:	4b8f      	ldr	r3, [pc, #572]	; (10acc <LORAWAN_RxDone+0xa54>)
   10890:	4798      	blx	r3
   10892:	e7e1      	b.n	10858 <LORAWAN_RxDone+0x7e0>
   10894:	2b04      	cmp	r3, #4
   10896:	d1f4      	bne.n	10882 <LORAWAN_RxDone+0x80a>
   10898:	0023      	movs	r3, r4
   1089a:	33f1      	adds	r3, #241	; 0xf1
   1089c:	7818      	ldrb	r0, [r3, #0]
   1089e:	4b87      	ldr	r3, [pc, #540]	; (10abc <LORAWAN_RxDone+0xa44>)
   108a0:	4798      	blx	r3
   108a2:	e7ee      	b.n	10882 <LORAWAN_RxDone+0x80a>
   108a4:	35ff      	adds	r5, #255	; 0xff
   108a6:	7f6b      	ldrb	r3, [r5, #29]
   108a8:	079a      	lsls	r2, r3, #30
   108aa:	d520      	bpl.n	108ee <LORAWAN_RxDone+0x876>
   108ac:	aa10      	add	r2, sp, #64	; 0x40
   108ae:	0031      	movs	r1, r6
   108b0:	2026      	movs	r0, #38	; 0x26
   108b2:	47b8      	blx	r7
   108b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   108b6:	1c5a      	adds	r2, r3, #1
   108b8:	d001      	beq.n	108be <LORAWAN_RxDone+0x846>
   108ba:	3314      	adds	r3, #20
   108bc:	9310      	str	r3, [sp, #64]	; 0x40
   108be:	0021      	movs	r1, r4
   108c0:	220e      	movs	r2, #14
   108c2:	3184      	adds	r1, #132	; 0x84
   108c4:	780b      	ldrb	r3, [r1, #0]
   108c6:	4393      	bics	r3, r2
   108c8:	001a      	movs	r2, r3
   108ca:	230c      	movs	r3, #12
   108cc:	4313      	orrs	r3, r2
   108ce:	700b      	strb	r3, [r1, #0]
   108d0:	4b7f      	ldr	r3, [pc, #508]	; (10ad0 <LORAWAN_RxDone+0xa58>)
   108d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   108d4:	5ce3      	ldrb	r3, [r4, r3]
   108d6:	21fa      	movs	r1, #250	; 0xfa
   108d8:	1ad3      	subs	r3, r2, r3
   108da:	2200      	movs	r2, #0
   108dc:	0089      	lsls	r1, r1, #2
   108de:	4359      	muls	r1, r3
   108e0:	34ef      	adds	r4, #239	; 0xef
   108e2:	4b7c      	ldr	r3, [pc, #496]	; (10ad4 <LORAWAN_RxDone+0xa5c>)
   108e4:	7820      	ldrb	r0, [r4, #0]
   108e6:	9200      	str	r2, [sp, #0]
   108e8:	4c7b      	ldr	r4, [pc, #492]	; (10ad8 <LORAWAN_RxDone+0xa60>)
   108ea:	47a0      	blx	r4
   108ec:	e6e7      	b.n	106be <LORAWAN_RxDone+0x646>
   108ee:	075b      	lsls	r3, r3, #29
   108f0:	d400      	bmi.n	108f4 <LORAWAN_RxDone+0x87c>
   108f2:	e6e4      	b.n	106be <LORAWAN_RxDone+0x646>
   108f4:	aa10      	add	r2, sp, #64	; 0x40
   108f6:	0031      	movs	r1, r6
   108f8:	2032      	movs	r0, #50	; 0x32
   108fa:	47b8      	blx	r7
   108fc:	220e      	movs	r2, #14
   108fe:	4b77      	ldr	r3, [pc, #476]	; (10adc <LORAWAN_RxDone+0xa64>)
   10900:	781b      	ldrb	r3, [r3, #0]
   10902:	4393      	bics	r3, r2
   10904:	001a      	movs	r2, r3
   10906:	230c      	movs	r3, #12
   10908:	4313      	orrs	r3, r2
   1090a:	4a74      	ldr	r2, [pc, #464]	; (10adc <LORAWAN_RxDone+0xa64>)
   1090c:	7013      	strb	r3, [r2, #0]
   1090e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10910:	1c5a      	adds	r2, r3, #1
   10912:	d001      	beq.n	10918 <LORAWAN_RxDone+0x8a0>
   10914:	3301      	adds	r3, #1
   10916:	9310      	str	r3, [sp, #64]	; 0x40
   10918:	4b6d      	ldr	r3, [pc, #436]	; (10ad0 <LORAWAN_RxDone+0xa58>)
   1091a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1091c:	5ce3      	ldrb	r3, [r4, r3]
   1091e:	21fa      	movs	r1, #250	; 0xfa
   10920:	1ad3      	subs	r3, r2, r3
   10922:	2200      	movs	r2, #0
   10924:	0089      	lsls	r1, r1, #2
   10926:	34f2      	adds	r4, #242	; 0xf2
   10928:	4359      	muls	r1, r3
   1092a:	7820      	ldrb	r0, [r4, #0]
   1092c:	4b6c      	ldr	r3, [pc, #432]	; (10ae0 <LORAWAN_RxDone+0xa68>)
   1092e:	9200      	str	r2, [sp, #0]
   10930:	e7da      	b.n	108e8 <LORAWAN_RxDone+0x870>
   10932:	35fd      	adds	r5, #253	; 0xfd
   10934:	782b      	ldrb	r3, [r5, #0]
   10936:	2b04      	cmp	r3, #4
   10938:	d000      	beq.n	1093c <LORAWAN_RxDone+0x8c4>
   1093a:	e6c0      	b.n	106be <LORAWAN_RxDone+0x646>
   1093c:	0038      	movs	r0, r7
   1093e:	4b69      	ldr	r3, [pc, #420]	; (10ae4 <LORAWAN_RxDone+0xa6c>)
   10940:	4798      	blx	r3
   10942:	e6bc      	b.n	106be <LORAWAN_RxDone+0x646>
   10944:	2390      	movs	r3, #144	; 0x90
   10946:	009b      	lsls	r3, r3, #2
   10948:	5ce3      	ldrb	r3, [r4, r3]
   1094a:	2b00      	cmp	r3, #0
   1094c:	d009      	beq.n	10962 <LORAWAN_RxDone+0x8ea>
   1094e:	2322      	movs	r3, #34	; 0x22
   10950:	aa04      	add	r2, sp, #16
   10952:	189b      	adds	r3, r3, r2
   10954:	781b      	ldrb	r3, [r3, #0]
   10956:	003a      	movs	r2, r7
   10958:	9906      	ldr	r1, [sp, #24]
   1095a:	0038      	movs	r0, r7
   1095c:	4c62      	ldr	r4, [pc, #392]	; (10ae8 <LORAWAN_RxDone+0xa70>)
   1095e:	47a0      	blx	r4
   10960:	e6ad      	b.n	106be <LORAWAN_RxDone+0x646>
   10962:	2220      	movs	r2, #32
   10964:	3494      	adds	r4, #148	; 0x94
   10966:	7823      	ldrb	r3, [r4, #0]
   10968:	201e      	movs	r0, #30
   1096a:	4393      	bics	r3, r2
   1096c:	7023      	strb	r3, [r4, #0]
   1096e:	4b57      	ldr	r3, [pc, #348]	; (10acc <LORAWAN_RxDone+0xa54>)
   10970:	4798      	blx	r3
   10972:	e6c7      	b.n	10704 <LORAWAN_RxDone+0x68c>
   10974:	220e      	movs	r2, #14
   10976:	4013      	ands	r3, r2
   10978:	2b0a      	cmp	r3, #10
   1097a:	d008      	beq.n	1098e <LORAWAN_RxDone+0x916>
   1097c:	2b06      	cmp	r3, #6
   1097e:	d000      	beq.n	10982 <LORAWAN_RxDone+0x90a>
   10980:	e5a0      	b.n	104c4 <LORAWAN_RxDone+0x44c>
   10982:	0023      	movs	r3, r4
   10984:	33f9      	adds	r3, #249	; 0xf9
   10986:	781b      	ldrb	r3, [r3, #0]
   10988:	2b00      	cmp	r3, #0
   1098a:	d100      	bne.n	1098e <LORAWAN_RxDone+0x916>
   1098c:	e59a      	b.n	104c4 <LORAWAN_RxDone+0x44c>
   1098e:	2220      	movs	r2, #32
   10990:	3494      	adds	r4, #148	; 0x94
   10992:	7823      	ldrb	r3, [r4, #0]
   10994:	2019      	movs	r0, #25
   10996:	4393      	bics	r3, r2
   10998:	7023      	strb	r3, [r4, #0]
   1099a:	e5a0      	b.n	104de <LORAWAN_RxDone+0x466>
   1099c:	4953      	ldr	r1, [pc, #332]	; (10aec <LORAWAN_RxDone+0xa74>)
   1099e:	784a      	ldrb	r2, [r1, #1]
   109a0:	780b      	ldrb	r3, [r1, #0]
   109a2:	0212      	lsls	r2, r2, #8
   109a4:	431a      	orrs	r2, r3
   109a6:	788b      	ldrb	r3, [r1, #2]
   109a8:	041b      	lsls	r3, r3, #16
   109aa:	431a      	orrs	r2, r3
   109ac:	78cb      	ldrb	r3, [r1, #3]
   109ae:	061b      	lsls	r3, r3, #24
   109b0:	4313      	orrs	r3, r2
   109b2:	d100      	bne.n	109b6 <LORAWAN_RxDone+0x93e>
   109b4:	e683      	b.n	106be <LORAWAN_RxDone+0x646>
   109b6:	4b4e      	ldr	r3, [pc, #312]	; (10af0 <LORAWAN_RxDone+0xa78>)
   109b8:	4c4e      	ldr	r4, [pc, #312]	; (10af4 <LORAWAN_RxDone+0xa7c>)
   109ba:	781b      	ldrb	r3, [r3, #0]
   109bc:	2b10      	cmp	r3, #16
   109be:	d105      	bne.n	109cc <LORAWAN_RxDone+0x954>
   109c0:	0001      	movs	r1, r0
   109c2:	2000      	movs	r0, #0
   109c4:	9a06      	ldr	r2, [sp, #24]
   109c6:	3b0c      	subs	r3, #12
   109c8:	47a0      	blx	r4
   109ca:	e678      	b.n	106be <LORAWAN_RxDone+0x646>
   109cc:	2300      	movs	r3, #0
   109ce:	0001      	movs	r1, r0
   109d0:	9a06      	ldr	r2, [sp, #24]
   109d2:	0018      	movs	r0, r3
   109d4:	e7f8      	b.n	109c8 <LORAWAN_RxDone+0x950>
   109d6:	348c      	adds	r4, #140	; 0x8c
   109d8:	6823      	ldr	r3, [r4, #0]
   109da:	0031      	movs	r1, r6
   109dc:	9308      	str	r3, [sp, #32]
   109de:	4b46      	ldr	r3, [pc, #280]	; (10af8 <LORAWAN_RxDone+0xa80>)
   109e0:	4798      	blx	r3
   109e2:	2808      	cmp	r0, #8
   109e4:	d001      	beq.n	109ea <LORAWAN_RxDone+0x972>
   109e6:	f7ff fbab 	bl	10140 <LORAWAN_RxDone+0xc8>
   109ea:	9b06      	ldr	r3, [sp, #24]
   109ec:	0028      	movs	r0, r5
   109ee:	1f1a      	subs	r2, r3, #4
   109f0:	9b07      	ldr	r3, [sp, #28]
   109f2:	b2d2      	uxtb	r2, r2
   109f4:	9300      	str	r3, [sp, #0]
   109f6:	6821      	ldr	r1, [r4, #0]
   109f8:	2349      	movs	r3, #73	; 0x49
   109fa:	4c40      	ldr	r4, [pc, #256]	; (10afc <LORAWAN_RxDone+0xa84>)
   109fc:	47a0      	blx	r4
   109fe:	4d40      	ldr	r5, [pc, #256]	; (10b00 <LORAWAN_RxDone+0xa88>)
   10a00:	9607      	str	r6, [sp, #28]
   10a02:	4e40      	ldr	r6, [pc, #256]	; (10b04 <LORAWAN_RxDone+0xa8c>)
   10a04:	4c40      	ldr	r4, [pc, #256]	; (10b08 <LORAWAN_RxDone+0xa90>)
   10a06:	2210      	movs	r2, #16
   10a08:	0021      	movs	r1, r4
   10a0a:	4b40      	ldr	r3, [pc, #256]	; (10b0c <LORAWAN_RxDone+0xa94>)
   10a0c:	0030      	movs	r0, r6
   10a0e:	4798      	blx	r3
   10a10:	9b06      	ldr	r3, [sp, #24]
   10a12:	0039      	movs	r1, r7
   10a14:	3b04      	subs	r3, #4
   10a16:	001a      	movs	r2, r3
   10a18:	9309      	str	r3, [sp, #36]	; 0x24
   10a1a:	483d      	ldr	r0, [pc, #244]	; (10b10 <LORAWAN_RxDone+0xa98>)
   10a1c:	4b3b      	ldr	r3, [pc, #236]	; (10b0c <LORAWAN_RxDone+0xa94>)
   10a1e:	4798      	blx	r3
   10a20:	9b06      	ldr	r3, [sp, #24]
   10a22:	9a07      	ldr	r2, [sp, #28]
   10a24:	330c      	adds	r3, #12
   10a26:	b29b      	uxth	r3, r3
   10a28:	9300      	str	r3, [sp, #0]
   10a2a:	0033      	movs	r3, r6
   10a2c:	2a00      	cmp	r2, #0
   10a2e:	d100      	bne.n	10a32 <LORAWAN_RxDone+0x9ba>
   10a30:	e557      	b.n	104e2 <LORAWAN_RxDone+0x46a>
   10a32:	0022      	movs	r2, r4
   10a34:	2104      	movs	r1, #4
   10a36:	4c37      	ldr	r4, [pc, #220]	; (10b14 <LORAWAN_RxDone+0xa9c>)
   10a38:	0028      	movs	r0, r5
   10a3a:	47a0      	blx	r4
   10a3c:	2204      	movs	r2, #4
   10a3e:	4932      	ldr	r1, [pc, #200]	; (10b08 <LORAWAN_RxDone+0xa90>)
   10a40:	4c32      	ldr	r4, [pc, #200]	; (10b0c <LORAWAN_RxDone+0xa94>)
   10a42:	a80d      	add	r0, sp, #52	; 0x34
   10a44:	47a0      	blx	r4
   10a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10a48:	2204      	movs	r2, #4
   10a4a:	18f9      	adds	r1, r7, r3
   10a4c:	a810      	add	r0, sp, #64	; 0x40
   10a4e:	47a0      	blx	r4
   10a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10a52:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10a54:	4293      	cmp	r3, r2
   10a56:	d100      	bne.n	10a5a <LORAWAN_RxDone+0x9e2>
   10a58:	e54a      	b.n	104f0 <LORAWAN_RxDone+0x478>
   10a5a:	9b07      	ldr	r3, [sp, #28]
   10a5c:	2b00      	cmp	r3, #0
   10a5e:	d108      	bne.n	10a72 <LORAWAN_RxDone+0x9fa>
   10a60:	220e      	movs	r2, #14
   10a62:	4b2d      	ldr	r3, [pc, #180]	; (10b18 <LORAWAN_RxDone+0xaa0>)
   10a64:	3384      	adds	r3, #132	; 0x84
   10a66:	781b      	ldrb	r3, [r3, #0]
   10a68:	4013      	ands	r3, r2
   10a6a:	2b06      	cmp	r3, #6
   10a6c:	d101      	bne.n	10a72 <LORAWAN_RxDone+0x9fa>
   10a6e:	4b2b      	ldr	r3, [pc, #172]	; (10b1c <LORAWAN_RxDone+0xaa4>)
   10a70:	4798      	blx	r3
   10a72:	491e      	ldr	r1, [pc, #120]	; (10aec <LORAWAN_RxDone+0xa74>)
   10a74:	784a      	ldrb	r2, [r1, #1]
   10a76:	780b      	ldrb	r3, [r1, #0]
   10a78:	0212      	lsls	r2, r2, #8
   10a7a:	431a      	orrs	r2, r3
   10a7c:	788b      	ldrb	r3, [r1, #2]
   10a7e:	041b      	lsls	r3, r3, #16
   10a80:	431a      	orrs	r2, r3
   10a82:	78cb      	ldrb	r3, [r1, #3]
   10a84:	061b      	lsls	r3, r3, #24
   10a86:	4313      	orrs	r3, r2
   10a88:	d101      	bne.n	10a8e <LORAWAN_RxDone+0xa16>
   10a8a:	f7ff fb47 	bl	1011c <LORAWAN_RxDone+0xa4>
   10a8e:	4a22      	ldr	r2, [pc, #136]	; (10b18 <LORAWAN_RxDone+0xaa0>)
   10a90:	2020      	movs	r0, #32
   10a92:	0011      	movs	r1, r2
   10a94:	3194      	adds	r1, #148	; 0x94
   10a96:	780b      	ldrb	r3, [r1, #0]
   10a98:	4383      	bics	r3, r0
   10a9a:	700b      	strb	r3, [r1, #0]
   10a9c:	9b07      	ldr	r3, [sp, #28]
   10a9e:	2b00      	cmp	r3, #0
   10aa0:	d100      	bne.n	10aa4 <LORAWAN_RxDone+0xa2c>
   10aa2:	e521      	b.n	104e8 <LORAWAN_RxDone+0x470>
   10aa4:	2322      	movs	r3, #34	; 0x22
   10aa6:	a904      	add	r1, sp, #16
   10aa8:	185b      	adds	r3, r3, r1
   10aaa:	7819      	ldrb	r1, [r3, #0]
   10aac:	233c      	movs	r3, #60	; 0x3c
   10aae:	434b      	muls	r3, r1
   10ab0:	18d3      	adds	r3, r2, r3
   10ab2:	9a08      	ldr	r2, [sp, #32]
   10ab4:	33fc      	adds	r3, #252	; 0xfc
   10ab6:	659a      	str	r2, [r3, #88]	; 0x58
   10ab8:	2018      	movs	r0, #24
   10aba:	e510      	b.n	104de <LORAWAN_RxDone+0x466>
   10abc:	0000bef1 	.word	0x0000bef1
   10ac0:	0000ec05 	.word	0x0000ec05
   10ac4:	0000eb69 	.word	0x0000eb69
   10ac8:	0000f6a9 	.word	0x0000f6a9
   10acc:	0000f5f9 	.word	0x0000f5f9
   10ad0:	0000022b 	.word	0x0000022b
   10ad4:	0000e9b1 	.word	0x0000e9b1
   10ad8:	0000bbd9 	.word	0x0000bbd9
   10adc:	20003b58 	.word	0x20003b58
   10ae0:	0000f411 	.word	0x0000f411
   10ae4:	0001152d 	.word	0x0001152d
   10ae8:	00011721 	.word	0x00011721
   10aec:	20003e30 	.word	0x20003e30
   10af0:	2000218f 	.word	0x2000218f
   10af4:	0000f65d 	.word	0x0000f65d
   10af8:	0000fb49 	.word	0x0000fb49
   10afc:	0000e751 	.word	0x0000e751
   10b00:	20003af9 	.word	0x20003af9
   10b04:	20003898 	.word	0x20003898
   10b08:	20001df5 	.word	0x20001df5
   10b0c:	00014fe3 	.word	0x00014fe3
   10b10:	200038a8 	.word	0x200038a8
   10b14:	00006989 	.word	0x00006989
   10b18:	20003ad4 	.word	0x20003ad4
   10b1c:	0000e7e9 	.word	0x0000e7e9

00010b20 <LorawanSetEdClass>:
   10b20:	2388      	movs	r3, #136	; 0x88
   10b22:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10b24:	4d1a      	ldr	r5, [pc, #104]	; (10b90 <LorawanSetEdClass+0x70>)
   10b26:	009b      	lsls	r3, r3, #2
   10b28:	5ceb      	ldrb	r3, [r5, r3]
   10b2a:	0004      	movs	r4, r0
   10b2c:	2011      	movs	r0, #17
   10b2e:	2b00      	cmp	r3, #0
   10b30:	d013      	beq.n	10b5a <LorawanSetEdClass+0x3a>
   10b32:	002b      	movs	r3, r5
   10b34:	33fe      	adds	r3, #254	; 0xfe
   10b36:	781b      	ldrb	r3, [r3, #0]
   10b38:	3807      	subs	r0, #7
   10b3a:	4223      	tst	r3, r4
   10b3c:	d00d      	beq.n	10b5a <LorawanSetEdClass+0x3a>
   10b3e:	002b      	movs	r3, r5
   10b40:	33fd      	adds	r3, #253	; 0xfd
   10b42:	7819      	ldrb	r1, [r3, #0]
   10b44:	428c      	cmp	r4, r1
   10b46:	d007      	beq.n	10b58 <LorawanSetEdClass+0x38>
   10b48:	2901      	cmp	r1, #1
   10b4a:	d107      	bne.n	10b5c <LorawanSetEdClass+0x3c>
   10b4c:	2c04      	cmp	r4, #4
   10b4e:	d104      	bne.n	10b5a <LorawanSetEdClass+0x3a>
   10b50:	701c      	strb	r4, [r3, #0]
   10b52:	2000      	movs	r0, #0
   10b54:	4b0f      	ldr	r3, [pc, #60]	; (10b94 <LorawanSetEdClass+0x74>)
   10b56:	4798      	blx	r3
   10b58:	2008      	movs	r0, #8
   10b5a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10b5c:	2904      	cmp	r1, #4
   10b5e:	d1fc      	bne.n	10b5a <LorawanSetEdClass+0x3a>
   10b60:	2c01      	cmp	r4, #1
   10b62:	d1fa      	bne.n	10b5a <LorawanSetEdClass+0x3a>
   10b64:	701c      	strb	r4, [r3, #0]
   10b66:	0021      	movs	r1, r4
   10b68:	4b0a      	ldr	r3, [pc, #40]	; (10b94 <LorawanSetEdClass+0x74>)
   10b6a:	2000      	movs	r0, #0
   10b6c:	4798      	blx	r3
   10b6e:	002a      	movs	r2, r5
   10b70:	210e      	movs	r1, #14
   10b72:	3284      	adds	r2, #132	; 0x84
   10b74:	7813      	ldrb	r3, [r2, #0]
   10b76:	a801      	add	r0, sp, #4
   10b78:	438b      	bics	r3, r1
   10b7a:	7013      	strb	r3, [r2, #0]
   10b7c:	4b06      	ldr	r3, [pc, #24]	; (10b98 <LorawanSetEdClass+0x78>)
   10b7e:	7004      	strb	r4, [r0, #0]
   10b80:	4798      	blx	r3
   10b82:	2394      	movs	r3, #148	; 0x94
   10b84:	005b      	lsls	r3, r3, #1
   10b86:	5ce8      	ldrb	r0, [r5, r3]
   10b88:	4b04      	ldr	r3, [pc, #16]	; (10b9c <LorawanSetEdClass+0x7c>)
   10b8a:	4798      	blx	r3
   10b8c:	e7e4      	b.n	10b58 <LorawanSetEdClass+0x38>
   10b8e:	46c0      	nop			; (mov r8, r8)
   10b90:	20003ad4 	.word	0x20003ad4
   10b94:	00008755 	.word	0x00008755
   10b98:	0000dd29 	.word	0x0000dd29
   10b9c:	0000bef1 	.word	0x0000bef1

00010ba0 <LORAWAN_SetAttr>:
   10ba0:	2388      	movs	r3, #136	; 0x88
   10ba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10ba4:	4cbb      	ldr	r4, [pc, #748]	; (10e94 <LORAWAN_SetAttr+0x2f4>)
   10ba6:	009b      	lsls	r3, r3, #2
   10ba8:	5ce3      	ldrb	r3, [r4, r3]
   10baa:	000d      	movs	r5, r1
   10bac:	2611      	movs	r6, #17
   10bae:	2b00      	cmp	r3, #0
   10bb0:	d100      	bne.n	10bb4 <LORAWAN_SetAttr+0x14>
   10bb2:	e11f      	b.n	10df4 <LORAWAN_SetAttr+0x254>
   10bb4:	2846      	cmp	r0, #70	; 0x46
   10bb6:	d878      	bhi.n	10caa <LORAWAN_SetAttr+0x10a>
   10bb8:	f001 f8d8 	bl	11d6c <__gnu_thumb1_case_uhi>
   10bbc:	00930047 	.word	0x00930047
   10bc0:	00fc00b2 	.word	0x00fc00b2
   10bc4:	00e600c5 	.word	0x00e600c5
   10bc8:	0134011e 	.word	0x0134011e
   10bcc:	01660154 	.word	0x01660154
   10bd0:	01830178 	.word	0x01830178
   10bd4:	01a6018d 	.word	0x01a6018d
   10bd8:	007701ab 	.word	0x007701ab
   10bdc:	01b501b0 	.word	0x01b501b0
   10be0:	01bf01ba 	.word	0x01bf01ba
   10be4:	01e601c4 	.word	0x01e601c4
   10be8:	01cb01eb 	.word	0x01cb01eb
   10bec:	01fc01c8 	.word	0x01fc01c8
   10bf0:	01e101f8 	.word	0x01e101f8
   10bf4:	01d701dd 	.word	0x01d701dd
   10bf8:	00770077 	.word	0x00770077
   10bfc:	0077019e 	.word	0x0077019e
   10c00:	00770077 	.word	0x00770077
   10c04:	00770077 	.word	0x00770077
   10c08:	02000077 	.word	0x02000077
   10c0c:	02030066 	.word	0x02030066
   10c10:	020d0211 	.word	0x020d0211
   10c14:	00770208 	.word	0x00770208
   10c18:	02190215 	.word	0x02190215
   10c1c:	0221021d 	.word	0x0221021d
   10c20:	02290225 	.word	0x02290225
   10c24:	00770249 	.word	0x00770249
   10c28:	00770077 	.word	0x00770077
   10c2c:	00770077 	.word	0x00770077
   10c30:	00770077 	.word	0x00770077
   10c34:	00770077 	.word	0x00770077
   10c38:	02600077 	.word	0x02600077
   10c3c:	026e026a 	.word	0x026e026a
   10c40:	00770077 	.word	0x00770077
   10c44:	02730077 	.word	0x02730077
   10c48:	0271      	.short	0x0271
   10c4a:	260a      	movs	r6, #10
   10c4c:	2900      	cmp	r1, #0
   10c4e:	d100      	bne.n	10c52 <LORAWAN_SetAttr+0xb2>
   10c50:	e0d0      	b.n	10df4 <LORAWAN_SetAttr+0x254>
   10c52:	0020      	movs	r0, r4
   10c54:	2208      	movs	r2, #8
   10c56:	4b90      	ldr	r3, [pc, #576]	; (10e98 <LORAWAN_SetAttr+0x2f8>)
   10c58:	305d      	adds	r0, #93	; 0x5d
   10c5a:	4798      	blx	r3
   10c5c:	2108      	movs	r1, #8
   10c5e:	4e8f      	ldr	r6, [pc, #572]	; (10e9c <LORAWAN_SetAttr+0x2fc>)
   10c60:	2001      	movs	r0, #1
   10c62:	47b0      	blx	r6
   10c64:	0022      	movs	r2, r4
   10c66:	2501      	movs	r5, #1
   10c68:	32de      	adds	r2, #222	; 0xde
   10c6a:	7813      	ldrb	r3, [r2, #0]
   10c6c:	2109      	movs	r1, #9
   10c6e:	432b      	orrs	r3, r5
   10c70:	3484      	adds	r4, #132	; 0x84
   10c72:	0028      	movs	r0, r5
   10c74:	7013      	strb	r3, [r2, #0]
   10c76:	47b0      	blx	r6
   10c78:	7823      	ldrb	r3, [r4, #0]
   10c7a:	210b      	movs	r1, #11
   10c7c:	43ab      	bics	r3, r5
   10c7e:	0028      	movs	r0, r5
   10c80:	7023      	strb	r3, [r4, #0]
   10c82:	47b0      	blx	r6
   10c84:	2608      	movs	r6, #8
   10c86:	e0b5      	b.n	10df4 <LORAWAN_SetAttr+0x254>
   10c88:	0023      	movs	r3, r4
   10c8a:	33ff      	adds	r3, #255	; 0xff
   10c8c:	7f5b      	ldrb	r3, [r3, #29]
   10c8e:	260a      	movs	r6, #10
   10c90:	075b      	lsls	r3, r3, #29
   10c92:	d400      	bmi.n	10c96 <LORAWAN_SetAttr+0xf6>
   10c94:	e0ae      	b.n	10df4 <LORAWAN_SetAttr+0x254>
   10c96:	79ca      	ldrb	r2, [r1, #7]
   10c98:	4b81      	ldr	r3, [pc, #516]	; (10ea0 <LORAWAN_SetAttr+0x300>)
   10c9a:	2a00      	cmp	r2, #0
   10c9c:	d10e      	bne.n	10cbc <LORAWAN_SetAttr+0x11c>
   10c9e:	4669      	mov	r1, sp
   10ca0:	201d      	movs	r0, #29
   10ca2:	714a      	strb	r2, [r1, #5]
   10ca4:	4798      	blx	r3
   10ca6:	2800      	cmp	r0, #0
   10ca8:	d001      	beq.n	10cae <LORAWAN_SetAttr+0x10e>
   10caa:	260a      	movs	r6, #10
   10cac:	e0a2      	b.n	10df4 <LORAWAN_SetAttr+0x254>
   10cae:	2109      	movs	r1, #9
   10cb0:	34fe      	adds	r4, #254	; 0xfe
   10cb2:	8460      	strh	r0, [r4, #34]	; 0x22
   10cb4:	8420      	strh	r0, [r4, #32]
   10cb6:	4b79      	ldr	r3, [pc, #484]	; (10e9c <LORAWAN_SetAttr+0x2fc>)
   10cb8:	4798      	blx	r3
   10cba:	e7e3      	b.n	10c84 <LORAWAN_SetAttr+0xe4>
   10cbc:	2002      	movs	r0, #2
   10cbe:	5e2a      	ldrsh	r2, [r5, r0]
   10cc0:	88ae      	ldrh	r6, [r5, #4]
   10cc2:	79a8      	ldrb	r0, [r5, #6]
   10cc4:	466d      	mov	r5, sp
   10cc6:	806a      	strh	r2, [r5, #2]
   10cc8:	2201      	movs	r2, #1
   10cca:	8809      	ldrh	r1, [r1, #0]
   10ccc:	7128      	strb	r0, [r5, #4]
   10cce:	8029      	strh	r1, [r5, #0]
   10cd0:	201d      	movs	r0, #29
   10cd2:	4669      	mov	r1, sp
   10cd4:	716a      	strb	r2, [r5, #5]
   10cd6:	4798      	blx	r3
   10cd8:	2800      	cmp	r0, #0
   10cda:	d1e6      	bne.n	10caa <LORAWAN_SetAttr+0x10a>
   10cdc:	34fe      	adds	r4, #254	; 0xfe
   10cde:	8466      	strh	r6, [r4, #34]	; 0x22
   10ce0:	e7d0      	b.n	10c84 <LORAWAN_SetAttr+0xe4>
   10ce2:	260a      	movs	r6, #10
   10ce4:	2900      	cmp	r1, #0
   10ce6:	d100      	bne.n	10cea <LORAWAN_SetAttr+0x14a>
   10ce8:	e084      	b.n	10df4 <LORAWAN_SetAttr+0x254>
   10cea:	0020      	movs	r0, r4
   10cec:	2208      	movs	r2, #8
   10cee:	4b6a      	ldr	r3, [pc, #424]	; (10e98 <LORAWAN_SetAttr+0x2f8>)
   10cf0:	3055      	adds	r0, #85	; 0x55
   10cf2:	4798      	blx	r3
   10cf4:	2107      	movs	r1, #7
   10cf6:	4d69      	ldr	r5, [pc, #420]	; (10e9c <LORAWAN_SetAttr+0x2fc>)
   10cf8:	2001      	movs	r0, #1
   10cfa:	47a8      	blx	r5
   10cfc:	0022      	movs	r2, r4
   10cfe:	2302      	movs	r3, #2
   10d00:	32de      	adds	r2, #222	; 0xde
   10d02:	7811      	ldrb	r1, [r2, #0]
   10d04:	2001      	movs	r0, #1
   10d06:	430b      	orrs	r3, r1
   10d08:	2109      	movs	r1, #9
   10d0a:	7013      	strb	r3, [r2, #0]
   10d0c:	47a8      	blx	r5
   10d0e:	2001      	movs	r0, #1
   10d10:	3484      	adds	r4, #132	; 0x84
   10d12:	7823      	ldrb	r3, [r4, #0]
   10d14:	210b      	movs	r1, #11
   10d16:	4383      	bics	r3, r0
   10d18:	7023      	strb	r3, [r4, #0]
   10d1a:	47a8      	blx	r5
   10d1c:	3e02      	subs	r6, #2
   10d1e:	e069      	b.n	10df4 <LORAWAN_SetAttr+0x254>
   10d20:	680b      	ldr	r3, [r1, #0]
   10d22:	2001      	movs	r0, #1
   10d24:	0a19      	lsrs	r1, r3, #8
   10d26:	70a1      	strb	r1, [r4, #2]
   10d28:	0c19      	lsrs	r1, r3, #16
   10d2a:	7063      	strb	r3, [r4, #1]
   10d2c:	70e1      	strb	r1, [r4, #3]
   10d2e:	0e1b      	lsrs	r3, r3, #24
   10d30:	2103      	movs	r1, #3
   10d32:	4d5a      	ldr	r5, [pc, #360]	; (10e9c <LORAWAN_SetAttr+0x2fc>)
   10d34:	7123      	strb	r3, [r4, #4]
   10d36:	47a8      	blx	r5
   10d38:	0022      	movs	r2, r4
   10d3a:	2304      	movs	r3, #4
   10d3c:	32de      	adds	r2, #222	; 0xde
   10d3e:	7811      	ldrb	r1, [r2, #0]
   10d40:	430b      	orrs	r3, r1
   10d42:	7013      	strb	r3, [r2, #0]
   10d44:	e015      	b.n	10d72 <LORAWAN_SetAttr+0x1d2>
   10d46:	260a      	movs	r6, #10
   10d48:	2900      	cmp	r1, #0
   10d4a:	d053      	beq.n	10df4 <LORAWAN_SetAttr+0x254>
   10d4c:	3606      	adds	r6, #6
   10d4e:	0032      	movs	r2, r6
   10d50:	4f51      	ldr	r7, [pc, #324]	; (10e98 <LORAWAN_SetAttr+0x2f8>)
   10d52:	1d60      	adds	r0, r4, #5
   10d54:	47b8      	blx	r7
   10d56:	0020      	movs	r0, r4
   10d58:	0032      	movs	r2, r6
   10d5a:	0029      	movs	r1, r5
   10d5c:	3025      	adds	r0, #37	; 0x25
   10d5e:	47b8      	blx	r7
   10d60:	2104      	movs	r1, #4
   10d62:	2001      	movs	r0, #1
   10d64:	4d4d      	ldr	r5, [pc, #308]	; (10e9c <LORAWAN_SetAttr+0x2fc>)
   10d66:	47a8      	blx	r5
   10d68:	0023      	movs	r3, r4
   10d6a:	33de      	adds	r3, #222	; 0xde
   10d6c:	781a      	ldrb	r2, [r3, #0]
   10d6e:	4316      	orrs	r6, r2
   10d70:	701e      	strb	r6, [r3, #0]
   10d72:	2109      	movs	r1, #9
   10d74:	2001      	movs	r0, #1
   10d76:	47a8      	blx	r5
   10d78:	2001      	movs	r0, #1
   10d7a:	210b      	movs	r1, #11
   10d7c:	3484      	adds	r4, #132	; 0x84
   10d7e:	7823      	ldrb	r3, [r4, #0]
   10d80:	4383      	bics	r3, r0
   10d82:	7023      	strb	r3, [r4, #0]
   10d84:	47a8      	blx	r5
   10d86:	e77d      	b.n	10c84 <LORAWAN_SetAttr+0xe4>
   10d88:	260a      	movs	r6, #10
   10d8a:	2900      	cmp	r1, #0
   10d8c:	d032      	beq.n	10df4 <LORAWAN_SetAttr+0x254>
   10d8e:	0020      	movs	r0, r4
   10d90:	2210      	movs	r2, #16
   10d92:	4e41      	ldr	r6, [pc, #260]	; (10e98 <LORAWAN_SetAttr+0x2f8>)
   10d94:	3015      	adds	r0, #21
   10d96:	47b0      	blx	r6
   10d98:	0020      	movs	r0, r4
   10d9a:	2210      	movs	r2, #16
   10d9c:	0029      	movs	r1, r5
   10d9e:	3035      	adds	r0, #53	; 0x35
   10da0:	47b0      	blx	r6
   10da2:	2105      	movs	r1, #5
   10da4:	2001      	movs	r0, #1
   10da6:	4d3d      	ldr	r5, [pc, #244]	; (10e9c <LORAWAN_SetAttr+0x2fc>)
   10da8:	47a8      	blx	r5
   10daa:	0022      	movs	r2, r4
   10dac:	32de      	adds	r2, #222	; 0xde
   10dae:	7811      	ldrb	r1, [r2, #0]
   10db0:	2320      	movs	r3, #32
   10db2:	e7c5      	b.n	10d40 <LORAWAN_SetAttr+0x1a0>
   10db4:	260a      	movs	r6, #10
   10db6:	2900      	cmp	r1, #0
   10db8:	d01c      	beq.n	10df4 <LORAWAN_SetAttr+0x254>
   10dba:	4b3a      	ldr	r3, [pc, #232]	; (10ea4 <LORAWAN_SetAttr+0x304>)
   10dbc:	3e02      	subs	r6, #2
   10dbe:	5ce3      	ldrb	r3, [r4, r3]
   10dc0:	2b00      	cmp	r3, #0
   10dc2:	d117      	bne.n	10df4 <LORAWAN_SetAttr+0x254>
   10dc4:	0020      	movs	r0, r4
   10dc6:	2210      	movs	r2, #16
   10dc8:	4b33      	ldr	r3, [pc, #204]	; (10e98 <LORAWAN_SetAttr+0x2f8>)
   10dca:	3045      	adds	r0, #69	; 0x45
   10dcc:	4798      	blx	r3
   10dce:	2106      	movs	r1, #6
   10dd0:	4d32      	ldr	r5, [pc, #200]	; (10e9c <LORAWAN_SetAttr+0x2fc>)
   10dd2:	2001      	movs	r0, #1
   10dd4:	47a8      	blx	r5
   10dd6:	0022      	movs	r2, r4
   10dd8:	32de      	adds	r2, #222	; 0xde
   10dda:	7813      	ldrb	r3, [r2, #0]
   10ddc:	2109      	movs	r1, #9
   10dde:	4333      	orrs	r3, r6
   10de0:	2001      	movs	r0, #1
   10de2:	7013      	strb	r3, [r2, #0]
   10de4:	47a8      	blx	r5
   10de6:	2001      	movs	r0, #1
   10de8:	3484      	adds	r4, #132	; 0x84
   10dea:	7823      	ldrb	r3, [r4, #0]
   10dec:	210b      	movs	r1, #11
   10dee:	4383      	bics	r3, r0
   10df0:	7023      	strb	r3, [r4, #0]
   10df2:	47a8      	blx	r5
   10df4:	0030      	movs	r0, r6
   10df6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10df8:	780b      	ldrb	r3, [r1, #0]
   10dfa:	2001      	movs	r0, #1
   10dfc:	0021      	movs	r1, r4
   10dfe:	2520      	movs	r5, #32
   10e00:	3184      	adds	r1, #132	; 0x84
   10e02:	4003      	ands	r3, r0
   10e04:	015a      	lsls	r2, r3, #5
   10e06:	780b      	ldrb	r3, [r1, #0]
   10e08:	43ab      	bics	r3, r5
   10e0a:	4313      	orrs	r3, r2
   10e0c:	700b      	strb	r3, [r1, #0]
   10e0e:	0023      	movs	r3, r4
   10e10:	2200      	movs	r2, #0
   10e12:	33ca      	adds	r3, #202	; 0xca
   10e14:	3494      	adds	r4, #148	; 0x94
   10e16:	801a      	strh	r2, [r3, #0]
   10e18:	7823      	ldrb	r3, [r4, #0]
   10e1a:	3210      	adds	r2, #16
   10e1c:	4393      	bics	r3, r2
   10e1e:	7023      	strb	r3, [r4, #0]
   10e20:	210b      	movs	r1, #11
   10e22:	e748      	b.n	10cb6 <LORAWAN_SetAttr+0x116>
   10e24:	466a      	mov	r2, sp
   10e26:	780b      	ldrb	r3, [r1, #0]
   10e28:	7013      	strb	r3, [r2, #0]
   10e2a:	0022      	movs	r2, r4
   10e2c:	32f3      	adds	r2, #243	; 0xf3
   10e2e:	7812      	ldrb	r2, [r2, #0]
   10e30:	429a      	cmp	r2, r3
   10e32:	d900      	bls.n	10e36 <LORAWAN_SetAttr+0x296>
   10e34:	e739      	b.n	10caa <LORAWAN_SetAttr+0x10a>
   10e36:	0022      	movs	r2, r4
   10e38:	32f4      	adds	r2, #244	; 0xf4
   10e3a:	7812      	ldrb	r2, [r2, #0]
   10e3c:	429a      	cmp	r2, r3
   10e3e:	d200      	bcs.n	10e42 <LORAWAN_SetAttr+0x2a2>
   10e40:	e733      	b.n	10caa <LORAWAN_SetAttr+0x10a>
   10e42:	4669      	mov	r1, sp
   10e44:	2010      	movs	r0, #16
   10e46:	4b18      	ldr	r3, [pc, #96]	; (10ea8 <LORAWAN_SetAttr+0x308>)
   10e48:	4798      	blx	r3
   10e4a:	0006      	movs	r6, r0
   10e4c:	2808      	cmp	r0, #8
   10e4e:	d000      	beq.n	10e52 <LORAWAN_SetAttr+0x2b2>
   10e50:	e72b      	b.n	10caa <LORAWAN_SetAttr+0x10a>
   10e52:	466b      	mov	r3, sp
   10e54:	210c      	movs	r1, #12
   10e56:	2001      	movs	r0, #1
   10e58:	781b      	ldrb	r3, [r3, #0]
   10e5a:	34e7      	adds	r4, #231	; 0xe7
   10e5c:	7023      	strb	r3, [r4, #0]
   10e5e:	4b0f      	ldr	r3, [pc, #60]	; (10e9c <LORAWAN_SetAttr+0x2fc>)
   10e60:	4798      	blx	r3
   10e62:	e7c7      	b.n	10df4 <LORAWAN_SetAttr+0x254>
   10e64:	466a      	mov	r2, sp
   10e66:	780b      	ldrb	r3, [r1, #0]
   10e68:	201d      	movs	r0, #29
   10e6a:	7013      	strb	r3, [r2, #0]
   10e6c:	4669      	mov	r1, sp
   10e6e:	4b0e      	ldr	r3, [pc, #56]	; (10ea8 <LORAWAN_SetAttr+0x308>)
   10e70:	4798      	blx	r3
   10e72:	0006      	movs	r6, r0
   10e74:	2808      	cmp	r0, #8
   10e76:	d000      	beq.n	10e7a <LORAWAN_SetAttr+0x2da>
   10e78:	e717      	b.n	10caa <LORAWAN_SetAttr+0x10a>
   10e7a:	466b      	mov	r3, sp
   10e7c:	781b      	ldrb	r3, [r3, #0]
   10e7e:	34e9      	adds	r4, #233	; 0xe9
   10e80:	7023      	strb	r3, [r4, #0]
   10e82:	210a      	movs	r1, #10
   10e84:	2000      	movs	r0, #0
   10e86:	e7ea      	b.n	10e5e <LORAWAN_SetAttr+0x2be>
   10e88:	780b      	ldrb	r3, [r1, #0]
   10e8a:	2103      	movs	r1, #3
   10e8c:	34ff      	adds	r4, #255	; 0xff
   10e8e:	7063      	strb	r3, [r4, #1]
   10e90:	2000      	movs	r0, #0
   10e92:	e710      	b.n	10cb6 <LORAWAN_SetAttr+0x116>
   10e94:	20003ad4 	.word	0x20003ad4
   10e98:	00014fe3 	.word	0x00014fe3
   10e9c:	00008755 	.word	0x00008755
   10ea0:	0000cb1d 	.word	0x0000cb1d
   10ea4:	0000022d 	.word	0x0000022d
   10ea8:	0000b6ad 	.word	0x0000b6ad
   10eac:	680b      	ldr	r3, [r1, #0]
   10eae:	260a      	movs	r6, #10
   10eb0:	1c5a      	adds	r2, r3, #1
   10eb2:	d09f      	beq.n	10df4 <LORAWAN_SetAttr+0x254>
   10eb4:	2115      	movs	r1, #21
   10eb6:	2000      	movs	r0, #0
   10eb8:	3488      	adds	r4, #136	; 0x88
   10eba:	6023      	str	r3, [r4, #0]
   10ebc:	4b7f      	ldr	r3, [pc, #508]	; (110bc <LORAWAN_SetAttr+0x51c>)
   10ebe:	4798      	blx	r3
   10ec0:	e72c      	b.n	10d1c <LORAWAN_SetAttr+0x17c>
   10ec2:	680b      	ldr	r3, [r1, #0]
   10ec4:	260a      	movs	r6, #10
   10ec6:	1c5a      	adds	r2, r3, #1
   10ec8:	d100      	bne.n	10ecc <LORAWAN_SetAttr+0x32c>
   10eca:	e793      	b.n	10df4 <LORAWAN_SetAttr+0x254>
   10ecc:	0031      	movs	r1, r6
   10ece:	348c      	adds	r4, #140	; 0x8c
   10ed0:	6023      	str	r3, [r4, #0]
   10ed2:	2001      	movs	r0, #1
   10ed4:	e7f2      	b.n	10ebc <LORAWAN_SetAttr+0x31c>
   10ed6:	0026      	movs	r6, r4
   10ed8:	880b      	ldrh	r3, [r1, #0]
   10eda:	36d0      	adds	r6, #208	; 0xd0
   10edc:	210c      	movs	r1, #12
   10ede:	2000      	movs	r0, #0
   10ee0:	4d76      	ldr	r5, [pc, #472]	; (110bc <LORAWAN_SetAttr+0x51c>)
   10ee2:	8033      	strh	r3, [r6, #0]
   10ee4:	47a8      	blx	r5
   10ee6:	22fa      	movs	r2, #250	; 0xfa
   10ee8:	8833      	ldrh	r3, [r6, #0]
   10eea:	0092      	lsls	r2, r2, #2
   10eec:	189b      	adds	r3, r3, r2
   10eee:	34d2      	adds	r4, #210	; 0xd2
   10ef0:	8023      	strh	r3, [r4, #0]
   10ef2:	210d      	movs	r1, #13
   10ef4:	2000      	movs	r0, #0
   10ef6:	e745      	b.n	10d84 <LORAWAN_SetAttr+0x1e4>
   10ef8:	780b      	ldrb	r3, [r1, #0]
   10efa:	260a      	movs	r6, #10
   10efc:	2b0f      	cmp	r3, #15
   10efe:	d900      	bls.n	10f02 <LORAWAN_SetAttr+0x362>
   10f00:	e778      	b.n	10df4 <LORAWAN_SetAttr+0x254>
   10f02:	3498      	adds	r4, #152	; 0x98
   10f04:	7023      	strb	r3, [r4, #0]
   10f06:	e709      	b.n	10d1c <LORAWAN_SetAttr+0x17c>
   10f08:	880b      	ldrh	r3, [r1, #0]
   10f0a:	34d4      	adds	r4, #212	; 0xd4
   10f0c:	8023      	strh	r3, [r4, #0]
   10f0e:	210e      	movs	r1, #14
   10f10:	e7be      	b.n	10e90 <LORAWAN_SetAttr+0x2f0>
   10f12:	880b      	ldrh	r3, [r1, #0]
   10f14:	34d6      	adds	r4, #214	; 0xd6
   10f16:	8023      	strh	r3, [r4, #0]
   10f18:	210f      	movs	r1, #15
   10f1a:	e7b9      	b.n	10e90 <LORAWAN_SetAttr+0x2f0>
   10f1c:	780b      	ldrb	r3, [r1, #0]
   10f1e:	34dc      	adds	r4, #220	; 0xdc
   10f20:	7023      	strb	r3, [r4, #0]
   10f22:	2111      	movs	r1, #17
   10f24:	e7b4      	b.n	10e90 <LORAWAN_SetAttr+0x2f0>
   10f26:	780b      	ldrb	r3, [r1, #0]
   10f28:	34dd      	adds	r4, #221	; 0xdd
   10f2a:	7023      	strb	r3, [r4, #0]
   10f2c:	2112      	movs	r1, #18
   10f2e:	e7af      	b.n	10e90 <LORAWAN_SetAttr+0x2f0>
   10f30:	880b      	ldrh	r3, [r1, #0]
   10f32:	34da      	adds	r4, #218	; 0xda
   10f34:	8023      	strh	r3, [r4, #0]
   10f36:	2110      	movs	r1, #16
   10f38:	e7aa      	b.n	10e90 <LORAWAN_SetAttr+0x2f0>
   10f3a:	780b      	ldrb	r3, [r1, #0]
   10f3c:	34e2      	adds	r4, #226	; 0xe2
   10f3e:	7023      	strb	r3, [r4, #0]
   10f40:	2114      	movs	r1, #20
   10f42:	e7a5      	b.n	10e90 <LORAWAN_SetAttr+0x2f0>
   10f44:	780b      	ldrb	r3, [r1, #0]
   10f46:	34e1      	adds	r4, #225	; 0xe1
   10f48:	7023      	strb	r3, [r4, #0]
   10f4a:	e69b      	b.n	10c84 <LORAWAN_SetAttr+0xe4>
   10f4c:	780b      	ldrb	r3, [r1, #0]
   10f4e:	34e8      	adds	r4, #232	; 0xe8
   10f50:	e7fa      	b.n	10f48 <LORAWAN_SetAttr+0x3a8>
   10f52:	2001      	movs	r0, #1
   10f54:	780b      	ldrb	r3, [r1, #0]
   10f56:	2110      	movs	r1, #16
   10f58:	3484      	adds	r4, #132	; 0x84
   10f5a:	4003      	ands	r3, r0
   10f5c:	011a      	lsls	r2, r3, #4
   10f5e:	7823      	ldrb	r3, [r4, #0]
   10f60:	438b      	bics	r3, r1
   10f62:	4313      	orrs	r3, r2
   10f64:	7023      	strb	r3, [r4, #0]
   10f66:	3905      	subs	r1, #5
   10f68:	e6a5      	b.n	10cb6 <LORAWAN_SetAttr+0x116>
   10f6a:	7909      	ldrb	r1, [r1, #4]
   10f6c:	7828      	ldrb	r0, [r5, #0]
   10f6e:	4b54      	ldr	r3, [pc, #336]	; (110c0 <LORAWAN_SetAttr+0x520>)
   10f70:	4798      	blx	r3
   10f72:	0006      	movs	r6, r0
   10f74:	e73e      	b.n	10df4 <LORAWAN_SetAttr+0x254>
   10f76:	7909      	ldrb	r1, [r1, #4]
   10f78:	7828      	ldrb	r0, [r5, #0]
   10f7a:	4b52      	ldr	r3, [pc, #328]	; (110c4 <LORAWAN_SetAttr+0x524>)
   10f7c:	e7f8      	b.n	10f70 <LORAWAN_SetAttr+0x3d0>
   10f7e:	7808      	ldrb	r0, [r1, #0]
   10f80:	4b51      	ldr	r3, [pc, #324]	; (110c8 <LORAWAN_SetAttr+0x528>)
   10f82:	6849      	ldr	r1, [r1, #4]
   10f84:	4798      	blx	r3
   10f86:	e7f4      	b.n	10f72 <LORAWAN_SetAttr+0x3d2>
   10f88:	7909      	ldrb	r1, [r1, #4]
   10f8a:	6828      	ldr	r0, [r5, #0]
   10f8c:	4b4f      	ldr	r3, [pc, #316]	; (110cc <LORAWAN_SetAttr+0x52c>)
   10f8e:	4798      	blx	r3
   10f90:	e7ef      	b.n	10f72 <LORAWAN_SetAttr+0x3d2>
   10f92:	786b      	ldrb	r3, [r5, #1]
   10f94:	7828      	ldrb	r0, [r5, #0]
   10f96:	021b      	lsls	r3, r3, #8
   10f98:	4303      	orrs	r3, r0
   10f9a:	78a8      	ldrb	r0, [r5, #2]
   10f9c:	7909      	ldrb	r1, [r1, #4]
   10f9e:	0400      	lsls	r0, r0, #16
   10fa0:	4303      	orrs	r3, r0
   10fa2:	78e8      	ldrb	r0, [r5, #3]
   10fa4:	0600      	lsls	r0, r0, #24
   10fa6:	4318      	orrs	r0, r3
   10fa8:	4b49      	ldr	r3, [pc, #292]	; (110d0 <LORAWAN_SetAttr+0x530>)
   10faa:	e7f0      	b.n	10f8e <LORAWAN_SetAttr+0x3ee>
   10fac:	7808      	ldrb	r0, [r1, #0]
   10fae:	4b49      	ldr	r3, [pc, #292]	; (110d4 <LORAWAN_SetAttr+0x534>)
   10fb0:	4798      	blx	r3
   10fb2:	e7de      	b.n	10f72 <LORAWAN_SetAttr+0x3d2>
   10fb4:	8808      	ldrh	r0, [r1, #0]
   10fb6:	4b48      	ldr	r3, [pc, #288]	; (110d8 <LORAWAN_SetAttr+0x538>)
   10fb8:	4798      	blx	r3
   10fba:	e663      	b.n	10c84 <LORAWAN_SetAttr+0xe4>
   10fbc:	4b47      	ldr	r3, [pc, #284]	; (110dc <LORAWAN_SetAttr+0x53c>)
   10fbe:	6019      	str	r1, [r3, #0]
   10fc0:	e673      	b.n	10caa <LORAWAN_SetAttr+0x10a>
   10fc2:	7809      	ldrb	r1, [r1, #0]
   10fc4:	7868      	ldrb	r0, [r5, #1]
   10fc6:	4b46      	ldr	r3, [pc, #280]	; (110e0 <LORAWAN_SetAttr+0x540>)
   10fc8:	4798      	blx	r3
   10fca:	e7d2      	b.n	10f72 <LORAWAN_SetAttr+0x3d2>
   10fcc:	7809      	ldrb	r1, [r1, #0]
   10fce:	4b45      	ldr	r3, [pc, #276]	; (110e4 <LORAWAN_SetAttr+0x544>)
   10fd0:	1c68      	adds	r0, r5, #1
   10fd2:	4798      	blx	r3
   10fd4:	e7cd      	b.n	10f72 <LORAWAN_SetAttr+0x3d2>
   10fd6:	7809      	ldrb	r1, [r1, #0]
   10fd8:	1c68      	adds	r0, r5, #1
   10fda:	4b43      	ldr	r3, [pc, #268]	; (110e8 <LORAWAN_SetAttr+0x548>)
   10fdc:	e7f9      	b.n	10fd2 <LORAWAN_SetAttr+0x432>
   10fde:	7809      	ldrb	r1, [r1, #0]
   10fe0:	6868      	ldr	r0, [r5, #4]
   10fe2:	4b42      	ldr	r3, [pc, #264]	; (110ec <LORAWAN_SetAttr+0x54c>)
   10fe4:	e7f5      	b.n	10fd2 <LORAWAN_SetAttr+0x432>
   10fe6:	7809      	ldrb	r1, [r1, #0]
   10fe8:	6868      	ldr	r0, [r5, #4]
   10fea:	4b41      	ldr	r3, [pc, #260]	; (110f0 <LORAWAN_SetAttr+0x550>)
   10fec:	e7f1      	b.n	10fd2 <LORAWAN_SetAttr+0x432>
   10fee:	7809      	ldrb	r1, [r1, #0]
   10ff0:	6868      	ldr	r0, [r5, #4]
   10ff2:	4b40      	ldr	r3, [pc, #256]	; (110f4 <LORAWAN_SetAttr+0x554>)
   10ff4:	e7ed      	b.n	10fd2 <LORAWAN_SetAttr+0x432>
   10ff6:	7809      	ldrb	r1, [r1, #0]
   10ff8:	6868      	ldr	r0, [r5, #4]
   10ffa:	4b3f      	ldr	r3, [pc, #252]	; (110f8 <LORAWAN_SetAttr+0x558>)
   10ffc:	e7e9      	b.n	10fd2 <LORAWAN_SetAttr+0x432>
   10ffe:	7809      	ldrb	r1, [r1, #0]
   11000:	7868      	ldrb	r0, [r5, #1]
   11002:	4b3e      	ldr	r3, [pc, #248]	; (110fc <LORAWAN_SetAttr+0x55c>)
   11004:	e7e0      	b.n	10fc8 <LORAWAN_SetAttr+0x428>
   11006:	7809      	ldrb	r1, [r1, #0]
   11008:	7868      	ldrb	r0, [r5, #1]
   1100a:	4b3d      	ldr	r3, [pc, #244]	; (11100 <LORAWAN_SetAttr+0x560>)
   1100c:	e7dc      	b.n	10fc8 <LORAWAN_SetAttr+0x428>
   1100e:	2300      	movs	r3, #0
   11010:	466a      	mov	r2, sp
   11012:	7809      	ldrb	r1, [r1, #0]
   11014:	7013      	strb	r3, [r2, #0]
   11016:	4299      	cmp	r1, r3
   11018:	d014      	beq.n	11044 <LORAWAN_SetAttr+0x4a4>
   1101a:	0022      	movs	r2, r4
   1101c:	2102      	movs	r1, #2
   1101e:	32ff      	adds	r2, #255	; 0xff
   11020:	7f53      	ldrb	r3, [r2, #29]
   11022:	420b      	tst	r3, r1
   11024:	d001      	beq.n	1102a <LORAWAN_SetAttr+0x48a>
   11026:	438b      	bics	r3, r1
   11028:	7753      	strb	r3, [r2, #29]
   1102a:	2220      	movs	r2, #32
   1102c:	34ff      	adds	r4, #255	; 0xff
   1102e:	7f63      	ldrb	r3, [r4, #29]
   11030:	4213      	tst	r3, r2
   11032:	d100      	bne.n	11036 <LORAWAN_SetAttr+0x496>
   11034:	e626      	b.n	10c84 <LORAWAN_SetAttr+0xe4>
   11036:	4393      	bics	r3, r2
   11038:	7763      	strb	r3, [r4, #29]
   1103a:	4669      	mov	r1, sp
   1103c:	4b31      	ldr	r3, [pc, #196]	; (11104 <LORAWAN_SetAttr+0x564>)
   1103e:	2038      	movs	r0, #56	; 0x38
   11040:	4798      	blx	r3
   11042:	e61f      	b.n	10c84 <LORAWAN_SetAttr+0xe4>
   11044:	4a30      	ldr	r2, [pc, #192]	; (11108 <LORAWAN_SetAttr+0x568>)
   11046:	4b31      	ldr	r3, [pc, #196]	; (1110c <LORAWAN_SetAttr+0x56c>)
   11048:	200e      	movs	r0, #14
   1104a:	4798      	blx	r3
   1104c:	e61a      	b.n	10c84 <LORAWAN_SetAttr+0xe4>
   1104e:	466b      	mov	r3, sp
   11050:	780a      	ldrb	r2, [r1, #0]
   11052:	34ff      	adds	r4, #255	; 0xff
   11054:	701a      	strb	r2, [r3, #0]
   11056:	2320      	movs	r3, #32
   11058:	2a00      	cmp	r2, #0
   1105a:	d007      	beq.n	1106c <LORAWAN_SetAttr+0x4cc>
   1105c:	7f62      	ldrb	r2, [r4, #29]
   1105e:	4313      	orrs	r3, r2
   11060:	7763      	strb	r3, [r4, #29]
   11062:	4669      	mov	r1, sp
   11064:	4b27      	ldr	r3, [pc, #156]	; (11104 <LORAWAN_SetAttr+0x564>)
   11066:	2038      	movs	r0, #56	; 0x38
   11068:	4798      	blx	r3
   1106a:	e782      	b.n	10f72 <LORAWAN_SetAttr+0x3d2>
   1106c:	7f62      	ldrb	r2, [r4, #29]
   1106e:	260a      	movs	r6, #10
   11070:	421a      	tst	r2, r3
   11072:	d100      	bne.n	11076 <LORAWAN_SetAttr+0x4d6>
   11074:	e6be      	b.n	10df4 <LORAWAN_SetAttr+0x254>
   11076:	439a      	bics	r2, r3
   11078:	7762      	strb	r2, [r4, #29]
   1107a:	e7f2      	b.n	11062 <LORAWAN_SetAttr+0x4c2>
   1107c:	780b      	ldrb	r3, [r1, #0]
   1107e:	260a      	movs	r6, #10
   11080:	2b08      	cmp	r3, #8
   11082:	d900      	bls.n	11086 <LORAWAN_SetAttr+0x4e6>
   11084:	e6b6      	b.n	10df4 <LORAWAN_SetAttr+0x254>
   11086:	228b      	movs	r2, #139	; 0x8b
   11088:	0092      	lsls	r2, r2, #2
   1108a:	54a3      	strb	r3, [r4, r2]
   1108c:	210d      	movs	r1, #13
   1108e:	e720      	b.n	10ed2 <LORAWAN_SetAttr+0x332>
   11090:	780a      	ldrb	r2, [r1, #0]
   11092:	4b1f      	ldr	r3, [pc, #124]	; (11110 <LORAWAN_SetAttr+0x570>)
   11094:	54e2      	strb	r2, [r4, r3]
   11096:	e5f5      	b.n	10c84 <LORAWAN_SetAttr+0xe4>
   11098:	4b1e      	ldr	r3, [pc, #120]	; (11114 <LORAWAN_SetAttr+0x574>)
   1109a:	4798      	blx	r3
   1109c:	e769      	b.n	10f72 <LORAWAN_SetAttr+0x3d2>
   1109e:	4b1e      	ldr	r3, [pc, #120]	; (11118 <LORAWAN_SetAttr+0x578>)
   110a0:	e7fb      	b.n	1109a <LORAWAN_SetAttr+0x4fa>
   110a2:	780a      	ldrb	r2, [r1, #0]
   110a4:	2302      	movs	r3, #2
   110a6:	34ff      	adds	r4, #255	; 0xff
   110a8:	2a00      	cmp	r2, #0
   110aa:	d003      	beq.n	110b4 <LORAWAN_SetAttr+0x514>
   110ac:	7f62      	ldrb	r2, [r4, #29]
   110ae:	4313      	orrs	r3, r2
   110b0:	7763      	strb	r3, [r4, #29]
   110b2:	e5e7      	b.n	10c84 <LORAWAN_SetAttr+0xe4>
   110b4:	7f62      	ldrb	r2, [r4, #29]
   110b6:	439a      	bics	r2, r3
   110b8:	7762      	strb	r2, [r4, #29]
   110ba:	e5e3      	b.n	10c84 <LORAWAN_SetAttr+0xe4>
   110bc:	00008755 	.word	0x00008755
   110c0:	00010029 	.word	0x00010029
   110c4:	0000ffb9 	.word	0x0000ffb9
   110c8:	0000f7e1 	.word	0x0000f7e1
   110cc:	0000f759 	.word	0x0000f759
   110d0:	0000f795 	.word	0x0000f795
   110d4:	00010b21 	.word	0x00010b21
   110d8:	0000e9f5 	.word	0x0000e9f5
   110dc:	20003e2c 	.word	0x20003e2c
   110e0:	00011635 	.word	0x00011635
   110e4:	00011895 	.word	0x00011895
   110e8:	000118e1 	.word	0x000118e1
   110ec:	0001184d 	.word	0x0001184d
   110f0:	0001192d 	.word	0x0001192d
   110f4:	0001194d 	.word	0x0001194d
   110f8:	00011969 	.word	0x00011969
   110fc:	000119ad 	.word	0x000119ad
   11100:	000119e9 	.word	0x000119e9
   11104:	0000b6c9 	.word	0x0000b6c9
   11108:	20003bf0 	.word	0x20003bf0
   1110c:	0000b691 	.word	0x0000b691
   11110:	0000022d 	.word	0x0000022d
   11114:	0000ea91 	.word	0x0000ea91
   11118:	0000eab9 	.word	0x0000eab9

0001111c <AssemblePacket>:
   1111c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1111e:	2710      	movs	r7, #16
   11120:	b08f      	sub	sp, #60	; 0x3c
   11122:	9308      	str	r3, [sp, #32]
   11124:	ab0d      	add	r3, sp, #52	; 0x34
   11126:	801f      	strh	r7, [r3, #0]
   11128:	231e      	movs	r3, #30
   1112a:	920a      	str	r2, [sp, #40]	; 0x28
   1112c:	aa06      	add	r2, sp, #24
   1112e:	189b      	adds	r3, r3, r2
   11130:	2500      	movs	r5, #0
   11132:	2210      	movs	r2, #16
   11134:	ac0c      	add	r4, sp, #48	; 0x30
   11136:	9006      	str	r0, [sp, #24]
   11138:	910b      	str	r1, [sp, #44]	; 0x2c
   1113a:	32ff      	adds	r2, #255	; 0xff
   1113c:	0029      	movs	r1, r5
   1113e:	4ed1      	ldr	r6, [pc, #836]	; (11484 <AssemblePacket+0x368>)
   11140:	7025      	strb	r5, [r4, #0]
   11142:	48d1      	ldr	r0, [pc, #836]	; (11488 <AssemblePacket+0x36c>)
   11144:	801d      	strh	r5, [r3, #0]
   11146:	47b0      	blx	r6
   11148:	003a      	movs	r2, r7
   1114a:	0029      	movs	r1, r5
   1114c:	48cf      	ldr	r0, [pc, #828]	; (1148c <AssemblePacket+0x370>)
   1114e:	47b0      	blx	r6
   11150:	221f      	movs	r2, #31
   11152:	7823      	ldrb	r3, [r4, #0]
   11154:	9906      	ldr	r1, [sp, #24]
   11156:	4013      	ands	r3, r2
   11158:	42a9      	cmp	r1, r5
   1115a:	d100      	bne.n	1115e <AssemblePacket+0x42>
   1115c:	e0dc      	b.n	11318 <AssemblePacket+0x1fc>
   1115e:	3a9f      	subs	r2, #159	; 0x9f
   11160:	4313      	orrs	r3, r2
   11162:	7023      	strb	r3, [r4, #0]
   11164:	4bca      	ldr	r3, [pc, #808]	; (11490 <AssemblePacket+0x374>)
   11166:	3281      	adds	r2, #129	; 0x81
   11168:	3394      	adds	r3, #148	; 0x94
   1116a:	7819      	ldrb	r1, [r3, #0]
   1116c:	430a      	orrs	r2, r1
   1116e:	701a      	strb	r2, [r3, #0]
   11170:	22e0      	movs	r2, #224	; 0xe0
   11172:	7823      	ldrb	r3, [r4, #0]
   11174:	48c4      	ldr	r0, [pc, #784]	; (11488 <AssemblePacket+0x36c>)
   11176:	4013      	ands	r3, r2
   11178:	7023      	strb	r3, [r4, #0]
   1117a:	4cc5      	ldr	r4, [pc, #788]	; (11490 <AssemblePacket+0x374>)
   1117c:	7403      	strb	r3, [r0, #16]
   1117e:	3adc      	subs	r2, #220	; 0xdc
   11180:	4bc4      	ldr	r3, [pc, #784]	; (11494 <AssemblePacket+0x378>)
   11182:	3011      	adds	r0, #17
   11184:	1c61      	adds	r1, r4, #1
   11186:	4798      	blx	r3
   11188:	2215      	movs	r2, #21
   1118a:	ab0d      	add	r3, sp, #52	; 0x34
   1118c:	0025      	movs	r5, r4
   1118e:	801a      	strh	r2, [r3, #0]
   11190:	2600      	movs	r6, #0
   11192:	466b      	mov	r3, sp
   11194:	3584      	adds	r5, #132	; 0x84
   11196:	761e      	strb	r6, [r3, #24]
   11198:	782b      	ldrb	r3, [r5, #0]
   1119a:	069b      	lsls	r3, r3, #26
   1119c:	d400      	bmi.n	111a0 <AssemblePacket+0x84>
   1119e:	e130      	b.n	11402 <AssemblePacket+0x2e6>
   111a0:	0027      	movs	r7, r4
   111a2:	4bbd      	ldr	r3, [pc, #756]	; (11498 <AssemblePacket+0x37c>)
   111a4:	37f3      	adds	r7, #243	; 0xf3
   111a6:	781a      	ldrb	r2, [r3, #0]
   111a8:	783b      	ldrb	r3, [r7, #0]
   111aa:	429a      	cmp	r2, r3
   111ac:	d31e      	bcc.n	111ec <AssemblePacket+0xd0>
   111ae:	2180      	movs	r1, #128	; 0x80
   111b0:	466b      	mov	r3, sp
   111b2:	0022      	movs	r2, r4
   111b4:	4249      	negs	r1, r1
   111b6:	32ca      	adds	r2, #202	; 0xca
   111b8:	7619      	strb	r1, [r3, #24]
   111ba:	8813      	ldrh	r3, [r2, #0]
   111bc:	3301      	adds	r3, #1
   111be:	b29b      	uxth	r3, r3
   111c0:	8013      	strh	r3, [r2, #0]
   111c2:	0022      	movs	r2, r4
   111c4:	32dc      	adds	r2, #220	; 0xdc
   111c6:	7812      	ldrb	r2, [r2, #0]
   111c8:	4293      	cmp	r3, r2
   111ca:	d30f      	bcc.n	111ec <AssemblePacket+0xd0>
   111cc:	2040      	movs	r0, #64	; 0x40
   111ce:	4308      	orrs	r0, r1
   111d0:	9006      	str	r0, [sp, #24]
   111d2:	0020      	movs	r0, r4
   111d4:	3094      	adds	r0, #148	; 0x94
   111d6:	7801      	ldrb	r1, [r0, #0]
   111d8:	4684      	mov	ip, r0
   111da:	2010      	movs	r0, #16
   111dc:	4301      	orrs	r1, r0
   111de:	4660      	mov	r0, ip
   111e0:	7001      	strb	r1, [r0, #0]
   111e2:	4293      	cmp	r3, r2
   111e4:	d000      	beq.n	111e8 <AssemblePacket+0xcc>
   111e6:	e09b      	b.n	11320 <AssemblePacket+0x204>
   111e8:	34f6      	adds	r4, #246	; 0xf6
   111ea:	7026      	strb	r6, [r4, #0]
   111ec:	4da8      	ldr	r5, [pc, #672]	; (11490 <AssemblePacket+0x374>)
   111ee:	2102      	movs	r1, #2
   111f0:	002a      	movs	r2, r5
   111f2:	3294      	adds	r2, #148	; 0x94
   111f4:	7813      	ldrb	r3, [r2, #0]
   111f6:	420b      	tst	r3, r1
   111f8:	d005      	beq.n	11206 <AssemblePacket+0xea>
   111fa:	2020      	movs	r0, #32
   111fc:	9c06      	ldr	r4, [sp, #24]
   111fe:	438b      	bics	r3, r1
   11200:	4304      	orrs	r4, r0
   11202:	9406      	str	r4, [sp, #24]
   11204:	7013      	strb	r3, [r2, #0]
   11206:	2310      	movs	r3, #16
   11208:	9c06      	ldr	r4, [sp, #24]
   1120a:	439c      	bics	r4, r3
   1120c:	002b      	movs	r3, r5
   1120e:	33e0      	adds	r3, #224	; 0xe0
   11210:	781b      	ldrb	r3, [r3, #0]
   11212:	9309      	str	r3, [sp, #36]	; 0x24
   11214:	2b00      	cmp	r3, #0
   11216:	d003      	beq.n	11220 <AssemblePacket+0x104>
   11218:	9b08      	ldr	r3, [sp, #32]
   1121a:	2b00      	cmp	r3, #0
   1121c:	d000      	beq.n	11220 <AssemblePacket+0x104>
   1121e:	e0f6      	b.n	1140e <AssemblePacket+0x2f2>
   11220:	230f      	movs	r3, #15
   11222:	439c      	bics	r4, r3
   11224:	466b      	mov	r3, sp
   11226:	9406      	str	r4, [sp, #24]
   11228:	ac0d      	add	r4, sp, #52	; 0x34
   1122a:	8826      	ldrh	r6, [r4, #0]
   1122c:	4f96      	ldr	r7, [pc, #600]	; (11488 <AssemblePacket+0x36c>)
   1122e:	7e1b      	ldrb	r3, [r3, #24]
   11230:	1c70      	adds	r0, r6, #1
   11232:	b280      	uxth	r0, r0
   11234:	55bb      	strb	r3, [r7, r6]
   11236:	19c0      	adds	r0, r0, r7
   11238:	4b96      	ldr	r3, [pc, #600]	; (11494 <AssemblePacket+0x378>)
   1123a:	2202      	movs	r2, #2
   1123c:	4997      	ldr	r1, [pc, #604]	; (1149c <AssemblePacket+0x380>)
   1123e:	4798      	blx	r3
   11240:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11242:	3603      	adds	r6, #3
   11244:	8026      	strh	r6, [r4, #0]
   11246:	2b00      	cmp	r3, #0
   11248:	d100      	bne.n	1124c <AssemblePacket+0x130>
   1124a:	e0e7      	b.n	1141c <AssemblePacket+0x300>
   1124c:	9b08      	ldr	r3, [sp, #32]
   1124e:	2b00      	cmp	r3, #0
   11250:	d004      	beq.n	1125c <AssemblePacket+0x140>
   11252:	2201      	movs	r2, #1
   11254:	0021      	movs	r1, r4
   11256:	0038      	movs	r0, r7
   11258:	4b91      	ldr	r3, [pc, #580]	; (114a0 <AssemblePacket+0x384>)
   1125a:	4798      	blx	r3
   1125c:	466a      	mov	r2, sp
   1125e:	212c      	movs	r1, #44	; 0x2c
   11260:	1852      	adds	r2, r2, r1
   11262:	8823      	ldrh	r3, [r4, #0]
   11264:	7812      	ldrb	r2, [r2, #0]
   11266:	1c5e      	adds	r6, r3, #1
   11268:	54fa      	strb	r2, [r7, r3]
   1126a:	9b08      	ldr	r3, [sp, #32]
   1126c:	b2b6      	uxth	r6, r6
   1126e:	8026      	strh	r6, [r4, #0]
   11270:	2b00      	cmp	r3, #0
   11272:	d100      	bne.n	11276 <AssemblePacket+0x15a>
   11274:	e0d6      	b.n	11424 <AssemblePacket+0x308>
   11276:	001a      	movs	r2, r3
   11278:	990a      	ldr	r1, [sp, #40]	; 0x28
   1127a:	4b86      	ldr	r3, [pc, #536]	; (11494 <AssemblePacket+0x378>)
   1127c:	19b8      	adds	r0, r7, r6
   1127e:	4798      	blx	r3
   11280:	2120      	movs	r1, #32
   11282:	466b      	mov	r3, sp
   11284:	185b      	adds	r3, r3, r1
   11286:	7819      	ldrb	r1, [r3, #0]
   11288:	682b      	ldr	r3, [r5, #0]
   1128a:	002a      	movs	r2, r5
   1128c:	0a18      	lsrs	r0, r3, #8
   1128e:	792b      	ldrb	r3, [r5, #4]
   11290:	3288      	adds	r2, #136	; 0x88
   11292:	061b      	lsls	r3, r3, #24
   11294:	4303      	orrs	r3, r0
   11296:	9304      	str	r3, [sp, #16]
   11298:	2301      	movs	r3, #1
   1129a:	9301      	str	r3, [sp, #4]
   1129c:	4b81      	ldr	r3, [pc, #516]	; (114a4 <AssemblePacket+0x388>)
   1129e:	9703      	str	r7, [sp, #12]
   112a0:	9602      	str	r6, [sp, #8]
   112a2:	9300      	str	r3, [sp, #0]
   112a4:	6813      	ldr	r3, [r2, #0]
   112a6:	980a      	ldr	r0, [sp, #40]	; 0x28
   112a8:	2200      	movs	r2, #0
   112aa:	4c7f      	ldr	r4, [pc, #508]	; (114a8 <AssemblePacket+0x38c>)
   112ac:	47a0      	blx	r4
   112ae:	2800      	cmp	r0, #0
   112b0:	d002      	beq.n	112b8 <AssemblePacket+0x19c>
   112b2:	2020      	movs	r0, #32
   112b4:	4b7d      	ldr	r3, [pc, #500]	; (114ac <AssemblePacket+0x390>)
   112b6:	4798      	blx	r3
   112b8:	aa0d      	add	r2, sp, #52	; 0x34
   112ba:	8813      	ldrh	r3, [r2, #0]
   112bc:	9908      	ldr	r1, [sp, #32]
   112be:	18cb      	adds	r3, r1, r3
   112c0:	8013      	strh	r3, [r2, #0]
   112c2:	4c73      	ldr	r4, [pc, #460]	; (11490 <AssemblePacket+0x374>)
   112c4:	ae0d      	add	r6, sp, #52	; 0x34
   112c6:	0021      	movs	r1, r4
   112c8:	6823      	ldr	r3, [r4, #0]
   112ca:	8832      	ldrh	r2, [r6, #0]
   112cc:	0a18      	lsrs	r0, r3, #8
   112ce:	7923      	ldrb	r3, [r4, #4]
   112d0:	3a10      	subs	r2, #16
   112d2:	061b      	lsls	r3, r3, #24
   112d4:	4303      	orrs	r3, r0
   112d6:	9300      	str	r3, [sp, #0]
   112d8:	3188      	adds	r1, #136	; 0x88
   112da:	b2d2      	uxtb	r2, r2
   112dc:	2349      	movs	r3, #73	; 0x49
   112de:	6809      	ldr	r1, [r1, #0]
   112e0:	2000      	movs	r0, #0
   112e2:	4d73      	ldr	r5, [pc, #460]	; (114b0 <AssemblePacket+0x394>)
   112e4:	47a8      	blx	r5
   112e6:	4f68      	ldr	r7, [pc, #416]	; (11488 <AssemblePacket+0x36c>)
   112e8:	2210      	movs	r2, #16
   112ea:	4968      	ldr	r1, [pc, #416]	; (1148c <AssemblePacket+0x370>)
   112ec:	0038      	movs	r0, r7
   112ee:	4b69      	ldr	r3, [pc, #420]	; (11494 <AssemblePacket+0x378>)
   112f0:	4798      	blx	r3
   112f2:	8833      	ldrh	r3, [r6, #0]
   112f4:	4a65      	ldr	r2, [pc, #404]	; (1148c <AssemblePacket+0x370>)
   112f6:	9300      	str	r3, [sp, #0]
   112f8:	2102      	movs	r1, #2
   112fa:	003b      	movs	r3, r7
   112fc:	4d6d      	ldr	r5, [pc, #436]	; (114b4 <AssemblePacket+0x398>)
   112fe:	486e      	ldr	r0, [pc, #440]	; (114b8 <AssemblePacket+0x39c>)
   11300:	47a8      	blx	r5
   11302:	8836      	ldrh	r6, [r6, #0]
   11304:	2204      	movs	r2, #4
   11306:	19f0      	adds	r0, r6, r7
   11308:	4960      	ldr	r1, [pc, #384]	; (1148c <AssemblePacket+0x370>)
   1130a:	4b62      	ldr	r3, [pc, #392]	; (11494 <AssemblePacket+0x378>)
   1130c:	4798      	blx	r3
   1130e:	3e0c      	subs	r6, #12
   11310:	34ce      	adds	r4, #206	; 0xce
   11312:	8026      	strh	r6, [r4, #0]
   11314:	b00f      	add	sp, #60	; 0x3c
   11316:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11318:	2240      	movs	r2, #64	; 0x40
   1131a:	4313      	orrs	r3, r2
   1131c:	7023      	strb	r3, [r4, #0]
   1131e:	e727      	b.n	11170 <AssemblePacket+0x54>
   11320:	4293      	cmp	r3, r2
   11322:	d800      	bhi.n	11326 <AssemblePacket+0x20a>
   11324:	e762      	b.n	111ec <AssemblePacket+0xd0>
   11326:	0022      	movs	r2, r4
   11328:	0021      	movs	r1, r4
   1132a:	32f6      	adds	r2, #246	; 0xf6
   1132c:	7813      	ldrb	r3, [r2, #0]
   1132e:	31dd      	adds	r1, #221	; 0xdd
   11330:	3301      	adds	r3, #1
   11332:	b2db      	uxtb	r3, r3
   11334:	7013      	strb	r3, [r2, #0]
   11336:	7809      	ldrb	r1, [r1, #0]
   11338:	4299      	cmp	r1, r3
   1133a:	d900      	bls.n	1133e <AssemblePacket+0x222>
   1133c:	e756      	b.n	111ec <AssemblePacket+0xd0>
   1133e:	231a      	movs	r3, #26
   11340:	7016      	strb	r6, [r2, #0]
   11342:	aa06      	add	r2, sp, #24
   11344:	189b      	adds	r3, r3, r2
   11346:	001a      	movs	r2, r3
   11348:	0031      	movs	r1, r6
   1134a:	4b5c      	ldr	r3, [pc, #368]	; (114bc <AssemblePacket+0x3a0>)
   1134c:	203c      	movs	r0, #60	; 0x3c
   1134e:	4798      	blx	r3
   11350:	4b5b      	ldr	r3, [pc, #364]	; (114c0 <AssemblePacket+0x3a4>)
   11352:	781a      	ldrb	r2, [r3, #0]
   11354:	ab06      	add	r3, sp, #24
   11356:	7e9b      	ldrb	r3, [r3, #26]
   11358:	429a      	cmp	r2, r3
   1135a:	d00d      	beq.n	11378 <AssemblePacket+0x25c>
   1135c:	34ff      	adds	r4, #255	; 0xff
   1135e:	7820      	ldrb	r0, [r4, #0]
   11360:	4b58      	ldr	r3, [pc, #352]	; (114c4 <AssemblePacket+0x3a8>)
   11362:	4798      	blx	r3
   11364:	0031      	movs	r1, r6
   11366:	4a56      	ldr	r2, [pc, #344]	; (114c0 <AssemblePacket+0x3a4>)
   11368:	4b54      	ldr	r3, [pc, #336]	; (114bc <AssemblePacket+0x3a0>)
   1136a:	2035      	movs	r0, #53	; 0x35
   1136c:	4798      	blx	r3
   1136e:	210a      	movs	r1, #10
   11370:	0030      	movs	r0, r6
   11372:	4b55      	ldr	r3, [pc, #340]	; (114c8 <AssemblePacket+0x3ac>)
   11374:	4798      	blx	r3
   11376:	e739      	b.n	111ec <AssemblePacket+0xd0>
   11378:	4b47      	ldr	r3, [pc, #284]	; (11498 <AssemblePacket+0x37c>)
   1137a:	783a      	ldrb	r2, [r7, #0]
   1137c:	781b      	ldrb	r3, [r3, #0]
   1137e:	4293      	cmp	r3, r2
   11380:	d022      	beq.n	113c8 <AssemblePacket+0x2ac>
   11382:	d800      	bhi.n	11386 <AssemblePacket+0x26a>
   11384:	e732      	b.n	111ec <AssemblePacket+0xd0>
   11386:	221b      	movs	r2, #27
   11388:	003d      	movs	r5, r7
   1138a:	a906      	add	r1, sp, #24
   1138c:	3b01      	subs	r3, #1
   1138e:	1852      	adds	r2, r2, r1
   11390:	7013      	strb	r3, [r2, #0]
   11392:	261b      	movs	r6, #27
   11394:	ab06      	add	r3, sp, #24
   11396:	18f6      	adds	r6, r6, r3
   11398:	782a      	ldrb	r2, [r5, #0]
   1139a:	7833      	ldrb	r3, [r6, #0]
   1139c:	429a      	cmp	r2, r3
   1139e:	d900      	bls.n	113a2 <AssemblePacket+0x286>
   113a0:	e724      	b.n	111ec <AssemblePacket+0xd0>
   113a2:	0031      	movs	r1, r6
   113a4:	2010      	movs	r0, #16
   113a6:	4f49      	ldr	r7, [pc, #292]	; (114cc <AssemblePacket+0x3b0>)
   113a8:	47b8      	blx	r7
   113aa:	2808      	cmp	r0, #8
   113ac:	d000      	beq.n	113b0 <AssemblePacket+0x294>
   113ae:	e71d      	b.n	111ec <AssemblePacket+0xd0>
   113b0:	0031      	movs	r1, r6
   113b2:	3009      	adds	r0, #9
   113b4:	47b8      	blx	r7
   113b6:	7833      	ldrb	r3, [r6, #0]
   113b8:	2808      	cmp	r0, #8
   113ba:	d061      	beq.n	11480 <AssemblePacket+0x364>
   113bc:	782a      	ldrb	r2, [r5, #0]
   113be:	429a      	cmp	r2, r3
   113c0:	d2e7      	bcs.n	11392 <AssemblePacket+0x276>
   113c2:	3b01      	subs	r3, #1
   113c4:	7033      	strb	r3, [r6, #0]
   113c6:	e7e4      	b.n	11392 <AssemblePacket+0x276>
   113c8:	34ff      	adds	r4, #255	; 0xff
   113ca:	7820      	ldrb	r0, [r4, #0]
   113cc:	4b40      	ldr	r3, [pc, #256]	; (114d0 <AssemblePacket+0x3b4>)
   113ce:	4798      	blx	r3
   113d0:	231b      	movs	r3, #27
   113d2:	aa06      	add	r2, sp, #24
   113d4:	189b      	adds	r3, r3, r2
   113d6:	0019      	movs	r1, r3
   113d8:	4c3e      	ldr	r4, [pc, #248]	; (114d4 <AssemblePacket+0x3b8>)
   113da:	2013      	movs	r0, #19
   113dc:	47a0      	blx	r4
   113de:	231b      	movs	r3, #27
   113e0:	aa06      	add	r2, sp, #24
   113e2:	189b      	adds	r3, r3, r2
   113e4:	0019      	movs	r1, r3
   113e6:	2014      	movs	r0, #20
   113e8:	47a0      	blx	r4
   113ea:	2113      	movs	r1, #19
   113ec:	0030      	movs	r0, r6
   113ee:	4c36      	ldr	r4, [pc, #216]	; (114c8 <AssemblePacket+0x3ac>)
   113f0:	47a0      	blx	r4
   113f2:	2210      	movs	r2, #16
   113f4:	786b      	ldrb	r3, [r5, #1]
   113f6:	210b      	movs	r1, #11
   113f8:	4313      	orrs	r3, r2
   113fa:	706b      	strb	r3, [r5, #1]
   113fc:	2001      	movs	r0, #1
   113fe:	47a0      	blx	r4
   11400:	e6f4      	b.n	111ec <AssemblePacket+0xd0>
   11402:	2210      	movs	r2, #16
   11404:	3494      	adds	r4, #148	; 0x94
   11406:	7823      	ldrb	r3, [r4, #0]
   11408:	4393      	bics	r3, r2
   1140a:	7023      	strb	r3, [r4, #0]
   1140c:	e6ee      	b.n	111ec <AssemblePacket+0xd0>
   1140e:	4b32      	ldr	r3, [pc, #200]	; (114d8 <AssemblePacket+0x3bc>)
   11410:	4798      	blx	r3
   11412:	230f      	movs	r3, #15
   11414:	4018      	ands	r0, r3
   11416:	439c      	bics	r4, r3
   11418:	4304      	orrs	r4, r0
   1141a:	e703      	b.n	11224 <AssemblePacket+0x108>
   1141c:	9b08      	ldr	r3, [sp, #32]
   1141e:	2b00      	cmp	r3, #0
   11420:	d000      	beq.n	11424 <AssemblePacket+0x308>
   11422:	e71b      	b.n	1125c <AssemblePacket+0x140>
   11424:	4d1a      	ldr	r5, [pc, #104]	; (11490 <AssemblePacket+0x374>)
   11426:	002b      	movs	r3, r5
   11428:	33e0      	adds	r3, #224	; 0xe0
   1142a:	781b      	ldrb	r3, [r3, #0]
   1142c:	2b00      	cmp	r3, #0
   1142e:	d100      	bne.n	11432 <AssemblePacket+0x316>
   11430:	e747      	b.n	112c2 <AssemblePacket+0x1a6>
   11432:	261e      	movs	r6, #30
   11434:	ab06      	add	r3, sp, #24
   11436:	18f6      	adds	r6, r6, r3
   11438:	2200      	movs	r2, #0
   1143a:	0031      	movs	r1, r6
   1143c:	4827      	ldr	r0, [pc, #156]	; (114dc <AssemblePacket+0x3c0>)
   1143e:	4b18      	ldr	r3, [pc, #96]	; (114a0 <AssemblePacket+0x384>)
   11440:	4798      	blx	r3
   11442:	682b      	ldr	r3, [r5, #0]
   11444:	7831      	ldrb	r1, [r6, #0]
   11446:	0a18      	lsrs	r0, r3, #8
   11448:	792b      	ldrb	r3, [r5, #4]
   1144a:	9703      	str	r7, [sp, #12]
   1144c:	061b      	lsls	r3, r3, #24
   1144e:	4303      	orrs	r3, r0
   11450:	9304      	str	r3, [sp, #16]
   11452:	8823      	ldrh	r3, [r4, #0]
   11454:	002a      	movs	r2, r5
   11456:	9302      	str	r3, [sp, #8]
   11458:	2302      	movs	r3, #2
   1145a:	9301      	str	r3, [sp, #4]
   1145c:	4b16      	ldr	r3, [pc, #88]	; (114b8 <AssemblePacket+0x39c>)
   1145e:	3288      	adds	r2, #136	; 0x88
   11460:	9300      	str	r3, [sp, #0]
   11462:	6813      	ldr	r3, [r2, #0]
   11464:	481d      	ldr	r0, [pc, #116]	; (114dc <AssemblePacket+0x3c0>)
   11466:	2200      	movs	r2, #0
   11468:	4d0f      	ldr	r5, [pc, #60]	; (114a8 <AssemblePacket+0x38c>)
   1146a:	47a8      	blx	r5
   1146c:	2800      	cmp	r0, #0
   1146e:	d002      	beq.n	11476 <AssemblePacket+0x35a>
   11470:	2020      	movs	r0, #32
   11472:	4b0e      	ldr	r3, [pc, #56]	; (114ac <AssemblePacket+0x390>)
   11474:	4798      	blx	r3
   11476:	8823      	ldrh	r3, [r4, #0]
   11478:	8832      	ldrh	r2, [r6, #0]
   1147a:	189b      	adds	r3, r3, r2
   1147c:	8023      	strh	r3, [r4, #0]
   1147e:	e720      	b.n	112c2 <AssemblePacket+0x1a6>
   11480:	34e7      	adds	r4, #231	; 0xe7
   11482:	e7c2      	b.n	1140a <AssemblePacket+0x2ee>
   11484:	00014ff5 	.word	0x00014ff5
   11488:	20003d1c 	.word	0x20003d1c
   1148c:	20001df5 	.word	0x20001df5
   11490:	20003ad4 	.word	0x20003ad4
   11494:	00014fe3 	.word	0x00014fe3
   11498:	20003bbb 	.word	0x20003bbb
   1149c:	20003b5c 	.word	0x20003b5c
   114a0:	0000e425 	.word	0x0000e425
   114a4:	20003b09 	.word	0x20003b09
   114a8:	0000f539 	.word	0x0000f539
   114ac:	0000f5f9 	.word	0x0000f5f9
   114b0:	0000e751 	.word	0x0000e751
   114b4:	00006989 	.word	0x00006989
   114b8:	20003af9 	.word	0x20003af9
   114bc:	0000b691 	.word	0x0000b691
   114c0:	20003bbd 	.word	0x20003bbd
   114c4:	0000b6e5 	.word	0x0000b6e5
   114c8:	00008755 	.word	0x00008755
   114cc:	0000b6ad 	.word	0x0000b6ad
   114d0:	0000b771 	.word	0x0000b771
   114d4:	00010ba1 	.word	0x00010ba1
   114d8:	0000e385 	.word	0x0000e385
   114dc:	20003898 	.word	0x20003898

000114e0 <LorawanClasscUlAckTimerCallback>:
   114e0:	2102      	movs	r1, #2
   114e2:	4b03      	ldr	r3, [pc, #12]	; (114f0 <LorawanClasscUlAckTimerCallback+0x10>)
   114e4:	3394      	adds	r3, #148	; 0x94
   114e6:	781a      	ldrb	r2, [r3, #0]
   114e8:	438a      	bics	r2, r1
   114ea:	701a      	strb	r2, [r3, #0]
   114ec:	4770      	bx	lr
   114ee:	46c0      	nop			; (mov r8, r8)
   114f0:	20003ad4 	.word	0x20003ad4

000114f4 <LorawanClasscValidateSend>:
   114f4:	2388      	movs	r3, #136	; 0x88
   114f6:	b510      	push	{r4, lr}
   114f8:	4c0a      	ldr	r4, [pc, #40]	; (11524 <LorawanClasscValidateSend+0x30>)
   114fa:	009b      	lsls	r3, r3, #2
   114fc:	5ce3      	ldrb	r3, [r4, r3]
   114fe:	2b00      	cmp	r3, #0
   11500:	d008      	beq.n	11514 <LorawanClasscValidateSend+0x20>
   11502:	220e      	movs	r2, #14
   11504:	3484      	adds	r4, #132	; 0x84
   11506:	7823      	ldrb	r3, [r4, #0]
   11508:	2008      	movs	r0, #8
   1150a:	4013      	ands	r3, r2
   1150c:	2b02      	cmp	r3, #2
   1150e:	d100      	bne.n	11512 <LorawanClasscValidateSend+0x1e>
   11510:	2011      	movs	r0, #17
   11512:	bd10      	pop	{r4, pc}
   11514:	2394      	movs	r3, #148	; 0x94
   11516:	005b      	lsls	r3, r3, #1
   11518:	5ce0      	ldrb	r0, [r4, r3]
   1151a:	4b03      	ldr	r3, [pc, #12]	; (11528 <LorawanClasscValidateSend+0x34>)
   1151c:	4798      	blx	r3
   1151e:	2800      	cmp	r0, #0
   11520:	d1ef      	bne.n	11502 <LorawanClasscValidateSend+0xe>
   11522:	e7f5      	b.n	11510 <LorawanClasscValidateSend+0x1c>
   11524:	20003ad4 	.word	0x20003ad4
   11528:	0000bd71 	.word	0x0000bd71

0001152c <LorawanClasscRxDone>:
   1152c:	221f      	movs	r2, #31
   1152e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11530:	7803      	ldrb	r3, [r0, #0]
   11532:	4c1c      	ldr	r4, [pc, #112]	; (115a4 <LorawanClasscRxDone+0x78>)
   11534:	4393      	bics	r3, r2
   11536:	2ba0      	cmp	r3, #160	; 0xa0
   11538:	d10c      	bne.n	11554 <LorawanClasscRxDone+0x28>
   1153a:	2694      	movs	r6, #148	; 0x94
   1153c:	0076      	lsls	r6, r6, #1
   1153e:	5da0      	ldrb	r0, [r4, r6]
   11540:	4b19      	ldr	r3, [pc, #100]	; (115a8 <LorawanClasscRxDone+0x7c>)
   11542:	4798      	blx	r3
   11544:	1e05      	subs	r5, r0, #0
   11546:	d019      	beq.n	1157c <LorawanClasscRxDone+0x50>
   11548:	0022      	movs	r2, r4
   1154a:	2102      	movs	r1, #2
   1154c:	3294      	adds	r2, #148	; 0x94
   1154e:	7813      	ldrb	r3, [r2, #0]
   11550:	438b      	bics	r3, r1
   11552:	7013      	strb	r3, [r2, #0]
   11554:	0021      	movs	r1, r4
   11556:	3184      	adds	r1, #132	; 0x84
   11558:	780b      	ldrb	r3, [r1, #0]
   1155a:	220e      	movs	r2, #14
   1155c:	0018      	movs	r0, r3
   1155e:	4010      	ands	r0, r2
   11560:	2806      	cmp	r0, #6
   11562:	d103      	bne.n	1156c <LorawanClasscRxDone+0x40>
   11564:	4393      	bics	r3, r2
   11566:	3a04      	subs	r2, #4
   11568:	4313      	orrs	r3, r2
   1156a:	700b      	strb	r3, [r1, #0]
   1156c:	2390      	movs	r3, #144	; 0x90
   1156e:	2201      	movs	r2, #1
   11570:	009b      	lsls	r3, r3, #2
   11572:	54e2      	strb	r2, [r4, r3]
   11574:	2000      	movs	r0, #0
   11576:	4b0d      	ldr	r3, [pc, #52]	; (115ac <LorawanClasscRxDone+0x80>)
   11578:	4798      	blx	r3
   1157a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   1157c:	4b0c      	ldr	r3, [pc, #48]	; (115b0 <LorawanClasscRxDone+0x84>)
   1157e:	5da6      	ldrb	r6, [r4, r6]
   11580:	4798      	blx	r3
   11582:	4b0c      	ldr	r3, [pc, #48]	; (115b4 <LorawanClasscRxDone+0x88>)
   11584:	490c      	ldr	r1, [pc, #48]	; (115b8 <LorawanClasscRxDone+0x8c>)
   11586:	4798      	blx	r3
   11588:	23fa      	movs	r3, #250	; 0xfa
   1158a:	009b      	lsls	r3, r3, #2
   1158c:	18cb      	adds	r3, r1, r3
   1158e:	21fa      	movs	r1, #250	; 0xfa
   11590:	0089      	lsls	r1, r1, #2
   11592:	4359      	muls	r1, r3
   11594:	9500      	str	r5, [sp, #0]
   11596:	002a      	movs	r2, r5
   11598:	4b08      	ldr	r3, [pc, #32]	; (115bc <LorawanClasscRxDone+0x90>)
   1159a:	0030      	movs	r0, r6
   1159c:	4d08      	ldr	r5, [pc, #32]	; (115c0 <LorawanClasscRxDone+0x94>)
   1159e:	47a8      	blx	r5
   115a0:	e7d8      	b.n	11554 <LorawanClasscRxDone+0x28>
   115a2:	46c0      	nop			; (mov r8, r8)
   115a4:	20003ad4 	.word	0x20003ad4
   115a8:	0000bd71 	.word	0x0000bd71
   115ac:	0000fa39 	.word	0x0000fa39
   115b0:	0001562d 	.word	0x0001562d
   115b4:	00012061 	.word	0x00012061
   115b8:	000007d1 	.word	0x000007d1
   115bc:	000114e1 	.word	0x000114e1
   115c0:	0000bbd9 	.word	0x0000bbd9

000115c4 <LorawanClasscRxTimeout>:
   115c4:	4a0c      	ldr	r2, [pc, #48]	; (115f8 <LorawanClasscRxTimeout+0x34>)
   115c6:	b510      	push	{r4, lr}
   115c8:	0010      	movs	r0, r2
   115ca:	3084      	adds	r0, #132	; 0x84
   115cc:	7803      	ldrb	r3, [r0, #0]
   115ce:	240e      	movs	r4, #14
   115d0:	0019      	movs	r1, r3
   115d2:	4021      	ands	r1, r4
   115d4:	2906      	cmp	r1, #6
   115d6:	d107      	bne.n	115e8 <LorawanClasscRxTimeout+0x24>
   115d8:	2208      	movs	r2, #8
   115da:	43a3      	bics	r3, r4
   115dc:	4313      	orrs	r3, r2
   115de:	7003      	strb	r3, [r0, #0]
   115e0:	2000      	movs	r0, #0
   115e2:	4b06      	ldr	r3, [pc, #24]	; (115fc <LorawanClasscRxTimeout+0x38>)
   115e4:	4798      	blx	r3
   115e6:	e006      	b.n	115f6 <LorawanClasscRxTimeout+0x32>
   115e8:	290a      	cmp	r1, #10
   115ea:	d1f9      	bne.n	115e0 <LorawanClasscRxTimeout+0x1c>
   115ec:	2388      	movs	r3, #136	; 0x88
   115ee:	009b      	lsls	r3, r3, #2
   115f0:	5cd3      	ldrb	r3, [r2, r3]
   115f2:	2b00      	cmp	r3, #0
   115f4:	d0f4      	beq.n	115e0 <LorawanClasscRxTimeout+0x1c>
   115f6:	bd10      	pop	{r4, pc}
   115f8:	20003ad4 	.word	0x20003ad4
   115fc:	0000fa39 	.word	0x0000fa39

00011600 <LorawanClasscNotifyAppOnReceive>:
   11600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11602:	001f      	movs	r7, r3
   11604:	2394      	movs	r3, #148	; 0x94
   11606:	0016      	movs	r6, r2
   11608:	4a07      	ldr	r2, [pc, #28]	; (11628 <LorawanClasscNotifyAppOnReceive+0x28>)
   1160a:	005b      	lsls	r3, r3, #1
   1160c:	0004      	movs	r4, r0
   1160e:	5cd0      	ldrb	r0, [r2, r3]
   11610:	4b06      	ldr	r3, [pc, #24]	; (1162c <LorawanClasscNotifyAppOnReceive+0x2c>)
   11612:	000d      	movs	r5, r1
   11614:	4798      	blx	r3
   11616:	2800      	cmp	r0, #0
   11618:	d105      	bne.n	11626 <LorawanClasscNotifyAppOnReceive+0x26>
   1161a:	0020      	movs	r0, r4
   1161c:	003b      	movs	r3, r7
   1161e:	0032      	movs	r2, r6
   11620:	0029      	movs	r1, r5
   11622:	4c03      	ldr	r4, [pc, #12]	; (11630 <LorawanClasscNotifyAppOnReceive+0x30>)
   11624:	47a0      	blx	r4
   11626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11628:	20003ad4 	.word	0x20003ad4
   1162c:	0000bd71 	.word	0x0000bd71
   11630:	0000f65d 	.word	0x0000f65d

00011634 <LorawanMcastEnable>:
   11634:	0002      	movs	r2, r0
   11636:	b510      	push	{r4, lr}
   11638:	200a      	movs	r0, #10
   1163a:	2903      	cmp	r1, #3
   1163c:	d822      	bhi.n	11684 <LorawanMcastEnable+0x50>
   1163e:	4b1a      	ldr	r3, [pc, #104]	; (116a8 <LorawanMcastEnable+0x74>)
   11640:	2a00      	cmp	r2, #0
   11642:	d020      	beq.n	11686 <LorawanMcastEnable+0x52>
   11644:	223c      	movs	r2, #60	; 0x3c
   11646:	434a      	muls	r2, r1
   11648:	189a      	adds	r2, r3, r2
   1164a:	3259      	adds	r2, #89	; 0x59
   1164c:	32ff      	adds	r2, #255	; 0xff
   1164e:	7a12      	ldrb	r2, [r2, #8]
   11650:	0754      	lsls	r4, r2, #29
   11652:	d512      	bpl.n	1167a <LorawanMcastEnable+0x46>
   11654:	0794      	lsls	r4, r2, #30
   11656:	d510      	bpl.n	1167a <LorawanMcastEnable+0x46>
   11658:	07d2      	lsls	r2, r2, #31
   1165a:	0fd2      	lsrs	r2, r2, #31
   1165c:	2a01      	cmp	r2, #1
   1165e:	d10c      	bne.n	1167a <LorawanMcastEnable+0x46>
   11660:	001c      	movs	r4, r3
   11662:	34fd      	adds	r4, #253	; 0xfd
   11664:	7824      	ldrb	r4, [r4, #0]
   11666:	0764      	lsls	r4, r4, #29
   11668:	d007      	beq.n	1167a <LorawanMcastEnable+0x46>
   1166a:	202e      	movs	r0, #46	; 0x2e
   1166c:	408a      	lsls	r2, r1
   1166e:	30ff      	adds	r0, #255	; 0xff
   11670:	5c19      	ldrb	r1, [r3, r0]
   11672:	430a      	orrs	r2, r1
   11674:	541a      	strb	r2, [r3, r0]
   11676:	3826      	subs	r0, #38	; 0x26
   11678:	38ff      	subs	r0, #255	; 0xff
   1167a:	2196      	movs	r1, #150	; 0x96
   1167c:	0049      	lsls	r1, r1, #1
   1167e:	5c5a      	ldrb	r2, [r3, r1]
   11680:	3201      	adds	r2, #1
   11682:	545a      	strb	r2, [r3, r1]
   11684:	bd10      	pop	{r4, pc}
   11686:	2201      	movs	r2, #1
   11688:	408a      	lsls	r2, r1
   1168a:	202e      	movs	r0, #46	; 0x2e
   1168c:	0011      	movs	r1, r2
   1168e:	30ff      	adds	r0, #255	; 0xff
   11690:	5c1a      	ldrb	r2, [r3, r0]
   11692:	438a      	bics	r2, r1
   11694:	2196      	movs	r1, #150	; 0x96
   11696:	541a      	strb	r2, [r3, r0]
   11698:	0049      	lsls	r1, r1, #1
   1169a:	5c5a      	ldrb	r2, [r3, r1]
   1169c:	3826      	subs	r0, #38	; 0x26
   1169e:	3a01      	subs	r2, #1
   116a0:	545a      	strb	r2, [r3, r1]
   116a2:	38ff      	subs	r0, #255	; 0xff
   116a4:	e7ee      	b.n	11684 <LorawanMcastEnable+0x50>
   116a6:	46c0      	nop			; (mov r8, r8)
   116a8:	20003ad4 	.word	0x20003ad4

000116ac <LorawanMcastValidateHdr>:
   116ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   116ae:	469c      	mov	ip, r3
   116b0:	2400      	movs	r4, #0
   116b2:	230a      	movs	r3, #10
   116b4:	4f18      	ldr	r7, [pc, #96]	; (11718 <LorawanMcastValidateHdr+0x6c>)
   116b6:	b2e5      	uxtb	r5, r4
   116b8:	9501      	str	r5, [sp, #4]
   116ba:	252e      	movs	r5, #46	; 0x2e
   116bc:	35ff      	adds	r5, #255	; 0xff
   116be:	5d7d      	ldrb	r5, [r7, r5]
   116c0:	2601      	movs	r6, #1
   116c2:	4125      	asrs	r5, r4
   116c4:	4235      	tst	r5, r6
   116c6:	d022      	beq.n	1170e <LorawanMcastValidateHdr+0x62>
   116c8:	7886      	ldrb	r6, [r0, #2]
   116ca:	7845      	ldrb	r5, [r0, #1]
   116cc:	0236      	lsls	r6, r6, #8
   116ce:	432e      	orrs	r6, r5
   116d0:	78c5      	ldrb	r5, [r0, #3]
   116d2:	042d      	lsls	r5, r5, #16
   116d4:	432e      	orrs	r6, r5
   116d6:	7905      	ldrb	r5, [r0, #4]
   116d8:	062d      	lsls	r5, r5, #24
   116da:	4335      	orrs	r5, r6
   116dc:	263c      	movs	r6, #60	; 0x3c
   116de:	4366      	muls	r6, r4
   116e0:	3631      	adds	r6, #49	; 0x31
   116e2:	36ff      	adds	r6, #255	; 0xff
   116e4:	59be      	ldr	r6, [r7, r6]
   116e6:	42b5      	cmp	r5, r6
   116e8:	d111      	bne.n	1170e <LorawanMcastValidateHdr+0x62>
   116ea:	4d0c      	ldr	r5, [pc, #48]	; (1171c <LorawanMcastValidateHdr+0x70>)
   116ec:	782e      	ldrb	r6, [r5, #0]
   116ee:	2506      	movs	r5, #6
   116f0:	422e      	tst	r6, r5
   116f2:	d00c      	beq.n	1170e <LorawanMcastValidateHdr+0x62>
   116f4:	2a00      	cmp	r2, #0
   116f6:	d00a      	beq.n	1170e <LorawanMcastValidateHdr+0x62>
   116f8:	7946      	ldrb	r6, [r0, #5]
   116fa:	3569      	adds	r5, #105	; 0x69
   116fc:	422e      	tst	r6, r5
   116fe:	d106      	bne.n	1170e <LorawanMcastValidateHdr+0x62>
   11700:	2903      	cmp	r1, #3
   11702:	d104      	bne.n	1170e <LorawanMcastValidateHdr+0x62>
   11704:	466d      	mov	r5, sp
   11706:	4663      	mov	r3, ip
   11708:	792d      	ldrb	r5, [r5, #4]
   1170a:	701d      	strb	r5, [r3, #0]
   1170c:	2308      	movs	r3, #8
   1170e:	3401      	adds	r4, #1
   11710:	2c04      	cmp	r4, #4
   11712:	d1d0      	bne.n	116b6 <LorawanMcastValidateHdr+0xa>
   11714:	0018      	movs	r0, r3
   11716:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11718:	20003ad4 	.word	0x20003ad4
   1171c:	20003bd1 	.word	0x20003bd1

00011720 <LorawanMcastProcessPkt>:
   11720:	b5f0      	push	{r4, r5, r6, r7, lr}
   11722:	0015      	movs	r5, r2
   11724:	223c      	movs	r2, #60	; 0x3c
   11726:	435a      	muls	r2, r3
   11728:	b089      	sub	sp, #36	; 0x24
   1172a:	9107      	str	r1, [sp, #28]
   1172c:	493f      	ldr	r1, [pc, #252]	; (1182c <LorawanMcastProcessPkt+0x10c>)
   1172e:	9006      	str	r0, [sp, #24]
   11730:	1889      	adds	r1, r1, r2
   11732:	31fc      	adds	r1, #252	; 0xfc
   11734:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
   11736:	6e08      	ldr	r0, [r1, #96]	; 0x60
   11738:	6d8a      	ldr	r2, [r1, #88]	; 0x58
   1173a:	4284      	cmp	r4, r0
   1173c:	d224      	bcs.n	11788 <LorawanMcastProcessPkt+0x68>
   1173e:	2100      	movs	r1, #0
   11740:	4294      	cmp	r4, r2
   11742:	d802      	bhi.n	1174a <LorawanMcastProcessPkt+0x2a>
   11744:	4282      	cmp	r2, r0
   11746:	4192      	sbcs	r2, r2
   11748:	4251      	negs	r1, r2
   1174a:	270a      	movs	r7, #10
   1174c:	2900      	cmp	r1, #0
   1174e:	d11d      	bne.n	1178c <LorawanMcastProcessPkt+0x6c>
   11750:	4a36      	ldr	r2, [pc, #216]	; (1182c <LorawanMcastProcessPkt+0x10c>)
   11752:	210e      	movs	r1, #14
   11754:	0010      	movs	r0, r2
   11756:	3084      	adds	r0, #132	; 0x84
   11758:	7803      	ldrb	r3, [r0, #0]
   1175a:	001c      	movs	r4, r3
   1175c:	400c      	ands	r4, r1
   1175e:	2c06      	cmp	r4, #6
   11760:	d108      	bne.n	11774 <LorawanMcastProcessPkt+0x54>
   11762:	0014      	movs	r4, r2
   11764:	34fd      	adds	r4, #253	; 0xfd
   11766:	7824      	ldrb	r4, [r4, #0]
   11768:	2c04      	cmp	r4, #4
   1176a:	d103      	bne.n	11774 <LorawanMcastProcessPkt+0x54>
   1176c:	438b      	bics	r3, r1
   1176e:	3904      	subs	r1, #4
   11770:	430b      	orrs	r3, r1
   11772:	7003      	strb	r3, [r0, #0]
   11774:	2390      	movs	r3, #144	; 0x90
   11776:	2101      	movs	r1, #1
   11778:	009b      	lsls	r3, r3, #2
   1177a:	54d1      	strb	r1, [r2, r3]
   1177c:	2000      	movs	r0, #0
   1177e:	4b2c      	ldr	r3, [pc, #176]	; (11830 <LorawanMcastProcessPkt+0x110>)
   11780:	4798      	blx	r3
   11782:	0038      	movs	r0, r7
   11784:	b009      	add	sp, #36	; 0x24
   11786:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11788:	4294      	cmp	r4, r2
   1178a:	d8db      	bhi.n	11744 <LorawanMcastProcessPkt+0x24>
   1178c:	243c      	movs	r4, #60	; 0x3c
   1178e:	435c      	muls	r4, r3
   11790:	4e26      	ldr	r6, [pc, #152]	; (1182c <LorawanMcastProcessPkt+0x10c>)
   11792:	79ea      	ldrb	r2, [r5, #7]
   11794:	1937      	adds	r7, r6, r4
   11796:	003b      	movs	r3, r7
   11798:	79a9      	ldrb	r1, [r5, #6]
   1179a:	0212      	lsls	r2, r2, #8
   1179c:	3355      	adds	r3, #85	; 0x55
   1179e:	430a      	orrs	r2, r1
   117a0:	33ff      	adds	r3, #255	; 0xff
   117a2:	801a      	strh	r2, [r3, #0]
   117a4:	2105      	movs	r1, #5
   117a6:	4b23      	ldr	r3, [pc, #140]	; (11834 <LorawanMcastProcessPkt+0x114>)
   117a8:	37fc      	adds	r7, #252	; 0xfc
   117aa:	2000      	movs	r0, #0
   117ac:	4798      	blx	r3
   117ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   117b0:	3445      	adds	r4, #69	; 0x45
   117b2:	9304      	str	r3, [sp, #16]
   117b4:	4b20      	ldr	r3, [pc, #128]	; (11838 <LorawanMcastProcessPkt+0x118>)
   117b6:	9907      	ldr	r1, [sp, #28]
   117b8:	9303      	str	r3, [sp, #12]
   117ba:	2319      	movs	r3, #25
   117bc:	34ff      	adds	r4, #255	; 0xff
   117be:	9302      	str	r3, [sp, #8]
   117c0:	19a4      	adds	r4, r4, r6
   117c2:	3b16      	subs	r3, #22
   117c4:	9806      	ldr	r0, [sp, #24]
   117c6:	9400      	str	r4, [sp, #0]
   117c8:	390d      	subs	r1, #13
   117ca:	9301      	str	r3, [sp, #4]
   117cc:	b2c9      	uxtb	r1, r1
   117ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   117d0:	2201      	movs	r2, #1
   117d2:	3009      	adds	r0, #9
   117d4:	4c19      	ldr	r4, [pc, #100]	; (1183c <LorawanMcastProcessPkt+0x11c>)
   117d6:	47a0      	blx	r4
   117d8:	2800      	cmp	r0, #0
   117da:	d002      	beq.n	117e2 <LorawanMcastProcessPkt+0xc2>
   117dc:	201f      	movs	r0, #31
   117de:	4b18      	ldr	r3, [pc, #96]	; (11840 <LorawanMcastProcessPkt+0x120>)
   117e0:	4798      	blx	r3
   117e2:	4918      	ldr	r1, [pc, #96]	; (11844 <LorawanMcastProcessPkt+0x124>)
   117e4:	2708      	movs	r7, #8
   117e6:	784a      	ldrb	r2, [r1, #1]
   117e8:	780b      	ldrb	r3, [r1, #0]
   117ea:	0212      	lsls	r2, r2, #8
   117ec:	431a      	orrs	r2, r3
   117ee:	788b      	ldrb	r3, [r1, #2]
   117f0:	041b      	lsls	r3, r3, #16
   117f2:	431a      	orrs	r2, r3
   117f4:	78cb      	ldrb	r3, [r1, #3]
   117f6:	061b      	lsls	r3, r3, #24
   117f8:	4313      	orrs	r3, r2
   117fa:	d0a9      	beq.n	11750 <LorawanMcastProcessPkt+0x30>
   117fc:	2220      	movs	r2, #32
   117fe:	3694      	adds	r6, #148	; 0x94
   11800:	7833      	ldrb	r3, [r6, #0]
   11802:	9906      	ldr	r1, [sp, #24]
   11804:	4393      	bics	r3, r2
   11806:	7033      	strb	r3, [r6, #0]
   11808:	78ab      	ldrb	r3, [r5, #2]
   1180a:	7868      	ldrb	r0, [r5, #1]
   1180c:	40bb      	lsls	r3, r7
   1180e:	4303      	orrs	r3, r0
   11810:	78e8      	ldrb	r0, [r5, #3]
   11812:	9a07      	ldr	r2, [sp, #28]
   11814:	0400      	lsls	r0, r0, #16
   11816:	4303      	orrs	r3, r0
   11818:	7928      	ldrb	r0, [r5, #4]
   1181a:	3a0c      	subs	r2, #12
   1181c:	0600      	lsls	r0, r0, #24
   1181e:	4318      	orrs	r0, r3
   11820:	b2d2      	uxtb	r2, r2
   11822:	19c9      	adds	r1, r1, r7
   11824:	003b      	movs	r3, r7
   11826:	4c08      	ldr	r4, [pc, #32]	; (11848 <LorawanMcastProcessPkt+0x128>)
   11828:	47a0      	blx	r4
   1182a:	e791      	b.n	11750 <LorawanMcastProcessPkt+0x30>
   1182c:	20003ad4 	.word	0x20003ad4
   11830:	0000fa39 	.word	0x0000fa39
   11834:	00008755 	.word	0x00008755
   11838:	20003898 	.word	0x20003898
   1183c:	0000f539 	.word	0x0000f539
   11840:	0000f5f9 	.word	0x0000f5f9
   11844:	20003e30 	.word	0x20003e30
   11848:	0000f65d 	.word	0x0000f65d

0001184c <LorawanAddMcastAddr>:
   1184c:	b570      	push	{r4, r5, r6, lr}
   1184e:	260a      	movs	r6, #10
   11850:	2903      	cmp	r1, #3
   11852:	d818      	bhi.n	11886 <LorawanAddMcastAddr+0x3a>
   11854:	4b0d      	ldr	r3, [pc, #52]	; (1188c <LorawanAddMcastAddr+0x40>)
   11856:	681a      	ldr	r2, [r3, #0]
   11858:	0a15      	lsrs	r5, r2, #8
   1185a:	791a      	ldrb	r2, [r3, #4]
   1185c:	0612      	lsls	r2, r2, #24
   1185e:	432a      	orrs	r2, r5
   11860:	4282      	cmp	r2, r0
   11862:	d010      	beq.n	11886 <LorawanAddMcastAddr+0x3a>
   11864:	243c      	movs	r4, #60	; 0x3c
   11866:	434c      	muls	r4, r1
   11868:	191c      	adds	r4, r3, r4
   1186a:	0023      	movs	r3, r4
   1186c:	33fc      	adds	r3, #252	; 0xfc
   1186e:	6358      	str	r0, [r3, #52]	; 0x34
   11870:	2106      	movs	r1, #6
   11872:	2000      	movs	r0, #0
   11874:	4b06      	ldr	r3, [pc, #24]	; (11890 <LorawanAddMcastAddr+0x44>)
   11876:	4798      	blx	r3
   11878:	2201      	movs	r2, #1
   1187a:	3459      	adds	r4, #89	; 0x59
   1187c:	34ff      	adds	r4, #255	; 0xff
   1187e:	7a21      	ldrb	r1, [r4, #8]
   11880:	3e02      	subs	r6, #2
   11882:	430a      	orrs	r2, r1
   11884:	7222      	strb	r2, [r4, #8]
   11886:	0030      	movs	r0, r6
   11888:	bd70      	pop	{r4, r5, r6, pc}
   1188a:	46c0      	nop			; (mov r8, r8)
   1188c:	20003ad4 	.word	0x20003ad4
   11890:	00008755 	.word	0x00008755

00011894 <LorawanAddMcastAppskey>:
   11894:	b570      	push	{r4, r5, r6, lr}
   11896:	0006      	movs	r6, r0
   11898:	200a      	movs	r0, #10
   1189a:	2903      	cmp	r1, #3
   1189c:	d818      	bhi.n	118d0 <LorawanAddMcastAppskey+0x3c>
   1189e:	2e00      	cmp	r6, #0
   118a0:	d016      	beq.n	118d0 <LorawanAddMcastAppskey+0x3c>
   118a2:	253c      	movs	r5, #60	; 0x3c
   118a4:	434d      	muls	r5, r1
   118a6:	0028      	movs	r0, r5
   118a8:	4c0a      	ldr	r4, [pc, #40]	; (118d4 <LorawanAddMcastAppskey+0x40>)
   118aa:	3045      	adds	r0, #69	; 0x45
   118ac:	30ff      	adds	r0, #255	; 0xff
   118ae:	2210      	movs	r2, #16
   118b0:	1900      	adds	r0, r0, r4
   118b2:	0031      	movs	r1, r6
   118b4:	4b08      	ldr	r3, [pc, #32]	; (118d8 <LorawanAddMcastAppskey+0x44>)
   118b6:	4798      	blx	r3
   118b8:	4b08      	ldr	r3, [pc, #32]	; (118dc <LorawanAddMcastAppskey+0x48>)
   118ba:	2107      	movs	r1, #7
   118bc:	2000      	movs	r0, #0
   118be:	4798      	blx	r3
   118c0:	2304      	movs	r3, #4
   118c2:	2008      	movs	r0, #8
   118c4:	1964      	adds	r4, r4, r5
   118c6:	3459      	adds	r4, #89	; 0x59
   118c8:	34ff      	adds	r4, #255	; 0xff
   118ca:	7a22      	ldrb	r2, [r4, #8]
   118cc:	4313      	orrs	r3, r2
   118ce:	7223      	strb	r3, [r4, #8]
   118d0:	bd70      	pop	{r4, r5, r6, pc}
   118d2:	46c0      	nop			; (mov r8, r8)
   118d4:	20003ad4 	.word	0x20003ad4
   118d8:	00014fe3 	.word	0x00014fe3
   118dc:	00008755 	.word	0x00008755

000118e0 <LorawanAddMcastNwkskey>:
   118e0:	b570      	push	{r4, r5, r6, lr}
   118e2:	0006      	movs	r6, r0
   118e4:	200a      	movs	r0, #10
   118e6:	2903      	cmp	r1, #3
   118e8:	d818      	bhi.n	1191c <LorawanAddMcastNwkskey+0x3c>
   118ea:	2e00      	cmp	r6, #0
   118ec:	d016      	beq.n	1191c <LorawanAddMcastNwkskey+0x3c>
   118ee:	253c      	movs	r5, #60	; 0x3c
   118f0:	434d      	muls	r5, r1
   118f2:	0028      	movs	r0, r5
   118f4:	4c0a      	ldr	r4, [pc, #40]	; (11920 <LorawanAddMcastNwkskey+0x40>)
   118f6:	3035      	adds	r0, #53	; 0x35
   118f8:	30ff      	adds	r0, #255	; 0xff
   118fa:	2210      	movs	r2, #16
   118fc:	1900      	adds	r0, r0, r4
   118fe:	0031      	movs	r1, r6
   11900:	4b08      	ldr	r3, [pc, #32]	; (11924 <LorawanAddMcastNwkskey+0x44>)
   11902:	4798      	blx	r3
   11904:	4b08      	ldr	r3, [pc, #32]	; (11928 <LorawanAddMcastNwkskey+0x48>)
   11906:	2108      	movs	r1, #8
   11908:	2000      	movs	r0, #0
   1190a:	4798      	blx	r3
   1190c:	2302      	movs	r3, #2
   1190e:	2008      	movs	r0, #8
   11910:	1964      	adds	r4, r4, r5
   11912:	3459      	adds	r4, #89	; 0x59
   11914:	34ff      	adds	r4, #255	; 0xff
   11916:	7a22      	ldrb	r2, [r4, #8]
   11918:	4313      	orrs	r3, r2
   1191a:	7223      	strb	r3, [r4, #8]
   1191c:	bd70      	pop	{r4, r5, r6, pc}
   1191e:	46c0      	nop			; (mov r8, r8)
   11920:	20003ad4 	.word	0x20003ad4
   11924:	00014fe3 	.word	0x00014fe3
   11928:	00008755 	.word	0x00008755

0001192c <LorawanAddMcastFcntMin>:
   1192c:	220a      	movs	r2, #10
   1192e:	2903      	cmp	r1, #3
   11930:	d807      	bhi.n	11942 <LorawanAddMcastFcntMin+0x16>
   11932:	233c      	movs	r3, #60	; 0x3c
   11934:	434b      	muls	r3, r1
   11936:	4904      	ldr	r1, [pc, #16]	; (11948 <LorawanAddMcastFcntMin+0x1c>)
   11938:	3a02      	subs	r2, #2
   1193a:	18c9      	adds	r1, r1, r3
   1193c:	31fc      	adds	r1, #252	; 0xfc
   1193e:	65c8      	str	r0, [r1, #92]	; 0x5c
   11940:	6588      	str	r0, [r1, #88]	; 0x58
   11942:	0010      	movs	r0, r2
   11944:	4770      	bx	lr
   11946:	46c0      	nop			; (mov r8, r8)
   11948:	20003ad4 	.word	0x20003ad4

0001194c <LorawanAddMcastFcntMax>:
   1194c:	220a      	movs	r2, #10
   1194e:	2903      	cmp	r1, #3
   11950:	d806      	bhi.n	11960 <LorawanAddMcastFcntMax+0x14>
   11952:	233c      	movs	r3, #60	; 0x3c
   11954:	434b      	muls	r3, r1
   11956:	4903      	ldr	r1, [pc, #12]	; (11964 <LorawanAddMcastFcntMax+0x18>)
   11958:	3a02      	subs	r2, #2
   1195a:	18c9      	adds	r1, r1, r3
   1195c:	31fc      	adds	r1, #252	; 0xfc
   1195e:	6608      	str	r0, [r1, #96]	; 0x60
   11960:	0010      	movs	r0, r2
   11962:	4770      	bx	lr
   11964:	20003ad4 	.word	0x20003ad4

00011968 <LorawanAddMcastDlFrequency>:
   11968:	b513      	push	{r0, r1, r4, lr}
   1196a:	000c      	movs	r4, r1
   1196c:	9001      	str	r0, [sp, #4]
   1196e:	2903      	cmp	r1, #3
   11970:	d901      	bls.n	11976 <LorawanAddMcastDlFrequency+0xe>
   11972:	200a      	movs	r0, #10
   11974:	bd16      	pop	{r1, r2, r4, pc}
   11976:	a901      	add	r1, sp, #4
   11978:	2001      	movs	r0, #1
   1197a:	4b0a      	ldr	r3, [pc, #40]	; (119a4 <LorawanAddMcastDlFrequency+0x3c>)
   1197c:	4798      	blx	r3
   1197e:	2808      	cmp	r0, #8
   11980:	d1f7      	bne.n	11972 <LorawanAddMcastDlFrequency+0xa>
   11982:	213c      	movs	r1, #60	; 0x3c
   11984:	4361      	muls	r1, r4
   11986:	4b08      	ldr	r3, [pc, #32]	; (119a8 <LorawanAddMcastDlFrequency+0x40>)
   11988:	9a01      	ldr	r2, [sp, #4]
   1198a:	1859      	adds	r1, r3, r1
   1198c:	31fc      	adds	r1, #252	; 0xfc
   1198e:	336f      	adds	r3, #111	; 0x6f
   11990:	668a      	str	r2, [r1, #104]	; 0x68
   11992:	0a11      	lsrs	r1, r2, #8
   11994:	701a      	strb	r2, [r3, #0]
   11996:	7059      	strb	r1, [r3, #1]
   11998:	0c11      	lsrs	r1, r2, #16
   1199a:	0e12      	lsrs	r2, r2, #24
   1199c:	7099      	strb	r1, [r3, #2]
   1199e:	70da      	strb	r2, [r3, #3]
   119a0:	e7e8      	b.n	11974 <LorawanAddMcastDlFrequency+0xc>
   119a2:	46c0      	nop			; (mov r8, r8)
   119a4:	0000b6ad 	.word	0x0000b6ad
   119a8:	20003ad4 	.word	0x20003ad4

000119ac <LorawanAddMcastDatarate>:
   119ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   119ae:	466b      	mov	r3, sp
   119b0:	1ddd      	adds	r5, r3, #7
   119b2:	000c      	movs	r4, r1
   119b4:	7028      	strb	r0, [r5, #0]
   119b6:	2903      	cmp	r1, #3
   119b8:	d901      	bls.n	119be <LorawanAddMcastDatarate+0x12>
   119ba:	200a      	movs	r0, #10
   119bc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   119be:	0029      	movs	r1, r5
   119c0:	200f      	movs	r0, #15
   119c2:	4b07      	ldr	r3, [pc, #28]	; (119e0 <LorawanAddMcastDatarate+0x34>)
   119c4:	4798      	blx	r3
   119c6:	2808      	cmp	r0, #8
   119c8:	d1f7      	bne.n	119ba <LorawanAddMcastDatarate+0xe>
   119ca:	213c      	movs	r1, #60	; 0x3c
   119cc:	4361      	muls	r1, r4
   119ce:	4b05      	ldr	r3, [pc, #20]	; (119e4 <LorawanAddMcastDatarate+0x38>)
   119d0:	782a      	ldrb	r2, [r5, #0]
   119d2:	1859      	adds	r1, r3, r1
   119d4:	3169      	adds	r1, #105	; 0x69
   119d6:	31ff      	adds	r1, #255	; 0xff
   119d8:	3373      	adds	r3, #115	; 0x73
   119da:	700a      	strb	r2, [r1, #0]
   119dc:	701a      	strb	r2, [r3, #0]
   119de:	e7ed      	b.n	119bc <LorawanAddMcastDatarate+0x10>
   119e0:	0000b6ad 	.word	0x0000b6ad
   119e4:	20003ad4 	.word	0x20003ad4

000119e8 <LorawanAddMcastPeriodicity>:
   119e8:	220a      	movs	r2, #10
   119ea:	2903      	cmp	r1, #3
   119ec:	d809      	bhi.n	11a02 <LorawanAddMcastPeriodicity+0x1a>
   119ee:	2807      	cmp	r0, #7
   119f0:	d807      	bhi.n	11a02 <LorawanAddMcastPeriodicity+0x1a>
   119f2:	233c      	movs	r3, #60	; 0x3c
   119f4:	434b      	muls	r3, r1
   119f6:	4904      	ldr	r1, [pc, #16]	; (11a08 <LorawanAddMcastPeriodicity+0x20>)
   119f8:	3a02      	subs	r2, #2
   119fa:	18c9      	adds	r1, r1, r3
   119fc:	316a      	adds	r1, #106	; 0x6a
   119fe:	31ff      	adds	r1, #255	; 0xff
   11a00:	7008      	strb	r0, [r1, #0]
   11a02:	0010      	movs	r0, r2
   11a04:	4770      	bx	lr
   11a06:	46c0      	nop			; (mov r8, r8)
   11a08:	20003ad4 	.word	0x20003ad4

00011a0c <Radio_LBTScanTimeout>:
   11a0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   11a0e:	4c1c      	ldr	r4, [pc, #112]	; (11a80 <Radio_LBTScanTimeout+0x74>)
   11a10:	0025      	movs	r5, r4
   11a12:	0023      	movs	r3, r4
   11a14:	354f      	adds	r5, #79	; 0x4f
   11a16:	7829      	ldrb	r1, [r5, #0]
   11a18:	3340      	adds	r3, #64	; 0x40
   11a1a:	3101      	adds	r1, #1
   11a1c:	b2c9      	uxtb	r1, r1
   11a1e:	7029      	strb	r1, [r5, #0]
   11a20:	781b      	ldrb	r3, [r3, #0]
   11a22:	428b      	cmp	r3, r1
   11a24:	d315      	bcc.n	11a52 <Radio_LBTScanTimeout+0x46>
   11a26:	260e      	movs	r6, #14
   11a28:	446e      	add	r6, sp
   11a2a:	4b16      	ldr	r3, [pc, #88]	; (11a84 <Radio_LBTScanTimeout+0x78>)
   11a2c:	0030      	movs	r0, r6
   11a2e:	4798      	blx	r3
   11a30:	2300      	movs	r3, #0
   11a32:	5ef2      	ldrsh	r2, [r6, r3]
   11a34:	782b      	ldrb	r3, [r5, #0]
   11a36:	4353      	muls	r3, r2
   11a38:	6c62      	ldr	r2, [r4, #68]	; 0x44
   11a3a:	189b      	adds	r3, r3, r2
   11a3c:	6463      	str	r3, [r4, #68]	; 0x44
   11a3e:	0023      	movs	r3, r4
   11a40:	2200      	movs	r2, #0
   11a42:	3350      	adds	r3, #80	; 0x50
   11a44:	7818      	ldrb	r0, [r3, #0]
   11a46:	9200      	str	r2, [sp, #0]
   11a48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   11a4a:	4b0f      	ldr	r3, [pc, #60]	; (11a88 <Radio_LBTScanTimeout+0x7c>)
   11a4c:	4c0f      	ldr	r4, [pc, #60]	; (11a8c <Radio_LBTScanTimeout+0x80>)
   11a4e:	47a0      	blx	r4
   11a50:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   11a52:	2380      	movs	r3, #128	; 0x80
   11a54:	4a0e      	ldr	r2, [pc, #56]	; (11a90 <Radio_LBTScanTimeout+0x84>)
   11a56:	009b      	lsls	r3, r3, #2
   11a58:	8810      	ldrh	r0, [r2, #0]
   11a5a:	4303      	orrs	r3, r0
   11a5c:	8013      	strh	r3, [r2, #0]
   11a5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   11a60:	0058      	lsls	r0, r3, #1
   11a62:	1e4b      	subs	r3, r1, #1
   11a64:	4359      	muls	r1, r3
   11a66:	4b0b      	ldr	r3, [pc, #44]	; (11a94 <Radio_LBTScanTimeout+0x88>)
   11a68:	b289      	uxth	r1, r1
   11a6a:	4798      	blx	r3
   11a6c:	0023      	movs	r3, r4
   11a6e:	334c      	adds	r3, #76	; 0x4c
   11a70:	8018      	strh	r0, [r3, #0]
   11a72:	2300      	movs	r3, #0
   11a74:	2001      	movs	r0, #1
   11a76:	702b      	strb	r3, [r5, #0]
   11a78:	6463      	str	r3, [r4, #68]	; 0x44
   11a7a:	4b07      	ldr	r3, [pc, #28]	; (11a98 <Radio_LBTScanTimeout+0x8c>)
   11a7c:	4798      	blx	r3
   11a7e:	e7e7      	b.n	11a50 <Radio_LBTScanTimeout+0x44>
   11a80:	200037b0 	.word	0x200037b0
   11a84:	0000c431 	.word	0x0000c431
   11a88:	00011a0d 	.word	0x00011a0d
   11a8c:	0000bbd9 	.word	0x0000bbd9
   11a90:	200039a8 	.word	0x200039a8
   11a94:	00011e95 	.word	0x00011e95
   11a98:	0000d379 	.word	0x0000d379

00011a9c <RADIO_ScanHandler>:
   11a9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11a9e:	4b12      	ldr	r3, [pc, #72]	; (11ae8 <RADIO_ScanHandler+0x4c>)
   11aa0:	4798      	blx	r3
   11aa2:	2000      	movs	r0, #0
   11aa4:	4b11      	ldr	r3, [pc, #68]	; (11aec <RADIO_ScanHandler+0x50>)
   11aa6:	4798      	blx	r3
   11aa8:	4d11      	ldr	r5, [pc, #68]	; (11af0 <RADIO_ScanHandler+0x54>)
   11aaa:	4b12      	ldr	r3, [pc, #72]	; (11af4 <RADIO_ScanHandler+0x58>)
   11aac:	6828      	ldr	r0, [r5, #0]
   11aae:	2400      	movs	r4, #0
   11ab0:	4798      	blx	r3
   11ab2:	002b      	movs	r3, r5
   11ab4:	4e10      	ldr	r6, [pc, #64]	; (11af8 <RADIO_ScanHandler+0x5c>)
   11ab6:	334c      	adds	r3, #76	; 0x4c
   11ab8:	2201      	movs	r2, #1
   11aba:	0021      	movs	r1, r4
   11abc:	0020      	movs	r0, r4
   11abe:	801c      	strh	r4, [r3, #0]
   11ac0:	47b0      	blx	r6
   11ac2:	4b0e      	ldr	r3, [pc, #56]	; (11afc <RADIO_ScanHandler+0x60>)
   11ac4:	2109      	movs	r1, #9
   11ac6:	2012      	movs	r0, #18
   11ac8:	4798      	blx	r3
   11aca:	3550      	adds	r5, #80	; 0x50
   11acc:	0022      	movs	r2, r4
   11ace:	0021      	movs	r1, r4
   11ad0:	2005      	movs	r0, #5
   11ad2:	47b0      	blx	r6
   11ad4:	7828      	ldrb	r0, [r5, #0]
   11ad6:	4b0a      	ldr	r3, [pc, #40]	; (11b00 <RADIO_ScanHandler+0x64>)
   11ad8:	4d0a      	ldr	r5, [pc, #40]	; (11b04 <RADIO_ScanHandler+0x68>)
   11ada:	9400      	str	r4, [sp, #0]
   11adc:	0022      	movs	r2, r4
   11ade:	490a      	ldr	r1, [pc, #40]	; (11b08 <RADIO_ScanHandler+0x6c>)
   11ae0:	47a8      	blx	r5
   11ae2:	0020      	movs	r0, r4
   11ae4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   11ae6:	46c0      	nop			; (mov r8, r8)
   11ae8:	0000d9e9 	.word	0x0000d9e9
   11aec:	0000d62d 	.word	0x0000d62d
   11af0:	200037b0 	.word	0x200037b0
   11af4:	0000cd71 	.word	0x0000cd71
   11af8:	0000c215 	.word	0x0000c215
   11afc:	0000afed 	.word	0x0000afed
   11b00:	00011a0d 	.word	0x00011a0d
   11b04:	0000bbd9 	.word	0x0000bbd9
   11b08:	00002328 	.word	0x00002328

00011b0c <radioScanDoneHandler>:
   11b0c:	b530      	push	{r4, r5, lr}
   11b0e:	4a18      	ldr	r2, [pc, #96]	; (11b70 <radioScanDoneHandler+0x64>)
   11b10:	4918      	ldr	r1, [pc, #96]	; (11b74 <radioScanDoneHandler+0x68>)
   11b12:	8813      	ldrh	r3, [r2, #0]
   11b14:	b085      	sub	sp, #20
   11b16:	400b      	ands	r3, r1
   11b18:	8013      	strh	r3, [r2, #0]
   11b1a:	2200      	movs	r2, #0
   11b1c:	4b16      	ldr	r3, [pc, #88]	; (11b78 <radioScanDoneHandler+0x6c>)
   11b1e:	0011      	movs	r1, r2
   11b20:	0010      	movs	r0, r2
   11b22:	4798      	blx	r3
   11b24:	2000      	movs	r0, #0
   11b26:	4b15      	ldr	r3, [pc, #84]	; (11b7c <radioScanDoneHandler+0x70>)
   11b28:	4798      	blx	r3
   11b2a:	4b15      	ldr	r3, [pc, #84]	; (11b80 <radioScanDoneHandler+0x74>)
   11b2c:	4798      	blx	r3
   11b2e:	4c15      	ldr	r4, [pc, #84]	; (11b84 <radioScanDoneHandler+0x78>)
   11b30:	0023      	movs	r3, r4
   11b32:	334c      	adds	r3, #76	; 0x4c
   11b34:	2100      	movs	r1, #0
   11b36:	5e59      	ldrsh	r1, [r3, r1]
   11b38:	233e      	movs	r3, #62	; 0x3e
   11b3a:	5ee2      	ldrsh	r2, [r4, r3]
   11b3c:	4b12      	ldr	r3, [pc, #72]	; (11b88 <radioScanDoneHandler+0x7c>)
   11b3e:	4291      	cmp	r1, r2
   11b40:	da06      	bge.n	11b50 <radioScanDoneHandler+0x44>
   11b42:	2002      	movs	r0, #2
   11b44:	4798      	blx	r3
   11b46:	4b11      	ldr	r3, [pc, #68]	; (11b8c <radioScanDoneHandler+0x80>)
   11b48:	4798      	blx	r3
   11b4a:	2000      	movs	r0, #0
   11b4c:	b005      	add	sp, #20
   11b4e:	bd30      	pop	{r4, r5, pc}
   11b50:	2207      	movs	r2, #7
   11b52:	ad01      	add	r5, sp, #4
   11b54:	2001      	movs	r0, #1
   11b56:	702a      	strb	r2, [r5, #0]
   11b58:	4798      	blx	r3
   11b5a:	4b0d      	ldr	r3, [pc, #52]	; (11b90 <radioScanDoneHandler+0x84>)
   11b5c:	781b      	ldrb	r3, [r3, #0]
   11b5e:	079b      	lsls	r3, r3, #30
   11b60:	d5f3      	bpl.n	11b4a <radioScanDoneHandler+0x3e>
   11b62:	6923      	ldr	r3, [r4, #16]
   11b64:	2b00      	cmp	r3, #0
   11b66:	d0f0      	beq.n	11b4a <radioScanDoneHandler+0x3e>
   11b68:	0029      	movs	r1, r5
   11b6a:	2002      	movs	r0, #2
   11b6c:	4798      	blx	r3
   11b6e:	e7ec      	b.n	11b4a <radioScanDoneHandler+0x3e>
   11b70:	200039a8 	.word	0x200039a8
   11b74:	fffffdff 	.word	0xfffffdff
   11b78:	0000c215 	.word	0x0000c215
   11b7c:	0000d661 	.word	0x0000d661
   11b80:	0000db19 	.word	0x0000db19
   11b84:	200037b0 	.word	0x200037b0
   11b88:	0000d425 	.word	0x0000d425
   11b8c:	0000dde5 	.word	0x0000dde5
   11b90:	200039aa 	.word	0x200039aa

00011b94 <common_tc_read_count>:
   11b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b96:	4b0d      	ldr	r3, [pc, #52]	; (11bcc <common_tc_read_count+0x38>)
   11b98:	4798      	blx	r3
   11b9a:	4b0d      	ldr	r3, [pc, #52]	; (11bd0 <common_tc_read_count+0x3c>)
   11b9c:	781b      	ldrb	r3, [r3, #0]
   11b9e:	2b00      	cmp	r3, #0
   11ba0:	d00e      	beq.n	11bc0 <common_tc_read_count+0x2c>
   11ba2:	4b0c      	ldr	r3, [pc, #48]	; (11bd4 <common_tc_read_count+0x40>)
   11ba4:	781d      	ldrb	r5, [r3, #0]
   11ba6:	4b0a      	ldr	r3, [pc, #40]	; (11bd0 <common_tc_read_count+0x3c>)
   11ba8:	781f      	ldrb	r7, [r3, #0]
   11baa:	4c0b      	ldr	r4, [pc, #44]	; (11bd8 <common_tc_read_count+0x44>)
   11bac:	1c29      	adds	r1, r5, #0
   11bae:	47a0      	blx	r4
   11bb0:	1c06      	adds	r6, r0, #0
   11bb2:	480a      	ldr	r0, [pc, #40]	; (11bdc <common_tc_read_count+0x48>)
   11bb4:	1c29      	adds	r1, r5, #0
   11bb6:	47a0      	blx	r4
   11bb8:	4378      	muls	r0, r7
   11bba:	1830      	adds	r0, r6, r0
   11bbc:	b280      	uxth	r0, r0
   11bbe:	e004      	b.n	11bca <common_tc_read_count+0x36>
   11bc0:	4b04      	ldr	r3, [pc, #16]	; (11bd4 <common_tc_read_count+0x40>)
   11bc2:	7819      	ldrb	r1, [r3, #0]
   11bc4:	4b04      	ldr	r3, [pc, #16]	; (11bd8 <common_tc_read_count+0x44>)
   11bc6:	4798      	blx	r3
   11bc8:	b280      	uxth	r0, r0
   11bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11bcc:	0000c465 	.word	0x0000c465
   11bd0:	20001e08 	.word	0x20001e08
   11bd4:	20003e38 	.word	0x20003e38
   11bd8:	00011e95 	.word	0x00011e95
   11bdc:	0000ffff 	.word	0x0000ffff

00011be0 <common_tc_compare_stop>:
   11be0:	b508      	push	{r3, lr}
   11be2:	4b05      	ldr	r3, [pc, #20]	; (11bf8 <common_tc_compare_stop+0x18>)
   11be4:	4798      	blx	r3
   11be6:	4b05      	ldr	r3, [pc, #20]	; (11bfc <common_tc_compare_stop+0x1c>)
   11be8:	4798      	blx	r3
   11bea:	4b05      	ldr	r3, [pc, #20]	; (11c00 <common_tc_compare_stop+0x20>)
   11bec:	2200      	movs	r2, #0
   11bee:	605a      	str	r2, [r3, #4]
   11bf0:	811a      	strh	r2, [r3, #8]
   11bf2:	4b04      	ldr	r3, [pc, #16]	; (11c04 <common_tc_compare_stop+0x24>)
   11bf4:	4798      	blx	r3
   11bf6:	bd08      	pop	{r3, pc}
   11bf8:	0000c479 	.word	0x0000c479
   11bfc:	0000c551 	.word	0x0000c551
   11c00:	20001e08 	.word	0x20001e08
   11c04:	0000c575 	.word	0x0000c575

00011c08 <common_tc_overflow_stop>:
   11c08:	b508      	push	{r3, lr}
   11c0a:	4b03      	ldr	r3, [pc, #12]	; (11c18 <common_tc_overflow_stop+0x10>)
   11c0c:	4798      	blx	r3
   11c0e:	2200      	movs	r2, #0
   11c10:	4b02      	ldr	r3, [pc, #8]	; (11c1c <common_tc_overflow_stop+0x14>)
   11c12:	701a      	strb	r2, [r3, #0]
   11c14:	bd08      	pop	{r3, pc}
   11c16:	46c0      	nop			; (mov r8, r8)
   11c18:	0000c4c9 	.word	0x0000c4c9
   11c1c:	20001e08 	.word	0x20001e08

00011c20 <common_tc_stop>:
   11c20:	b508      	push	{r3, lr}
   11c22:	4b03      	ldr	r3, [pc, #12]	; (11c30 <common_tc_stop+0x10>)
   11c24:	4798      	blx	r3
   11c26:	4b03      	ldr	r3, [pc, #12]	; (11c34 <common_tc_stop+0x14>)
   11c28:	4798      	blx	r3
   11c2a:	4b03      	ldr	r3, [pc, #12]	; (11c38 <common_tc_stop+0x18>)
   11c2c:	4798      	blx	r3
   11c2e:	bd08      	pop	{r3, pc}
   11c30:	00011be1 	.word	0x00011be1
   11c34:	00011c09 	.word	0x00011c09
   11c38:	0000c519 	.word	0x0000c519

00011c3c <common_tc_delay>:
   11c3c:	b510      	push	{r4, lr}
   11c3e:	1c04      	adds	r4, r0, #0
   11c40:	4b13      	ldr	r3, [pc, #76]	; (11c90 <common_tc_delay+0x54>)
   11c42:	4798      	blx	r3
   11c44:	4b13      	ldr	r3, [pc, #76]	; (11c94 <common_tc_delay+0x58>)
   11c46:	781a      	ldrb	r2, [r3, #0]
   11c48:	4362      	muls	r2, r4
   11c4a:	1881      	adds	r1, r0, r2
   11c4c:	4b12      	ldr	r3, [pc, #72]	; (11c98 <common_tc_delay+0x5c>)
   11c4e:	6059      	str	r1, [r3, #4]
   11c50:	6859      	ldr	r1, [r3, #4]
   11c52:	0c09      	lsrs	r1, r1, #16
   11c54:	6059      	str	r1, [r3, #4]
   11c56:	685b      	ldr	r3, [r3, #4]
   11c58:	2b00      	cmp	r3, #0
   11c5a:	d007      	beq.n	11c6c <common_tc_delay+0x30>
   11c5c:	4b0e      	ldr	r3, [pc, #56]	; (11c98 <common_tc_delay+0x5c>)
   11c5e:	6859      	ldr	r1, [r3, #4]
   11c60:	3201      	adds	r2, #1
   11c62:	1880      	adds	r0, r0, r2
   11c64:	8118      	strh	r0, [r3, #8]
   11c66:	4b0d      	ldr	r3, [pc, #52]	; (11c9c <common_tc_delay+0x60>)
   11c68:	4798      	blx	r3
   11c6a:	e004      	b.n	11c76 <common_tc_delay+0x3a>
   11c6c:	1882      	adds	r2, r0, r2
   11c6e:	4b0a      	ldr	r3, [pc, #40]	; (11c98 <common_tc_delay+0x5c>)
   11c70:	811a      	strh	r2, [r3, #8]
   11c72:	4b0b      	ldr	r3, [pc, #44]	; (11ca0 <common_tc_delay+0x64>)
   11c74:	4798      	blx	r3
   11c76:	4b08      	ldr	r3, [pc, #32]	; (11c98 <common_tc_delay+0x5c>)
   11c78:	891b      	ldrh	r3, [r3, #8]
   11c7a:	2b63      	cmp	r3, #99	; 0x63
   11c7c:	d802      	bhi.n	11c84 <common_tc_delay+0x48>
   11c7e:	3364      	adds	r3, #100	; 0x64
   11c80:	4a05      	ldr	r2, [pc, #20]	; (11c98 <common_tc_delay+0x5c>)
   11c82:	8113      	strh	r3, [r2, #8]
   11c84:	4b04      	ldr	r3, [pc, #16]	; (11c98 <common_tc_delay+0x5c>)
   11c86:	8918      	ldrh	r0, [r3, #8]
   11c88:	4b06      	ldr	r3, [pc, #24]	; (11ca4 <common_tc_delay+0x68>)
   11c8a:	4798      	blx	r3
   11c8c:	bd10      	pop	{r4, pc}
   11c8e:	46c0      	nop			; (mov r8, r8)
   11c90:	0000c465 	.word	0x0000c465
   11c94:	20003e38 	.word	0x20003e38
   11c98:	20001e08 	.word	0x20001e08
   11c9c:	0000c479 	.word	0x0000c479
   11ca0:	0000c48d 	.word	0x0000c48d
   11ca4:	0000c539 	.word	0x0000c539

00011ca8 <common_tc_init>:
   11ca8:	b508      	push	{r3, lr}
   11caa:	2200      	movs	r2, #0
   11cac:	4b03      	ldr	r3, [pc, #12]	; (11cbc <common_tc_init+0x14>)
   11cae:	701a      	strb	r2, [r3, #0]
   11cb0:	4b03      	ldr	r3, [pc, #12]	; (11cc0 <common_tc_init+0x18>)
   11cb2:	4798      	blx	r3
   11cb4:	4b03      	ldr	r3, [pc, #12]	; (11cc4 <common_tc_init+0x1c>)
   11cb6:	7018      	strb	r0, [r3, #0]
   11cb8:	bd08      	pop	{r3, pc}
   11cba:	46c0      	nop			; (mov r8, r8)
   11cbc:	20001e08 	.word	0x20001e08
   11cc0:	0000c58d 	.word	0x0000c58d
   11cc4:	20003e38 	.word	0x20003e38

00011cc8 <tmr_ovf_callback>:
   11cc8:	b508      	push	{r3, lr}
   11cca:	4b0e      	ldr	r3, [pc, #56]	; (11d04 <tmr_ovf_callback+0x3c>)
   11ccc:	685b      	ldr	r3, [r3, #4]
   11cce:	2b00      	cmp	r3, #0
   11cd0:	d007      	beq.n	11ce2 <tmr_ovf_callback+0x1a>
   11cd2:	4a0c      	ldr	r2, [pc, #48]	; (11d04 <tmr_ovf_callback+0x3c>)
   11cd4:	6853      	ldr	r3, [r2, #4]
   11cd6:	3b01      	subs	r3, #1
   11cd8:	6053      	str	r3, [r2, #4]
   11cda:	2b00      	cmp	r3, #0
   11cdc:	d101      	bne.n	11ce2 <tmr_ovf_callback+0x1a>
   11cde:	4b0a      	ldr	r3, [pc, #40]	; (11d08 <tmr_ovf_callback+0x40>)
   11ce0:	4798      	blx	r3
   11ce2:	4a08      	ldr	r2, [pc, #32]	; (11d04 <tmr_ovf_callback+0x3c>)
   11ce4:	7813      	ldrb	r3, [r2, #0]
   11ce6:	3301      	adds	r3, #1
   11ce8:	b2db      	uxtb	r3, r3
   11cea:	7013      	strb	r3, [r2, #0]
   11cec:	4a07      	ldr	r2, [pc, #28]	; (11d0c <tmr_ovf_callback+0x44>)
   11cee:	7812      	ldrb	r2, [r2, #0]
   11cf0:	429a      	cmp	r2, r3
   11cf2:	d806      	bhi.n	11d02 <tmr_ovf_callback+0x3a>
   11cf4:	4b03      	ldr	r3, [pc, #12]	; (11d04 <tmr_ovf_callback+0x3c>)
   11cf6:	2200      	movs	r2, #0
   11cf8:	701a      	strb	r2, [r3, #0]
   11cfa:	68db      	ldr	r3, [r3, #12]
   11cfc:	2b00      	cmp	r3, #0
   11cfe:	d000      	beq.n	11d02 <tmr_ovf_callback+0x3a>
   11d00:	4798      	blx	r3
   11d02:	bd08      	pop	{r3, pc}
   11d04:	20001e08 	.word	0x20001e08
   11d08:	0000c48d 	.word	0x0000c48d
   11d0c:	20003e38 	.word	0x20003e38

00011d10 <tmr_cca_callback>:
   11d10:	b508      	push	{r3, lr}
   11d12:	4b04      	ldr	r3, [pc, #16]	; (11d24 <tmr_cca_callback+0x14>)
   11d14:	4798      	blx	r3
   11d16:	4b04      	ldr	r3, [pc, #16]	; (11d28 <tmr_cca_callback+0x18>)
   11d18:	691b      	ldr	r3, [r3, #16]
   11d1a:	2b00      	cmp	r3, #0
   11d1c:	d000      	beq.n	11d20 <tmr_cca_callback+0x10>
   11d1e:	4798      	blx	r3
   11d20:	bd08      	pop	{r3, pc}
   11d22:	46c0      	nop			; (mov r8, r8)
   11d24:	0000c479 	.word	0x0000c479
   11d28:	20001e08 	.word	0x20001e08

00011d2c <set_common_tc_overflow_callback>:
   11d2c:	4b01      	ldr	r3, [pc, #4]	; (11d34 <set_common_tc_overflow_callback+0x8>)
   11d2e:	60d8      	str	r0, [r3, #12]
   11d30:	4770      	bx	lr
   11d32:	46c0      	nop			; (mov r8, r8)
   11d34:	20001e08 	.word	0x20001e08

00011d38 <set_common_tc_expiry_callback>:
   11d38:	4b01      	ldr	r3, [pc, #4]	; (11d40 <set_common_tc_expiry_callback+0x8>)
   11d3a:	6118      	str	r0, [r3, #16]
   11d3c:	4770      	bx	lr
   11d3e:	46c0      	nop			; (mov r8, r8)
   11d40:	20001e08 	.word	0x20001e08

00011d44 <__gnu_thumb1_case_uqi>:
   11d44:	b402      	push	{r1}
   11d46:	4671      	mov	r1, lr
   11d48:	0849      	lsrs	r1, r1, #1
   11d4a:	0049      	lsls	r1, r1, #1
   11d4c:	5c09      	ldrb	r1, [r1, r0]
   11d4e:	0049      	lsls	r1, r1, #1
   11d50:	448e      	add	lr, r1
   11d52:	bc02      	pop	{r1}
   11d54:	4770      	bx	lr
   11d56:	46c0      	nop			; (mov r8, r8)

00011d58 <__gnu_thumb1_case_shi>:
   11d58:	b403      	push	{r0, r1}
   11d5a:	4671      	mov	r1, lr
   11d5c:	0849      	lsrs	r1, r1, #1
   11d5e:	0040      	lsls	r0, r0, #1
   11d60:	0049      	lsls	r1, r1, #1
   11d62:	5e09      	ldrsh	r1, [r1, r0]
   11d64:	0049      	lsls	r1, r1, #1
   11d66:	448e      	add	lr, r1
   11d68:	bc03      	pop	{r0, r1}
   11d6a:	4770      	bx	lr

00011d6c <__gnu_thumb1_case_uhi>:
   11d6c:	b403      	push	{r0, r1}
   11d6e:	4671      	mov	r1, lr
   11d70:	0849      	lsrs	r1, r1, #1
   11d72:	0040      	lsls	r0, r0, #1
   11d74:	0049      	lsls	r1, r1, #1
   11d76:	5a09      	ldrh	r1, [r1, r0]
   11d78:	0049      	lsls	r1, r1, #1
   11d7a:	448e      	add	lr, r1
   11d7c:	bc03      	pop	{r0, r1}
   11d7e:	4770      	bx	lr

00011d80 <__udivsi3>:
   11d80:	2200      	movs	r2, #0
   11d82:	0843      	lsrs	r3, r0, #1
   11d84:	428b      	cmp	r3, r1
   11d86:	d374      	bcc.n	11e72 <__udivsi3+0xf2>
   11d88:	0903      	lsrs	r3, r0, #4
   11d8a:	428b      	cmp	r3, r1
   11d8c:	d35f      	bcc.n	11e4e <__udivsi3+0xce>
   11d8e:	0a03      	lsrs	r3, r0, #8
   11d90:	428b      	cmp	r3, r1
   11d92:	d344      	bcc.n	11e1e <__udivsi3+0x9e>
   11d94:	0b03      	lsrs	r3, r0, #12
   11d96:	428b      	cmp	r3, r1
   11d98:	d328      	bcc.n	11dec <__udivsi3+0x6c>
   11d9a:	0c03      	lsrs	r3, r0, #16
   11d9c:	428b      	cmp	r3, r1
   11d9e:	d30d      	bcc.n	11dbc <__udivsi3+0x3c>
   11da0:	22ff      	movs	r2, #255	; 0xff
   11da2:	0209      	lsls	r1, r1, #8
   11da4:	ba12      	rev	r2, r2
   11da6:	0c03      	lsrs	r3, r0, #16
   11da8:	428b      	cmp	r3, r1
   11daa:	d302      	bcc.n	11db2 <__udivsi3+0x32>
   11dac:	1212      	asrs	r2, r2, #8
   11dae:	0209      	lsls	r1, r1, #8
   11db0:	d065      	beq.n	11e7e <__udivsi3+0xfe>
   11db2:	0b03      	lsrs	r3, r0, #12
   11db4:	428b      	cmp	r3, r1
   11db6:	d319      	bcc.n	11dec <__udivsi3+0x6c>
   11db8:	e000      	b.n	11dbc <__udivsi3+0x3c>
   11dba:	0a09      	lsrs	r1, r1, #8
   11dbc:	0bc3      	lsrs	r3, r0, #15
   11dbe:	428b      	cmp	r3, r1
   11dc0:	d301      	bcc.n	11dc6 <__udivsi3+0x46>
   11dc2:	03cb      	lsls	r3, r1, #15
   11dc4:	1ac0      	subs	r0, r0, r3
   11dc6:	4152      	adcs	r2, r2
   11dc8:	0b83      	lsrs	r3, r0, #14
   11dca:	428b      	cmp	r3, r1
   11dcc:	d301      	bcc.n	11dd2 <__udivsi3+0x52>
   11dce:	038b      	lsls	r3, r1, #14
   11dd0:	1ac0      	subs	r0, r0, r3
   11dd2:	4152      	adcs	r2, r2
   11dd4:	0b43      	lsrs	r3, r0, #13
   11dd6:	428b      	cmp	r3, r1
   11dd8:	d301      	bcc.n	11dde <__udivsi3+0x5e>
   11dda:	034b      	lsls	r3, r1, #13
   11ddc:	1ac0      	subs	r0, r0, r3
   11dde:	4152      	adcs	r2, r2
   11de0:	0b03      	lsrs	r3, r0, #12
   11de2:	428b      	cmp	r3, r1
   11de4:	d301      	bcc.n	11dea <__udivsi3+0x6a>
   11de6:	030b      	lsls	r3, r1, #12
   11de8:	1ac0      	subs	r0, r0, r3
   11dea:	4152      	adcs	r2, r2
   11dec:	0ac3      	lsrs	r3, r0, #11
   11dee:	428b      	cmp	r3, r1
   11df0:	d301      	bcc.n	11df6 <__udivsi3+0x76>
   11df2:	02cb      	lsls	r3, r1, #11
   11df4:	1ac0      	subs	r0, r0, r3
   11df6:	4152      	adcs	r2, r2
   11df8:	0a83      	lsrs	r3, r0, #10
   11dfa:	428b      	cmp	r3, r1
   11dfc:	d301      	bcc.n	11e02 <__udivsi3+0x82>
   11dfe:	028b      	lsls	r3, r1, #10
   11e00:	1ac0      	subs	r0, r0, r3
   11e02:	4152      	adcs	r2, r2
   11e04:	0a43      	lsrs	r3, r0, #9
   11e06:	428b      	cmp	r3, r1
   11e08:	d301      	bcc.n	11e0e <__udivsi3+0x8e>
   11e0a:	024b      	lsls	r3, r1, #9
   11e0c:	1ac0      	subs	r0, r0, r3
   11e0e:	4152      	adcs	r2, r2
   11e10:	0a03      	lsrs	r3, r0, #8
   11e12:	428b      	cmp	r3, r1
   11e14:	d301      	bcc.n	11e1a <__udivsi3+0x9a>
   11e16:	020b      	lsls	r3, r1, #8
   11e18:	1ac0      	subs	r0, r0, r3
   11e1a:	4152      	adcs	r2, r2
   11e1c:	d2cd      	bcs.n	11dba <__udivsi3+0x3a>
   11e1e:	09c3      	lsrs	r3, r0, #7
   11e20:	428b      	cmp	r3, r1
   11e22:	d301      	bcc.n	11e28 <__udivsi3+0xa8>
   11e24:	01cb      	lsls	r3, r1, #7
   11e26:	1ac0      	subs	r0, r0, r3
   11e28:	4152      	adcs	r2, r2
   11e2a:	0983      	lsrs	r3, r0, #6
   11e2c:	428b      	cmp	r3, r1
   11e2e:	d301      	bcc.n	11e34 <__udivsi3+0xb4>
   11e30:	018b      	lsls	r3, r1, #6
   11e32:	1ac0      	subs	r0, r0, r3
   11e34:	4152      	adcs	r2, r2
   11e36:	0943      	lsrs	r3, r0, #5
   11e38:	428b      	cmp	r3, r1
   11e3a:	d301      	bcc.n	11e40 <__udivsi3+0xc0>
   11e3c:	014b      	lsls	r3, r1, #5
   11e3e:	1ac0      	subs	r0, r0, r3
   11e40:	4152      	adcs	r2, r2
   11e42:	0903      	lsrs	r3, r0, #4
   11e44:	428b      	cmp	r3, r1
   11e46:	d301      	bcc.n	11e4c <__udivsi3+0xcc>
   11e48:	010b      	lsls	r3, r1, #4
   11e4a:	1ac0      	subs	r0, r0, r3
   11e4c:	4152      	adcs	r2, r2
   11e4e:	08c3      	lsrs	r3, r0, #3
   11e50:	428b      	cmp	r3, r1
   11e52:	d301      	bcc.n	11e58 <__udivsi3+0xd8>
   11e54:	00cb      	lsls	r3, r1, #3
   11e56:	1ac0      	subs	r0, r0, r3
   11e58:	4152      	adcs	r2, r2
   11e5a:	0883      	lsrs	r3, r0, #2
   11e5c:	428b      	cmp	r3, r1
   11e5e:	d301      	bcc.n	11e64 <__udivsi3+0xe4>
   11e60:	008b      	lsls	r3, r1, #2
   11e62:	1ac0      	subs	r0, r0, r3
   11e64:	4152      	adcs	r2, r2
   11e66:	0843      	lsrs	r3, r0, #1
   11e68:	428b      	cmp	r3, r1
   11e6a:	d301      	bcc.n	11e70 <__udivsi3+0xf0>
   11e6c:	004b      	lsls	r3, r1, #1
   11e6e:	1ac0      	subs	r0, r0, r3
   11e70:	4152      	adcs	r2, r2
   11e72:	1a41      	subs	r1, r0, r1
   11e74:	d200      	bcs.n	11e78 <__udivsi3+0xf8>
   11e76:	4601      	mov	r1, r0
   11e78:	4152      	adcs	r2, r2
   11e7a:	4610      	mov	r0, r2
   11e7c:	4770      	bx	lr
   11e7e:	e7ff      	b.n	11e80 <__udivsi3+0x100>
   11e80:	b501      	push	{r0, lr}
   11e82:	2000      	movs	r0, #0
   11e84:	f000 f8f0 	bl	12068 <__aeabi_idiv0>
   11e88:	bd02      	pop	{r1, pc}
   11e8a:	46c0      	nop			; (mov r8, r8)

00011e8c <__aeabi_uidivmod>:
   11e8c:	2900      	cmp	r1, #0
   11e8e:	d0f7      	beq.n	11e80 <__udivsi3+0x100>
   11e90:	e776      	b.n	11d80 <__udivsi3>
   11e92:	4770      	bx	lr

00011e94 <__divsi3>:
   11e94:	4603      	mov	r3, r0
   11e96:	430b      	orrs	r3, r1
   11e98:	d47f      	bmi.n	11f9a <__divsi3+0x106>
   11e9a:	2200      	movs	r2, #0
   11e9c:	0843      	lsrs	r3, r0, #1
   11e9e:	428b      	cmp	r3, r1
   11ea0:	d374      	bcc.n	11f8c <__divsi3+0xf8>
   11ea2:	0903      	lsrs	r3, r0, #4
   11ea4:	428b      	cmp	r3, r1
   11ea6:	d35f      	bcc.n	11f68 <__divsi3+0xd4>
   11ea8:	0a03      	lsrs	r3, r0, #8
   11eaa:	428b      	cmp	r3, r1
   11eac:	d344      	bcc.n	11f38 <__divsi3+0xa4>
   11eae:	0b03      	lsrs	r3, r0, #12
   11eb0:	428b      	cmp	r3, r1
   11eb2:	d328      	bcc.n	11f06 <__divsi3+0x72>
   11eb4:	0c03      	lsrs	r3, r0, #16
   11eb6:	428b      	cmp	r3, r1
   11eb8:	d30d      	bcc.n	11ed6 <__divsi3+0x42>
   11eba:	22ff      	movs	r2, #255	; 0xff
   11ebc:	0209      	lsls	r1, r1, #8
   11ebe:	ba12      	rev	r2, r2
   11ec0:	0c03      	lsrs	r3, r0, #16
   11ec2:	428b      	cmp	r3, r1
   11ec4:	d302      	bcc.n	11ecc <__divsi3+0x38>
   11ec6:	1212      	asrs	r2, r2, #8
   11ec8:	0209      	lsls	r1, r1, #8
   11eca:	d065      	beq.n	11f98 <__divsi3+0x104>
   11ecc:	0b03      	lsrs	r3, r0, #12
   11ece:	428b      	cmp	r3, r1
   11ed0:	d319      	bcc.n	11f06 <__divsi3+0x72>
   11ed2:	e000      	b.n	11ed6 <__divsi3+0x42>
   11ed4:	0a09      	lsrs	r1, r1, #8
   11ed6:	0bc3      	lsrs	r3, r0, #15
   11ed8:	428b      	cmp	r3, r1
   11eda:	d301      	bcc.n	11ee0 <__divsi3+0x4c>
   11edc:	03cb      	lsls	r3, r1, #15
   11ede:	1ac0      	subs	r0, r0, r3
   11ee0:	4152      	adcs	r2, r2
   11ee2:	0b83      	lsrs	r3, r0, #14
   11ee4:	428b      	cmp	r3, r1
   11ee6:	d301      	bcc.n	11eec <__divsi3+0x58>
   11ee8:	038b      	lsls	r3, r1, #14
   11eea:	1ac0      	subs	r0, r0, r3
   11eec:	4152      	adcs	r2, r2
   11eee:	0b43      	lsrs	r3, r0, #13
   11ef0:	428b      	cmp	r3, r1
   11ef2:	d301      	bcc.n	11ef8 <__divsi3+0x64>
   11ef4:	034b      	lsls	r3, r1, #13
   11ef6:	1ac0      	subs	r0, r0, r3
   11ef8:	4152      	adcs	r2, r2
   11efa:	0b03      	lsrs	r3, r0, #12
   11efc:	428b      	cmp	r3, r1
   11efe:	d301      	bcc.n	11f04 <__divsi3+0x70>
   11f00:	030b      	lsls	r3, r1, #12
   11f02:	1ac0      	subs	r0, r0, r3
   11f04:	4152      	adcs	r2, r2
   11f06:	0ac3      	lsrs	r3, r0, #11
   11f08:	428b      	cmp	r3, r1
   11f0a:	d301      	bcc.n	11f10 <__divsi3+0x7c>
   11f0c:	02cb      	lsls	r3, r1, #11
   11f0e:	1ac0      	subs	r0, r0, r3
   11f10:	4152      	adcs	r2, r2
   11f12:	0a83      	lsrs	r3, r0, #10
   11f14:	428b      	cmp	r3, r1
   11f16:	d301      	bcc.n	11f1c <__divsi3+0x88>
   11f18:	028b      	lsls	r3, r1, #10
   11f1a:	1ac0      	subs	r0, r0, r3
   11f1c:	4152      	adcs	r2, r2
   11f1e:	0a43      	lsrs	r3, r0, #9
   11f20:	428b      	cmp	r3, r1
   11f22:	d301      	bcc.n	11f28 <__divsi3+0x94>
   11f24:	024b      	lsls	r3, r1, #9
   11f26:	1ac0      	subs	r0, r0, r3
   11f28:	4152      	adcs	r2, r2
   11f2a:	0a03      	lsrs	r3, r0, #8
   11f2c:	428b      	cmp	r3, r1
   11f2e:	d301      	bcc.n	11f34 <__divsi3+0xa0>
   11f30:	020b      	lsls	r3, r1, #8
   11f32:	1ac0      	subs	r0, r0, r3
   11f34:	4152      	adcs	r2, r2
   11f36:	d2cd      	bcs.n	11ed4 <__divsi3+0x40>
   11f38:	09c3      	lsrs	r3, r0, #7
   11f3a:	428b      	cmp	r3, r1
   11f3c:	d301      	bcc.n	11f42 <__divsi3+0xae>
   11f3e:	01cb      	lsls	r3, r1, #7
   11f40:	1ac0      	subs	r0, r0, r3
   11f42:	4152      	adcs	r2, r2
   11f44:	0983      	lsrs	r3, r0, #6
   11f46:	428b      	cmp	r3, r1
   11f48:	d301      	bcc.n	11f4e <__divsi3+0xba>
   11f4a:	018b      	lsls	r3, r1, #6
   11f4c:	1ac0      	subs	r0, r0, r3
   11f4e:	4152      	adcs	r2, r2
   11f50:	0943      	lsrs	r3, r0, #5
   11f52:	428b      	cmp	r3, r1
   11f54:	d301      	bcc.n	11f5a <__divsi3+0xc6>
   11f56:	014b      	lsls	r3, r1, #5
   11f58:	1ac0      	subs	r0, r0, r3
   11f5a:	4152      	adcs	r2, r2
   11f5c:	0903      	lsrs	r3, r0, #4
   11f5e:	428b      	cmp	r3, r1
   11f60:	d301      	bcc.n	11f66 <__divsi3+0xd2>
   11f62:	010b      	lsls	r3, r1, #4
   11f64:	1ac0      	subs	r0, r0, r3
   11f66:	4152      	adcs	r2, r2
   11f68:	08c3      	lsrs	r3, r0, #3
   11f6a:	428b      	cmp	r3, r1
   11f6c:	d301      	bcc.n	11f72 <__divsi3+0xde>
   11f6e:	00cb      	lsls	r3, r1, #3
   11f70:	1ac0      	subs	r0, r0, r3
   11f72:	4152      	adcs	r2, r2
   11f74:	0883      	lsrs	r3, r0, #2
   11f76:	428b      	cmp	r3, r1
   11f78:	d301      	bcc.n	11f7e <__divsi3+0xea>
   11f7a:	008b      	lsls	r3, r1, #2
   11f7c:	1ac0      	subs	r0, r0, r3
   11f7e:	4152      	adcs	r2, r2
   11f80:	0843      	lsrs	r3, r0, #1
   11f82:	428b      	cmp	r3, r1
   11f84:	d301      	bcc.n	11f8a <__divsi3+0xf6>
   11f86:	004b      	lsls	r3, r1, #1
   11f88:	1ac0      	subs	r0, r0, r3
   11f8a:	4152      	adcs	r2, r2
   11f8c:	1a41      	subs	r1, r0, r1
   11f8e:	d200      	bcs.n	11f92 <__divsi3+0xfe>
   11f90:	4601      	mov	r1, r0
   11f92:	4152      	adcs	r2, r2
   11f94:	4610      	mov	r0, r2
   11f96:	4770      	bx	lr
   11f98:	e05d      	b.n	12056 <__divsi3+0x1c2>
   11f9a:	0fca      	lsrs	r2, r1, #31
   11f9c:	d000      	beq.n	11fa0 <__divsi3+0x10c>
   11f9e:	4249      	negs	r1, r1
   11fa0:	1003      	asrs	r3, r0, #32
   11fa2:	d300      	bcc.n	11fa6 <__divsi3+0x112>
   11fa4:	4240      	negs	r0, r0
   11fa6:	4053      	eors	r3, r2
   11fa8:	2200      	movs	r2, #0
   11faa:	469c      	mov	ip, r3
   11fac:	0903      	lsrs	r3, r0, #4
   11fae:	428b      	cmp	r3, r1
   11fb0:	d32d      	bcc.n	1200e <__divsi3+0x17a>
   11fb2:	0a03      	lsrs	r3, r0, #8
   11fb4:	428b      	cmp	r3, r1
   11fb6:	d312      	bcc.n	11fde <__divsi3+0x14a>
   11fb8:	22fc      	movs	r2, #252	; 0xfc
   11fba:	0189      	lsls	r1, r1, #6
   11fbc:	ba12      	rev	r2, r2
   11fbe:	0a03      	lsrs	r3, r0, #8
   11fc0:	428b      	cmp	r3, r1
   11fc2:	d30c      	bcc.n	11fde <__divsi3+0x14a>
   11fc4:	0189      	lsls	r1, r1, #6
   11fc6:	1192      	asrs	r2, r2, #6
   11fc8:	428b      	cmp	r3, r1
   11fca:	d308      	bcc.n	11fde <__divsi3+0x14a>
   11fcc:	0189      	lsls	r1, r1, #6
   11fce:	1192      	asrs	r2, r2, #6
   11fd0:	428b      	cmp	r3, r1
   11fd2:	d304      	bcc.n	11fde <__divsi3+0x14a>
   11fd4:	0189      	lsls	r1, r1, #6
   11fd6:	d03a      	beq.n	1204e <__divsi3+0x1ba>
   11fd8:	1192      	asrs	r2, r2, #6
   11fda:	e000      	b.n	11fde <__divsi3+0x14a>
   11fdc:	0989      	lsrs	r1, r1, #6
   11fde:	09c3      	lsrs	r3, r0, #7
   11fe0:	428b      	cmp	r3, r1
   11fe2:	d301      	bcc.n	11fe8 <__divsi3+0x154>
   11fe4:	01cb      	lsls	r3, r1, #7
   11fe6:	1ac0      	subs	r0, r0, r3
   11fe8:	4152      	adcs	r2, r2
   11fea:	0983      	lsrs	r3, r0, #6
   11fec:	428b      	cmp	r3, r1
   11fee:	d301      	bcc.n	11ff4 <__divsi3+0x160>
   11ff0:	018b      	lsls	r3, r1, #6
   11ff2:	1ac0      	subs	r0, r0, r3
   11ff4:	4152      	adcs	r2, r2
   11ff6:	0943      	lsrs	r3, r0, #5
   11ff8:	428b      	cmp	r3, r1
   11ffa:	d301      	bcc.n	12000 <__divsi3+0x16c>
   11ffc:	014b      	lsls	r3, r1, #5
   11ffe:	1ac0      	subs	r0, r0, r3
   12000:	4152      	adcs	r2, r2
   12002:	0903      	lsrs	r3, r0, #4
   12004:	428b      	cmp	r3, r1
   12006:	d301      	bcc.n	1200c <__divsi3+0x178>
   12008:	010b      	lsls	r3, r1, #4
   1200a:	1ac0      	subs	r0, r0, r3
   1200c:	4152      	adcs	r2, r2
   1200e:	08c3      	lsrs	r3, r0, #3
   12010:	428b      	cmp	r3, r1
   12012:	d301      	bcc.n	12018 <__divsi3+0x184>
   12014:	00cb      	lsls	r3, r1, #3
   12016:	1ac0      	subs	r0, r0, r3
   12018:	4152      	adcs	r2, r2
   1201a:	0883      	lsrs	r3, r0, #2
   1201c:	428b      	cmp	r3, r1
   1201e:	d301      	bcc.n	12024 <__divsi3+0x190>
   12020:	008b      	lsls	r3, r1, #2
   12022:	1ac0      	subs	r0, r0, r3
   12024:	4152      	adcs	r2, r2
   12026:	d2d9      	bcs.n	11fdc <__divsi3+0x148>
   12028:	0843      	lsrs	r3, r0, #1
   1202a:	428b      	cmp	r3, r1
   1202c:	d301      	bcc.n	12032 <__divsi3+0x19e>
   1202e:	004b      	lsls	r3, r1, #1
   12030:	1ac0      	subs	r0, r0, r3
   12032:	4152      	adcs	r2, r2
   12034:	1a41      	subs	r1, r0, r1
   12036:	d200      	bcs.n	1203a <__divsi3+0x1a6>
   12038:	4601      	mov	r1, r0
   1203a:	4663      	mov	r3, ip
   1203c:	4152      	adcs	r2, r2
   1203e:	105b      	asrs	r3, r3, #1
   12040:	4610      	mov	r0, r2
   12042:	d301      	bcc.n	12048 <__divsi3+0x1b4>
   12044:	4240      	negs	r0, r0
   12046:	2b00      	cmp	r3, #0
   12048:	d500      	bpl.n	1204c <__divsi3+0x1b8>
   1204a:	4249      	negs	r1, r1
   1204c:	4770      	bx	lr
   1204e:	4663      	mov	r3, ip
   12050:	105b      	asrs	r3, r3, #1
   12052:	d300      	bcc.n	12056 <__divsi3+0x1c2>
   12054:	4240      	negs	r0, r0
   12056:	b501      	push	{r0, lr}
   12058:	2000      	movs	r0, #0
   1205a:	f000 f805 	bl	12068 <__aeabi_idiv0>
   1205e:	bd02      	pop	{r1, pc}

00012060 <__aeabi_idivmod>:
   12060:	2900      	cmp	r1, #0
   12062:	d0f8      	beq.n	12056 <__divsi3+0x1c2>
   12064:	e716      	b.n	11e94 <__divsi3>
   12066:	4770      	bx	lr

00012068 <__aeabi_idiv0>:
   12068:	4770      	bx	lr
   1206a:	46c0      	nop			; (mov r8, r8)

0001206c <__aeabi_cdrcmple>:
   1206c:	4684      	mov	ip, r0
   1206e:	1c10      	adds	r0, r2, #0
   12070:	4662      	mov	r2, ip
   12072:	468c      	mov	ip, r1
   12074:	1c19      	adds	r1, r3, #0
   12076:	4663      	mov	r3, ip
   12078:	e000      	b.n	1207c <__aeabi_cdcmpeq>
   1207a:	46c0      	nop			; (mov r8, r8)

0001207c <__aeabi_cdcmpeq>:
   1207c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1207e:	f001 ffa3 	bl	13fc8 <__ledf2>
   12082:	2800      	cmp	r0, #0
   12084:	d401      	bmi.n	1208a <__aeabi_cdcmpeq+0xe>
   12086:	2100      	movs	r1, #0
   12088:	42c8      	cmn	r0, r1
   1208a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001208c <__aeabi_dcmpeq>:
   1208c:	b510      	push	{r4, lr}
   1208e:	f001 fefd 	bl	13e8c <__eqdf2>
   12092:	4240      	negs	r0, r0
   12094:	3001      	adds	r0, #1
   12096:	bd10      	pop	{r4, pc}

00012098 <__aeabi_dcmplt>:
   12098:	b510      	push	{r4, lr}
   1209a:	f001 ff95 	bl	13fc8 <__ledf2>
   1209e:	2800      	cmp	r0, #0
   120a0:	db01      	blt.n	120a6 <__aeabi_dcmplt+0xe>
   120a2:	2000      	movs	r0, #0
   120a4:	bd10      	pop	{r4, pc}
   120a6:	2001      	movs	r0, #1
   120a8:	bd10      	pop	{r4, pc}
   120aa:	46c0      	nop			; (mov r8, r8)

000120ac <__aeabi_dcmple>:
   120ac:	b510      	push	{r4, lr}
   120ae:	f001 ff8b 	bl	13fc8 <__ledf2>
   120b2:	2800      	cmp	r0, #0
   120b4:	dd01      	ble.n	120ba <__aeabi_dcmple+0xe>
   120b6:	2000      	movs	r0, #0
   120b8:	bd10      	pop	{r4, pc}
   120ba:	2001      	movs	r0, #1
   120bc:	bd10      	pop	{r4, pc}
   120be:	46c0      	nop			; (mov r8, r8)

000120c0 <__aeabi_dcmpgt>:
   120c0:	b510      	push	{r4, lr}
   120c2:	f001 ff1d 	bl	13f00 <__gedf2>
   120c6:	2800      	cmp	r0, #0
   120c8:	dc01      	bgt.n	120ce <__aeabi_dcmpgt+0xe>
   120ca:	2000      	movs	r0, #0
   120cc:	bd10      	pop	{r4, pc}
   120ce:	2001      	movs	r0, #1
   120d0:	bd10      	pop	{r4, pc}
   120d2:	46c0      	nop			; (mov r8, r8)

000120d4 <__aeabi_dcmpge>:
   120d4:	b510      	push	{r4, lr}
   120d6:	f001 ff13 	bl	13f00 <__gedf2>
   120da:	2800      	cmp	r0, #0
   120dc:	da01      	bge.n	120e2 <__aeabi_dcmpge+0xe>
   120de:	2000      	movs	r0, #0
   120e0:	bd10      	pop	{r4, pc}
   120e2:	2001      	movs	r0, #1
   120e4:	bd10      	pop	{r4, pc}
   120e6:	46c0      	nop			; (mov r8, r8)

000120e8 <__aeabi_cfrcmple>:
   120e8:	4684      	mov	ip, r0
   120ea:	1c08      	adds	r0, r1, #0
   120ec:	4661      	mov	r1, ip
   120ee:	e7ff      	b.n	120f0 <__aeabi_cfcmpeq>

000120f0 <__aeabi_cfcmpeq>:
   120f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   120f2:	f000 fcd3 	bl	12a9c <__lesf2>
   120f6:	2800      	cmp	r0, #0
   120f8:	d401      	bmi.n	120fe <__aeabi_cfcmpeq+0xe>
   120fa:	2100      	movs	r1, #0
   120fc:	42c8      	cmn	r0, r1
   120fe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00012100 <__aeabi_fcmpeq>:
   12100:	b510      	push	{r4, lr}
   12102:	f000 fc65 	bl	129d0 <__eqsf2>
   12106:	4240      	negs	r0, r0
   12108:	3001      	adds	r0, #1
   1210a:	bd10      	pop	{r4, pc}

0001210c <__aeabi_fcmplt>:
   1210c:	b510      	push	{r4, lr}
   1210e:	f000 fcc5 	bl	12a9c <__lesf2>
   12112:	2800      	cmp	r0, #0
   12114:	db01      	blt.n	1211a <__aeabi_fcmplt+0xe>
   12116:	2000      	movs	r0, #0
   12118:	bd10      	pop	{r4, pc}
   1211a:	2001      	movs	r0, #1
   1211c:	bd10      	pop	{r4, pc}
   1211e:	46c0      	nop			; (mov r8, r8)

00012120 <__aeabi_fcmple>:
   12120:	b510      	push	{r4, lr}
   12122:	f000 fcbb 	bl	12a9c <__lesf2>
   12126:	2800      	cmp	r0, #0
   12128:	dd01      	ble.n	1212e <__aeabi_fcmple+0xe>
   1212a:	2000      	movs	r0, #0
   1212c:	bd10      	pop	{r4, pc}
   1212e:	2001      	movs	r0, #1
   12130:	bd10      	pop	{r4, pc}
   12132:	46c0      	nop			; (mov r8, r8)

00012134 <__aeabi_fcmpgt>:
   12134:	b510      	push	{r4, lr}
   12136:	f000 fc71 	bl	12a1c <__gesf2>
   1213a:	2800      	cmp	r0, #0
   1213c:	dc01      	bgt.n	12142 <__aeabi_fcmpgt+0xe>
   1213e:	2000      	movs	r0, #0
   12140:	bd10      	pop	{r4, pc}
   12142:	2001      	movs	r0, #1
   12144:	bd10      	pop	{r4, pc}
   12146:	46c0      	nop			; (mov r8, r8)

00012148 <__aeabi_fcmpge>:
   12148:	b510      	push	{r4, lr}
   1214a:	f000 fc67 	bl	12a1c <__gesf2>
   1214e:	2800      	cmp	r0, #0
   12150:	da01      	bge.n	12156 <__aeabi_fcmpge+0xe>
   12152:	2000      	movs	r0, #0
   12154:	bd10      	pop	{r4, pc}
   12156:	2001      	movs	r0, #1
   12158:	bd10      	pop	{r4, pc}
   1215a:	46c0      	nop			; (mov r8, r8)

0001215c <__aeabi_uldivmod>:
   1215c:	2b00      	cmp	r3, #0
   1215e:	d111      	bne.n	12184 <__aeabi_uldivmod+0x28>
   12160:	2a00      	cmp	r2, #0
   12162:	d10f      	bne.n	12184 <__aeabi_uldivmod+0x28>
   12164:	2900      	cmp	r1, #0
   12166:	d100      	bne.n	1216a <__aeabi_uldivmod+0xe>
   12168:	2800      	cmp	r0, #0
   1216a:	d002      	beq.n	12172 <__aeabi_uldivmod+0x16>
   1216c:	2100      	movs	r1, #0
   1216e:	43c9      	mvns	r1, r1
   12170:	1c08      	adds	r0, r1, #0
   12172:	b407      	push	{r0, r1, r2}
   12174:	4802      	ldr	r0, [pc, #8]	; (12180 <__aeabi_uldivmod+0x24>)
   12176:	a102      	add	r1, pc, #8	; (adr r1, 12180 <__aeabi_uldivmod+0x24>)
   12178:	1840      	adds	r0, r0, r1
   1217a:	9002      	str	r0, [sp, #8]
   1217c:	bd03      	pop	{r0, r1, pc}
   1217e:	46c0      	nop			; (mov r8, r8)
   12180:	fffffee9 	.word	0xfffffee9
   12184:	b403      	push	{r0, r1}
   12186:	4668      	mov	r0, sp
   12188:	b501      	push	{r0, lr}
   1218a:	9802      	ldr	r0, [sp, #8]
   1218c:	f000 f886 	bl	1229c <__udivmoddi4>
   12190:	9b01      	ldr	r3, [sp, #4]
   12192:	469e      	mov	lr, r3
   12194:	b002      	add	sp, #8
   12196:	bc0c      	pop	{r2, r3}
   12198:	4770      	bx	lr
   1219a:	46c0      	nop			; (mov r8, r8)

0001219c <__aeabi_lmul>:
   1219c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1219e:	46ce      	mov	lr, r9
   121a0:	4647      	mov	r7, r8
   121a2:	0415      	lsls	r5, r2, #16
   121a4:	0c2d      	lsrs	r5, r5, #16
   121a6:	002e      	movs	r6, r5
   121a8:	b580      	push	{r7, lr}
   121aa:	0407      	lsls	r7, r0, #16
   121ac:	0c14      	lsrs	r4, r2, #16
   121ae:	0c3f      	lsrs	r7, r7, #16
   121b0:	4699      	mov	r9, r3
   121b2:	0c03      	lsrs	r3, r0, #16
   121b4:	437e      	muls	r6, r7
   121b6:	435d      	muls	r5, r3
   121b8:	4367      	muls	r7, r4
   121ba:	4363      	muls	r3, r4
   121bc:	197f      	adds	r7, r7, r5
   121be:	0c34      	lsrs	r4, r6, #16
   121c0:	19e4      	adds	r4, r4, r7
   121c2:	469c      	mov	ip, r3
   121c4:	42a5      	cmp	r5, r4
   121c6:	d903      	bls.n	121d0 <__aeabi_lmul+0x34>
   121c8:	2380      	movs	r3, #128	; 0x80
   121ca:	025b      	lsls	r3, r3, #9
   121cc:	4698      	mov	r8, r3
   121ce:	44c4      	add	ip, r8
   121d0:	464b      	mov	r3, r9
   121d2:	4351      	muls	r1, r2
   121d4:	4343      	muls	r3, r0
   121d6:	0436      	lsls	r6, r6, #16
   121d8:	0c36      	lsrs	r6, r6, #16
   121da:	0c25      	lsrs	r5, r4, #16
   121dc:	0424      	lsls	r4, r4, #16
   121de:	4465      	add	r5, ip
   121e0:	19a4      	adds	r4, r4, r6
   121e2:	1859      	adds	r1, r3, r1
   121e4:	1949      	adds	r1, r1, r5
   121e6:	0020      	movs	r0, r4
   121e8:	bc0c      	pop	{r2, r3}
   121ea:	4690      	mov	r8, r2
   121ec:	4699      	mov	r9, r3
   121ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000121f0 <__aeabi_f2uiz>:
   121f0:	219e      	movs	r1, #158	; 0x9e
   121f2:	b510      	push	{r4, lr}
   121f4:	05c9      	lsls	r1, r1, #23
   121f6:	1c04      	adds	r4, r0, #0
   121f8:	f7ff ffa6 	bl	12148 <__aeabi_fcmpge>
   121fc:	2800      	cmp	r0, #0
   121fe:	d103      	bne.n	12208 <__aeabi_f2uiz+0x18>
   12200:	1c20      	adds	r0, r4, #0
   12202:	f000 ff49 	bl	13098 <__aeabi_f2iz>
   12206:	bd10      	pop	{r4, pc}
   12208:	219e      	movs	r1, #158	; 0x9e
   1220a:	1c20      	adds	r0, r4, #0
   1220c:	05c9      	lsls	r1, r1, #23
   1220e:	f000 fda7 	bl	12d60 <__aeabi_fsub>
   12212:	f000 ff41 	bl	13098 <__aeabi_f2iz>
   12216:	2380      	movs	r3, #128	; 0x80
   12218:	061b      	lsls	r3, r3, #24
   1221a:	469c      	mov	ip, r3
   1221c:	4460      	add	r0, ip
   1221e:	e7f2      	b.n	12206 <__aeabi_f2uiz+0x16>

00012220 <__aeabi_d2uiz>:
   12220:	b570      	push	{r4, r5, r6, lr}
   12222:	2200      	movs	r2, #0
   12224:	4b0c      	ldr	r3, [pc, #48]	; (12258 <__aeabi_d2uiz+0x38>)
   12226:	0004      	movs	r4, r0
   12228:	000d      	movs	r5, r1
   1222a:	f7ff ff53 	bl	120d4 <__aeabi_dcmpge>
   1222e:	2800      	cmp	r0, #0
   12230:	d104      	bne.n	1223c <__aeabi_d2uiz+0x1c>
   12232:	0020      	movs	r0, r4
   12234:	0029      	movs	r1, r5
   12236:	f002 fcbf 	bl	14bb8 <__aeabi_d2iz>
   1223a:	bd70      	pop	{r4, r5, r6, pc}
   1223c:	4b06      	ldr	r3, [pc, #24]	; (12258 <__aeabi_d2uiz+0x38>)
   1223e:	2200      	movs	r2, #0
   12240:	0020      	movs	r0, r4
   12242:	0029      	movs	r1, r5
   12244:	f002 f9a2 	bl	1458c <__aeabi_dsub>
   12248:	f002 fcb6 	bl	14bb8 <__aeabi_d2iz>
   1224c:	2380      	movs	r3, #128	; 0x80
   1224e:	061b      	lsls	r3, r3, #24
   12250:	469c      	mov	ip, r3
   12252:	4460      	add	r0, ip
   12254:	e7f1      	b.n	1223a <__aeabi_d2uiz+0x1a>
   12256:	46c0      	nop			; (mov r8, r8)
   12258:	41e00000 	.word	0x41e00000

0001225c <__aeabi_f2ulz>:
   1225c:	b570      	push	{r4, r5, r6, lr}
   1225e:	f002 fd59 	bl	14d14 <__aeabi_f2d>
   12262:	2200      	movs	r2, #0
   12264:	4b0b      	ldr	r3, [pc, #44]	; (12294 <__aeabi_f2ulz+0x38>)
   12266:	000d      	movs	r5, r1
   12268:	0004      	movs	r4, r0
   1226a:	f001 ff0f 	bl	1408c <__aeabi_dmul>
   1226e:	f7ff ffd7 	bl	12220 <__aeabi_d2uiz>
   12272:	0006      	movs	r6, r0
   12274:	f002 fd16 	bl	14ca4 <__aeabi_ui2d>
   12278:	2200      	movs	r2, #0
   1227a:	4b07      	ldr	r3, [pc, #28]	; (12298 <__aeabi_f2ulz+0x3c>)
   1227c:	f001 ff06 	bl	1408c <__aeabi_dmul>
   12280:	0002      	movs	r2, r0
   12282:	000b      	movs	r3, r1
   12284:	0020      	movs	r0, r4
   12286:	0029      	movs	r1, r5
   12288:	f002 f980 	bl	1458c <__aeabi_dsub>
   1228c:	f7ff ffc8 	bl	12220 <__aeabi_d2uiz>
   12290:	0031      	movs	r1, r6
   12292:	bd70      	pop	{r4, r5, r6, pc}
   12294:	3df00000 	.word	0x3df00000
   12298:	41f00000 	.word	0x41f00000

0001229c <__udivmoddi4>:
   1229c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1229e:	4657      	mov	r7, sl
   122a0:	464e      	mov	r6, r9
   122a2:	4645      	mov	r5, r8
   122a4:	46de      	mov	lr, fp
   122a6:	b5e0      	push	{r5, r6, r7, lr}
   122a8:	0004      	movs	r4, r0
   122aa:	b083      	sub	sp, #12
   122ac:	000d      	movs	r5, r1
   122ae:	4692      	mov	sl, r2
   122b0:	4699      	mov	r9, r3
   122b2:	428b      	cmp	r3, r1
   122b4:	d82f      	bhi.n	12316 <__udivmoddi4+0x7a>
   122b6:	d02c      	beq.n	12312 <__udivmoddi4+0x76>
   122b8:	4649      	mov	r1, r9
   122ba:	4650      	mov	r0, sl
   122bc:	f002 fe24 	bl	14f08 <__clzdi2>
   122c0:	0029      	movs	r1, r5
   122c2:	0006      	movs	r6, r0
   122c4:	0020      	movs	r0, r4
   122c6:	f002 fe1f 	bl	14f08 <__clzdi2>
   122ca:	1a33      	subs	r3, r6, r0
   122cc:	4698      	mov	r8, r3
   122ce:	3b20      	subs	r3, #32
   122d0:	469b      	mov	fp, r3
   122d2:	d500      	bpl.n	122d6 <__udivmoddi4+0x3a>
   122d4:	e074      	b.n	123c0 <__udivmoddi4+0x124>
   122d6:	4653      	mov	r3, sl
   122d8:	465a      	mov	r2, fp
   122da:	4093      	lsls	r3, r2
   122dc:	001f      	movs	r7, r3
   122de:	4653      	mov	r3, sl
   122e0:	4642      	mov	r2, r8
   122e2:	4093      	lsls	r3, r2
   122e4:	001e      	movs	r6, r3
   122e6:	42af      	cmp	r7, r5
   122e8:	d829      	bhi.n	1233e <__udivmoddi4+0xa2>
   122ea:	d026      	beq.n	1233a <__udivmoddi4+0x9e>
   122ec:	465b      	mov	r3, fp
   122ee:	1ba4      	subs	r4, r4, r6
   122f0:	41bd      	sbcs	r5, r7
   122f2:	2b00      	cmp	r3, #0
   122f4:	da00      	bge.n	122f8 <__udivmoddi4+0x5c>
   122f6:	e079      	b.n	123ec <__udivmoddi4+0x150>
   122f8:	2200      	movs	r2, #0
   122fa:	2300      	movs	r3, #0
   122fc:	9200      	str	r2, [sp, #0]
   122fe:	9301      	str	r3, [sp, #4]
   12300:	2301      	movs	r3, #1
   12302:	465a      	mov	r2, fp
   12304:	4093      	lsls	r3, r2
   12306:	9301      	str	r3, [sp, #4]
   12308:	2301      	movs	r3, #1
   1230a:	4642      	mov	r2, r8
   1230c:	4093      	lsls	r3, r2
   1230e:	9300      	str	r3, [sp, #0]
   12310:	e019      	b.n	12346 <__udivmoddi4+0xaa>
   12312:	4282      	cmp	r2, r0
   12314:	d9d0      	bls.n	122b8 <__udivmoddi4+0x1c>
   12316:	2200      	movs	r2, #0
   12318:	2300      	movs	r3, #0
   1231a:	9200      	str	r2, [sp, #0]
   1231c:	9301      	str	r3, [sp, #4]
   1231e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12320:	2b00      	cmp	r3, #0
   12322:	d001      	beq.n	12328 <__udivmoddi4+0x8c>
   12324:	601c      	str	r4, [r3, #0]
   12326:	605d      	str	r5, [r3, #4]
   12328:	9800      	ldr	r0, [sp, #0]
   1232a:	9901      	ldr	r1, [sp, #4]
   1232c:	b003      	add	sp, #12
   1232e:	bc3c      	pop	{r2, r3, r4, r5}
   12330:	4690      	mov	r8, r2
   12332:	4699      	mov	r9, r3
   12334:	46a2      	mov	sl, r4
   12336:	46ab      	mov	fp, r5
   12338:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1233a:	42a3      	cmp	r3, r4
   1233c:	d9d6      	bls.n	122ec <__udivmoddi4+0x50>
   1233e:	2200      	movs	r2, #0
   12340:	2300      	movs	r3, #0
   12342:	9200      	str	r2, [sp, #0]
   12344:	9301      	str	r3, [sp, #4]
   12346:	4643      	mov	r3, r8
   12348:	2b00      	cmp	r3, #0
   1234a:	d0e8      	beq.n	1231e <__udivmoddi4+0x82>
   1234c:	07fb      	lsls	r3, r7, #31
   1234e:	0872      	lsrs	r2, r6, #1
   12350:	431a      	orrs	r2, r3
   12352:	4646      	mov	r6, r8
   12354:	087b      	lsrs	r3, r7, #1
   12356:	e00e      	b.n	12376 <__udivmoddi4+0xda>
   12358:	42ab      	cmp	r3, r5
   1235a:	d101      	bne.n	12360 <__udivmoddi4+0xc4>
   1235c:	42a2      	cmp	r2, r4
   1235e:	d80c      	bhi.n	1237a <__udivmoddi4+0xde>
   12360:	1aa4      	subs	r4, r4, r2
   12362:	419d      	sbcs	r5, r3
   12364:	2001      	movs	r0, #1
   12366:	1924      	adds	r4, r4, r4
   12368:	416d      	adcs	r5, r5
   1236a:	2100      	movs	r1, #0
   1236c:	3e01      	subs	r6, #1
   1236e:	1824      	adds	r4, r4, r0
   12370:	414d      	adcs	r5, r1
   12372:	2e00      	cmp	r6, #0
   12374:	d006      	beq.n	12384 <__udivmoddi4+0xe8>
   12376:	42ab      	cmp	r3, r5
   12378:	d9ee      	bls.n	12358 <__udivmoddi4+0xbc>
   1237a:	3e01      	subs	r6, #1
   1237c:	1924      	adds	r4, r4, r4
   1237e:	416d      	adcs	r5, r5
   12380:	2e00      	cmp	r6, #0
   12382:	d1f8      	bne.n	12376 <__udivmoddi4+0xda>
   12384:	465b      	mov	r3, fp
   12386:	9800      	ldr	r0, [sp, #0]
   12388:	9901      	ldr	r1, [sp, #4]
   1238a:	1900      	adds	r0, r0, r4
   1238c:	4169      	adcs	r1, r5
   1238e:	2b00      	cmp	r3, #0
   12390:	db22      	blt.n	123d8 <__udivmoddi4+0x13c>
   12392:	002b      	movs	r3, r5
   12394:	465a      	mov	r2, fp
   12396:	40d3      	lsrs	r3, r2
   12398:	002a      	movs	r2, r5
   1239a:	4644      	mov	r4, r8
   1239c:	40e2      	lsrs	r2, r4
   1239e:	001c      	movs	r4, r3
   123a0:	465b      	mov	r3, fp
   123a2:	0015      	movs	r5, r2
   123a4:	2b00      	cmp	r3, #0
   123a6:	db2c      	blt.n	12402 <__udivmoddi4+0x166>
   123a8:	0026      	movs	r6, r4
   123aa:	409e      	lsls	r6, r3
   123ac:	0033      	movs	r3, r6
   123ae:	0026      	movs	r6, r4
   123b0:	4647      	mov	r7, r8
   123b2:	40be      	lsls	r6, r7
   123b4:	0032      	movs	r2, r6
   123b6:	1a80      	subs	r0, r0, r2
   123b8:	4199      	sbcs	r1, r3
   123ba:	9000      	str	r0, [sp, #0]
   123bc:	9101      	str	r1, [sp, #4]
   123be:	e7ae      	b.n	1231e <__udivmoddi4+0x82>
   123c0:	4642      	mov	r2, r8
   123c2:	2320      	movs	r3, #32
   123c4:	1a9b      	subs	r3, r3, r2
   123c6:	4652      	mov	r2, sl
   123c8:	40da      	lsrs	r2, r3
   123ca:	4641      	mov	r1, r8
   123cc:	0013      	movs	r3, r2
   123ce:	464a      	mov	r2, r9
   123d0:	408a      	lsls	r2, r1
   123d2:	0017      	movs	r7, r2
   123d4:	431f      	orrs	r7, r3
   123d6:	e782      	b.n	122de <__udivmoddi4+0x42>
   123d8:	4642      	mov	r2, r8
   123da:	2320      	movs	r3, #32
   123dc:	1a9b      	subs	r3, r3, r2
   123de:	002a      	movs	r2, r5
   123e0:	4646      	mov	r6, r8
   123e2:	409a      	lsls	r2, r3
   123e4:	0023      	movs	r3, r4
   123e6:	40f3      	lsrs	r3, r6
   123e8:	4313      	orrs	r3, r2
   123ea:	e7d5      	b.n	12398 <__udivmoddi4+0xfc>
   123ec:	4642      	mov	r2, r8
   123ee:	2320      	movs	r3, #32
   123f0:	2100      	movs	r1, #0
   123f2:	1a9b      	subs	r3, r3, r2
   123f4:	2200      	movs	r2, #0
   123f6:	9100      	str	r1, [sp, #0]
   123f8:	9201      	str	r2, [sp, #4]
   123fa:	2201      	movs	r2, #1
   123fc:	40da      	lsrs	r2, r3
   123fe:	9201      	str	r2, [sp, #4]
   12400:	e782      	b.n	12308 <__udivmoddi4+0x6c>
   12402:	4642      	mov	r2, r8
   12404:	2320      	movs	r3, #32
   12406:	0026      	movs	r6, r4
   12408:	1a9b      	subs	r3, r3, r2
   1240a:	40de      	lsrs	r6, r3
   1240c:	002f      	movs	r7, r5
   1240e:	46b4      	mov	ip, r6
   12410:	4097      	lsls	r7, r2
   12412:	4666      	mov	r6, ip
   12414:	003b      	movs	r3, r7
   12416:	4333      	orrs	r3, r6
   12418:	e7c9      	b.n	123ae <__udivmoddi4+0x112>
   1241a:	46c0      	nop			; (mov r8, r8)

0001241c <__aeabi_fadd>:
   1241c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1241e:	46c6      	mov	lr, r8
   12420:	024e      	lsls	r6, r1, #9
   12422:	0247      	lsls	r7, r0, #9
   12424:	0a76      	lsrs	r6, r6, #9
   12426:	0a7b      	lsrs	r3, r7, #9
   12428:	0044      	lsls	r4, r0, #1
   1242a:	0fc5      	lsrs	r5, r0, #31
   1242c:	00f7      	lsls	r7, r6, #3
   1242e:	0048      	lsls	r0, r1, #1
   12430:	4698      	mov	r8, r3
   12432:	b500      	push	{lr}
   12434:	0e24      	lsrs	r4, r4, #24
   12436:	002a      	movs	r2, r5
   12438:	00db      	lsls	r3, r3, #3
   1243a:	0e00      	lsrs	r0, r0, #24
   1243c:	0fc9      	lsrs	r1, r1, #31
   1243e:	46bc      	mov	ip, r7
   12440:	428d      	cmp	r5, r1
   12442:	d067      	beq.n	12514 <__aeabi_fadd+0xf8>
   12444:	1a22      	subs	r2, r4, r0
   12446:	2a00      	cmp	r2, #0
   12448:	dc00      	bgt.n	1244c <__aeabi_fadd+0x30>
   1244a:	e0a5      	b.n	12598 <__aeabi_fadd+0x17c>
   1244c:	2800      	cmp	r0, #0
   1244e:	d13a      	bne.n	124c6 <__aeabi_fadd+0xaa>
   12450:	2f00      	cmp	r7, #0
   12452:	d100      	bne.n	12456 <__aeabi_fadd+0x3a>
   12454:	e093      	b.n	1257e <__aeabi_fadd+0x162>
   12456:	1e51      	subs	r1, r2, #1
   12458:	2900      	cmp	r1, #0
   1245a:	d000      	beq.n	1245e <__aeabi_fadd+0x42>
   1245c:	e0bc      	b.n	125d8 <__aeabi_fadd+0x1bc>
   1245e:	2401      	movs	r4, #1
   12460:	1bdb      	subs	r3, r3, r7
   12462:	015a      	lsls	r2, r3, #5
   12464:	d546      	bpl.n	124f4 <__aeabi_fadd+0xd8>
   12466:	019b      	lsls	r3, r3, #6
   12468:	099e      	lsrs	r6, r3, #6
   1246a:	0030      	movs	r0, r6
   1246c:	f002 fd2e 	bl	14ecc <__clzsi2>
   12470:	3805      	subs	r0, #5
   12472:	4086      	lsls	r6, r0
   12474:	4284      	cmp	r4, r0
   12476:	dd00      	ble.n	1247a <__aeabi_fadd+0x5e>
   12478:	e09d      	b.n	125b6 <__aeabi_fadd+0x19a>
   1247a:	1b04      	subs	r4, r0, r4
   1247c:	0032      	movs	r2, r6
   1247e:	2020      	movs	r0, #32
   12480:	3401      	adds	r4, #1
   12482:	40e2      	lsrs	r2, r4
   12484:	1b04      	subs	r4, r0, r4
   12486:	40a6      	lsls	r6, r4
   12488:	0033      	movs	r3, r6
   1248a:	1e5e      	subs	r6, r3, #1
   1248c:	41b3      	sbcs	r3, r6
   1248e:	2400      	movs	r4, #0
   12490:	4313      	orrs	r3, r2
   12492:	075a      	lsls	r2, r3, #29
   12494:	d004      	beq.n	124a0 <__aeabi_fadd+0x84>
   12496:	220f      	movs	r2, #15
   12498:	401a      	ands	r2, r3
   1249a:	2a04      	cmp	r2, #4
   1249c:	d000      	beq.n	124a0 <__aeabi_fadd+0x84>
   1249e:	3304      	adds	r3, #4
   124a0:	015a      	lsls	r2, r3, #5
   124a2:	d529      	bpl.n	124f8 <__aeabi_fadd+0xdc>
   124a4:	3401      	adds	r4, #1
   124a6:	2cff      	cmp	r4, #255	; 0xff
   124a8:	d100      	bne.n	124ac <__aeabi_fadd+0x90>
   124aa:	e081      	b.n	125b0 <__aeabi_fadd+0x194>
   124ac:	002a      	movs	r2, r5
   124ae:	019b      	lsls	r3, r3, #6
   124b0:	0a5b      	lsrs	r3, r3, #9
   124b2:	b2e4      	uxtb	r4, r4
   124b4:	025b      	lsls	r3, r3, #9
   124b6:	05e4      	lsls	r4, r4, #23
   124b8:	0a58      	lsrs	r0, r3, #9
   124ba:	07d2      	lsls	r2, r2, #31
   124bc:	4320      	orrs	r0, r4
   124be:	4310      	orrs	r0, r2
   124c0:	bc04      	pop	{r2}
   124c2:	4690      	mov	r8, r2
   124c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   124c6:	2cff      	cmp	r4, #255	; 0xff
   124c8:	d0e3      	beq.n	12492 <__aeabi_fadd+0x76>
   124ca:	2180      	movs	r1, #128	; 0x80
   124cc:	0038      	movs	r0, r7
   124ce:	04c9      	lsls	r1, r1, #19
   124d0:	4308      	orrs	r0, r1
   124d2:	4684      	mov	ip, r0
   124d4:	2a1b      	cmp	r2, #27
   124d6:	dd00      	ble.n	124da <__aeabi_fadd+0xbe>
   124d8:	e082      	b.n	125e0 <__aeabi_fadd+0x1c4>
   124da:	2020      	movs	r0, #32
   124dc:	4661      	mov	r1, ip
   124de:	40d1      	lsrs	r1, r2
   124e0:	1a82      	subs	r2, r0, r2
   124e2:	4660      	mov	r0, ip
   124e4:	4090      	lsls	r0, r2
   124e6:	0002      	movs	r2, r0
   124e8:	1e50      	subs	r0, r2, #1
   124ea:	4182      	sbcs	r2, r0
   124ec:	430a      	orrs	r2, r1
   124ee:	1a9b      	subs	r3, r3, r2
   124f0:	015a      	lsls	r2, r3, #5
   124f2:	d4b8      	bmi.n	12466 <__aeabi_fadd+0x4a>
   124f4:	075a      	lsls	r2, r3, #29
   124f6:	d1ce      	bne.n	12496 <__aeabi_fadd+0x7a>
   124f8:	08de      	lsrs	r6, r3, #3
   124fa:	002a      	movs	r2, r5
   124fc:	2cff      	cmp	r4, #255	; 0xff
   124fe:	d13a      	bne.n	12576 <__aeabi_fadd+0x15a>
   12500:	2e00      	cmp	r6, #0
   12502:	d100      	bne.n	12506 <__aeabi_fadd+0xea>
   12504:	e0ae      	b.n	12664 <__aeabi_fadd+0x248>
   12506:	2380      	movs	r3, #128	; 0x80
   12508:	03db      	lsls	r3, r3, #15
   1250a:	4333      	orrs	r3, r6
   1250c:	025b      	lsls	r3, r3, #9
   1250e:	0a5b      	lsrs	r3, r3, #9
   12510:	24ff      	movs	r4, #255	; 0xff
   12512:	e7cf      	b.n	124b4 <__aeabi_fadd+0x98>
   12514:	1a21      	subs	r1, r4, r0
   12516:	2900      	cmp	r1, #0
   12518:	dd52      	ble.n	125c0 <__aeabi_fadd+0x1a4>
   1251a:	2800      	cmp	r0, #0
   1251c:	d031      	beq.n	12582 <__aeabi_fadd+0x166>
   1251e:	2cff      	cmp	r4, #255	; 0xff
   12520:	d0b7      	beq.n	12492 <__aeabi_fadd+0x76>
   12522:	2080      	movs	r0, #128	; 0x80
   12524:	003e      	movs	r6, r7
   12526:	04c0      	lsls	r0, r0, #19
   12528:	4306      	orrs	r6, r0
   1252a:	46b4      	mov	ip, r6
   1252c:	291b      	cmp	r1, #27
   1252e:	dd00      	ble.n	12532 <__aeabi_fadd+0x116>
   12530:	e0aa      	b.n	12688 <__aeabi_fadd+0x26c>
   12532:	2620      	movs	r6, #32
   12534:	4660      	mov	r0, ip
   12536:	40c8      	lsrs	r0, r1
   12538:	1a71      	subs	r1, r6, r1
   1253a:	4666      	mov	r6, ip
   1253c:	408e      	lsls	r6, r1
   1253e:	0031      	movs	r1, r6
   12540:	1e4e      	subs	r6, r1, #1
   12542:	41b1      	sbcs	r1, r6
   12544:	4301      	orrs	r1, r0
   12546:	185b      	adds	r3, r3, r1
   12548:	0159      	lsls	r1, r3, #5
   1254a:	d5d3      	bpl.n	124f4 <__aeabi_fadd+0xd8>
   1254c:	3401      	adds	r4, #1
   1254e:	2cff      	cmp	r4, #255	; 0xff
   12550:	d100      	bne.n	12554 <__aeabi_fadd+0x138>
   12552:	e087      	b.n	12664 <__aeabi_fadd+0x248>
   12554:	2201      	movs	r2, #1
   12556:	4978      	ldr	r1, [pc, #480]	; (12738 <__aeabi_fadd+0x31c>)
   12558:	401a      	ands	r2, r3
   1255a:	085b      	lsrs	r3, r3, #1
   1255c:	400b      	ands	r3, r1
   1255e:	4313      	orrs	r3, r2
   12560:	e797      	b.n	12492 <__aeabi_fadd+0x76>
   12562:	2c00      	cmp	r4, #0
   12564:	d000      	beq.n	12568 <__aeabi_fadd+0x14c>
   12566:	e0a7      	b.n	126b8 <__aeabi_fadd+0x29c>
   12568:	2b00      	cmp	r3, #0
   1256a:	d000      	beq.n	1256e <__aeabi_fadd+0x152>
   1256c:	e0b6      	b.n	126dc <__aeabi_fadd+0x2c0>
   1256e:	1e3b      	subs	r3, r7, #0
   12570:	d162      	bne.n	12638 <__aeabi_fadd+0x21c>
   12572:	2600      	movs	r6, #0
   12574:	2200      	movs	r2, #0
   12576:	0273      	lsls	r3, r6, #9
   12578:	0a5b      	lsrs	r3, r3, #9
   1257a:	b2e4      	uxtb	r4, r4
   1257c:	e79a      	b.n	124b4 <__aeabi_fadd+0x98>
   1257e:	0014      	movs	r4, r2
   12580:	e787      	b.n	12492 <__aeabi_fadd+0x76>
   12582:	2f00      	cmp	r7, #0
   12584:	d04d      	beq.n	12622 <__aeabi_fadd+0x206>
   12586:	1e48      	subs	r0, r1, #1
   12588:	2800      	cmp	r0, #0
   1258a:	d157      	bne.n	1263c <__aeabi_fadd+0x220>
   1258c:	4463      	add	r3, ip
   1258e:	2401      	movs	r4, #1
   12590:	015a      	lsls	r2, r3, #5
   12592:	d5af      	bpl.n	124f4 <__aeabi_fadd+0xd8>
   12594:	2402      	movs	r4, #2
   12596:	e7dd      	b.n	12554 <__aeabi_fadd+0x138>
   12598:	2a00      	cmp	r2, #0
   1259a:	d124      	bne.n	125e6 <__aeabi_fadd+0x1ca>
   1259c:	1c62      	adds	r2, r4, #1
   1259e:	b2d2      	uxtb	r2, r2
   125a0:	2a01      	cmp	r2, #1
   125a2:	ddde      	ble.n	12562 <__aeabi_fadd+0x146>
   125a4:	1bde      	subs	r6, r3, r7
   125a6:	0172      	lsls	r2, r6, #5
   125a8:	d535      	bpl.n	12616 <__aeabi_fadd+0x1fa>
   125aa:	1afe      	subs	r6, r7, r3
   125ac:	000d      	movs	r5, r1
   125ae:	e75c      	b.n	1246a <__aeabi_fadd+0x4e>
   125b0:	002a      	movs	r2, r5
   125b2:	2300      	movs	r3, #0
   125b4:	e77e      	b.n	124b4 <__aeabi_fadd+0x98>
   125b6:	0033      	movs	r3, r6
   125b8:	4a60      	ldr	r2, [pc, #384]	; (1273c <__aeabi_fadd+0x320>)
   125ba:	1a24      	subs	r4, r4, r0
   125bc:	4013      	ands	r3, r2
   125be:	e768      	b.n	12492 <__aeabi_fadd+0x76>
   125c0:	2900      	cmp	r1, #0
   125c2:	d163      	bne.n	1268c <__aeabi_fadd+0x270>
   125c4:	1c61      	adds	r1, r4, #1
   125c6:	b2c8      	uxtb	r0, r1
   125c8:	2801      	cmp	r0, #1
   125ca:	dd4e      	ble.n	1266a <__aeabi_fadd+0x24e>
   125cc:	29ff      	cmp	r1, #255	; 0xff
   125ce:	d049      	beq.n	12664 <__aeabi_fadd+0x248>
   125d0:	4463      	add	r3, ip
   125d2:	085b      	lsrs	r3, r3, #1
   125d4:	000c      	movs	r4, r1
   125d6:	e75c      	b.n	12492 <__aeabi_fadd+0x76>
   125d8:	2aff      	cmp	r2, #255	; 0xff
   125da:	d041      	beq.n	12660 <__aeabi_fadd+0x244>
   125dc:	000a      	movs	r2, r1
   125de:	e779      	b.n	124d4 <__aeabi_fadd+0xb8>
   125e0:	2201      	movs	r2, #1
   125e2:	1a9b      	subs	r3, r3, r2
   125e4:	e784      	b.n	124f0 <__aeabi_fadd+0xd4>
   125e6:	2c00      	cmp	r4, #0
   125e8:	d01d      	beq.n	12626 <__aeabi_fadd+0x20a>
   125ea:	28ff      	cmp	r0, #255	; 0xff
   125ec:	d022      	beq.n	12634 <__aeabi_fadd+0x218>
   125ee:	2480      	movs	r4, #128	; 0x80
   125f0:	04e4      	lsls	r4, r4, #19
   125f2:	4252      	negs	r2, r2
   125f4:	4323      	orrs	r3, r4
   125f6:	2a1b      	cmp	r2, #27
   125f8:	dd00      	ble.n	125fc <__aeabi_fadd+0x1e0>
   125fa:	e08a      	b.n	12712 <__aeabi_fadd+0x2f6>
   125fc:	001c      	movs	r4, r3
   125fe:	2520      	movs	r5, #32
   12600:	40d4      	lsrs	r4, r2
   12602:	1aaa      	subs	r2, r5, r2
   12604:	4093      	lsls	r3, r2
   12606:	1e5a      	subs	r2, r3, #1
   12608:	4193      	sbcs	r3, r2
   1260a:	4323      	orrs	r3, r4
   1260c:	4662      	mov	r2, ip
   1260e:	0004      	movs	r4, r0
   12610:	1ad3      	subs	r3, r2, r3
   12612:	000d      	movs	r5, r1
   12614:	e725      	b.n	12462 <__aeabi_fadd+0x46>
   12616:	2e00      	cmp	r6, #0
   12618:	d000      	beq.n	1261c <__aeabi_fadd+0x200>
   1261a:	e726      	b.n	1246a <__aeabi_fadd+0x4e>
   1261c:	2200      	movs	r2, #0
   1261e:	2400      	movs	r4, #0
   12620:	e7a9      	b.n	12576 <__aeabi_fadd+0x15a>
   12622:	000c      	movs	r4, r1
   12624:	e735      	b.n	12492 <__aeabi_fadd+0x76>
   12626:	2b00      	cmp	r3, #0
   12628:	d04d      	beq.n	126c6 <__aeabi_fadd+0x2aa>
   1262a:	43d2      	mvns	r2, r2
   1262c:	2a00      	cmp	r2, #0
   1262e:	d0ed      	beq.n	1260c <__aeabi_fadd+0x1f0>
   12630:	28ff      	cmp	r0, #255	; 0xff
   12632:	d1e0      	bne.n	125f6 <__aeabi_fadd+0x1da>
   12634:	4663      	mov	r3, ip
   12636:	24ff      	movs	r4, #255	; 0xff
   12638:	000d      	movs	r5, r1
   1263a:	e72a      	b.n	12492 <__aeabi_fadd+0x76>
   1263c:	29ff      	cmp	r1, #255	; 0xff
   1263e:	d00f      	beq.n	12660 <__aeabi_fadd+0x244>
   12640:	0001      	movs	r1, r0
   12642:	e773      	b.n	1252c <__aeabi_fadd+0x110>
   12644:	2b00      	cmp	r3, #0
   12646:	d061      	beq.n	1270c <__aeabi_fadd+0x2f0>
   12648:	24ff      	movs	r4, #255	; 0xff
   1264a:	2f00      	cmp	r7, #0
   1264c:	d100      	bne.n	12650 <__aeabi_fadd+0x234>
   1264e:	e720      	b.n	12492 <__aeabi_fadd+0x76>
   12650:	2280      	movs	r2, #128	; 0x80
   12652:	4641      	mov	r1, r8
   12654:	03d2      	lsls	r2, r2, #15
   12656:	4211      	tst	r1, r2
   12658:	d002      	beq.n	12660 <__aeabi_fadd+0x244>
   1265a:	4216      	tst	r6, r2
   1265c:	d100      	bne.n	12660 <__aeabi_fadd+0x244>
   1265e:	003b      	movs	r3, r7
   12660:	24ff      	movs	r4, #255	; 0xff
   12662:	e716      	b.n	12492 <__aeabi_fadd+0x76>
   12664:	24ff      	movs	r4, #255	; 0xff
   12666:	2300      	movs	r3, #0
   12668:	e724      	b.n	124b4 <__aeabi_fadd+0x98>
   1266a:	2c00      	cmp	r4, #0
   1266c:	d1ea      	bne.n	12644 <__aeabi_fadd+0x228>
   1266e:	2b00      	cmp	r3, #0
   12670:	d058      	beq.n	12724 <__aeabi_fadd+0x308>
   12672:	2f00      	cmp	r7, #0
   12674:	d100      	bne.n	12678 <__aeabi_fadd+0x25c>
   12676:	e70c      	b.n	12492 <__aeabi_fadd+0x76>
   12678:	4463      	add	r3, ip
   1267a:	015a      	lsls	r2, r3, #5
   1267c:	d400      	bmi.n	12680 <__aeabi_fadd+0x264>
   1267e:	e739      	b.n	124f4 <__aeabi_fadd+0xd8>
   12680:	4a2e      	ldr	r2, [pc, #184]	; (1273c <__aeabi_fadd+0x320>)
   12682:	000c      	movs	r4, r1
   12684:	4013      	ands	r3, r2
   12686:	e704      	b.n	12492 <__aeabi_fadd+0x76>
   12688:	2101      	movs	r1, #1
   1268a:	e75c      	b.n	12546 <__aeabi_fadd+0x12a>
   1268c:	2c00      	cmp	r4, #0
   1268e:	d11e      	bne.n	126ce <__aeabi_fadd+0x2b2>
   12690:	2b00      	cmp	r3, #0
   12692:	d040      	beq.n	12716 <__aeabi_fadd+0x2fa>
   12694:	43c9      	mvns	r1, r1
   12696:	2900      	cmp	r1, #0
   12698:	d00b      	beq.n	126b2 <__aeabi_fadd+0x296>
   1269a:	28ff      	cmp	r0, #255	; 0xff
   1269c:	d036      	beq.n	1270c <__aeabi_fadd+0x2f0>
   1269e:	291b      	cmp	r1, #27
   126a0:	dc47      	bgt.n	12732 <__aeabi_fadd+0x316>
   126a2:	001c      	movs	r4, r3
   126a4:	2620      	movs	r6, #32
   126a6:	40cc      	lsrs	r4, r1
   126a8:	1a71      	subs	r1, r6, r1
   126aa:	408b      	lsls	r3, r1
   126ac:	1e59      	subs	r1, r3, #1
   126ae:	418b      	sbcs	r3, r1
   126b0:	4323      	orrs	r3, r4
   126b2:	4463      	add	r3, ip
   126b4:	0004      	movs	r4, r0
   126b6:	e747      	b.n	12548 <__aeabi_fadd+0x12c>
   126b8:	2b00      	cmp	r3, #0
   126ba:	d118      	bne.n	126ee <__aeabi_fadd+0x2d2>
   126bc:	1e3b      	subs	r3, r7, #0
   126be:	d02d      	beq.n	1271c <__aeabi_fadd+0x300>
   126c0:	000d      	movs	r5, r1
   126c2:	24ff      	movs	r4, #255	; 0xff
   126c4:	e6e5      	b.n	12492 <__aeabi_fadd+0x76>
   126c6:	003b      	movs	r3, r7
   126c8:	0004      	movs	r4, r0
   126ca:	000d      	movs	r5, r1
   126cc:	e6e1      	b.n	12492 <__aeabi_fadd+0x76>
   126ce:	28ff      	cmp	r0, #255	; 0xff
   126d0:	d01c      	beq.n	1270c <__aeabi_fadd+0x2f0>
   126d2:	2480      	movs	r4, #128	; 0x80
   126d4:	04e4      	lsls	r4, r4, #19
   126d6:	4249      	negs	r1, r1
   126d8:	4323      	orrs	r3, r4
   126da:	e7e0      	b.n	1269e <__aeabi_fadd+0x282>
   126dc:	2f00      	cmp	r7, #0
   126de:	d100      	bne.n	126e2 <__aeabi_fadd+0x2c6>
   126e0:	e6d7      	b.n	12492 <__aeabi_fadd+0x76>
   126e2:	1bde      	subs	r6, r3, r7
   126e4:	0172      	lsls	r2, r6, #5
   126e6:	d51f      	bpl.n	12728 <__aeabi_fadd+0x30c>
   126e8:	1afb      	subs	r3, r7, r3
   126ea:	000d      	movs	r5, r1
   126ec:	e6d1      	b.n	12492 <__aeabi_fadd+0x76>
   126ee:	24ff      	movs	r4, #255	; 0xff
   126f0:	2f00      	cmp	r7, #0
   126f2:	d100      	bne.n	126f6 <__aeabi_fadd+0x2da>
   126f4:	e6cd      	b.n	12492 <__aeabi_fadd+0x76>
   126f6:	2280      	movs	r2, #128	; 0x80
   126f8:	4640      	mov	r0, r8
   126fa:	03d2      	lsls	r2, r2, #15
   126fc:	4210      	tst	r0, r2
   126fe:	d0af      	beq.n	12660 <__aeabi_fadd+0x244>
   12700:	4216      	tst	r6, r2
   12702:	d1ad      	bne.n	12660 <__aeabi_fadd+0x244>
   12704:	003b      	movs	r3, r7
   12706:	000d      	movs	r5, r1
   12708:	24ff      	movs	r4, #255	; 0xff
   1270a:	e6c2      	b.n	12492 <__aeabi_fadd+0x76>
   1270c:	4663      	mov	r3, ip
   1270e:	24ff      	movs	r4, #255	; 0xff
   12710:	e6bf      	b.n	12492 <__aeabi_fadd+0x76>
   12712:	2301      	movs	r3, #1
   12714:	e77a      	b.n	1260c <__aeabi_fadd+0x1f0>
   12716:	003b      	movs	r3, r7
   12718:	0004      	movs	r4, r0
   1271a:	e6ba      	b.n	12492 <__aeabi_fadd+0x76>
   1271c:	2680      	movs	r6, #128	; 0x80
   1271e:	2200      	movs	r2, #0
   12720:	03f6      	lsls	r6, r6, #15
   12722:	e6f0      	b.n	12506 <__aeabi_fadd+0xea>
   12724:	003b      	movs	r3, r7
   12726:	e6b4      	b.n	12492 <__aeabi_fadd+0x76>
   12728:	1e33      	subs	r3, r6, #0
   1272a:	d000      	beq.n	1272e <__aeabi_fadd+0x312>
   1272c:	e6e2      	b.n	124f4 <__aeabi_fadd+0xd8>
   1272e:	2200      	movs	r2, #0
   12730:	e721      	b.n	12576 <__aeabi_fadd+0x15a>
   12732:	2301      	movs	r3, #1
   12734:	e7bd      	b.n	126b2 <__aeabi_fadd+0x296>
   12736:	46c0      	nop			; (mov r8, r8)
   12738:	7dffffff 	.word	0x7dffffff
   1273c:	fbffffff 	.word	0xfbffffff

00012740 <__aeabi_fdiv>:
   12740:	b5f0      	push	{r4, r5, r6, r7, lr}
   12742:	4657      	mov	r7, sl
   12744:	464e      	mov	r6, r9
   12746:	46de      	mov	lr, fp
   12748:	4645      	mov	r5, r8
   1274a:	b5e0      	push	{r5, r6, r7, lr}
   1274c:	0244      	lsls	r4, r0, #9
   1274e:	0043      	lsls	r3, r0, #1
   12750:	0fc6      	lsrs	r6, r0, #31
   12752:	b083      	sub	sp, #12
   12754:	1c0f      	adds	r7, r1, #0
   12756:	0a64      	lsrs	r4, r4, #9
   12758:	0e1b      	lsrs	r3, r3, #24
   1275a:	46b2      	mov	sl, r6
   1275c:	d053      	beq.n	12806 <__aeabi_fdiv+0xc6>
   1275e:	2bff      	cmp	r3, #255	; 0xff
   12760:	d027      	beq.n	127b2 <__aeabi_fdiv+0x72>
   12762:	2280      	movs	r2, #128	; 0x80
   12764:	00e4      	lsls	r4, r4, #3
   12766:	04d2      	lsls	r2, r2, #19
   12768:	4314      	orrs	r4, r2
   1276a:	227f      	movs	r2, #127	; 0x7f
   1276c:	4252      	negs	r2, r2
   1276e:	4690      	mov	r8, r2
   12770:	4498      	add	r8, r3
   12772:	2300      	movs	r3, #0
   12774:	4699      	mov	r9, r3
   12776:	469b      	mov	fp, r3
   12778:	027d      	lsls	r5, r7, #9
   1277a:	0078      	lsls	r0, r7, #1
   1277c:	0ffb      	lsrs	r3, r7, #31
   1277e:	0a6d      	lsrs	r5, r5, #9
   12780:	0e00      	lsrs	r0, r0, #24
   12782:	9300      	str	r3, [sp, #0]
   12784:	d024      	beq.n	127d0 <__aeabi_fdiv+0x90>
   12786:	28ff      	cmp	r0, #255	; 0xff
   12788:	d046      	beq.n	12818 <__aeabi_fdiv+0xd8>
   1278a:	2380      	movs	r3, #128	; 0x80
   1278c:	2100      	movs	r1, #0
   1278e:	00ed      	lsls	r5, r5, #3
   12790:	04db      	lsls	r3, r3, #19
   12792:	431d      	orrs	r5, r3
   12794:	387f      	subs	r0, #127	; 0x7f
   12796:	4647      	mov	r7, r8
   12798:	1a38      	subs	r0, r7, r0
   1279a:	464f      	mov	r7, r9
   1279c:	430f      	orrs	r7, r1
   1279e:	00bf      	lsls	r7, r7, #2
   127a0:	46b9      	mov	r9, r7
   127a2:	0033      	movs	r3, r6
   127a4:	9a00      	ldr	r2, [sp, #0]
   127a6:	4f87      	ldr	r7, [pc, #540]	; (129c4 <__aeabi_fdiv+0x284>)
   127a8:	4053      	eors	r3, r2
   127aa:	464a      	mov	r2, r9
   127ac:	58ba      	ldr	r2, [r7, r2]
   127ae:	9301      	str	r3, [sp, #4]
   127b0:	4697      	mov	pc, r2
   127b2:	2c00      	cmp	r4, #0
   127b4:	d14e      	bne.n	12854 <__aeabi_fdiv+0x114>
   127b6:	2308      	movs	r3, #8
   127b8:	4699      	mov	r9, r3
   127ba:	33f7      	adds	r3, #247	; 0xf7
   127bc:	4698      	mov	r8, r3
   127be:	3bfd      	subs	r3, #253	; 0xfd
   127c0:	469b      	mov	fp, r3
   127c2:	027d      	lsls	r5, r7, #9
   127c4:	0078      	lsls	r0, r7, #1
   127c6:	0ffb      	lsrs	r3, r7, #31
   127c8:	0a6d      	lsrs	r5, r5, #9
   127ca:	0e00      	lsrs	r0, r0, #24
   127cc:	9300      	str	r3, [sp, #0]
   127ce:	d1da      	bne.n	12786 <__aeabi_fdiv+0x46>
   127d0:	2d00      	cmp	r5, #0
   127d2:	d126      	bne.n	12822 <__aeabi_fdiv+0xe2>
   127d4:	2000      	movs	r0, #0
   127d6:	2101      	movs	r1, #1
   127d8:	0033      	movs	r3, r6
   127da:	9a00      	ldr	r2, [sp, #0]
   127dc:	4f7a      	ldr	r7, [pc, #488]	; (129c8 <__aeabi_fdiv+0x288>)
   127de:	4053      	eors	r3, r2
   127e0:	4642      	mov	r2, r8
   127e2:	1a10      	subs	r0, r2, r0
   127e4:	464a      	mov	r2, r9
   127e6:	430a      	orrs	r2, r1
   127e8:	0092      	lsls	r2, r2, #2
   127ea:	58ba      	ldr	r2, [r7, r2]
   127ec:	001d      	movs	r5, r3
   127ee:	4697      	mov	pc, r2
   127f0:	9b00      	ldr	r3, [sp, #0]
   127f2:	002c      	movs	r4, r5
   127f4:	469a      	mov	sl, r3
   127f6:	468b      	mov	fp, r1
   127f8:	465b      	mov	r3, fp
   127fa:	2b02      	cmp	r3, #2
   127fc:	d131      	bne.n	12862 <__aeabi_fdiv+0x122>
   127fe:	4653      	mov	r3, sl
   12800:	21ff      	movs	r1, #255	; 0xff
   12802:	2400      	movs	r4, #0
   12804:	e038      	b.n	12878 <__aeabi_fdiv+0x138>
   12806:	2c00      	cmp	r4, #0
   12808:	d117      	bne.n	1283a <__aeabi_fdiv+0xfa>
   1280a:	2304      	movs	r3, #4
   1280c:	4699      	mov	r9, r3
   1280e:	2300      	movs	r3, #0
   12810:	4698      	mov	r8, r3
   12812:	3301      	adds	r3, #1
   12814:	469b      	mov	fp, r3
   12816:	e7af      	b.n	12778 <__aeabi_fdiv+0x38>
   12818:	20ff      	movs	r0, #255	; 0xff
   1281a:	2d00      	cmp	r5, #0
   1281c:	d10b      	bne.n	12836 <__aeabi_fdiv+0xf6>
   1281e:	2102      	movs	r1, #2
   12820:	e7da      	b.n	127d8 <__aeabi_fdiv+0x98>
   12822:	0028      	movs	r0, r5
   12824:	f002 fb52 	bl	14ecc <__clzsi2>
   12828:	1f43      	subs	r3, r0, #5
   1282a:	409d      	lsls	r5, r3
   1282c:	2376      	movs	r3, #118	; 0x76
   1282e:	425b      	negs	r3, r3
   12830:	1a18      	subs	r0, r3, r0
   12832:	2100      	movs	r1, #0
   12834:	e7af      	b.n	12796 <__aeabi_fdiv+0x56>
   12836:	2103      	movs	r1, #3
   12838:	e7ad      	b.n	12796 <__aeabi_fdiv+0x56>
   1283a:	0020      	movs	r0, r4
   1283c:	f002 fb46 	bl	14ecc <__clzsi2>
   12840:	1f43      	subs	r3, r0, #5
   12842:	409c      	lsls	r4, r3
   12844:	2376      	movs	r3, #118	; 0x76
   12846:	425b      	negs	r3, r3
   12848:	1a1b      	subs	r3, r3, r0
   1284a:	4698      	mov	r8, r3
   1284c:	2300      	movs	r3, #0
   1284e:	4699      	mov	r9, r3
   12850:	469b      	mov	fp, r3
   12852:	e791      	b.n	12778 <__aeabi_fdiv+0x38>
   12854:	230c      	movs	r3, #12
   12856:	4699      	mov	r9, r3
   12858:	33f3      	adds	r3, #243	; 0xf3
   1285a:	4698      	mov	r8, r3
   1285c:	3bfc      	subs	r3, #252	; 0xfc
   1285e:	469b      	mov	fp, r3
   12860:	e78a      	b.n	12778 <__aeabi_fdiv+0x38>
   12862:	2b03      	cmp	r3, #3
   12864:	d100      	bne.n	12868 <__aeabi_fdiv+0x128>
   12866:	e0a5      	b.n	129b4 <__aeabi_fdiv+0x274>
   12868:	4655      	mov	r5, sl
   1286a:	2b01      	cmp	r3, #1
   1286c:	d000      	beq.n	12870 <__aeabi_fdiv+0x130>
   1286e:	e081      	b.n	12974 <__aeabi_fdiv+0x234>
   12870:	2301      	movs	r3, #1
   12872:	2100      	movs	r1, #0
   12874:	2400      	movs	r4, #0
   12876:	402b      	ands	r3, r5
   12878:	0264      	lsls	r4, r4, #9
   1287a:	05c9      	lsls	r1, r1, #23
   1287c:	0a60      	lsrs	r0, r4, #9
   1287e:	07db      	lsls	r3, r3, #31
   12880:	4308      	orrs	r0, r1
   12882:	4318      	orrs	r0, r3
   12884:	b003      	add	sp, #12
   12886:	bc3c      	pop	{r2, r3, r4, r5}
   12888:	4690      	mov	r8, r2
   1288a:	4699      	mov	r9, r3
   1288c:	46a2      	mov	sl, r4
   1288e:	46ab      	mov	fp, r5
   12890:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12892:	2480      	movs	r4, #128	; 0x80
   12894:	2300      	movs	r3, #0
   12896:	03e4      	lsls	r4, r4, #15
   12898:	21ff      	movs	r1, #255	; 0xff
   1289a:	e7ed      	b.n	12878 <__aeabi_fdiv+0x138>
   1289c:	21ff      	movs	r1, #255	; 0xff
   1289e:	2400      	movs	r4, #0
   128a0:	e7ea      	b.n	12878 <__aeabi_fdiv+0x138>
   128a2:	2301      	movs	r3, #1
   128a4:	1a59      	subs	r1, r3, r1
   128a6:	291b      	cmp	r1, #27
   128a8:	dd66      	ble.n	12978 <__aeabi_fdiv+0x238>
   128aa:	9a01      	ldr	r2, [sp, #4]
   128ac:	4013      	ands	r3, r2
   128ae:	2100      	movs	r1, #0
   128b0:	2400      	movs	r4, #0
   128b2:	e7e1      	b.n	12878 <__aeabi_fdiv+0x138>
   128b4:	2380      	movs	r3, #128	; 0x80
   128b6:	03db      	lsls	r3, r3, #15
   128b8:	421c      	tst	r4, r3
   128ba:	d038      	beq.n	1292e <__aeabi_fdiv+0x1ee>
   128bc:	421d      	tst	r5, r3
   128be:	d051      	beq.n	12964 <__aeabi_fdiv+0x224>
   128c0:	431c      	orrs	r4, r3
   128c2:	0264      	lsls	r4, r4, #9
   128c4:	0a64      	lsrs	r4, r4, #9
   128c6:	0033      	movs	r3, r6
   128c8:	21ff      	movs	r1, #255	; 0xff
   128ca:	e7d5      	b.n	12878 <__aeabi_fdiv+0x138>
   128cc:	0163      	lsls	r3, r4, #5
   128ce:	016c      	lsls	r4, r5, #5
   128d0:	42a3      	cmp	r3, r4
   128d2:	d23b      	bcs.n	1294c <__aeabi_fdiv+0x20c>
   128d4:	261b      	movs	r6, #27
   128d6:	2100      	movs	r1, #0
   128d8:	3801      	subs	r0, #1
   128da:	2501      	movs	r5, #1
   128dc:	001f      	movs	r7, r3
   128de:	0049      	lsls	r1, r1, #1
   128e0:	005b      	lsls	r3, r3, #1
   128e2:	2f00      	cmp	r7, #0
   128e4:	db01      	blt.n	128ea <__aeabi_fdiv+0x1aa>
   128e6:	429c      	cmp	r4, r3
   128e8:	d801      	bhi.n	128ee <__aeabi_fdiv+0x1ae>
   128ea:	1b1b      	subs	r3, r3, r4
   128ec:	4329      	orrs	r1, r5
   128ee:	3e01      	subs	r6, #1
   128f0:	2e00      	cmp	r6, #0
   128f2:	d1f3      	bne.n	128dc <__aeabi_fdiv+0x19c>
   128f4:	001c      	movs	r4, r3
   128f6:	1e63      	subs	r3, r4, #1
   128f8:	419c      	sbcs	r4, r3
   128fa:	430c      	orrs	r4, r1
   128fc:	0001      	movs	r1, r0
   128fe:	317f      	adds	r1, #127	; 0x7f
   12900:	2900      	cmp	r1, #0
   12902:	ddce      	ble.n	128a2 <__aeabi_fdiv+0x162>
   12904:	0763      	lsls	r3, r4, #29
   12906:	d004      	beq.n	12912 <__aeabi_fdiv+0x1d2>
   12908:	230f      	movs	r3, #15
   1290a:	4023      	ands	r3, r4
   1290c:	2b04      	cmp	r3, #4
   1290e:	d000      	beq.n	12912 <__aeabi_fdiv+0x1d2>
   12910:	3404      	adds	r4, #4
   12912:	0123      	lsls	r3, r4, #4
   12914:	d503      	bpl.n	1291e <__aeabi_fdiv+0x1de>
   12916:	0001      	movs	r1, r0
   12918:	4b2c      	ldr	r3, [pc, #176]	; (129cc <__aeabi_fdiv+0x28c>)
   1291a:	3180      	adds	r1, #128	; 0x80
   1291c:	401c      	ands	r4, r3
   1291e:	29fe      	cmp	r1, #254	; 0xfe
   12920:	dd0d      	ble.n	1293e <__aeabi_fdiv+0x1fe>
   12922:	2301      	movs	r3, #1
   12924:	9a01      	ldr	r2, [sp, #4]
   12926:	21ff      	movs	r1, #255	; 0xff
   12928:	4013      	ands	r3, r2
   1292a:	2400      	movs	r4, #0
   1292c:	e7a4      	b.n	12878 <__aeabi_fdiv+0x138>
   1292e:	2380      	movs	r3, #128	; 0x80
   12930:	03db      	lsls	r3, r3, #15
   12932:	431c      	orrs	r4, r3
   12934:	0264      	lsls	r4, r4, #9
   12936:	0a64      	lsrs	r4, r4, #9
   12938:	0033      	movs	r3, r6
   1293a:	21ff      	movs	r1, #255	; 0xff
   1293c:	e79c      	b.n	12878 <__aeabi_fdiv+0x138>
   1293e:	2301      	movs	r3, #1
   12940:	9a01      	ldr	r2, [sp, #4]
   12942:	01a4      	lsls	r4, r4, #6
   12944:	0a64      	lsrs	r4, r4, #9
   12946:	b2c9      	uxtb	r1, r1
   12948:	4013      	ands	r3, r2
   1294a:	e795      	b.n	12878 <__aeabi_fdiv+0x138>
   1294c:	1b1b      	subs	r3, r3, r4
   1294e:	261a      	movs	r6, #26
   12950:	2101      	movs	r1, #1
   12952:	e7c2      	b.n	128da <__aeabi_fdiv+0x19a>
   12954:	9b00      	ldr	r3, [sp, #0]
   12956:	468b      	mov	fp, r1
   12958:	469a      	mov	sl, r3
   1295a:	2400      	movs	r4, #0
   1295c:	e74c      	b.n	127f8 <__aeabi_fdiv+0xb8>
   1295e:	0263      	lsls	r3, r4, #9
   12960:	d5e5      	bpl.n	1292e <__aeabi_fdiv+0x1ee>
   12962:	2500      	movs	r5, #0
   12964:	2480      	movs	r4, #128	; 0x80
   12966:	03e4      	lsls	r4, r4, #15
   12968:	432c      	orrs	r4, r5
   1296a:	0264      	lsls	r4, r4, #9
   1296c:	0a64      	lsrs	r4, r4, #9
   1296e:	9b00      	ldr	r3, [sp, #0]
   12970:	21ff      	movs	r1, #255	; 0xff
   12972:	e781      	b.n	12878 <__aeabi_fdiv+0x138>
   12974:	9501      	str	r5, [sp, #4]
   12976:	e7c1      	b.n	128fc <__aeabi_fdiv+0x1bc>
   12978:	0023      	movs	r3, r4
   1297a:	2020      	movs	r0, #32
   1297c:	40cb      	lsrs	r3, r1
   1297e:	1a41      	subs	r1, r0, r1
   12980:	408c      	lsls	r4, r1
   12982:	1e61      	subs	r1, r4, #1
   12984:	418c      	sbcs	r4, r1
   12986:	431c      	orrs	r4, r3
   12988:	0763      	lsls	r3, r4, #29
   1298a:	d004      	beq.n	12996 <__aeabi_fdiv+0x256>
   1298c:	230f      	movs	r3, #15
   1298e:	4023      	ands	r3, r4
   12990:	2b04      	cmp	r3, #4
   12992:	d000      	beq.n	12996 <__aeabi_fdiv+0x256>
   12994:	3404      	adds	r4, #4
   12996:	0163      	lsls	r3, r4, #5
   12998:	d505      	bpl.n	129a6 <__aeabi_fdiv+0x266>
   1299a:	2301      	movs	r3, #1
   1299c:	9a01      	ldr	r2, [sp, #4]
   1299e:	2101      	movs	r1, #1
   129a0:	4013      	ands	r3, r2
   129a2:	2400      	movs	r4, #0
   129a4:	e768      	b.n	12878 <__aeabi_fdiv+0x138>
   129a6:	2301      	movs	r3, #1
   129a8:	9a01      	ldr	r2, [sp, #4]
   129aa:	01a4      	lsls	r4, r4, #6
   129ac:	0a64      	lsrs	r4, r4, #9
   129ae:	4013      	ands	r3, r2
   129b0:	2100      	movs	r1, #0
   129b2:	e761      	b.n	12878 <__aeabi_fdiv+0x138>
   129b4:	2380      	movs	r3, #128	; 0x80
   129b6:	03db      	lsls	r3, r3, #15
   129b8:	431c      	orrs	r4, r3
   129ba:	0264      	lsls	r4, r4, #9
   129bc:	0a64      	lsrs	r4, r4, #9
   129be:	4653      	mov	r3, sl
   129c0:	21ff      	movs	r1, #255	; 0xff
   129c2:	e759      	b.n	12878 <__aeabi_fdiv+0x138>
   129c4:	00016dac 	.word	0x00016dac
   129c8:	00016dec 	.word	0x00016dec
   129cc:	f7ffffff 	.word	0xf7ffffff

000129d0 <__eqsf2>:
   129d0:	b570      	push	{r4, r5, r6, lr}
   129d2:	0042      	lsls	r2, r0, #1
   129d4:	0245      	lsls	r5, r0, #9
   129d6:	024e      	lsls	r6, r1, #9
   129d8:	004c      	lsls	r4, r1, #1
   129da:	0fc3      	lsrs	r3, r0, #31
   129dc:	0a6d      	lsrs	r5, r5, #9
   129de:	0e12      	lsrs	r2, r2, #24
   129e0:	0a76      	lsrs	r6, r6, #9
   129e2:	0e24      	lsrs	r4, r4, #24
   129e4:	0fc9      	lsrs	r1, r1, #31
   129e6:	2001      	movs	r0, #1
   129e8:	2aff      	cmp	r2, #255	; 0xff
   129ea:	d006      	beq.n	129fa <__eqsf2+0x2a>
   129ec:	2cff      	cmp	r4, #255	; 0xff
   129ee:	d003      	beq.n	129f8 <__eqsf2+0x28>
   129f0:	42a2      	cmp	r2, r4
   129f2:	d101      	bne.n	129f8 <__eqsf2+0x28>
   129f4:	42b5      	cmp	r5, r6
   129f6:	d006      	beq.n	12a06 <__eqsf2+0x36>
   129f8:	bd70      	pop	{r4, r5, r6, pc}
   129fa:	2d00      	cmp	r5, #0
   129fc:	d1fc      	bne.n	129f8 <__eqsf2+0x28>
   129fe:	2cff      	cmp	r4, #255	; 0xff
   12a00:	d1fa      	bne.n	129f8 <__eqsf2+0x28>
   12a02:	2e00      	cmp	r6, #0
   12a04:	d1f8      	bne.n	129f8 <__eqsf2+0x28>
   12a06:	428b      	cmp	r3, r1
   12a08:	d006      	beq.n	12a18 <__eqsf2+0x48>
   12a0a:	2001      	movs	r0, #1
   12a0c:	2a00      	cmp	r2, #0
   12a0e:	d1f3      	bne.n	129f8 <__eqsf2+0x28>
   12a10:	0028      	movs	r0, r5
   12a12:	1e45      	subs	r5, r0, #1
   12a14:	41a8      	sbcs	r0, r5
   12a16:	e7ef      	b.n	129f8 <__eqsf2+0x28>
   12a18:	2000      	movs	r0, #0
   12a1a:	e7ed      	b.n	129f8 <__eqsf2+0x28>

00012a1c <__gesf2>:
   12a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a1e:	0042      	lsls	r2, r0, #1
   12a20:	0245      	lsls	r5, r0, #9
   12a22:	024c      	lsls	r4, r1, #9
   12a24:	0fc3      	lsrs	r3, r0, #31
   12a26:	0048      	lsls	r0, r1, #1
   12a28:	0a6d      	lsrs	r5, r5, #9
   12a2a:	0e12      	lsrs	r2, r2, #24
   12a2c:	0a64      	lsrs	r4, r4, #9
   12a2e:	0e00      	lsrs	r0, r0, #24
   12a30:	0fc9      	lsrs	r1, r1, #31
   12a32:	2aff      	cmp	r2, #255	; 0xff
   12a34:	d01e      	beq.n	12a74 <__gesf2+0x58>
   12a36:	28ff      	cmp	r0, #255	; 0xff
   12a38:	d021      	beq.n	12a7e <__gesf2+0x62>
   12a3a:	2a00      	cmp	r2, #0
   12a3c:	d10a      	bne.n	12a54 <__gesf2+0x38>
   12a3e:	426e      	negs	r6, r5
   12a40:	416e      	adcs	r6, r5
   12a42:	b2f6      	uxtb	r6, r6
   12a44:	2800      	cmp	r0, #0
   12a46:	d10f      	bne.n	12a68 <__gesf2+0x4c>
   12a48:	2c00      	cmp	r4, #0
   12a4a:	d10d      	bne.n	12a68 <__gesf2+0x4c>
   12a4c:	2000      	movs	r0, #0
   12a4e:	2d00      	cmp	r5, #0
   12a50:	d009      	beq.n	12a66 <__gesf2+0x4a>
   12a52:	e005      	b.n	12a60 <__gesf2+0x44>
   12a54:	2800      	cmp	r0, #0
   12a56:	d101      	bne.n	12a5c <__gesf2+0x40>
   12a58:	2c00      	cmp	r4, #0
   12a5a:	d001      	beq.n	12a60 <__gesf2+0x44>
   12a5c:	428b      	cmp	r3, r1
   12a5e:	d011      	beq.n	12a84 <__gesf2+0x68>
   12a60:	2101      	movs	r1, #1
   12a62:	4258      	negs	r0, r3
   12a64:	4308      	orrs	r0, r1
   12a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a68:	2e00      	cmp	r6, #0
   12a6a:	d0f7      	beq.n	12a5c <__gesf2+0x40>
   12a6c:	2001      	movs	r0, #1
   12a6e:	3901      	subs	r1, #1
   12a70:	4308      	orrs	r0, r1
   12a72:	e7f8      	b.n	12a66 <__gesf2+0x4a>
   12a74:	2d00      	cmp	r5, #0
   12a76:	d0de      	beq.n	12a36 <__gesf2+0x1a>
   12a78:	2002      	movs	r0, #2
   12a7a:	4240      	negs	r0, r0
   12a7c:	e7f3      	b.n	12a66 <__gesf2+0x4a>
   12a7e:	2c00      	cmp	r4, #0
   12a80:	d0db      	beq.n	12a3a <__gesf2+0x1e>
   12a82:	e7f9      	b.n	12a78 <__gesf2+0x5c>
   12a84:	4282      	cmp	r2, r0
   12a86:	dceb      	bgt.n	12a60 <__gesf2+0x44>
   12a88:	db04      	blt.n	12a94 <__gesf2+0x78>
   12a8a:	42a5      	cmp	r5, r4
   12a8c:	d8e8      	bhi.n	12a60 <__gesf2+0x44>
   12a8e:	2000      	movs	r0, #0
   12a90:	42a5      	cmp	r5, r4
   12a92:	d2e8      	bcs.n	12a66 <__gesf2+0x4a>
   12a94:	2101      	movs	r1, #1
   12a96:	1e58      	subs	r0, r3, #1
   12a98:	4308      	orrs	r0, r1
   12a9a:	e7e4      	b.n	12a66 <__gesf2+0x4a>

00012a9c <__lesf2>:
   12a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a9e:	0042      	lsls	r2, r0, #1
   12aa0:	024d      	lsls	r5, r1, #9
   12aa2:	004c      	lsls	r4, r1, #1
   12aa4:	0246      	lsls	r6, r0, #9
   12aa6:	0a76      	lsrs	r6, r6, #9
   12aa8:	0e12      	lsrs	r2, r2, #24
   12aaa:	0fc3      	lsrs	r3, r0, #31
   12aac:	0a6d      	lsrs	r5, r5, #9
   12aae:	0e24      	lsrs	r4, r4, #24
   12ab0:	0fc9      	lsrs	r1, r1, #31
   12ab2:	2aff      	cmp	r2, #255	; 0xff
   12ab4:	d016      	beq.n	12ae4 <__lesf2+0x48>
   12ab6:	2cff      	cmp	r4, #255	; 0xff
   12ab8:	d018      	beq.n	12aec <__lesf2+0x50>
   12aba:	2a00      	cmp	r2, #0
   12abc:	d10a      	bne.n	12ad4 <__lesf2+0x38>
   12abe:	4270      	negs	r0, r6
   12ac0:	4170      	adcs	r0, r6
   12ac2:	b2c0      	uxtb	r0, r0
   12ac4:	2c00      	cmp	r4, #0
   12ac6:	d015      	beq.n	12af4 <__lesf2+0x58>
   12ac8:	2800      	cmp	r0, #0
   12aca:	d005      	beq.n	12ad8 <__lesf2+0x3c>
   12acc:	2001      	movs	r0, #1
   12ace:	3901      	subs	r1, #1
   12ad0:	4308      	orrs	r0, r1
   12ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ad4:	2c00      	cmp	r4, #0
   12ad6:	d013      	beq.n	12b00 <__lesf2+0x64>
   12ad8:	4299      	cmp	r1, r3
   12ada:	d014      	beq.n	12b06 <__lesf2+0x6a>
   12adc:	2001      	movs	r0, #1
   12ade:	425b      	negs	r3, r3
   12ae0:	4318      	orrs	r0, r3
   12ae2:	e7f6      	b.n	12ad2 <__lesf2+0x36>
   12ae4:	2002      	movs	r0, #2
   12ae6:	2e00      	cmp	r6, #0
   12ae8:	d1f3      	bne.n	12ad2 <__lesf2+0x36>
   12aea:	e7e4      	b.n	12ab6 <__lesf2+0x1a>
   12aec:	2002      	movs	r0, #2
   12aee:	2d00      	cmp	r5, #0
   12af0:	d1ef      	bne.n	12ad2 <__lesf2+0x36>
   12af2:	e7e2      	b.n	12aba <__lesf2+0x1e>
   12af4:	2d00      	cmp	r5, #0
   12af6:	d1e7      	bne.n	12ac8 <__lesf2+0x2c>
   12af8:	2000      	movs	r0, #0
   12afa:	2e00      	cmp	r6, #0
   12afc:	d0e9      	beq.n	12ad2 <__lesf2+0x36>
   12afe:	e7ed      	b.n	12adc <__lesf2+0x40>
   12b00:	2d00      	cmp	r5, #0
   12b02:	d1e9      	bne.n	12ad8 <__lesf2+0x3c>
   12b04:	e7ea      	b.n	12adc <__lesf2+0x40>
   12b06:	42a2      	cmp	r2, r4
   12b08:	dc06      	bgt.n	12b18 <__lesf2+0x7c>
   12b0a:	dbdf      	blt.n	12acc <__lesf2+0x30>
   12b0c:	42ae      	cmp	r6, r5
   12b0e:	d803      	bhi.n	12b18 <__lesf2+0x7c>
   12b10:	2000      	movs	r0, #0
   12b12:	42ae      	cmp	r6, r5
   12b14:	d3da      	bcc.n	12acc <__lesf2+0x30>
   12b16:	e7dc      	b.n	12ad2 <__lesf2+0x36>
   12b18:	2001      	movs	r0, #1
   12b1a:	4249      	negs	r1, r1
   12b1c:	4308      	orrs	r0, r1
   12b1e:	e7d8      	b.n	12ad2 <__lesf2+0x36>

00012b20 <__aeabi_fmul>:
   12b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b22:	4657      	mov	r7, sl
   12b24:	464e      	mov	r6, r9
   12b26:	4645      	mov	r5, r8
   12b28:	46de      	mov	lr, fp
   12b2a:	b5e0      	push	{r5, r6, r7, lr}
   12b2c:	0247      	lsls	r7, r0, #9
   12b2e:	0046      	lsls	r6, r0, #1
   12b30:	4688      	mov	r8, r1
   12b32:	0a7f      	lsrs	r7, r7, #9
   12b34:	0e36      	lsrs	r6, r6, #24
   12b36:	0fc4      	lsrs	r4, r0, #31
   12b38:	2e00      	cmp	r6, #0
   12b3a:	d047      	beq.n	12bcc <__aeabi_fmul+0xac>
   12b3c:	2eff      	cmp	r6, #255	; 0xff
   12b3e:	d024      	beq.n	12b8a <__aeabi_fmul+0x6a>
   12b40:	00fb      	lsls	r3, r7, #3
   12b42:	2780      	movs	r7, #128	; 0x80
   12b44:	04ff      	lsls	r7, r7, #19
   12b46:	431f      	orrs	r7, r3
   12b48:	2300      	movs	r3, #0
   12b4a:	4699      	mov	r9, r3
   12b4c:	469a      	mov	sl, r3
   12b4e:	3e7f      	subs	r6, #127	; 0x7f
   12b50:	4643      	mov	r3, r8
   12b52:	025d      	lsls	r5, r3, #9
   12b54:	0058      	lsls	r0, r3, #1
   12b56:	0fdb      	lsrs	r3, r3, #31
   12b58:	0a6d      	lsrs	r5, r5, #9
   12b5a:	0e00      	lsrs	r0, r0, #24
   12b5c:	4698      	mov	r8, r3
   12b5e:	d043      	beq.n	12be8 <__aeabi_fmul+0xc8>
   12b60:	28ff      	cmp	r0, #255	; 0xff
   12b62:	d03b      	beq.n	12bdc <__aeabi_fmul+0xbc>
   12b64:	00eb      	lsls	r3, r5, #3
   12b66:	2580      	movs	r5, #128	; 0x80
   12b68:	2200      	movs	r2, #0
   12b6a:	04ed      	lsls	r5, r5, #19
   12b6c:	431d      	orrs	r5, r3
   12b6e:	387f      	subs	r0, #127	; 0x7f
   12b70:	1836      	adds	r6, r6, r0
   12b72:	1c73      	adds	r3, r6, #1
   12b74:	4641      	mov	r1, r8
   12b76:	469b      	mov	fp, r3
   12b78:	464b      	mov	r3, r9
   12b7a:	4061      	eors	r1, r4
   12b7c:	4313      	orrs	r3, r2
   12b7e:	2b0f      	cmp	r3, #15
   12b80:	d864      	bhi.n	12c4c <__aeabi_fmul+0x12c>
   12b82:	4875      	ldr	r0, [pc, #468]	; (12d58 <__aeabi_fmul+0x238>)
   12b84:	009b      	lsls	r3, r3, #2
   12b86:	58c3      	ldr	r3, [r0, r3]
   12b88:	469f      	mov	pc, r3
   12b8a:	2f00      	cmp	r7, #0
   12b8c:	d142      	bne.n	12c14 <__aeabi_fmul+0xf4>
   12b8e:	2308      	movs	r3, #8
   12b90:	4699      	mov	r9, r3
   12b92:	3b06      	subs	r3, #6
   12b94:	26ff      	movs	r6, #255	; 0xff
   12b96:	469a      	mov	sl, r3
   12b98:	e7da      	b.n	12b50 <__aeabi_fmul+0x30>
   12b9a:	4641      	mov	r1, r8
   12b9c:	2a02      	cmp	r2, #2
   12b9e:	d028      	beq.n	12bf2 <__aeabi_fmul+0xd2>
   12ba0:	2a03      	cmp	r2, #3
   12ba2:	d100      	bne.n	12ba6 <__aeabi_fmul+0x86>
   12ba4:	e0ce      	b.n	12d44 <__aeabi_fmul+0x224>
   12ba6:	2a01      	cmp	r2, #1
   12ba8:	d000      	beq.n	12bac <__aeabi_fmul+0x8c>
   12baa:	e0ac      	b.n	12d06 <__aeabi_fmul+0x1e6>
   12bac:	4011      	ands	r1, r2
   12bae:	2000      	movs	r0, #0
   12bb0:	2200      	movs	r2, #0
   12bb2:	b2cc      	uxtb	r4, r1
   12bb4:	0240      	lsls	r0, r0, #9
   12bb6:	05d2      	lsls	r2, r2, #23
   12bb8:	0a40      	lsrs	r0, r0, #9
   12bba:	07e4      	lsls	r4, r4, #31
   12bbc:	4310      	orrs	r0, r2
   12bbe:	4320      	orrs	r0, r4
   12bc0:	bc3c      	pop	{r2, r3, r4, r5}
   12bc2:	4690      	mov	r8, r2
   12bc4:	4699      	mov	r9, r3
   12bc6:	46a2      	mov	sl, r4
   12bc8:	46ab      	mov	fp, r5
   12bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12bcc:	2f00      	cmp	r7, #0
   12bce:	d115      	bne.n	12bfc <__aeabi_fmul+0xdc>
   12bd0:	2304      	movs	r3, #4
   12bd2:	4699      	mov	r9, r3
   12bd4:	3b03      	subs	r3, #3
   12bd6:	2600      	movs	r6, #0
   12bd8:	469a      	mov	sl, r3
   12bda:	e7b9      	b.n	12b50 <__aeabi_fmul+0x30>
   12bdc:	20ff      	movs	r0, #255	; 0xff
   12bde:	2202      	movs	r2, #2
   12be0:	2d00      	cmp	r5, #0
   12be2:	d0c5      	beq.n	12b70 <__aeabi_fmul+0x50>
   12be4:	2203      	movs	r2, #3
   12be6:	e7c3      	b.n	12b70 <__aeabi_fmul+0x50>
   12be8:	2d00      	cmp	r5, #0
   12bea:	d119      	bne.n	12c20 <__aeabi_fmul+0x100>
   12bec:	2000      	movs	r0, #0
   12bee:	2201      	movs	r2, #1
   12bf0:	e7be      	b.n	12b70 <__aeabi_fmul+0x50>
   12bf2:	2401      	movs	r4, #1
   12bf4:	22ff      	movs	r2, #255	; 0xff
   12bf6:	400c      	ands	r4, r1
   12bf8:	2000      	movs	r0, #0
   12bfa:	e7db      	b.n	12bb4 <__aeabi_fmul+0x94>
   12bfc:	0038      	movs	r0, r7
   12bfe:	f002 f965 	bl	14ecc <__clzsi2>
   12c02:	2676      	movs	r6, #118	; 0x76
   12c04:	1f43      	subs	r3, r0, #5
   12c06:	409f      	lsls	r7, r3
   12c08:	2300      	movs	r3, #0
   12c0a:	4276      	negs	r6, r6
   12c0c:	1a36      	subs	r6, r6, r0
   12c0e:	4699      	mov	r9, r3
   12c10:	469a      	mov	sl, r3
   12c12:	e79d      	b.n	12b50 <__aeabi_fmul+0x30>
   12c14:	230c      	movs	r3, #12
   12c16:	4699      	mov	r9, r3
   12c18:	3b09      	subs	r3, #9
   12c1a:	26ff      	movs	r6, #255	; 0xff
   12c1c:	469a      	mov	sl, r3
   12c1e:	e797      	b.n	12b50 <__aeabi_fmul+0x30>
   12c20:	0028      	movs	r0, r5
   12c22:	f002 f953 	bl	14ecc <__clzsi2>
   12c26:	1f43      	subs	r3, r0, #5
   12c28:	409d      	lsls	r5, r3
   12c2a:	2376      	movs	r3, #118	; 0x76
   12c2c:	425b      	negs	r3, r3
   12c2e:	1a18      	subs	r0, r3, r0
   12c30:	2200      	movs	r2, #0
   12c32:	e79d      	b.n	12b70 <__aeabi_fmul+0x50>
   12c34:	2080      	movs	r0, #128	; 0x80
   12c36:	2400      	movs	r4, #0
   12c38:	03c0      	lsls	r0, r0, #15
   12c3a:	22ff      	movs	r2, #255	; 0xff
   12c3c:	e7ba      	b.n	12bb4 <__aeabi_fmul+0x94>
   12c3e:	003d      	movs	r5, r7
   12c40:	4652      	mov	r2, sl
   12c42:	e7ab      	b.n	12b9c <__aeabi_fmul+0x7c>
   12c44:	003d      	movs	r5, r7
   12c46:	0021      	movs	r1, r4
   12c48:	4652      	mov	r2, sl
   12c4a:	e7a7      	b.n	12b9c <__aeabi_fmul+0x7c>
   12c4c:	0c3b      	lsrs	r3, r7, #16
   12c4e:	469c      	mov	ip, r3
   12c50:	042a      	lsls	r2, r5, #16
   12c52:	0c12      	lsrs	r2, r2, #16
   12c54:	0c2b      	lsrs	r3, r5, #16
   12c56:	0014      	movs	r4, r2
   12c58:	4660      	mov	r0, ip
   12c5a:	4665      	mov	r5, ip
   12c5c:	043f      	lsls	r7, r7, #16
   12c5e:	0c3f      	lsrs	r7, r7, #16
   12c60:	437c      	muls	r4, r7
   12c62:	4342      	muls	r2, r0
   12c64:	435d      	muls	r5, r3
   12c66:	437b      	muls	r3, r7
   12c68:	0c27      	lsrs	r7, r4, #16
   12c6a:	189b      	adds	r3, r3, r2
   12c6c:	18ff      	adds	r7, r7, r3
   12c6e:	42ba      	cmp	r2, r7
   12c70:	d903      	bls.n	12c7a <__aeabi_fmul+0x15a>
   12c72:	2380      	movs	r3, #128	; 0x80
   12c74:	025b      	lsls	r3, r3, #9
   12c76:	469c      	mov	ip, r3
   12c78:	4465      	add	r5, ip
   12c7a:	0424      	lsls	r4, r4, #16
   12c7c:	043a      	lsls	r2, r7, #16
   12c7e:	0c24      	lsrs	r4, r4, #16
   12c80:	1912      	adds	r2, r2, r4
   12c82:	0193      	lsls	r3, r2, #6
   12c84:	1e5c      	subs	r4, r3, #1
   12c86:	41a3      	sbcs	r3, r4
   12c88:	0c3f      	lsrs	r7, r7, #16
   12c8a:	0e92      	lsrs	r2, r2, #26
   12c8c:	197d      	adds	r5, r7, r5
   12c8e:	431a      	orrs	r2, r3
   12c90:	01ad      	lsls	r5, r5, #6
   12c92:	4315      	orrs	r5, r2
   12c94:	012b      	lsls	r3, r5, #4
   12c96:	d504      	bpl.n	12ca2 <__aeabi_fmul+0x182>
   12c98:	2301      	movs	r3, #1
   12c9a:	465e      	mov	r6, fp
   12c9c:	086a      	lsrs	r2, r5, #1
   12c9e:	401d      	ands	r5, r3
   12ca0:	4315      	orrs	r5, r2
   12ca2:	0032      	movs	r2, r6
   12ca4:	327f      	adds	r2, #127	; 0x7f
   12ca6:	2a00      	cmp	r2, #0
   12ca8:	dd25      	ble.n	12cf6 <__aeabi_fmul+0x1d6>
   12caa:	076b      	lsls	r3, r5, #29
   12cac:	d004      	beq.n	12cb8 <__aeabi_fmul+0x198>
   12cae:	230f      	movs	r3, #15
   12cb0:	402b      	ands	r3, r5
   12cb2:	2b04      	cmp	r3, #4
   12cb4:	d000      	beq.n	12cb8 <__aeabi_fmul+0x198>
   12cb6:	3504      	adds	r5, #4
   12cb8:	012b      	lsls	r3, r5, #4
   12cba:	d503      	bpl.n	12cc4 <__aeabi_fmul+0x1a4>
   12cbc:	0032      	movs	r2, r6
   12cbe:	4b27      	ldr	r3, [pc, #156]	; (12d5c <__aeabi_fmul+0x23c>)
   12cc0:	3280      	adds	r2, #128	; 0x80
   12cc2:	401d      	ands	r5, r3
   12cc4:	2afe      	cmp	r2, #254	; 0xfe
   12cc6:	dc94      	bgt.n	12bf2 <__aeabi_fmul+0xd2>
   12cc8:	2401      	movs	r4, #1
   12cca:	01a8      	lsls	r0, r5, #6
   12ccc:	0a40      	lsrs	r0, r0, #9
   12cce:	b2d2      	uxtb	r2, r2
   12cd0:	400c      	ands	r4, r1
   12cd2:	e76f      	b.n	12bb4 <__aeabi_fmul+0x94>
   12cd4:	2080      	movs	r0, #128	; 0x80
   12cd6:	03c0      	lsls	r0, r0, #15
   12cd8:	4207      	tst	r7, r0
   12cda:	d007      	beq.n	12cec <__aeabi_fmul+0x1cc>
   12cdc:	4205      	tst	r5, r0
   12cde:	d105      	bne.n	12cec <__aeabi_fmul+0x1cc>
   12ce0:	4328      	orrs	r0, r5
   12ce2:	0240      	lsls	r0, r0, #9
   12ce4:	0a40      	lsrs	r0, r0, #9
   12ce6:	4644      	mov	r4, r8
   12ce8:	22ff      	movs	r2, #255	; 0xff
   12cea:	e763      	b.n	12bb4 <__aeabi_fmul+0x94>
   12cec:	4338      	orrs	r0, r7
   12cee:	0240      	lsls	r0, r0, #9
   12cf0:	0a40      	lsrs	r0, r0, #9
   12cf2:	22ff      	movs	r2, #255	; 0xff
   12cf4:	e75e      	b.n	12bb4 <__aeabi_fmul+0x94>
   12cf6:	2401      	movs	r4, #1
   12cf8:	1aa3      	subs	r3, r4, r2
   12cfa:	2b1b      	cmp	r3, #27
   12cfc:	dd05      	ble.n	12d0a <__aeabi_fmul+0x1ea>
   12cfe:	400c      	ands	r4, r1
   12d00:	2200      	movs	r2, #0
   12d02:	2000      	movs	r0, #0
   12d04:	e756      	b.n	12bb4 <__aeabi_fmul+0x94>
   12d06:	465e      	mov	r6, fp
   12d08:	e7cb      	b.n	12ca2 <__aeabi_fmul+0x182>
   12d0a:	002a      	movs	r2, r5
   12d0c:	2020      	movs	r0, #32
   12d0e:	40da      	lsrs	r2, r3
   12d10:	1ac3      	subs	r3, r0, r3
   12d12:	409d      	lsls	r5, r3
   12d14:	002b      	movs	r3, r5
   12d16:	1e5d      	subs	r5, r3, #1
   12d18:	41ab      	sbcs	r3, r5
   12d1a:	4313      	orrs	r3, r2
   12d1c:	075a      	lsls	r2, r3, #29
   12d1e:	d004      	beq.n	12d2a <__aeabi_fmul+0x20a>
   12d20:	220f      	movs	r2, #15
   12d22:	401a      	ands	r2, r3
   12d24:	2a04      	cmp	r2, #4
   12d26:	d000      	beq.n	12d2a <__aeabi_fmul+0x20a>
   12d28:	3304      	adds	r3, #4
   12d2a:	015a      	lsls	r2, r3, #5
   12d2c:	d504      	bpl.n	12d38 <__aeabi_fmul+0x218>
   12d2e:	2401      	movs	r4, #1
   12d30:	2201      	movs	r2, #1
   12d32:	400c      	ands	r4, r1
   12d34:	2000      	movs	r0, #0
   12d36:	e73d      	b.n	12bb4 <__aeabi_fmul+0x94>
   12d38:	2401      	movs	r4, #1
   12d3a:	019b      	lsls	r3, r3, #6
   12d3c:	0a58      	lsrs	r0, r3, #9
   12d3e:	400c      	ands	r4, r1
   12d40:	2200      	movs	r2, #0
   12d42:	e737      	b.n	12bb4 <__aeabi_fmul+0x94>
   12d44:	2080      	movs	r0, #128	; 0x80
   12d46:	2401      	movs	r4, #1
   12d48:	03c0      	lsls	r0, r0, #15
   12d4a:	4328      	orrs	r0, r5
   12d4c:	0240      	lsls	r0, r0, #9
   12d4e:	0a40      	lsrs	r0, r0, #9
   12d50:	400c      	ands	r4, r1
   12d52:	22ff      	movs	r2, #255	; 0xff
   12d54:	e72e      	b.n	12bb4 <__aeabi_fmul+0x94>
   12d56:	46c0      	nop			; (mov r8, r8)
   12d58:	00016e2c 	.word	0x00016e2c
   12d5c:	f7ffffff 	.word	0xf7ffffff

00012d60 <__aeabi_fsub>:
   12d60:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d62:	464f      	mov	r7, r9
   12d64:	46d6      	mov	lr, sl
   12d66:	4646      	mov	r6, r8
   12d68:	0044      	lsls	r4, r0, #1
   12d6a:	b5c0      	push	{r6, r7, lr}
   12d6c:	0fc2      	lsrs	r2, r0, #31
   12d6e:	0247      	lsls	r7, r0, #9
   12d70:	0248      	lsls	r0, r1, #9
   12d72:	0a40      	lsrs	r0, r0, #9
   12d74:	4684      	mov	ip, r0
   12d76:	4666      	mov	r6, ip
   12d78:	0a7b      	lsrs	r3, r7, #9
   12d7a:	0048      	lsls	r0, r1, #1
   12d7c:	0fc9      	lsrs	r1, r1, #31
   12d7e:	469a      	mov	sl, r3
   12d80:	0e24      	lsrs	r4, r4, #24
   12d82:	0015      	movs	r5, r2
   12d84:	00db      	lsls	r3, r3, #3
   12d86:	0e00      	lsrs	r0, r0, #24
   12d88:	4689      	mov	r9, r1
   12d8a:	00f6      	lsls	r6, r6, #3
   12d8c:	28ff      	cmp	r0, #255	; 0xff
   12d8e:	d100      	bne.n	12d92 <__aeabi_fsub+0x32>
   12d90:	e08f      	b.n	12eb2 <__aeabi_fsub+0x152>
   12d92:	2101      	movs	r1, #1
   12d94:	464f      	mov	r7, r9
   12d96:	404f      	eors	r7, r1
   12d98:	0039      	movs	r1, r7
   12d9a:	4291      	cmp	r1, r2
   12d9c:	d066      	beq.n	12e6c <__aeabi_fsub+0x10c>
   12d9e:	1a22      	subs	r2, r4, r0
   12da0:	2a00      	cmp	r2, #0
   12da2:	dc00      	bgt.n	12da6 <__aeabi_fsub+0x46>
   12da4:	e09d      	b.n	12ee2 <__aeabi_fsub+0x182>
   12da6:	2800      	cmp	r0, #0
   12da8:	d13d      	bne.n	12e26 <__aeabi_fsub+0xc6>
   12daa:	2e00      	cmp	r6, #0
   12dac:	d100      	bne.n	12db0 <__aeabi_fsub+0x50>
   12dae:	e08b      	b.n	12ec8 <__aeabi_fsub+0x168>
   12db0:	1e51      	subs	r1, r2, #1
   12db2:	2900      	cmp	r1, #0
   12db4:	d000      	beq.n	12db8 <__aeabi_fsub+0x58>
   12db6:	e0b5      	b.n	12f24 <__aeabi_fsub+0x1c4>
   12db8:	2401      	movs	r4, #1
   12dba:	1b9b      	subs	r3, r3, r6
   12dbc:	015a      	lsls	r2, r3, #5
   12dbe:	d544      	bpl.n	12e4a <__aeabi_fsub+0xea>
   12dc0:	019b      	lsls	r3, r3, #6
   12dc2:	099f      	lsrs	r7, r3, #6
   12dc4:	0038      	movs	r0, r7
   12dc6:	f002 f881 	bl	14ecc <__clzsi2>
   12dca:	3805      	subs	r0, #5
   12dcc:	4087      	lsls	r7, r0
   12dce:	4284      	cmp	r4, r0
   12dd0:	dd00      	ble.n	12dd4 <__aeabi_fsub+0x74>
   12dd2:	e096      	b.n	12f02 <__aeabi_fsub+0x1a2>
   12dd4:	1b04      	subs	r4, r0, r4
   12dd6:	003a      	movs	r2, r7
   12dd8:	2020      	movs	r0, #32
   12dda:	3401      	adds	r4, #1
   12ddc:	40e2      	lsrs	r2, r4
   12dde:	1b04      	subs	r4, r0, r4
   12de0:	40a7      	lsls	r7, r4
   12de2:	003b      	movs	r3, r7
   12de4:	1e5f      	subs	r7, r3, #1
   12de6:	41bb      	sbcs	r3, r7
   12de8:	2400      	movs	r4, #0
   12dea:	4313      	orrs	r3, r2
   12dec:	075a      	lsls	r2, r3, #29
   12dee:	d004      	beq.n	12dfa <__aeabi_fsub+0x9a>
   12df0:	220f      	movs	r2, #15
   12df2:	401a      	ands	r2, r3
   12df4:	2a04      	cmp	r2, #4
   12df6:	d000      	beq.n	12dfa <__aeabi_fsub+0x9a>
   12df8:	3304      	adds	r3, #4
   12dfa:	015a      	lsls	r2, r3, #5
   12dfc:	d527      	bpl.n	12e4e <__aeabi_fsub+0xee>
   12dfe:	3401      	adds	r4, #1
   12e00:	2cff      	cmp	r4, #255	; 0xff
   12e02:	d100      	bne.n	12e06 <__aeabi_fsub+0xa6>
   12e04:	e079      	b.n	12efa <__aeabi_fsub+0x19a>
   12e06:	2201      	movs	r2, #1
   12e08:	019b      	lsls	r3, r3, #6
   12e0a:	0a5b      	lsrs	r3, r3, #9
   12e0c:	b2e4      	uxtb	r4, r4
   12e0e:	402a      	ands	r2, r5
   12e10:	025b      	lsls	r3, r3, #9
   12e12:	05e4      	lsls	r4, r4, #23
   12e14:	0a58      	lsrs	r0, r3, #9
   12e16:	07d2      	lsls	r2, r2, #31
   12e18:	4320      	orrs	r0, r4
   12e1a:	4310      	orrs	r0, r2
   12e1c:	bc1c      	pop	{r2, r3, r4}
   12e1e:	4690      	mov	r8, r2
   12e20:	4699      	mov	r9, r3
   12e22:	46a2      	mov	sl, r4
   12e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e26:	2cff      	cmp	r4, #255	; 0xff
   12e28:	d0e0      	beq.n	12dec <__aeabi_fsub+0x8c>
   12e2a:	2180      	movs	r1, #128	; 0x80
   12e2c:	04c9      	lsls	r1, r1, #19
   12e2e:	430e      	orrs	r6, r1
   12e30:	2a1b      	cmp	r2, #27
   12e32:	dc7b      	bgt.n	12f2c <__aeabi_fsub+0x1cc>
   12e34:	0031      	movs	r1, r6
   12e36:	2020      	movs	r0, #32
   12e38:	40d1      	lsrs	r1, r2
   12e3a:	1a82      	subs	r2, r0, r2
   12e3c:	4096      	lsls	r6, r2
   12e3e:	1e72      	subs	r2, r6, #1
   12e40:	4196      	sbcs	r6, r2
   12e42:	430e      	orrs	r6, r1
   12e44:	1b9b      	subs	r3, r3, r6
   12e46:	015a      	lsls	r2, r3, #5
   12e48:	d4ba      	bmi.n	12dc0 <__aeabi_fsub+0x60>
   12e4a:	075a      	lsls	r2, r3, #29
   12e4c:	d1d0      	bne.n	12df0 <__aeabi_fsub+0x90>
   12e4e:	2201      	movs	r2, #1
   12e50:	08df      	lsrs	r7, r3, #3
   12e52:	402a      	ands	r2, r5
   12e54:	2cff      	cmp	r4, #255	; 0xff
   12e56:	d133      	bne.n	12ec0 <__aeabi_fsub+0x160>
   12e58:	2f00      	cmp	r7, #0
   12e5a:	d100      	bne.n	12e5e <__aeabi_fsub+0xfe>
   12e5c:	e0a8      	b.n	12fb0 <__aeabi_fsub+0x250>
   12e5e:	2380      	movs	r3, #128	; 0x80
   12e60:	03db      	lsls	r3, r3, #15
   12e62:	433b      	orrs	r3, r7
   12e64:	025b      	lsls	r3, r3, #9
   12e66:	0a5b      	lsrs	r3, r3, #9
   12e68:	24ff      	movs	r4, #255	; 0xff
   12e6a:	e7d1      	b.n	12e10 <__aeabi_fsub+0xb0>
   12e6c:	1a21      	subs	r1, r4, r0
   12e6e:	2900      	cmp	r1, #0
   12e70:	dd4c      	ble.n	12f0c <__aeabi_fsub+0x1ac>
   12e72:	2800      	cmp	r0, #0
   12e74:	d02a      	beq.n	12ecc <__aeabi_fsub+0x16c>
   12e76:	2cff      	cmp	r4, #255	; 0xff
   12e78:	d0b8      	beq.n	12dec <__aeabi_fsub+0x8c>
   12e7a:	2080      	movs	r0, #128	; 0x80
   12e7c:	04c0      	lsls	r0, r0, #19
   12e7e:	4306      	orrs	r6, r0
   12e80:	291b      	cmp	r1, #27
   12e82:	dd00      	ble.n	12e86 <__aeabi_fsub+0x126>
   12e84:	e0af      	b.n	12fe6 <__aeabi_fsub+0x286>
   12e86:	0030      	movs	r0, r6
   12e88:	2720      	movs	r7, #32
   12e8a:	40c8      	lsrs	r0, r1
   12e8c:	1a79      	subs	r1, r7, r1
   12e8e:	408e      	lsls	r6, r1
   12e90:	1e71      	subs	r1, r6, #1
   12e92:	418e      	sbcs	r6, r1
   12e94:	4306      	orrs	r6, r0
   12e96:	199b      	adds	r3, r3, r6
   12e98:	0159      	lsls	r1, r3, #5
   12e9a:	d5d6      	bpl.n	12e4a <__aeabi_fsub+0xea>
   12e9c:	3401      	adds	r4, #1
   12e9e:	2cff      	cmp	r4, #255	; 0xff
   12ea0:	d100      	bne.n	12ea4 <__aeabi_fsub+0x144>
   12ea2:	e085      	b.n	12fb0 <__aeabi_fsub+0x250>
   12ea4:	2201      	movs	r2, #1
   12ea6:	497a      	ldr	r1, [pc, #488]	; (13090 <__aeabi_fsub+0x330>)
   12ea8:	401a      	ands	r2, r3
   12eaa:	085b      	lsrs	r3, r3, #1
   12eac:	400b      	ands	r3, r1
   12eae:	4313      	orrs	r3, r2
   12eb0:	e79c      	b.n	12dec <__aeabi_fsub+0x8c>
   12eb2:	2e00      	cmp	r6, #0
   12eb4:	d000      	beq.n	12eb8 <__aeabi_fsub+0x158>
   12eb6:	e770      	b.n	12d9a <__aeabi_fsub+0x3a>
   12eb8:	e76b      	b.n	12d92 <__aeabi_fsub+0x32>
   12eba:	1e3b      	subs	r3, r7, #0
   12ebc:	d1c5      	bne.n	12e4a <__aeabi_fsub+0xea>
   12ebe:	2200      	movs	r2, #0
   12ec0:	027b      	lsls	r3, r7, #9
   12ec2:	0a5b      	lsrs	r3, r3, #9
   12ec4:	b2e4      	uxtb	r4, r4
   12ec6:	e7a3      	b.n	12e10 <__aeabi_fsub+0xb0>
   12ec8:	0014      	movs	r4, r2
   12eca:	e78f      	b.n	12dec <__aeabi_fsub+0x8c>
   12ecc:	2e00      	cmp	r6, #0
   12ece:	d04d      	beq.n	12f6c <__aeabi_fsub+0x20c>
   12ed0:	1e48      	subs	r0, r1, #1
   12ed2:	2800      	cmp	r0, #0
   12ed4:	d157      	bne.n	12f86 <__aeabi_fsub+0x226>
   12ed6:	199b      	adds	r3, r3, r6
   12ed8:	2401      	movs	r4, #1
   12eda:	015a      	lsls	r2, r3, #5
   12edc:	d5b5      	bpl.n	12e4a <__aeabi_fsub+0xea>
   12ede:	2402      	movs	r4, #2
   12ee0:	e7e0      	b.n	12ea4 <__aeabi_fsub+0x144>
   12ee2:	2a00      	cmp	r2, #0
   12ee4:	d125      	bne.n	12f32 <__aeabi_fsub+0x1d2>
   12ee6:	1c62      	adds	r2, r4, #1
   12ee8:	b2d2      	uxtb	r2, r2
   12eea:	2a01      	cmp	r2, #1
   12eec:	dd72      	ble.n	12fd4 <__aeabi_fsub+0x274>
   12eee:	1b9f      	subs	r7, r3, r6
   12ef0:	017a      	lsls	r2, r7, #5
   12ef2:	d535      	bpl.n	12f60 <__aeabi_fsub+0x200>
   12ef4:	1af7      	subs	r7, r6, r3
   12ef6:	000d      	movs	r5, r1
   12ef8:	e764      	b.n	12dc4 <__aeabi_fsub+0x64>
   12efa:	2201      	movs	r2, #1
   12efc:	2300      	movs	r3, #0
   12efe:	402a      	ands	r2, r5
   12f00:	e786      	b.n	12e10 <__aeabi_fsub+0xb0>
   12f02:	003b      	movs	r3, r7
   12f04:	4a63      	ldr	r2, [pc, #396]	; (13094 <__aeabi_fsub+0x334>)
   12f06:	1a24      	subs	r4, r4, r0
   12f08:	4013      	ands	r3, r2
   12f0a:	e76f      	b.n	12dec <__aeabi_fsub+0x8c>
   12f0c:	2900      	cmp	r1, #0
   12f0e:	d16c      	bne.n	12fea <__aeabi_fsub+0x28a>
   12f10:	1c61      	adds	r1, r4, #1
   12f12:	b2c8      	uxtb	r0, r1
   12f14:	2801      	cmp	r0, #1
   12f16:	dd4e      	ble.n	12fb6 <__aeabi_fsub+0x256>
   12f18:	29ff      	cmp	r1, #255	; 0xff
   12f1a:	d049      	beq.n	12fb0 <__aeabi_fsub+0x250>
   12f1c:	199b      	adds	r3, r3, r6
   12f1e:	085b      	lsrs	r3, r3, #1
   12f20:	000c      	movs	r4, r1
   12f22:	e763      	b.n	12dec <__aeabi_fsub+0x8c>
   12f24:	2aff      	cmp	r2, #255	; 0xff
   12f26:	d041      	beq.n	12fac <__aeabi_fsub+0x24c>
   12f28:	000a      	movs	r2, r1
   12f2a:	e781      	b.n	12e30 <__aeabi_fsub+0xd0>
   12f2c:	2601      	movs	r6, #1
   12f2e:	1b9b      	subs	r3, r3, r6
   12f30:	e789      	b.n	12e46 <__aeabi_fsub+0xe6>
   12f32:	2c00      	cmp	r4, #0
   12f34:	d01c      	beq.n	12f70 <__aeabi_fsub+0x210>
   12f36:	28ff      	cmp	r0, #255	; 0xff
   12f38:	d021      	beq.n	12f7e <__aeabi_fsub+0x21e>
   12f3a:	2480      	movs	r4, #128	; 0x80
   12f3c:	04e4      	lsls	r4, r4, #19
   12f3e:	4252      	negs	r2, r2
   12f40:	4323      	orrs	r3, r4
   12f42:	2a1b      	cmp	r2, #27
   12f44:	dd00      	ble.n	12f48 <__aeabi_fsub+0x1e8>
   12f46:	e096      	b.n	13076 <__aeabi_fsub+0x316>
   12f48:	001c      	movs	r4, r3
   12f4a:	2520      	movs	r5, #32
   12f4c:	40d4      	lsrs	r4, r2
   12f4e:	1aaa      	subs	r2, r5, r2
   12f50:	4093      	lsls	r3, r2
   12f52:	1e5a      	subs	r2, r3, #1
   12f54:	4193      	sbcs	r3, r2
   12f56:	4323      	orrs	r3, r4
   12f58:	1af3      	subs	r3, r6, r3
   12f5a:	0004      	movs	r4, r0
   12f5c:	000d      	movs	r5, r1
   12f5e:	e72d      	b.n	12dbc <__aeabi_fsub+0x5c>
   12f60:	2f00      	cmp	r7, #0
   12f62:	d000      	beq.n	12f66 <__aeabi_fsub+0x206>
   12f64:	e72e      	b.n	12dc4 <__aeabi_fsub+0x64>
   12f66:	2200      	movs	r2, #0
   12f68:	2400      	movs	r4, #0
   12f6a:	e7a9      	b.n	12ec0 <__aeabi_fsub+0x160>
   12f6c:	000c      	movs	r4, r1
   12f6e:	e73d      	b.n	12dec <__aeabi_fsub+0x8c>
   12f70:	2b00      	cmp	r3, #0
   12f72:	d058      	beq.n	13026 <__aeabi_fsub+0x2c6>
   12f74:	43d2      	mvns	r2, r2
   12f76:	2a00      	cmp	r2, #0
   12f78:	d0ee      	beq.n	12f58 <__aeabi_fsub+0x1f8>
   12f7a:	28ff      	cmp	r0, #255	; 0xff
   12f7c:	d1e1      	bne.n	12f42 <__aeabi_fsub+0x1e2>
   12f7e:	0033      	movs	r3, r6
   12f80:	24ff      	movs	r4, #255	; 0xff
   12f82:	000d      	movs	r5, r1
   12f84:	e732      	b.n	12dec <__aeabi_fsub+0x8c>
   12f86:	29ff      	cmp	r1, #255	; 0xff
   12f88:	d010      	beq.n	12fac <__aeabi_fsub+0x24c>
   12f8a:	0001      	movs	r1, r0
   12f8c:	e778      	b.n	12e80 <__aeabi_fsub+0x120>
   12f8e:	2b00      	cmp	r3, #0
   12f90:	d06e      	beq.n	13070 <__aeabi_fsub+0x310>
   12f92:	24ff      	movs	r4, #255	; 0xff
   12f94:	2e00      	cmp	r6, #0
   12f96:	d100      	bne.n	12f9a <__aeabi_fsub+0x23a>
   12f98:	e728      	b.n	12dec <__aeabi_fsub+0x8c>
   12f9a:	2280      	movs	r2, #128	; 0x80
   12f9c:	4651      	mov	r1, sl
   12f9e:	03d2      	lsls	r2, r2, #15
   12fa0:	4211      	tst	r1, r2
   12fa2:	d003      	beq.n	12fac <__aeabi_fsub+0x24c>
   12fa4:	4661      	mov	r1, ip
   12fa6:	4211      	tst	r1, r2
   12fa8:	d100      	bne.n	12fac <__aeabi_fsub+0x24c>
   12faa:	0033      	movs	r3, r6
   12fac:	24ff      	movs	r4, #255	; 0xff
   12fae:	e71d      	b.n	12dec <__aeabi_fsub+0x8c>
   12fb0:	24ff      	movs	r4, #255	; 0xff
   12fb2:	2300      	movs	r3, #0
   12fb4:	e72c      	b.n	12e10 <__aeabi_fsub+0xb0>
   12fb6:	2c00      	cmp	r4, #0
   12fb8:	d1e9      	bne.n	12f8e <__aeabi_fsub+0x22e>
   12fba:	2b00      	cmp	r3, #0
   12fbc:	d063      	beq.n	13086 <__aeabi_fsub+0x326>
   12fbe:	2e00      	cmp	r6, #0
   12fc0:	d100      	bne.n	12fc4 <__aeabi_fsub+0x264>
   12fc2:	e713      	b.n	12dec <__aeabi_fsub+0x8c>
   12fc4:	199b      	adds	r3, r3, r6
   12fc6:	015a      	lsls	r2, r3, #5
   12fc8:	d400      	bmi.n	12fcc <__aeabi_fsub+0x26c>
   12fca:	e73e      	b.n	12e4a <__aeabi_fsub+0xea>
   12fcc:	4a31      	ldr	r2, [pc, #196]	; (13094 <__aeabi_fsub+0x334>)
   12fce:	000c      	movs	r4, r1
   12fd0:	4013      	ands	r3, r2
   12fd2:	e70b      	b.n	12dec <__aeabi_fsub+0x8c>
   12fd4:	2c00      	cmp	r4, #0
   12fd6:	d11e      	bne.n	13016 <__aeabi_fsub+0x2b6>
   12fd8:	2b00      	cmp	r3, #0
   12fda:	d12f      	bne.n	1303c <__aeabi_fsub+0x2dc>
   12fdc:	2e00      	cmp	r6, #0
   12fde:	d04f      	beq.n	13080 <__aeabi_fsub+0x320>
   12fe0:	0033      	movs	r3, r6
   12fe2:	000d      	movs	r5, r1
   12fe4:	e702      	b.n	12dec <__aeabi_fsub+0x8c>
   12fe6:	2601      	movs	r6, #1
   12fe8:	e755      	b.n	12e96 <__aeabi_fsub+0x136>
   12fea:	2c00      	cmp	r4, #0
   12fec:	d11f      	bne.n	1302e <__aeabi_fsub+0x2ce>
   12fee:	2b00      	cmp	r3, #0
   12ff0:	d043      	beq.n	1307a <__aeabi_fsub+0x31a>
   12ff2:	43c9      	mvns	r1, r1
   12ff4:	2900      	cmp	r1, #0
   12ff6:	d00b      	beq.n	13010 <__aeabi_fsub+0x2b0>
   12ff8:	28ff      	cmp	r0, #255	; 0xff
   12ffa:	d039      	beq.n	13070 <__aeabi_fsub+0x310>
   12ffc:	291b      	cmp	r1, #27
   12ffe:	dc44      	bgt.n	1308a <__aeabi_fsub+0x32a>
   13000:	001c      	movs	r4, r3
   13002:	2720      	movs	r7, #32
   13004:	40cc      	lsrs	r4, r1
   13006:	1a79      	subs	r1, r7, r1
   13008:	408b      	lsls	r3, r1
   1300a:	1e59      	subs	r1, r3, #1
   1300c:	418b      	sbcs	r3, r1
   1300e:	4323      	orrs	r3, r4
   13010:	199b      	adds	r3, r3, r6
   13012:	0004      	movs	r4, r0
   13014:	e740      	b.n	12e98 <__aeabi_fsub+0x138>
   13016:	2b00      	cmp	r3, #0
   13018:	d11a      	bne.n	13050 <__aeabi_fsub+0x2f0>
   1301a:	2e00      	cmp	r6, #0
   1301c:	d124      	bne.n	13068 <__aeabi_fsub+0x308>
   1301e:	2780      	movs	r7, #128	; 0x80
   13020:	2200      	movs	r2, #0
   13022:	03ff      	lsls	r7, r7, #15
   13024:	e71b      	b.n	12e5e <__aeabi_fsub+0xfe>
   13026:	0033      	movs	r3, r6
   13028:	0004      	movs	r4, r0
   1302a:	000d      	movs	r5, r1
   1302c:	e6de      	b.n	12dec <__aeabi_fsub+0x8c>
   1302e:	28ff      	cmp	r0, #255	; 0xff
   13030:	d01e      	beq.n	13070 <__aeabi_fsub+0x310>
   13032:	2480      	movs	r4, #128	; 0x80
   13034:	04e4      	lsls	r4, r4, #19
   13036:	4249      	negs	r1, r1
   13038:	4323      	orrs	r3, r4
   1303a:	e7df      	b.n	12ffc <__aeabi_fsub+0x29c>
   1303c:	2e00      	cmp	r6, #0
   1303e:	d100      	bne.n	13042 <__aeabi_fsub+0x2e2>
   13040:	e6d4      	b.n	12dec <__aeabi_fsub+0x8c>
   13042:	1b9f      	subs	r7, r3, r6
   13044:	017a      	lsls	r2, r7, #5
   13046:	d400      	bmi.n	1304a <__aeabi_fsub+0x2ea>
   13048:	e737      	b.n	12eba <__aeabi_fsub+0x15a>
   1304a:	1af3      	subs	r3, r6, r3
   1304c:	000d      	movs	r5, r1
   1304e:	e6cd      	b.n	12dec <__aeabi_fsub+0x8c>
   13050:	24ff      	movs	r4, #255	; 0xff
   13052:	2e00      	cmp	r6, #0
   13054:	d100      	bne.n	13058 <__aeabi_fsub+0x2f8>
   13056:	e6c9      	b.n	12dec <__aeabi_fsub+0x8c>
   13058:	2280      	movs	r2, #128	; 0x80
   1305a:	4650      	mov	r0, sl
   1305c:	03d2      	lsls	r2, r2, #15
   1305e:	4210      	tst	r0, r2
   13060:	d0a4      	beq.n	12fac <__aeabi_fsub+0x24c>
   13062:	4660      	mov	r0, ip
   13064:	4210      	tst	r0, r2
   13066:	d1a1      	bne.n	12fac <__aeabi_fsub+0x24c>
   13068:	0033      	movs	r3, r6
   1306a:	000d      	movs	r5, r1
   1306c:	24ff      	movs	r4, #255	; 0xff
   1306e:	e6bd      	b.n	12dec <__aeabi_fsub+0x8c>
   13070:	0033      	movs	r3, r6
   13072:	24ff      	movs	r4, #255	; 0xff
   13074:	e6ba      	b.n	12dec <__aeabi_fsub+0x8c>
   13076:	2301      	movs	r3, #1
   13078:	e76e      	b.n	12f58 <__aeabi_fsub+0x1f8>
   1307a:	0033      	movs	r3, r6
   1307c:	0004      	movs	r4, r0
   1307e:	e6b5      	b.n	12dec <__aeabi_fsub+0x8c>
   13080:	2700      	movs	r7, #0
   13082:	2200      	movs	r2, #0
   13084:	e71c      	b.n	12ec0 <__aeabi_fsub+0x160>
   13086:	0033      	movs	r3, r6
   13088:	e6b0      	b.n	12dec <__aeabi_fsub+0x8c>
   1308a:	2301      	movs	r3, #1
   1308c:	e7c0      	b.n	13010 <__aeabi_fsub+0x2b0>
   1308e:	46c0      	nop			; (mov r8, r8)
   13090:	7dffffff 	.word	0x7dffffff
   13094:	fbffffff 	.word	0xfbffffff

00013098 <__aeabi_f2iz>:
   13098:	0241      	lsls	r1, r0, #9
   1309a:	0043      	lsls	r3, r0, #1
   1309c:	0fc2      	lsrs	r2, r0, #31
   1309e:	0a49      	lsrs	r1, r1, #9
   130a0:	0e1b      	lsrs	r3, r3, #24
   130a2:	2000      	movs	r0, #0
   130a4:	2b7e      	cmp	r3, #126	; 0x7e
   130a6:	dd0d      	ble.n	130c4 <__aeabi_f2iz+0x2c>
   130a8:	2b9d      	cmp	r3, #157	; 0x9d
   130aa:	dc0c      	bgt.n	130c6 <__aeabi_f2iz+0x2e>
   130ac:	2080      	movs	r0, #128	; 0x80
   130ae:	0400      	lsls	r0, r0, #16
   130b0:	4301      	orrs	r1, r0
   130b2:	2b95      	cmp	r3, #149	; 0x95
   130b4:	dc0a      	bgt.n	130cc <__aeabi_f2iz+0x34>
   130b6:	2096      	movs	r0, #150	; 0x96
   130b8:	1ac3      	subs	r3, r0, r3
   130ba:	40d9      	lsrs	r1, r3
   130bc:	4248      	negs	r0, r1
   130be:	2a00      	cmp	r2, #0
   130c0:	d100      	bne.n	130c4 <__aeabi_f2iz+0x2c>
   130c2:	0008      	movs	r0, r1
   130c4:	4770      	bx	lr
   130c6:	4b03      	ldr	r3, [pc, #12]	; (130d4 <__aeabi_f2iz+0x3c>)
   130c8:	18d0      	adds	r0, r2, r3
   130ca:	e7fb      	b.n	130c4 <__aeabi_f2iz+0x2c>
   130cc:	3b96      	subs	r3, #150	; 0x96
   130ce:	4099      	lsls	r1, r3
   130d0:	e7f4      	b.n	130bc <__aeabi_f2iz+0x24>
   130d2:	46c0      	nop			; (mov r8, r8)
   130d4:	7fffffff 	.word	0x7fffffff

000130d8 <__aeabi_i2f>:
   130d8:	b570      	push	{r4, r5, r6, lr}
   130da:	2800      	cmp	r0, #0
   130dc:	d030      	beq.n	13140 <__aeabi_i2f+0x68>
   130de:	17c3      	asrs	r3, r0, #31
   130e0:	18c4      	adds	r4, r0, r3
   130e2:	405c      	eors	r4, r3
   130e4:	0fc5      	lsrs	r5, r0, #31
   130e6:	0020      	movs	r0, r4
   130e8:	f001 fef0 	bl	14ecc <__clzsi2>
   130ec:	239e      	movs	r3, #158	; 0x9e
   130ee:	1a1b      	subs	r3, r3, r0
   130f0:	2b96      	cmp	r3, #150	; 0x96
   130f2:	dc0d      	bgt.n	13110 <__aeabi_i2f+0x38>
   130f4:	2296      	movs	r2, #150	; 0x96
   130f6:	1ad2      	subs	r2, r2, r3
   130f8:	4094      	lsls	r4, r2
   130fa:	002a      	movs	r2, r5
   130fc:	0264      	lsls	r4, r4, #9
   130fe:	0a64      	lsrs	r4, r4, #9
   13100:	b2db      	uxtb	r3, r3
   13102:	0264      	lsls	r4, r4, #9
   13104:	05db      	lsls	r3, r3, #23
   13106:	0a60      	lsrs	r0, r4, #9
   13108:	07d2      	lsls	r2, r2, #31
   1310a:	4318      	orrs	r0, r3
   1310c:	4310      	orrs	r0, r2
   1310e:	bd70      	pop	{r4, r5, r6, pc}
   13110:	2b99      	cmp	r3, #153	; 0x99
   13112:	dc19      	bgt.n	13148 <__aeabi_i2f+0x70>
   13114:	2299      	movs	r2, #153	; 0x99
   13116:	1ad2      	subs	r2, r2, r3
   13118:	2a00      	cmp	r2, #0
   1311a:	dd29      	ble.n	13170 <__aeabi_i2f+0x98>
   1311c:	4094      	lsls	r4, r2
   1311e:	0022      	movs	r2, r4
   13120:	4c14      	ldr	r4, [pc, #80]	; (13174 <__aeabi_i2f+0x9c>)
   13122:	4014      	ands	r4, r2
   13124:	0751      	lsls	r1, r2, #29
   13126:	d004      	beq.n	13132 <__aeabi_i2f+0x5a>
   13128:	210f      	movs	r1, #15
   1312a:	400a      	ands	r2, r1
   1312c:	2a04      	cmp	r2, #4
   1312e:	d000      	beq.n	13132 <__aeabi_i2f+0x5a>
   13130:	3404      	adds	r4, #4
   13132:	0162      	lsls	r2, r4, #5
   13134:	d413      	bmi.n	1315e <__aeabi_i2f+0x86>
   13136:	01a4      	lsls	r4, r4, #6
   13138:	0a64      	lsrs	r4, r4, #9
   1313a:	b2db      	uxtb	r3, r3
   1313c:	002a      	movs	r2, r5
   1313e:	e7e0      	b.n	13102 <__aeabi_i2f+0x2a>
   13140:	2200      	movs	r2, #0
   13142:	2300      	movs	r3, #0
   13144:	2400      	movs	r4, #0
   13146:	e7dc      	b.n	13102 <__aeabi_i2f+0x2a>
   13148:	2205      	movs	r2, #5
   1314a:	0021      	movs	r1, r4
   1314c:	1a12      	subs	r2, r2, r0
   1314e:	40d1      	lsrs	r1, r2
   13150:	22b9      	movs	r2, #185	; 0xb9
   13152:	1ad2      	subs	r2, r2, r3
   13154:	4094      	lsls	r4, r2
   13156:	1e62      	subs	r2, r4, #1
   13158:	4194      	sbcs	r4, r2
   1315a:	430c      	orrs	r4, r1
   1315c:	e7da      	b.n	13114 <__aeabi_i2f+0x3c>
   1315e:	4b05      	ldr	r3, [pc, #20]	; (13174 <__aeabi_i2f+0x9c>)
   13160:	002a      	movs	r2, r5
   13162:	401c      	ands	r4, r3
   13164:	239f      	movs	r3, #159	; 0x9f
   13166:	01a4      	lsls	r4, r4, #6
   13168:	1a1b      	subs	r3, r3, r0
   1316a:	0a64      	lsrs	r4, r4, #9
   1316c:	b2db      	uxtb	r3, r3
   1316e:	e7c8      	b.n	13102 <__aeabi_i2f+0x2a>
   13170:	0022      	movs	r2, r4
   13172:	e7d5      	b.n	13120 <__aeabi_i2f+0x48>
   13174:	fbffffff 	.word	0xfbffffff

00013178 <__aeabi_ui2f>:
   13178:	b510      	push	{r4, lr}
   1317a:	1e04      	subs	r4, r0, #0
   1317c:	d027      	beq.n	131ce <__aeabi_ui2f+0x56>
   1317e:	f001 fea5 	bl	14ecc <__clzsi2>
   13182:	239e      	movs	r3, #158	; 0x9e
   13184:	1a1b      	subs	r3, r3, r0
   13186:	2b96      	cmp	r3, #150	; 0x96
   13188:	dc0a      	bgt.n	131a0 <__aeabi_ui2f+0x28>
   1318a:	2296      	movs	r2, #150	; 0x96
   1318c:	1ad2      	subs	r2, r2, r3
   1318e:	4094      	lsls	r4, r2
   13190:	0264      	lsls	r4, r4, #9
   13192:	0a64      	lsrs	r4, r4, #9
   13194:	b2db      	uxtb	r3, r3
   13196:	0264      	lsls	r4, r4, #9
   13198:	05db      	lsls	r3, r3, #23
   1319a:	0a60      	lsrs	r0, r4, #9
   1319c:	4318      	orrs	r0, r3
   1319e:	bd10      	pop	{r4, pc}
   131a0:	2b99      	cmp	r3, #153	; 0x99
   131a2:	dc17      	bgt.n	131d4 <__aeabi_ui2f+0x5c>
   131a4:	2299      	movs	r2, #153	; 0x99
   131a6:	1ad2      	subs	r2, r2, r3
   131a8:	2a00      	cmp	r2, #0
   131aa:	dd27      	ble.n	131fc <__aeabi_ui2f+0x84>
   131ac:	4094      	lsls	r4, r2
   131ae:	0022      	movs	r2, r4
   131b0:	4c13      	ldr	r4, [pc, #76]	; (13200 <__aeabi_ui2f+0x88>)
   131b2:	4014      	ands	r4, r2
   131b4:	0751      	lsls	r1, r2, #29
   131b6:	d004      	beq.n	131c2 <__aeabi_ui2f+0x4a>
   131b8:	210f      	movs	r1, #15
   131ba:	400a      	ands	r2, r1
   131bc:	2a04      	cmp	r2, #4
   131be:	d000      	beq.n	131c2 <__aeabi_ui2f+0x4a>
   131c0:	3404      	adds	r4, #4
   131c2:	0162      	lsls	r2, r4, #5
   131c4:	d412      	bmi.n	131ec <__aeabi_ui2f+0x74>
   131c6:	01a4      	lsls	r4, r4, #6
   131c8:	0a64      	lsrs	r4, r4, #9
   131ca:	b2db      	uxtb	r3, r3
   131cc:	e7e3      	b.n	13196 <__aeabi_ui2f+0x1e>
   131ce:	2300      	movs	r3, #0
   131d0:	2400      	movs	r4, #0
   131d2:	e7e0      	b.n	13196 <__aeabi_ui2f+0x1e>
   131d4:	22b9      	movs	r2, #185	; 0xb9
   131d6:	0021      	movs	r1, r4
   131d8:	1ad2      	subs	r2, r2, r3
   131da:	4091      	lsls	r1, r2
   131dc:	000a      	movs	r2, r1
   131de:	1e51      	subs	r1, r2, #1
   131e0:	418a      	sbcs	r2, r1
   131e2:	2105      	movs	r1, #5
   131e4:	1a09      	subs	r1, r1, r0
   131e6:	40cc      	lsrs	r4, r1
   131e8:	4314      	orrs	r4, r2
   131ea:	e7db      	b.n	131a4 <__aeabi_ui2f+0x2c>
   131ec:	4b04      	ldr	r3, [pc, #16]	; (13200 <__aeabi_ui2f+0x88>)
   131ee:	401c      	ands	r4, r3
   131f0:	239f      	movs	r3, #159	; 0x9f
   131f2:	01a4      	lsls	r4, r4, #6
   131f4:	1a1b      	subs	r3, r3, r0
   131f6:	0a64      	lsrs	r4, r4, #9
   131f8:	b2db      	uxtb	r3, r3
   131fa:	e7cc      	b.n	13196 <__aeabi_ui2f+0x1e>
   131fc:	0022      	movs	r2, r4
   131fe:	e7d7      	b.n	131b0 <__aeabi_ui2f+0x38>
   13200:	fbffffff 	.word	0xfbffffff

00013204 <__aeabi_dadd>:
   13204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13206:	4645      	mov	r5, r8
   13208:	46de      	mov	lr, fp
   1320a:	4657      	mov	r7, sl
   1320c:	464e      	mov	r6, r9
   1320e:	030c      	lsls	r4, r1, #12
   13210:	b5e0      	push	{r5, r6, r7, lr}
   13212:	004e      	lsls	r6, r1, #1
   13214:	0fc9      	lsrs	r1, r1, #31
   13216:	4688      	mov	r8, r1
   13218:	000d      	movs	r5, r1
   1321a:	0a61      	lsrs	r1, r4, #9
   1321c:	0f44      	lsrs	r4, r0, #29
   1321e:	430c      	orrs	r4, r1
   13220:	00c7      	lsls	r7, r0, #3
   13222:	0319      	lsls	r1, r3, #12
   13224:	0058      	lsls	r0, r3, #1
   13226:	0fdb      	lsrs	r3, r3, #31
   13228:	469b      	mov	fp, r3
   1322a:	0a4b      	lsrs	r3, r1, #9
   1322c:	0f51      	lsrs	r1, r2, #29
   1322e:	430b      	orrs	r3, r1
   13230:	0d76      	lsrs	r6, r6, #21
   13232:	0d40      	lsrs	r0, r0, #21
   13234:	0019      	movs	r1, r3
   13236:	00d2      	lsls	r2, r2, #3
   13238:	45d8      	cmp	r8, fp
   1323a:	d100      	bne.n	1323e <__aeabi_dadd+0x3a>
   1323c:	e0ae      	b.n	1339c <__aeabi_dadd+0x198>
   1323e:	1a35      	subs	r5, r6, r0
   13240:	2d00      	cmp	r5, #0
   13242:	dc00      	bgt.n	13246 <__aeabi_dadd+0x42>
   13244:	e0f6      	b.n	13434 <__aeabi_dadd+0x230>
   13246:	2800      	cmp	r0, #0
   13248:	d10f      	bne.n	1326a <__aeabi_dadd+0x66>
   1324a:	4313      	orrs	r3, r2
   1324c:	d100      	bne.n	13250 <__aeabi_dadd+0x4c>
   1324e:	e0db      	b.n	13408 <__aeabi_dadd+0x204>
   13250:	1e6b      	subs	r3, r5, #1
   13252:	2b00      	cmp	r3, #0
   13254:	d000      	beq.n	13258 <__aeabi_dadd+0x54>
   13256:	e137      	b.n	134c8 <__aeabi_dadd+0x2c4>
   13258:	1aba      	subs	r2, r7, r2
   1325a:	4297      	cmp	r7, r2
   1325c:	41bf      	sbcs	r7, r7
   1325e:	1a64      	subs	r4, r4, r1
   13260:	427f      	negs	r7, r7
   13262:	1be4      	subs	r4, r4, r7
   13264:	2601      	movs	r6, #1
   13266:	0017      	movs	r7, r2
   13268:	e024      	b.n	132b4 <__aeabi_dadd+0xb0>
   1326a:	4bc6      	ldr	r3, [pc, #792]	; (13584 <__aeabi_dadd+0x380>)
   1326c:	429e      	cmp	r6, r3
   1326e:	d04d      	beq.n	1330c <__aeabi_dadd+0x108>
   13270:	2380      	movs	r3, #128	; 0x80
   13272:	041b      	lsls	r3, r3, #16
   13274:	4319      	orrs	r1, r3
   13276:	2d38      	cmp	r5, #56	; 0x38
   13278:	dd00      	ble.n	1327c <__aeabi_dadd+0x78>
   1327a:	e107      	b.n	1348c <__aeabi_dadd+0x288>
   1327c:	2d1f      	cmp	r5, #31
   1327e:	dd00      	ble.n	13282 <__aeabi_dadd+0x7e>
   13280:	e138      	b.n	134f4 <__aeabi_dadd+0x2f0>
   13282:	2020      	movs	r0, #32
   13284:	1b43      	subs	r3, r0, r5
   13286:	469a      	mov	sl, r3
   13288:	000b      	movs	r3, r1
   1328a:	4650      	mov	r0, sl
   1328c:	4083      	lsls	r3, r0
   1328e:	4699      	mov	r9, r3
   13290:	0013      	movs	r3, r2
   13292:	4648      	mov	r0, r9
   13294:	40eb      	lsrs	r3, r5
   13296:	4318      	orrs	r0, r3
   13298:	0003      	movs	r3, r0
   1329a:	4650      	mov	r0, sl
   1329c:	4082      	lsls	r2, r0
   1329e:	1e50      	subs	r0, r2, #1
   132a0:	4182      	sbcs	r2, r0
   132a2:	40e9      	lsrs	r1, r5
   132a4:	431a      	orrs	r2, r3
   132a6:	1aba      	subs	r2, r7, r2
   132a8:	1a61      	subs	r1, r4, r1
   132aa:	4297      	cmp	r7, r2
   132ac:	41a4      	sbcs	r4, r4
   132ae:	0017      	movs	r7, r2
   132b0:	4264      	negs	r4, r4
   132b2:	1b0c      	subs	r4, r1, r4
   132b4:	0223      	lsls	r3, r4, #8
   132b6:	d562      	bpl.n	1337e <__aeabi_dadd+0x17a>
   132b8:	0264      	lsls	r4, r4, #9
   132ba:	0a65      	lsrs	r5, r4, #9
   132bc:	2d00      	cmp	r5, #0
   132be:	d100      	bne.n	132c2 <__aeabi_dadd+0xbe>
   132c0:	e0df      	b.n	13482 <__aeabi_dadd+0x27e>
   132c2:	0028      	movs	r0, r5
   132c4:	f001 fe02 	bl	14ecc <__clzsi2>
   132c8:	0003      	movs	r3, r0
   132ca:	3b08      	subs	r3, #8
   132cc:	2b1f      	cmp	r3, #31
   132ce:	dd00      	ble.n	132d2 <__aeabi_dadd+0xce>
   132d0:	e0d2      	b.n	13478 <__aeabi_dadd+0x274>
   132d2:	2220      	movs	r2, #32
   132d4:	003c      	movs	r4, r7
   132d6:	1ad2      	subs	r2, r2, r3
   132d8:	409d      	lsls	r5, r3
   132da:	40d4      	lsrs	r4, r2
   132dc:	409f      	lsls	r7, r3
   132de:	4325      	orrs	r5, r4
   132e0:	429e      	cmp	r6, r3
   132e2:	dd00      	ble.n	132e6 <__aeabi_dadd+0xe2>
   132e4:	e0c4      	b.n	13470 <__aeabi_dadd+0x26c>
   132e6:	1b9e      	subs	r6, r3, r6
   132e8:	1c73      	adds	r3, r6, #1
   132ea:	2b1f      	cmp	r3, #31
   132ec:	dd00      	ble.n	132f0 <__aeabi_dadd+0xec>
   132ee:	e0f1      	b.n	134d4 <__aeabi_dadd+0x2d0>
   132f0:	2220      	movs	r2, #32
   132f2:	0038      	movs	r0, r7
   132f4:	0029      	movs	r1, r5
   132f6:	1ad2      	subs	r2, r2, r3
   132f8:	40d8      	lsrs	r0, r3
   132fa:	4091      	lsls	r1, r2
   132fc:	4097      	lsls	r7, r2
   132fe:	002c      	movs	r4, r5
   13300:	4301      	orrs	r1, r0
   13302:	1e78      	subs	r0, r7, #1
   13304:	4187      	sbcs	r7, r0
   13306:	40dc      	lsrs	r4, r3
   13308:	2600      	movs	r6, #0
   1330a:	430f      	orrs	r7, r1
   1330c:	077b      	lsls	r3, r7, #29
   1330e:	d009      	beq.n	13324 <__aeabi_dadd+0x120>
   13310:	230f      	movs	r3, #15
   13312:	403b      	ands	r3, r7
   13314:	2b04      	cmp	r3, #4
   13316:	d005      	beq.n	13324 <__aeabi_dadd+0x120>
   13318:	1d3b      	adds	r3, r7, #4
   1331a:	42bb      	cmp	r3, r7
   1331c:	41bf      	sbcs	r7, r7
   1331e:	427f      	negs	r7, r7
   13320:	19e4      	adds	r4, r4, r7
   13322:	001f      	movs	r7, r3
   13324:	0223      	lsls	r3, r4, #8
   13326:	d52c      	bpl.n	13382 <__aeabi_dadd+0x17e>
   13328:	4b96      	ldr	r3, [pc, #600]	; (13584 <__aeabi_dadd+0x380>)
   1332a:	3601      	adds	r6, #1
   1332c:	429e      	cmp	r6, r3
   1332e:	d100      	bne.n	13332 <__aeabi_dadd+0x12e>
   13330:	e09a      	b.n	13468 <__aeabi_dadd+0x264>
   13332:	4645      	mov	r5, r8
   13334:	4b94      	ldr	r3, [pc, #592]	; (13588 <__aeabi_dadd+0x384>)
   13336:	08ff      	lsrs	r7, r7, #3
   13338:	401c      	ands	r4, r3
   1333a:	0760      	lsls	r0, r4, #29
   1333c:	0576      	lsls	r6, r6, #21
   1333e:	0264      	lsls	r4, r4, #9
   13340:	4307      	orrs	r7, r0
   13342:	0b24      	lsrs	r4, r4, #12
   13344:	0d76      	lsrs	r6, r6, #21
   13346:	2100      	movs	r1, #0
   13348:	0324      	lsls	r4, r4, #12
   1334a:	0b23      	lsrs	r3, r4, #12
   1334c:	0d0c      	lsrs	r4, r1, #20
   1334e:	4a8f      	ldr	r2, [pc, #572]	; (1358c <__aeabi_dadd+0x388>)
   13350:	0524      	lsls	r4, r4, #20
   13352:	431c      	orrs	r4, r3
   13354:	4014      	ands	r4, r2
   13356:	0533      	lsls	r3, r6, #20
   13358:	4323      	orrs	r3, r4
   1335a:	005b      	lsls	r3, r3, #1
   1335c:	07ed      	lsls	r5, r5, #31
   1335e:	085b      	lsrs	r3, r3, #1
   13360:	432b      	orrs	r3, r5
   13362:	0038      	movs	r0, r7
   13364:	0019      	movs	r1, r3
   13366:	bc3c      	pop	{r2, r3, r4, r5}
   13368:	4690      	mov	r8, r2
   1336a:	4699      	mov	r9, r3
   1336c:	46a2      	mov	sl, r4
   1336e:	46ab      	mov	fp, r5
   13370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13372:	4664      	mov	r4, ip
   13374:	4304      	orrs	r4, r0
   13376:	d100      	bne.n	1337a <__aeabi_dadd+0x176>
   13378:	e211      	b.n	1379e <__aeabi_dadd+0x59a>
   1337a:	0004      	movs	r4, r0
   1337c:	4667      	mov	r7, ip
   1337e:	077b      	lsls	r3, r7, #29
   13380:	d1c6      	bne.n	13310 <__aeabi_dadd+0x10c>
   13382:	4645      	mov	r5, r8
   13384:	0760      	lsls	r0, r4, #29
   13386:	08ff      	lsrs	r7, r7, #3
   13388:	4307      	orrs	r7, r0
   1338a:	08e4      	lsrs	r4, r4, #3
   1338c:	4b7d      	ldr	r3, [pc, #500]	; (13584 <__aeabi_dadd+0x380>)
   1338e:	429e      	cmp	r6, r3
   13390:	d030      	beq.n	133f4 <__aeabi_dadd+0x1f0>
   13392:	0324      	lsls	r4, r4, #12
   13394:	0576      	lsls	r6, r6, #21
   13396:	0b24      	lsrs	r4, r4, #12
   13398:	0d76      	lsrs	r6, r6, #21
   1339a:	e7d4      	b.n	13346 <__aeabi_dadd+0x142>
   1339c:	1a33      	subs	r3, r6, r0
   1339e:	469a      	mov	sl, r3
   133a0:	2b00      	cmp	r3, #0
   133a2:	dd78      	ble.n	13496 <__aeabi_dadd+0x292>
   133a4:	2800      	cmp	r0, #0
   133a6:	d031      	beq.n	1340c <__aeabi_dadd+0x208>
   133a8:	4876      	ldr	r0, [pc, #472]	; (13584 <__aeabi_dadd+0x380>)
   133aa:	4286      	cmp	r6, r0
   133ac:	d0ae      	beq.n	1330c <__aeabi_dadd+0x108>
   133ae:	2080      	movs	r0, #128	; 0x80
   133b0:	0400      	lsls	r0, r0, #16
   133b2:	4301      	orrs	r1, r0
   133b4:	4653      	mov	r3, sl
   133b6:	2b38      	cmp	r3, #56	; 0x38
   133b8:	dc00      	bgt.n	133bc <__aeabi_dadd+0x1b8>
   133ba:	e0e9      	b.n	13590 <__aeabi_dadd+0x38c>
   133bc:	430a      	orrs	r2, r1
   133be:	1e51      	subs	r1, r2, #1
   133c0:	418a      	sbcs	r2, r1
   133c2:	2100      	movs	r1, #0
   133c4:	19d2      	adds	r2, r2, r7
   133c6:	42ba      	cmp	r2, r7
   133c8:	41bf      	sbcs	r7, r7
   133ca:	1909      	adds	r1, r1, r4
   133cc:	427c      	negs	r4, r7
   133ce:	0017      	movs	r7, r2
   133d0:	190c      	adds	r4, r1, r4
   133d2:	0223      	lsls	r3, r4, #8
   133d4:	d5d3      	bpl.n	1337e <__aeabi_dadd+0x17a>
   133d6:	4b6b      	ldr	r3, [pc, #428]	; (13584 <__aeabi_dadd+0x380>)
   133d8:	3601      	adds	r6, #1
   133da:	429e      	cmp	r6, r3
   133dc:	d100      	bne.n	133e0 <__aeabi_dadd+0x1dc>
   133de:	e13a      	b.n	13656 <__aeabi_dadd+0x452>
   133e0:	2001      	movs	r0, #1
   133e2:	4b69      	ldr	r3, [pc, #420]	; (13588 <__aeabi_dadd+0x384>)
   133e4:	401c      	ands	r4, r3
   133e6:	087b      	lsrs	r3, r7, #1
   133e8:	4007      	ands	r7, r0
   133ea:	431f      	orrs	r7, r3
   133ec:	07e0      	lsls	r0, r4, #31
   133ee:	4307      	orrs	r7, r0
   133f0:	0864      	lsrs	r4, r4, #1
   133f2:	e78b      	b.n	1330c <__aeabi_dadd+0x108>
   133f4:	0023      	movs	r3, r4
   133f6:	433b      	orrs	r3, r7
   133f8:	d100      	bne.n	133fc <__aeabi_dadd+0x1f8>
   133fa:	e1cb      	b.n	13794 <__aeabi_dadd+0x590>
   133fc:	2280      	movs	r2, #128	; 0x80
   133fe:	0312      	lsls	r2, r2, #12
   13400:	4314      	orrs	r4, r2
   13402:	0324      	lsls	r4, r4, #12
   13404:	0b24      	lsrs	r4, r4, #12
   13406:	e79e      	b.n	13346 <__aeabi_dadd+0x142>
   13408:	002e      	movs	r6, r5
   1340a:	e77f      	b.n	1330c <__aeabi_dadd+0x108>
   1340c:	0008      	movs	r0, r1
   1340e:	4310      	orrs	r0, r2
   13410:	d100      	bne.n	13414 <__aeabi_dadd+0x210>
   13412:	e0b4      	b.n	1357e <__aeabi_dadd+0x37a>
   13414:	1e58      	subs	r0, r3, #1
   13416:	2800      	cmp	r0, #0
   13418:	d000      	beq.n	1341c <__aeabi_dadd+0x218>
   1341a:	e0de      	b.n	135da <__aeabi_dadd+0x3d6>
   1341c:	18ba      	adds	r2, r7, r2
   1341e:	42ba      	cmp	r2, r7
   13420:	419b      	sbcs	r3, r3
   13422:	1864      	adds	r4, r4, r1
   13424:	425b      	negs	r3, r3
   13426:	18e4      	adds	r4, r4, r3
   13428:	0017      	movs	r7, r2
   1342a:	2601      	movs	r6, #1
   1342c:	0223      	lsls	r3, r4, #8
   1342e:	d5a6      	bpl.n	1337e <__aeabi_dadd+0x17a>
   13430:	2602      	movs	r6, #2
   13432:	e7d5      	b.n	133e0 <__aeabi_dadd+0x1dc>
   13434:	2d00      	cmp	r5, #0
   13436:	d16e      	bne.n	13516 <__aeabi_dadd+0x312>
   13438:	1c70      	adds	r0, r6, #1
   1343a:	0540      	lsls	r0, r0, #21
   1343c:	0d40      	lsrs	r0, r0, #21
   1343e:	2801      	cmp	r0, #1
   13440:	dc00      	bgt.n	13444 <__aeabi_dadd+0x240>
   13442:	e0f9      	b.n	13638 <__aeabi_dadd+0x434>
   13444:	1ab8      	subs	r0, r7, r2
   13446:	4684      	mov	ip, r0
   13448:	4287      	cmp	r7, r0
   1344a:	4180      	sbcs	r0, r0
   1344c:	1ae5      	subs	r5, r4, r3
   1344e:	4240      	negs	r0, r0
   13450:	1a2d      	subs	r5, r5, r0
   13452:	0228      	lsls	r0, r5, #8
   13454:	d400      	bmi.n	13458 <__aeabi_dadd+0x254>
   13456:	e089      	b.n	1356c <__aeabi_dadd+0x368>
   13458:	1bd7      	subs	r7, r2, r7
   1345a:	42ba      	cmp	r2, r7
   1345c:	4192      	sbcs	r2, r2
   1345e:	1b1c      	subs	r4, r3, r4
   13460:	4252      	negs	r2, r2
   13462:	1aa5      	subs	r5, r4, r2
   13464:	46d8      	mov	r8, fp
   13466:	e729      	b.n	132bc <__aeabi_dadd+0xb8>
   13468:	4645      	mov	r5, r8
   1346a:	2400      	movs	r4, #0
   1346c:	2700      	movs	r7, #0
   1346e:	e76a      	b.n	13346 <__aeabi_dadd+0x142>
   13470:	4c45      	ldr	r4, [pc, #276]	; (13588 <__aeabi_dadd+0x384>)
   13472:	1af6      	subs	r6, r6, r3
   13474:	402c      	ands	r4, r5
   13476:	e749      	b.n	1330c <__aeabi_dadd+0x108>
   13478:	003d      	movs	r5, r7
   1347a:	3828      	subs	r0, #40	; 0x28
   1347c:	4085      	lsls	r5, r0
   1347e:	2700      	movs	r7, #0
   13480:	e72e      	b.n	132e0 <__aeabi_dadd+0xdc>
   13482:	0038      	movs	r0, r7
   13484:	f001 fd22 	bl	14ecc <__clzsi2>
   13488:	3020      	adds	r0, #32
   1348a:	e71d      	b.n	132c8 <__aeabi_dadd+0xc4>
   1348c:	430a      	orrs	r2, r1
   1348e:	1e51      	subs	r1, r2, #1
   13490:	418a      	sbcs	r2, r1
   13492:	2100      	movs	r1, #0
   13494:	e707      	b.n	132a6 <__aeabi_dadd+0xa2>
   13496:	2b00      	cmp	r3, #0
   13498:	d000      	beq.n	1349c <__aeabi_dadd+0x298>
   1349a:	e0f3      	b.n	13684 <__aeabi_dadd+0x480>
   1349c:	1c70      	adds	r0, r6, #1
   1349e:	0543      	lsls	r3, r0, #21
   134a0:	0d5b      	lsrs	r3, r3, #21
   134a2:	2b01      	cmp	r3, #1
   134a4:	dc00      	bgt.n	134a8 <__aeabi_dadd+0x2a4>
   134a6:	e0ad      	b.n	13604 <__aeabi_dadd+0x400>
   134a8:	4b36      	ldr	r3, [pc, #216]	; (13584 <__aeabi_dadd+0x380>)
   134aa:	4298      	cmp	r0, r3
   134ac:	d100      	bne.n	134b0 <__aeabi_dadd+0x2ac>
   134ae:	e0d1      	b.n	13654 <__aeabi_dadd+0x450>
   134b0:	18ba      	adds	r2, r7, r2
   134b2:	42ba      	cmp	r2, r7
   134b4:	41bf      	sbcs	r7, r7
   134b6:	1864      	adds	r4, r4, r1
   134b8:	427f      	negs	r7, r7
   134ba:	19e4      	adds	r4, r4, r7
   134bc:	07e7      	lsls	r7, r4, #31
   134be:	0852      	lsrs	r2, r2, #1
   134c0:	4317      	orrs	r7, r2
   134c2:	0864      	lsrs	r4, r4, #1
   134c4:	0006      	movs	r6, r0
   134c6:	e721      	b.n	1330c <__aeabi_dadd+0x108>
   134c8:	482e      	ldr	r0, [pc, #184]	; (13584 <__aeabi_dadd+0x380>)
   134ca:	4285      	cmp	r5, r0
   134cc:	d100      	bne.n	134d0 <__aeabi_dadd+0x2cc>
   134ce:	e093      	b.n	135f8 <__aeabi_dadd+0x3f4>
   134d0:	001d      	movs	r5, r3
   134d2:	e6d0      	b.n	13276 <__aeabi_dadd+0x72>
   134d4:	0029      	movs	r1, r5
   134d6:	3e1f      	subs	r6, #31
   134d8:	40f1      	lsrs	r1, r6
   134da:	2b20      	cmp	r3, #32
   134dc:	d100      	bne.n	134e0 <__aeabi_dadd+0x2dc>
   134de:	e08d      	b.n	135fc <__aeabi_dadd+0x3f8>
   134e0:	2240      	movs	r2, #64	; 0x40
   134e2:	1ad3      	subs	r3, r2, r3
   134e4:	409d      	lsls	r5, r3
   134e6:	432f      	orrs	r7, r5
   134e8:	1e7d      	subs	r5, r7, #1
   134ea:	41af      	sbcs	r7, r5
   134ec:	2400      	movs	r4, #0
   134ee:	430f      	orrs	r7, r1
   134f0:	2600      	movs	r6, #0
   134f2:	e744      	b.n	1337e <__aeabi_dadd+0x17a>
   134f4:	002b      	movs	r3, r5
   134f6:	0008      	movs	r0, r1
   134f8:	3b20      	subs	r3, #32
   134fa:	40d8      	lsrs	r0, r3
   134fc:	0003      	movs	r3, r0
   134fe:	2d20      	cmp	r5, #32
   13500:	d100      	bne.n	13504 <__aeabi_dadd+0x300>
   13502:	e07d      	b.n	13600 <__aeabi_dadd+0x3fc>
   13504:	2040      	movs	r0, #64	; 0x40
   13506:	1b45      	subs	r5, r0, r5
   13508:	40a9      	lsls	r1, r5
   1350a:	430a      	orrs	r2, r1
   1350c:	1e51      	subs	r1, r2, #1
   1350e:	418a      	sbcs	r2, r1
   13510:	2100      	movs	r1, #0
   13512:	431a      	orrs	r2, r3
   13514:	e6c7      	b.n	132a6 <__aeabi_dadd+0xa2>
   13516:	2e00      	cmp	r6, #0
   13518:	d050      	beq.n	135bc <__aeabi_dadd+0x3b8>
   1351a:	4e1a      	ldr	r6, [pc, #104]	; (13584 <__aeabi_dadd+0x380>)
   1351c:	42b0      	cmp	r0, r6
   1351e:	d057      	beq.n	135d0 <__aeabi_dadd+0x3cc>
   13520:	2680      	movs	r6, #128	; 0x80
   13522:	426b      	negs	r3, r5
   13524:	4699      	mov	r9, r3
   13526:	0436      	lsls	r6, r6, #16
   13528:	4334      	orrs	r4, r6
   1352a:	464b      	mov	r3, r9
   1352c:	2b38      	cmp	r3, #56	; 0x38
   1352e:	dd00      	ble.n	13532 <__aeabi_dadd+0x32e>
   13530:	e0d6      	b.n	136e0 <__aeabi_dadd+0x4dc>
   13532:	2b1f      	cmp	r3, #31
   13534:	dd00      	ble.n	13538 <__aeabi_dadd+0x334>
   13536:	e135      	b.n	137a4 <__aeabi_dadd+0x5a0>
   13538:	2620      	movs	r6, #32
   1353a:	1af5      	subs	r5, r6, r3
   1353c:	0026      	movs	r6, r4
   1353e:	40ae      	lsls	r6, r5
   13540:	46b2      	mov	sl, r6
   13542:	003e      	movs	r6, r7
   13544:	40de      	lsrs	r6, r3
   13546:	46ac      	mov	ip, r5
   13548:	0035      	movs	r5, r6
   1354a:	4656      	mov	r6, sl
   1354c:	432e      	orrs	r6, r5
   1354e:	4665      	mov	r5, ip
   13550:	40af      	lsls	r7, r5
   13552:	1e7d      	subs	r5, r7, #1
   13554:	41af      	sbcs	r7, r5
   13556:	40dc      	lsrs	r4, r3
   13558:	4337      	orrs	r7, r6
   1355a:	1bd7      	subs	r7, r2, r7
   1355c:	42ba      	cmp	r2, r7
   1355e:	4192      	sbcs	r2, r2
   13560:	1b0c      	subs	r4, r1, r4
   13562:	4252      	negs	r2, r2
   13564:	1aa4      	subs	r4, r4, r2
   13566:	0006      	movs	r6, r0
   13568:	46d8      	mov	r8, fp
   1356a:	e6a3      	b.n	132b4 <__aeabi_dadd+0xb0>
   1356c:	4664      	mov	r4, ip
   1356e:	4667      	mov	r7, ip
   13570:	432c      	orrs	r4, r5
   13572:	d000      	beq.n	13576 <__aeabi_dadd+0x372>
   13574:	e6a2      	b.n	132bc <__aeabi_dadd+0xb8>
   13576:	2500      	movs	r5, #0
   13578:	2600      	movs	r6, #0
   1357a:	2700      	movs	r7, #0
   1357c:	e706      	b.n	1338c <__aeabi_dadd+0x188>
   1357e:	001e      	movs	r6, r3
   13580:	e6c4      	b.n	1330c <__aeabi_dadd+0x108>
   13582:	46c0      	nop			; (mov r8, r8)
   13584:	000007ff 	.word	0x000007ff
   13588:	ff7fffff 	.word	0xff7fffff
   1358c:	800fffff 	.word	0x800fffff
   13590:	2b1f      	cmp	r3, #31
   13592:	dc63      	bgt.n	1365c <__aeabi_dadd+0x458>
   13594:	2020      	movs	r0, #32
   13596:	1ac3      	subs	r3, r0, r3
   13598:	0008      	movs	r0, r1
   1359a:	4098      	lsls	r0, r3
   1359c:	469c      	mov	ip, r3
   1359e:	4683      	mov	fp, r0
   135a0:	4653      	mov	r3, sl
   135a2:	0010      	movs	r0, r2
   135a4:	40d8      	lsrs	r0, r3
   135a6:	0003      	movs	r3, r0
   135a8:	4658      	mov	r0, fp
   135aa:	4318      	orrs	r0, r3
   135ac:	4663      	mov	r3, ip
   135ae:	409a      	lsls	r2, r3
   135b0:	1e53      	subs	r3, r2, #1
   135b2:	419a      	sbcs	r2, r3
   135b4:	4653      	mov	r3, sl
   135b6:	4302      	orrs	r2, r0
   135b8:	40d9      	lsrs	r1, r3
   135ba:	e703      	b.n	133c4 <__aeabi_dadd+0x1c0>
   135bc:	0026      	movs	r6, r4
   135be:	433e      	orrs	r6, r7
   135c0:	d006      	beq.n	135d0 <__aeabi_dadd+0x3cc>
   135c2:	43eb      	mvns	r3, r5
   135c4:	4699      	mov	r9, r3
   135c6:	2b00      	cmp	r3, #0
   135c8:	d0c7      	beq.n	1355a <__aeabi_dadd+0x356>
   135ca:	4e94      	ldr	r6, [pc, #592]	; (1381c <__aeabi_dadd+0x618>)
   135cc:	42b0      	cmp	r0, r6
   135ce:	d1ac      	bne.n	1352a <__aeabi_dadd+0x326>
   135d0:	000c      	movs	r4, r1
   135d2:	0017      	movs	r7, r2
   135d4:	0006      	movs	r6, r0
   135d6:	46d8      	mov	r8, fp
   135d8:	e698      	b.n	1330c <__aeabi_dadd+0x108>
   135da:	4b90      	ldr	r3, [pc, #576]	; (1381c <__aeabi_dadd+0x618>)
   135dc:	459a      	cmp	sl, r3
   135de:	d00b      	beq.n	135f8 <__aeabi_dadd+0x3f4>
   135e0:	4682      	mov	sl, r0
   135e2:	e6e7      	b.n	133b4 <__aeabi_dadd+0x1b0>
   135e4:	2800      	cmp	r0, #0
   135e6:	d000      	beq.n	135ea <__aeabi_dadd+0x3e6>
   135e8:	e09e      	b.n	13728 <__aeabi_dadd+0x524>
   135ea:	0018      	movs	r0, r3
   135ec:	4310      	orrs	r0, r2
   135ee:	d100      	bne.n	135f2 <__aeabi_dadd+0x3ee>
   135f0:	e0e9      	b.n	137c6 <__aeabi_dadd+0x5c2>
   135f2:	001c      	movs	r4, r3
   135f4:	0017      	movs	r7, r2
   135f6:	46d8      	mov	r8, fp
   135f8:	4e88      	ldr	r6, [pc, #544]	; (1381c <__aeabi_dadd+0x618>)
   135fa:	e687      	b.n	1330c <__aeabi_dadd+0x108>
   135fc:	2500      	movs	r5, #0
   135fe:	e772      	b.n	134e6 <__aeabi_dadd+0x2e2>
   13600:	2100      	movs	r1, #0
   13602:	e782      	b.n	1350a <__aeabi_dadd+0x306>
   13604:	0023      	movs	r3, r4
   13606:	433b      	orrs	r3, r7
   13608:	2e00      	cmp	r6, #0
   1360a:	d000      	beq.n	1360e <__aeabi_dadd+0x40a>
   1360c:	e0ab      	b.n	13766 <__aeabi_dadd+0x562>
   1360e:	2b00      	cmp	r3, #0
   13610:	d100      	bne.n	13614 <__aeabi_dadd+0x410>
   13612:	e0e7      	b.n	137e4 <__aeabi_dadd+0x5e0>
   13614:	000b      	movs	r3, r1
   13616:	4313      	orrs	r3, r2
   13618:	d100      	bne.n	1361c <__aeabi_dadd+0x418>
   1361a:	e677      	b.n	1330c <__aeabi_dadd+0x108>
   1361c:	18ba      	adds	r2, r7, r2
   1361e:	42ba      	cmp	r2, r7
   13620:	41bf      	sbcs	r7, r7
   13622:	1864      	adds	r4, r4, r1
   13624:	427f      	negs	r7, r7
   13626:	19e4      	adds	r4, r4, r7
   13628:	0223      	lsls	r3, r4, #8
   1362a:	d400      	bmi.n	1362e <__aeabi_dadd+0x42a>
   1362c:	e0f2      	b.n	13814 <__aeabi_dadd+0x610>
   1362e:	4b7c      	ldr	r3, [pc, #496]	; (13820 <__aeabi_dadd+0x61c>)
   13630:	0017      	movs	r7, r2
   13632:	401c      	ands	r4, r3
   13634:	0006      	movs	r6, r0
   13636:	e669      	b.n	1330c <__aeabi_dadd+0x108>
   13638:	0020      	movs	r0, r4
   1363a:	4338      	orrs	r0, r7
   1363c:	2e00      	cmp	r6, #0
   1363e:	d1d1      	bne.n	135e4 <__aeabi_dadd+0x3e0>
   13640:	2800      	cmp	r0, #0
   13642:	d15b      	bne.n	136fc <__aeabi_dadd+0x4f8>
   13644:	001c      	movs	r4, r3
   13646:	4314      	orrs	r4, r2
   13648:	d100      	bne.n	1364c <__aeabi_dadd+0x448>
   1364a:	e0a8      	b.n	1379e <__aeabi_dadd+0x59a>
   1364c:	001c      	movs	r4, r3
   1364e:	0017      	movs	r7, r2
   13650:	46d8      	mov	r8, fp
   13652:	e65b      	b.n	1330c <__aeabi_dadd+0x108>
   13654:	0006      	movs	r6, r0
   13656:	2400      	movs	r4, #0
   13658:	2700      	movs	r7, #0
   1365a:	e697      	b.n	1338c <__aeabi_dadd+0x188>
   1365c:	4650      	mov	r0, sl
   1365e:	000b      	movs	r3, r1
   13660:	3820      	subs	r0, #32
   13662:	40c3      	lsrs	r3, r0
   13664:	4699      	mov	r9, r3
   13666:	4653      	mov	r3, sl
   13668:	2b20      	cmp	r3, #32
   1366a:	d100      	bne.n	1366e <__aeabi_dadd+0x46a>
   1366c:	e095      	b.n	1379a <__aeabi_dadd+0x596>
   1366e:	2340      	movs	r3, #64	; 0x40
   13670:	4650      	mov	r0, sl
   13672:	1a1b      	subs	r3, r3, r0
   13674:	4099      	lsls	r1, r3
   13676:	430a      	orrs	r2, r1
   13678:	1e51      	subs	r1, r2, #1
   1367a:	418a      	sbcs	r2, r1
   1367c:	464b      	mov	r3, r9
   1367e:	2100      	movs	r1, #0
   13680:	431a      	orrs	r2, r3
   13682:	e69f      	b.n	133c4 <__aeabi_dadd+0x1c0>
   13684:	2e00      	cmp	r6, #0
   13686:	d130      	bne.n	136ea <__aeabi_dadd+0x4e6>
   13688:	0026      	movs	r6, r4
   1368a:	433e      	orrs	r6, r7
   1368c:	d067      	beq.n	1375e <__aeabi_dadd+0x55a>
   1368e:	43db      	mvns	r3, r3
   13690:	469a      	mov	sl, r3
   13692:	2b00      	cmp	r3, #0
   13694:	d01c      	beq.n	136d0 <__aeabi_dadd+0x4cc>
   13696:	4e61      	ldr	r6, [pc, #388]	; (1381c <__aeabi_dadd+0x618>)
   13698:	42b0      	cmp	r0, r6
   1369a:	d060      	beq.n	1375e <__aeabi_dadd+0x55a>
   1369c:	4653      	mov	r3, sl
   1369e:	2b38      	cmp	r3, #56	; 0x38
   136a0:	dd00      	ble.n	136a4 <__aeabi_dadd+0x4a0>
   136a2:	e096      	b.n	137d2 <__aeabi_dadd+0x5ce>
   136a4:	2b1f      	cmp	r3, #31
   136a6:	dd00      	ble.n	136aa <__aeabi_dadd+0x4a6>
   136a8:	e09f      	b.n	137ea <__aeabi_dadd+0x5e6>
   136aa:	2620      	movs	r6, #32
   136ac:	1af3      	subs	r3, r6, r3
   136ae:	0026      	movs	r6, r4
   136b0:	409e      	lsls	r6, r3
   136b2:	469c      	mov	ip, r3
   136b4:	46b3      	mov	fp, r6
   136b6:	4653      	mov	r3, sl
   136b8:	003e      	movs	r6, r7
   136ba:	40de      	lsrs	r6, r3
   136bc:	0033      	movs	r3, r6
   136be:	465e      	mov	r6, fp
   136c0:	431e      	orrs	r6, r3
   136c2:	4663      	mov	r3, ip
   136c4:	409f      	lsls	r7, r3
   136c6:	1e7b      	subs	r3, r7, #1
   136c8:	419f      	sbcs	r7, r3
   136ca:	4653      	mov	r3, sl
   136cc:	40dc      	lsrs	r4, r3
   136ce:	4337      	orrs	r7, r6
   136d0:	18bf      	adds	r7, r7, r2
   136d2:	4297      	cmp	r7, r2
   136d4:	4192      	sbcs	r2, r2
   136d6:	1864      	adds	r4, r4, r1
   136d8:	4252      	negs	r2, r2
   136da:	18a4      	adds	r4, r4, r2
   136dc:	0006      	movs	r6, r0
   136de:	e678      	b.n	133d2 <__aeabi_dadd+0x1ce>
   136e0:	4327      	orrs	r7, r4
   136e2:	1e7c      	subs	r4, r7, #1
   136e4:	41a7      	sbcs	r7, r4
   136e6:	2400      	movs	r4, #0
   136e8:	e737      	b.n	1355a <__aeabi_dadd+0x356>
   136ea:	4e4c      	ldr	r6, [pc, #304]	; (1381c <__aeabi_dadd+0x618>)
   136ec:	42b0      	cmp	r0, r6
   136ee:	d036      	beq.n	1375e <__aeabi_dadd+0x55a>
   136f0:	2680      	movs	r6, #128	; 0x80
   136f2:	425b      	negs	r3, r3
   136f4:	0436      	lsls	r6, r6, #16
   136f6:	469a      	mov	sl, r3
   136f8:	4334      	orrs	r4, r6
   136fa:	e7cf      	b.n	1369c <__aeabi_dadd+0x498>
   136fc:	0018      	movs	r0, r3
   136fe:	4310      	orrs	r0, r2
   13700:	d100      	bne.n	13704 <__aeabi_dadd+0x500>
   13702:	e603      	b.n	1330c <__aeabi_dadd+0x108>
   13704:	1ab8      	subs	r0, r7, r2
   13706:	4684      	mov	ip, r0
   13708:	4567      	cmp	r7, ip
   1370a:	41ad      	sbcs	r5, r5
   1370c:	1ae0      	subs	r0, r4, r3
   1370e:	426d      	negs	r5, r5
   13710:	1b40      	subs	r0, r0, r5
   13712:	0205      	lsls	r5, r0, #8
   13714:	d400      	bmi.n	13718 <__aeabi_dadd+0x514>
   13716:	e62c      	b.n	13372 <__aeabi_dadd+0x16e>
   13718:	1bd7      	subs	r7, r2, r7
   1371a:	42ba      	cmp	r2, r7
   1371c:	4192      	sbcs	r2, r2
   1371e:	1b1c      	subs	r4, r3, r4
   13720:	4252      	negs	r2, r2
   13722:	1aa4      	subs	r4, r4, r2
   13724:	46d8      	mov	r8, fp
   13726:	e5f1      	b.n	1330c <__aeabi_dadd+0x108>
   13728:	0018      	movs	r0, r3
   1372a:	4310      	orrs	r0, r2
   1372c:	d100      	bne.n	13730 <__aeabi_dadd+0x52c>
   1372e:	e763      	b.n	135f8 <__aeabi_dadd+0x3f4>
   13730:	08f8      	lsrs	r0, r7, #3
   13732:	0767      	lsls	r7, r4, #29
   13734:	4307      	orrs	r7, r0
   13736:	2080      	movs	r0, #128	; 0x80
   13738:	08e4      	lsrs	r4, r4, #3
   1373a:	0300      	lsls	r0, r0, #12
   1373c:	4204      	tst	r4, r0
   1373e:	d008      	beq.n	13752 <__aeabi_dadd+0x54e>
   13740:	08dd      	lsrs	r5, r3, #3
   13742:	4205      	tst	r5, r0
   13744:	d105      	bne.n	13752 <__aeabi_dadd+0x54e>
   13746:	08d2      	lsrs	r2, r2, #3
   13748:	0759      	lsls	r1, r3, #29
   1374a:	4311      	orrs	r1, r2
   1374c:	000f      	movs	r7, r1
   1374e:	002c      	movs	r4, r5
   13750:	46d8      	mov	r8, fp
   13752:	0f7b      	lsrs	r3, r7, #29
   13754:	00e4      	lsls	r4, r4, #3
   13756:	431c      	orrs	r4, r3
   13758:	00ff      	lsls	r7, r7, #3
   1375a:	4e30      	ldr	r6, [pc, #192]	; (1381c <__aeabi_dadd+0x618>)
   1375c:	e5d6      	b.n	1330c <__aeabi_dadd+0x108>
   1375e:	000c      	movs	r4, r1
   13760:	0017      	movs	r7, r2
   13762:	0006      	movs	r6, r0
   13764:	e5d2      	b.n	1330c <__aeabi_dadd+0x108>
   13766:	2b00      	cmp	r3, #0
   13768:	d038      	beq.n	137dc <__aeabi_dadd+0x5d8>
   1376a:	000b      	movs	r3, r1
   1376c:	4313      	orrs	r3, r2
   1376e:	d100      	bne.n	13772 <__aeabi_dadd+0x56e>
   13770:	e742      	b.n	135f8 <__aeabi_dadd+0x3f4>
   13772:	08f8      	lsrs	r0, r7, #3
   13774:	0767      	lsls	r7, r4, #29
   13776:	4307      	orrs	r7, r0
   13778:	2080      	movs	r0, #128	; 0x80
   1377a:	08e4      	lsrs	r4, r4, #3
   1377c:	0300      	lsls	r0, r0, #12
   1377e:	4204      	tst	r4, r0
   13780:	d0e7      	beq.n	13752 <__aeabi_dadd+0x54e>
   13782:	08cb      	lsrs	r3, r1, #3
   13784:	4203      	tst	r3, r0
   13786:	d1e4      	bne.n	13752 <__aeabi_dadd+0x54e>
   13788:	08d2      	lsrs	r2, r2, #3
   1378a:	0749      	lsls	r1, r1, #29
   1378c:	4311      	orrs	r1, r2
   1378e:	000f      	movs	r7, r1
   13790:	001c      	movs	r4, r3
   13792:	e7de      	b.n	13752 <__aeabi_dadd+0x54e>
   13794:	2700      	movs	r7, #0
   13796:	2400      	movs	r4, #0
   13798:	e5d5      	b.n	13346 <__aeabi_dadd+0x142>
   1379a:	2100      	movs	r1, #0
   1379c:	e76b      	b.n	13676 <__aeabi_dadd+0x472>
   1379e:	2500      	movs	r5, #0
   137a0:	2700      	movs	r7, #0
   137a2:	e5f3      	b.n	1338c <__aeabi_dadd+0x188>
   137a4:	464e      	mov	r6, r9
   137a6:	0025      	movs	r5, r4
   137a8:	3e20      	subs	r6, #32
   137aa:	40f5      	lsrs	r5, r6
   137ac:	464b      	mov	r3, r9
   137ae:	002e      	movs	r6, r5
   137b0:	2b20      	cmp	r3, #32
   137b2:	d02d      	beq.n	13810 <__aeabi_dadd+0x60c>
   137b4:	2540      	movs	r5, #64	; 0x40
   137b6:	1aed      	subs	r5, r5, r3
   137b8:	40ac      	lsls	r4, r5
   137ba:	4327      	orrs	r7, r4
   137bc:	1e7c      	subs	r4, r7, #1
   137be:	41a7      	sbcs	r7, r4
   137c0:	2400      	movs	r4, #0
   137c2:	4337      	orrs	r7, r6
   137c4:	e6c9      	b.n	1355a <__aeabi_dadd+0x356>
   137c6:	2480      	movs	r4, #128	; 0x80
   137c8:	2500      	movs	r5, #0
   137ca:	0324      	lsls	r4, r4, #12
   137cc:	4e13      	ldr	r6, [pc, #76]	; (1381c <__aeabi_dadd+0x618>)
   137ce:	2700      	movs	r7, #0
   137d0:	e5dc      	b.n	1338c <__aeabi_dadd+0x188>
   137d2:	4327      	orrs	r7, r4
   137d4:	1e7c      	subs	r4, r7, #1
   137d6:	41a7      	sbcs	r7, r4
   137d8:	2400      	movs	r4, #0
   137da:	e779      	b.n	136d0 <__aeabi_dadd+0x4cc>
   137dc:	000c      	movs	r4, r1
   137de:	0017      	movs	r7, r2
   137e0:	4e0e      	ldr	r6, [pc, #56]	; (1381c <__aeabi_dadd+0x618>)
   137e2:	e593      	b.n	1330c <__aeabi_dadd+0x108>
   137e4:	000c      	movs	r4, r1
   137e6:	0017      	movs	r7, r2
   137e8:	e590      	b.n	1330c <__aeabi_dadd+0x108>
   137ea:	4656      	mov	r6, sl
   137ec:	0023      	movs	r3, r4
   137ee:	3e20      	subs	r6, #32
   137f0:	40f3      	lsrs	r3, r6
   137f2:	4699      	mov	r9, r3
   137f4:	4653      	mov	r3, sl
   137f6:	2b20      	cmp	r3, #32
   137f8:	d00e      	beq.n	13818 <__aeabi_dadd+0x614>
   137fa:	2340      	movs	r3, #64	; 0x40
   137fc:	4656      	mov	r6, sl
   137fe:	1b9b      	subs	r3, r3, r6
   13800:	409c      	lsls	r4, r3
   13802:	4327      	orrs	r7, r4
   13804:	1e7c      	subs	r4, r7, #1
   13806:	41a7      	sbcs	r7, r4
   13808:	464b      	mov	r3, r9
   1380a:	2400      	movs	r4, #0
   1380c:	431f      	orrs	r7, r3
   1380e:	e75f      	b.n	136d0 <__aeabi_dadd+0x4cc>
   13810:	2400      	movs	r4, #0
   13812:	e7d2      	b.n	137ba <__aeabi_dadd+0x5b6>
   13814:	0017      	movs	r7, r2
   13816:	e5b2      	b.n	1337e <__aeabi_dadd+0x17a>
   13818:	2400      	movs	r4, #0
   1381a:	e7f2      	b.n	13802 <__aeabi_dadd+0x5fe>
   1381c:	000007ff 	.word	0x000007ff
   13820:	ff7fffff 	.word	0xff7fffff

00013824 <__aeabi_ddiv>:
   13824:	b5f0      	push	{r4, r5, r6, r7, lr}
   13826:	4657      	mov	r7, sl
   13828:	4645      	mov	r5, r8
   1382a:	46de      	mov	lr, fp
   1382c:	464e      	mov	r6, r9
   1382e:	b5e0      	push	{r5, r6, r7, lr}
   13830:	004c      	lsls	r4, r1, #1
   13832:	030e      	lsls	r6, r1, #12
   13834:	b087      	sub	sp, #28
   13836:	4683      	mov	fp, r0
   13838:	4692      	mov	sl, r2
   1383a:	001d      	movs	r5, r3
   1383c:	4680      	mov	r8, r0
   1383e:	0b36      	lsrs	r6, r6, #12
   13840:	0d64      	lsrs	r4, r4, #21
   13842:	0fcf      	lsrs	r7, r1, #31
   13844:	2c00      	cmp	r4, #0
   13846:	d04f      	beq.n	138e8 <__aeabi_ddiv+0xc4>
   13848:	4b6f      	ldr	r3, [pc, #444]	; (13a08 <__aeabi_ddiv+0x1e4>)
   1384a:	429c      	cmp	r4, r3
   1384c:	d035      	beq.n	138ba <__aeabi_ddiv+0x96>
   1384e:	2380      	movs	r3, #128	; 0x80
   13850:	0f42      	lsrs	r2, r0, #29
   13852:	041b      	lsls	r3, r3, #16
   13854:	00f6      	lsls	r6, r6, #3
   13856:	4313      	orrs	r3, r2
   13858:	4333      	orrs	r3, r6
   1385a:	4699      	mov	r9, r3
   1385c:	00c3      	lsls	r3, r0, #3
   1385e:	4698      	mov	r8, r3
   13860:	4b6a      	ldr	r3, [pc, #424]	; (13a0c <__aeabi_ddiv+0x1e8>)
   13862:	2600      	movs	r6, #0
   13864:	469c      	mov	ip, r3
   13866:	2300      	movs	r3, #0
   13868:	4464      	add	r4, ip
   1386a:	9303      	str	r3, [sp, #12]
   1386c:	032b      	lsls	r3, r5, #12
   1386e:	0b1b      	lsrs	r3, r3, #12
   13870:	469b      	mov	fp, r3
   13872:	006b      	lsls	r3, r5, #1
   13874:	0fed      	lsrs	r5, r5, #31
   13876:	4650      	mov	r0, sl
   13878:	0d5b      	lsrs	r3, r3, #21
   1387a:	9501      	str	r5, [sp, #4]
   1387c:	d05e      	beq.n	1393c <__aeabi_ddiv+0x118>
   1387e:	4a62      	ldr	r2, [pc, #392]	; (13a08 <__aeabi_ddiv+0x1e4>)
   13880:	4293      	cmp	r3, r2
   13882:	d053      	beq.n	1392c <__aeabi_ddiv+0x108>
   13884:	465a      	mov	r2, fp
   13886:	00d1      	lsls	r1, r2, #3
   13888:	2280      	movs	r2, #128	; 0x80
   1388a:	0f40      	lsrs	r0, r0, #29
   1388c:	0412      	lsls	r2, r2, #16
   1388e:	4302      	orrs	r2, r0
   13890:	430a      	orrs	r2, r1
   13892:	4693      	mov	fp, r2
   13894:	4652      	mov	r2, sl
   13896:	00d1      	lsls	r1, r2, #3
   13898:	4a5c      	ldr	r2, [pc, #368]	; (13a0c <__aeabi_ddiv+0x1e8>)
   1389a:	4694      	mov	ip, r2
   1389c:	2200      	movs	r2, #0
   1389e:	4463      	add	r3, ip
   138a0:	0038      	movs	r0, r7
   138a2:	4068      	eors	r0, r5
   138a4:	4684      	mov	ip, r0
   138a6:	9002      	str	r0, [sp, #8]
   138a8:	1ae4      	subs	r4, r4, r3
   138aa:	4316      	orrs	r6, r2
   138ac:	2e0f      	cmp	r6, #15
   138ae:	d900      	bls.n	138b2 <__aeabi_ddiv+0x8e>
   138b0:	e0b4      	b.n	13a1c <__aeabi_ddiv+0x1f8>
   138b2:	4b57      	ldr	r3, [pc, #348]	; (13a10 <__aeabi_ddiv+0x1ec>)
   138b4:	00b6      	lsls	r6, r6, #2
   138b6:	599b      	ldr	r3, [r3, r6]
   138b8:	469f      	mov	pc, r3
   138ba:	0003      	movs	r3, r0
   138bc:	4333      	orrs	r3, r6
   138be:	4699      	mov	r9, r3
   138c0:	d16c      	bne.n	1399c <__aeabi_ddiv+0x178>
   138c2:	2300      	movs	r3, #0
   138c4:	4698      	mov	r8, r3
   138c6:	3302      	adds	r3, #2
   138c8:	2608      	movs	r6, #8
   138ca:	9303      	str	r3, [sp, #12]
   138cc:	e7ce      	b.n	1386c <__aeabi_ddiv+0x48>
   138ce:	46cb      	mov	fp, r9
   138d0:	4641      	mov	r1, r8
   138d2:	9a03      	ldr	r2, [sp, #12]
   138d4:	9701      	str	r7, [sp, #4]
   138d6:	2a02      	cmp	r2, #2
   138d8:	d165      	bne.n	139a6 <__aeabi_ddiv+0x182>
   138da:	9b01      	ldr	r3, [sp, #4]
   138dc:	4c4a      	ldr	r4, [pc, #296]	; (13a08 <__aeabi_ddiv+0x1e4>)
   138de:	469c      	mov	ip, r3
   138e0:	2300      	movs	r3, #0
   138e2:	2200      	movs	r2, #0
   138e4:	4698      	mov	r8, r3
   138e6:	e06b      	b.n	139c0 <__aeabi_ddiv+0x19c>
   138e8:	0003      	movs	r3, r0
   138ea:	4333      	orrs	r3, r6
   138ec:	4699      	mov	r9, r3
   138ee:	d04e      	beq.n	1398e <__aeabi_ddiv+0x16a>
   138f0:	2e00      	cmp	r6, #0
   138f2:	d100      	bne.n	138f6 <__aeabi_ddiv+0xd2>
   138f4:	e1bc      	b.n	13c70 <__aeabi_ddiv+0x44c>
   138f6:	0030      	movs	r0, r6
   138f8:	f001 fae8 	bl	14ecc <__clzsi2>
   138fc:	0003      	movs	r3, r0
   138fe:	3b0b      	subs	r3, #11
   13900:	2b1c      	cmp	r3, #28
   13902:	dd00      	ble.n	13906 <__aeabi_ddiv+0xe2>
   13904:	e1ac      	b.n	13c60 <__aeabi_ddiv+0x43c>
   13906:	221d      	movs	r2, #29
   13908:	1ad3      	subs	r3, r2, r3
   1390a:	465a      	mov	r2, fp
   1390c:	0001      	movs	r1, r0
   1390e:	40da      	lsrs	r2, r3
   13910:	3908      	subs	r1, #8
   13912:	408e      	lsls	r6, r1
   13914:	0013      	movs	r3, r2
   13916:	4333      	orrs	r3, r6
   13918:	4699      	mov	r9, r3
   1391a:	465b      	mov	r3, fp
   1391c:	408b      	lsls	r3, r1
   1391e:	4698      	mov	r8, r3
   13920:	2300      	movs	r3, #0
   13922:	4c3c      	ldr	r4, [pc, #240]	; (13a14 <__aeabi_ddiv+0x1f0>)
   13924:	2600      	movs	r6, #0
   13926:	1a24      	subs	r4, r4, r0
   13928:	9303      	str	r3, [sp, #12]
   1392a:	e79f      	b.n	1386c <__aeabi_ddiv+0x48>
   1392c:	4651      	mov	r1, sl
   1392e:	465a      	mov	r2, fp
   13930:	4311      	orrs	r1, r2
   13932:	d129      	bne.n	13988 <__aeabi_ddiv+0x164>
   13934:	2200      	movs	r2, #0
   13936:	4693      	mov	fp, r2
   13938:	3202      	adds	r2, #2
   1393a:	e7b1      	b.n	138a0 <__aeabi_ddiv+0x7c>
   1393c:	4659      	mov	r1, fp
   1393e:	4301      	orrs	r1, r0
   13940:	d01e      	beq.n	13980 <__aeabi_ddiv+0x15c>
   13942:	465b      	mov	r3, fp
   13944:	2b00      	cmp	r3, #0
   13946:	d100      	bne.n	1394a <__aeabi_ddiv+0x126>
   13948:	e19e      	b.n	13c88 <__aeabi_ddiv+0x464>
   1394a:	4658      	mov	r0, fp
   1394c:	f001 fabe 	bl	14ecc <__clzsi2>
   13950:	0003      	movs	r3, r0
   13952:	3b0b      	subs	r3, #11
   13954:	2b1c      	cmp	r3, #28
   13956:	dd00      	ble.n	1395a <__aeabi_ddiv+0x136>
   13958:	e18f      	b.n	13c7a <__aeabi_ddiv+0x456>
   1395a:	0002      	movs	r2, r0
   1395c:	4659      	mov	r1, fp
   1395e:	3a08      	subs	r2, #8
   13960:	4091      	lsls	r1, r2
   13962:	468b      	mov	fp, r1
   13964:	211d      	movs	r1, #29
   13966:	1acb      	subs	r3, r1, r3
   13968:	4651      	mov	r1, sl
   1396a:	40d9      	lsrs	r1, r3
   1396c:	000b      	movs	r3, r1
   1396e:	4659      	mov	r1, fp
   13970:	430b      	orrs	r3, r1
   13972:	4651      	mov	r1, sl
   13974:	469b      	mov	fp, r3
   13976:	4091      	lsls	r1, r2
   13978:	4b26      	ldr	r3, [pc, #152]	; (13a14 <__aeabi_ddiv+0x1f0>)
   1397a:	2200      	movs	r2, #0
   1397c:	1a1b      	subs	r3, r3, r0
   1397e:	e78f      	b.n	138a0 <__aeabi_ddiv+0x7c>
   13980:	2300      	movs	r3, #0
   13982:	2201      	movs	r2, #1
   13984:	469b      	mov	fp, r3
   13986:	e78b      	b.n	138a0 <__aeabi_ddiv+0x7c>
   13988:	4651      	mov	r1, sl
   1398a:	2203      	movs	r2, #3
   1398c:	e788      	b.n	138a0 <__aeabi_ddiv+0x7c>
   1398e:	2300      	movs	r3, #0
   13990:	4698      	mov	r8, r3
   13992:	3301      	adds	r3, #1
   13994:	2604      	movs	r6, #4
   13996:	2400      	movs	r4, #0
   13998:	9303      	str	r3, [sp, #12]
   1399a:	e767      	b.n	1386c <__aeabi_ddiv+0x48>
   1399c:	2303      	movs	r3, #3
   1399e:	46b1      	mov	r9, r6
   139a0:	9303      	str	r3, [sp, #12]
   139a2:	260c      	movs	r6, #12
   139a4:	e762      	b.n	1386c <__aeabi_ddiv+0x48>
   139a6:	2a03      	cmp	r2, #3
   139a8:	d100      	bne.n	139ac <__aeabi_ddiv+0x188>
   139aa:	e25c      	b.n	13e66 <__aeabi_ddiv+0x642>
   139ac:	9b01      	ldr	r3, [sp, #4]
   139ae:	2a01      	cmp	r2, #1
   139b0:	d000      	beq.n	139b4 <__aeabi_ddiv+0x190>
   139b2:	e1e4      	b.n	13d7e <__aeabi_ddiv+0x55a>
   139b4:	4013      	ands	r3, r2
   139b6:	469c      	mov	ip, r3
   139b8:	2300      	movs	r3, #0
   139ba:	2400      	movs	r4, #0
   139bc:	2200      	movs	r2, #0
   139be:	4698      	mov	r8, r3
   139c0:	2100      	movs	r1, #0
   139c2:	0312      	lsls	r2, r2, #12
   139c4:	0b13      	lsrs	r3, r2, #12
   139c6:	0d0a      	lsrs	r2, r1, #20
   139c8:	0512      	lsls	r2, r2, #20
   139ca:	431a      	orrs	r2, r3
   139cc:	0523      	lsls	r3, r4, #20
   139ce:	4c12      	ldr	r4, [pc, #72]	; (13a18 <__aeabi_ddiv+0x1f4>)
   139d0:	4640      	mov	r0, r8
   139d2:	4022      	ands	r2, r4
   139d4:	4313      	orrs	r3, r2
   139d6:	4662      	mov	r2, ip
   139d8:	005b      	lsls	r3, r3, #1
   139da:	07d2      	lsls	r2, r2, #31
   139dc:	085b      	lsrs	r3, r3, #1
   139de:	4313      	orrs	r3, r2
   139e0:	0019      	movs	r1, r3
   139e2:	b007      	add	sp, #28
   139e4:	bc3c      	pop	{r2, r3, r4, r5}
   139e6:	4690      	mov	r8, r2
   139e8:	4699      	mov	r9, r3
   139ea:	46a2      	mov	sl, r4
   139ec:	46ab      	mov	fp, r5
   139ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   139f0:	2300      	movs	r3, #0
   139f2:	2280      	movs	r2, #128	; 0x80
   139f4:	469c      	mov	ip, r3
   139f6:	0312      	lsls	r2, r2, #12
   139f8:	4698      	mov	r8, r3
   139fa:	4c03      	ldr	r4, [pc, #12]	; (13a08 <__aeabi_ddiv+0x1e4>)
   139fc:	e7e0      	b.n	139c0 <__aeabi_ddiv+0x19c>
   139fe:	2300      	movs	r3, #0
   13a00:	4c01      	ldr	r4, [pc, #4]	; (13a08 <__aeabi_ddiv+0x1e4>)
   13a02:	2200      	movs	r2, #0
   13a04:	4698      	mov	r8, r3
   13a06:	e7db      	b.n	139c0 <__aeabi_ddiv+0x19c>
   13a08:	000007ff 	.word	0x000007ff
   13a0c:	fffffc01 	.word	0xfffffc01
   13a10:	00016e6c 	.word	0x00016e6c
   13a14:	fffffc0d 	.word	0xfffffc0d
   13a18:	800fffff 	.word	0x800fffff
   13a1c:	45d9      	cmp	r9, fp
   13a1e:	d900      	bls.n	13a22 <__aeabi_ddiv+0x1fe>
   13a20:	e139      	b.n	13c96 <__aeabi_ddiv+0x472>
   13a22:	d100      	bne.n	13a26 <__aeabi_ddiv+0x202>
   13a24:	e134      	b.n	13c90 <__aeabi_ddiv+0x46c>
   13a26:	2300      	movs	r3, #0
   13a28:	4646      	mov	r6, r8
   13a2a:	464d      	mov	r5, r9
   13a2c:	469a      	mov	sl, r3
   13a2e:	3c01      	subs	r4, #1
   13a30:	465b      	mov	r3, fp
   13a32:	0e0a      	lsrs	r2, r1, #24
   13a34:	021b      	lsls	r3, r3, #8
   13a36:	431a      	orrs	r2, r3
   13a38:	020b      	lsls	r3, r1, #8
   13a3a:	0c17      	lsrs	r7, r2, #16
   13a3c:	9303      	str	r3, [sp, #12]
   13a3e:	0413      	lsls	r3, r2, #16
   13a40:	0c1b      	lsrs	r3, r3, #16
   13a42:	0039      	movs	r1, r7
   13a44:	0028      	movs	r0, r5
   13a46:	4690      	mov	r8, r2
   13a48:	9301      	str	r3, [sp, #4]
   13a4a:	f7fe f999 	bl	11d80 <__udivsi3>
   13a4e:	0002      	movs	r2, r0
   13a50:	9b01      	ldr	r3, [sp, #4]
   13a52:	4683      	mov	fp, r0
   13a54:	435a      	muls	r2, r3
   13a56:	0028      	movs	r0, r5
   13a58:	0039      	movs	r1, r7
   13a5a:	4691      	mov	r9, r2
   13a5c:	f7fe fa16 	bl	11e8c <__aeabi_uidivmod>
   13a60:	0c35      	lsrs	r5, r6, #16
   13a62:	0409      	lsls	r1, r1, #16
   13a64:	430d      	orrs	r5, r1
   13a66:	45a9      	cmp	r9, r5
   13a68:	d90d      	bls.n	13a86 <__aeabi_ddiv+0x262>
   13a6a:	465b      	mov	r3, fp
   13a6c:	4445      	add	r5, r8
   13a6e:	3b01      	subs	r3, #1
   13a70:	45a8      	cmp	r8, r5
   13a72:	d900      	bls.n	13a76 <__aeabi_ddiv+0x252>
   13a74:	e13a      	b.n	13cec <__aeabi_ddiv+0x4c8>
   13a76:	45a9      	cmp	r9, r5
   13a78:	d800      	bhi.n	13a7c <__aeabi_ddiv+0x258>
   13a7a:	e137      	b.n	13cec <__aeabi_ddiv+0x4c8>
   13a7c:	2302      	movs	r3, #2
   13a7e:	425b      	negs	r3, r3
   13a80:	469c      	mov	ip, r3
   13a82:	4445      	add	r5, r8
   13a84:	44e3      	add	fp, ip
   13a86:	464b      	mov	r3, r9
   13a88:	1aeb      	subs	r3, r5, r3
   13a8a:	0039      	movs	r1, r7
   13a8c:	0018      	movs	r0, r3
   13a8e:	9304      	str	r3, [sp, #16]
   13a90:	f7fe f976 	bl	11d80 <__udivsi3>
   13a94:	9b01      	ldr	r3, [sp, #4]
   13a96:	0005      	movs	r5, r0
   13a98:	4343      	muls	r3, r0
   13a9a:	0039      	movs	r1, r7
   13a9c:	9804      	ldr	r0, [sp, #16]
   13a9e:	4699      	mov	r9, r3
   13aa0:	f7fe f9f4 	bl	11e8c <__aeabi_uidivmod>
   13aa4:	0433      	lsls	r3, r6, #16
   13aa6:	0409      	lsls	r1, r1, #16
   13aa8:	0c1b      	lsrs	r3, r3, #16
   13aaa:	430b      	orrs	r3, r1
   13aac:	4599      	cmp	r9, r3
   13aae:	d909      	bls.n	13ac4 <__aeabi_ddiv+0x2a0>
   13ab0:	4443      	add	r3, r8
   13ab2:	1e6a      	subs	r2, r5, #1
   13ab4:	4598      	cmp	r8, r3
   13ab6:	d900      	bls.n	13aba <__aeabi_ddiv+0x296>
   13ab8:	e11a      	b.n	13cf0 <__aeabi_ddiv+0x4cc>
   13aba:	4599      	cmp	r9, r3
   13abc:	d800      	bhi.n	13ac0 <__aeabi_ddiv+0x29c>
   13abe:	e117      	b.n	13cf0 <__aeabi_ddiv+0x4cc>
   13ac0:	3d02      	subs	r5, #2
   13ac2:	4443      	add	r3, r8
   13ac4:	464a      	mov	r2, r9
   13ac6:	1a9b      	subs	r3, r3, r2
   13ac8:	465a      	mov	r2, fp
   13aca:	0412      	lsls	r2, r2, #16
   13acc:	432a      	orrs	r2, r5
   13ace:	9903      	ldr	r1, [sp, #12]
   13ad0:	4693      	mov	fp, r2
   13ad2:	0c10      	lsrs	r0, r2, #16
   13ad4:	0c0a      	lsrs	r2, r1, #16
   13ad6:	4691      	mov	r9, r2
   13ad8:	0409      	lsls	r1, r1, #16
   13ada:	465a      	mov	r2, fp
   13adc:	0c09      	lsrs	r1, r1, #16
   13ade:	464e      	mov	r6, r9
   13ae0:	000d      	movs	r5, r1
   13ae2:	0412      	lsls	r2, r2, #16
   13ae4:	0c12      	lsrs	r2, r2, #16
   13ae6:	4345      	muls	r5, r0
   13ae8:	9105      	str	r1, [sp, #20]
   13aea:	4351      	muls	r1, r2
   13aec:	4372      	muls	r2, r6
   13aee:	4370      	muls	r0, r6
   13af0:	1952      	adds	r2, r2, r5
   13af2:	0c0e      	lsrs	r6, r1, #16
   13af4:	18b2      	adds	r2, r6, r2
   13af6:	4295      	cmp	r5, r2
   13af8:	d903      	bls.n	13b02 <__aeabi_ddiv+0x2de>
   13afa:	2580      	movs	r5, #128	; 0x80
   13afc:	026d      	lsls	r5, r5, #9
   13afe:	46ac      	mov	ip, r5
   13b00:	4460      	add	r0, ip
   13b02:	0c15      	lsrs	r5, r2, #16
   13b04:	0409      	lsls	r1, r1, #16
   13b06:	0412      	lsls	r2, r2, #16
   13b08:	0c09      	lsrs	r1, r1, #16
   13b0a:	1828      	adds	r0, r5, r0
   13b0c:	1852      	adds	r2, r2, r1
   13b0e:	4283      	cmp	r3, r0
   13b10:	d200      	bcs.n	13b14 <__aeabi_ddiv+0x2f0>
   13b12:	e0ce      	b.n	13cb2 <__aeabi_ddiv+0x48e>
   13b14:	d100      	bne.n	13b18 <__aeabi_ddiv+0x2f4>
   13b16:	e0c8      	b.n	13caa <__aeabi_ddiv+0x486>
   13b18:	1a1d      	subs	r5, r3, r0
   13b1a:	4653      	mov	r3, sl
   13b1c:	1a9e      	subs	r6, r3, r2
   13b1e:	45b2      	cmp	sl, r6
   13b20:	4192      	sbcs	r2, r2
   13b22:	4252      	negs	r2, r2
   13b24:	1aab      	subs	r3, r5, r2
   13b26:	469a      	mov	sl, r3
   13b28:	4598      	cmp	r8, r3
   13b2a:	d100      	bne.n	13b2e <__aeabi_ddiv+0x30a>
   13b2c:	e117      	b.n	13d5e <__aeabi_ddiv+0x53a>
   13b2e:	0039      	movs	r1, r7
   13b30:	0018      	movs	r0, r3
   13b32:	f7fe f925 	bl	11d80 <__udivsi3>
   13b36:	9b01      	ldr	r3, [sp, #4]
   13b38:	0005      	movs	r5, r0
   13b3a:	4343      	muls	r3, r0
   13b3c:	0039      	movs	r1, r7
   13b3e:	4650      	mov	r0, sl
   13b40:	9304      	str	r3, [sp, #16]
   13b42:	f7fe f9a3 	bl	11e8c <__aeabi_uidivmod>
   13b46:	9804      	ldr	r0, [sp, #16]
   13b48:	040b      	lsls	r3, r1, #16
   13b4a:	0c31      	lsrs	r1, r6, #16
   13b4c:	4319      	orrs	r1, r3
   13b4e:	4288      	cmp	r0, r1
   13b50:	d909      	bls.n	13b66 <__aeabi_ddiv+0x342>
   13b52:	4441      	add	r1, r8
   13b54:	1e6b      	subs	r3, r5, #1
   13b56:	4588      	cmp	r8, r1
   13b58:	d900      	bls.n	13b5c <__aeabi_ddiv+0x338>
   13b5a:	e107      	b.n	13d6c <__aeabi_ddiv+0x548>
   13b5c:	4288      	cmp	r0, r1
   13b5e:	d800      	bhi.n	13b62 <__aeabi_ddiv+0x33e>
   13b60:	e104      	b.n	13d6c <__aeabi_ddiv+0x548>
   13b62:	3d02      	subs	r5, #2
   13b64:	4441      	add	r1, r8
   13b66:	9b04      	ldr	r3, [sp, #16]
   13b68:	1acb      	subs	r3, r1, r3
   13b6a:	0018      	movs	r0, r3
   13b6c:	0039      	movs	r1, r7
   13b6e:	9304      	str	r3, [sp, #16]
   13b70:	f7fe f906 	bl	11d80 <__udivsi3>
   13b74:	9b01      	ldr	r3, [sp, #4]
   13b76:	4682      	mov	sl, r0
   13b78:	4343      	muls	r3, r0
   13b7a:	0039      	movs	r1, r7
   13b7c:	9804      	ldr	r0, [sp, #16]
   13b7e:	9301      	str	r3, [sp, #4]
   13b80:	f7fe f984 	bl	11e8c <__aeabi_uidivmod>
   13b84:	9801      	ldr	r0, [sp, #4]
   13b86:	040b      	lsls	r3, r1, #16
   13b88:	0431      	lsls	r1, r6, #16
   13b8a:	0c09      	lsrs	r1, r1, #16
   13b8c:	4319      	orrs	r1, r3
   13b8e:	4288      	cmp	r0, r1
   13b90:	d90d      	bls.n	13bae <__aeabi_ddiv+0x38a>
   13b92:	4653      	mov	r3, sl
   13b94:	4441      	add	r1, r8
   13b96:	3b01      	subs	r3, #1
   13b98:	4588      	cmp	r8, r1
   13b9a:	d900      	bls.n	13b9e <__aeabi_ddiv+0x37a>
   13b9c:	e0e8      	b.n	13d70 <__aeabi_ddiv+0x54c>
   13b9e:	4288      	cmp	r0, r1
   13ba0:	d800      	bhi.n	13ba4 <__aeabi_ddiv+0x380>
   13ba2:	e0e5      	b.n	13d70 <__aeabi_ddiv+0x54c>
   13ba4:	2302      	movs	r3, #2
   13ba6:	425b      	negs	r3, r3
   13ba8:	469c      	mov	ip, r3
   13baa:	4441      	add	r1, r8
   13bac:	44e2      	add	sl, ip
   13bae:	9b01      	ldr	r3, [sp, #4]
   13bb0:	042d      	lsls	r5, r5, #16
   13bb2:	1ace      	subs	r6, r1, r3
   13bb4:	4651      	mov	r1, sl
   13bb6:	4329      	orrs	r1, r5
   13bb8:	9d05      	ldr	r5, [sp, #20]
   13bba:	464f      	mov	r7, r9
   13bbc:	002a      	movs	r2, r5
   13bbe:	040b      	lsls	r3, r1, #16
   13bc0:	0c08      	lsrs	r0, r1, #16
   13bc2:	0c1b      	lsrs	r3, r3, #16
   13bc4:	435a      	muls	r2, r3
   13bc6:	4345      	muls	r5, r0
   13bc8:	437b      	muls	r3, r7
   13bca:	4378      	muls	r0, r7
   13bcc:	195b      	adds	r3, r3, r5
   13bce:	0c17      	lsrs	r7, r2, #16
   13bd0:	18fb      	adds	r3, r7, r3
   13bd2:	429d      	cmp	r5, r3
   13bd4:	d903      	bls.n	13bde <__aeabi_ddiv+0x3ba>
   13bd6:	2580      	movs	r5, #128	; 0x80
   13bd8:	026d      	lsls	r5, r5, #9
   13bda:	46ac      	mov	ip, r5
   13bdc:	4460      	add	r0, ip
   13bde:	0c1d      	lsrs	r5, r3, #16
   13be0:	0412      	lsls	r2, r2, #16
   13be2:	041b      	lsls	r3, r3, #16
   13be4:	0c12      	lsrs	r2, r2, #16
   13be6:	1828      	adds	r0, r5, r0
   13be8:	189b      	adds	r3, r3, r2
   13bea:	4286      	cmp	r6, r0
   13bec:	d200      	bcs.n	13bf0 <__aeabi_ddiv+0x3cc>
   13bee:	e093      	b.n	13d18 <__aeabi_ddiv+0x4f4>
   13bf0:	d100      	bne.n	13bf4 <__aeabi_ddiv+0x3d0>
   13bf2:	e08e      	b.n	13d12 <__aeabi_ddiv+0x4ee>
   13bf4:	2301      	movs	r3, #1
   13bf6:	4319      	orrs	r1, r3
   13bf8:	4ba0      	ldr	r3, [pc, #640]	; (13e7c <__aeabi_ddiv+0x658>)
   13bfa:	18e3      	adds	r3, r4, r3
   13bfc:	2b00      	cmp	r3, #0
   13bfe:	dc00      	bgt.n	13c02 <__aeabi_ddiv+0x3de>
   13c00:	e099      	b.n	13d36 <__aeabi_ddiv+0x512>
   13c02:	074a      	lsls	r2, r1, #29
   13c04:	d000      	beq.n	13c08 <__aeabi_ddiv+0x3e4>
   13c06:	e09e      	b.n	13d46 <__aeabi_ddiv+0x522>
   13c08:	465a      	mov	r2, fp
   13c0a:	01d2      	lsls	r2, r2, #7
   13c0c:	d506      	bpl.n	13c1c <__aeabi_ddiv+0x3f8>
   13c0e:	465a      	mov	r2, fp
   13c10:	4b9b      	ldr	r3, [pc, #620]	; (13e80 <__aeabi_ddiv+0x65c>)
   13c12:	401a      	ands	r2, r3
   13c14:	2380      	movs	r3, #128	; 0x80
   13c16:	4693      	mov	fp, r2
   13c18:	00db      	lsls	r3, r3, #3
   13c1a:	18e3      	adds	r3, r4, r3
   13c1c:	4a99      	ldr	r2, [pc, #612]	; (13e84 <__aeabi_ddiv+0x660>)
   13c1e:	4293      	cmp	r3, r2
   13c20:	dd68      	ble.n	13cf4 <__aeabi_ddiv+0x4d0>
   13c22:	2301      	movs	r3, #1
   13c24:	9a02      	ldr	r2, [sp, #8]
   13c26:	4c98      	ldr	r4, [pc, #608]	; (13e88 <__aeabi_ddiv+0x664>)
   13c28:	401a      	ands	r2, r3
   13c2a:	2300      	movs	r3, #0
   13c2c:	4694      	mov	ip, r2
   13c2e:	4698      	mov	r8, r3
   13c30:	2200      	movs	r2, #0
   13c32:	e6c5      	b.n	139c0 <__aeabi_ddiv+0x19c>
   13c34:	2280      	movs	r2, #128	; 0x80
   13c36:	464b      	mov	r3, r9
   13c38:	0312      	lsls	r2, r2, #12
   13c3a:	4213      	tst	r3, r2
   13c3c:	d00a      	beq.n	13c54 <__aeabi_ddiv+0x430>
   13c3e:	465b      	mov	r3, fp
   13c40:	4213      	tst	r3, r2
   13c42:	d106      	bne.n	13c52 <__aeabi_ddiv+0x42e>
   13c44:	431a      	orrs	r2, r3
   13c46:	0312      	lsls	r2, r2, #12
   13c48:	0b12      	lsrs	r2, r2, #12
   13c4a:	46ac      	mov	ip, r5
   13c4c:	4688      	mov	r8, r1
   13c4e:	4c8e      	ldr	r4, [pc, #568]	; (13e88 <__aeabi_ddiv+0x664>)
   13c50:	e6b6      	b.n	139c0 <__aeabi_ddiv+0x19c>
   13c52:	464b      	mov	r3, r9
   13c54:	431a      	orrs	r2, r3
   13c56:	0312      	lsls	r2, r2, #12
   13c58:	0b12      	lsrs	r2, r2, #12
   13c5a:	46bc      	mov	ip, r7
   13c5c:	4c8a      	ldr	r4, [pc, #552]	; (13e88 <__aeabi_ddiv+0x664>)
   13c5e:	e6af      	b.n	139c0 <__aeabi_ddiv+0x19c>
   13c60:	0003      	movs	r3, r0
   13c62:	465a      	mov	r2, fp
   13c64:	3b28      	subs	r3, #40	; 0x28
   13c66:	409a      	lsls	r2, r3
   13c68:	2300      	movs	r3, #0
   13c6a:	4691      	mov	r9, r2
   13c6c:	4698      	mov	r8, r3
   13c6e:	e657      	b.n	13920 <__aeabi_ddiv+0xfc>
   13c70:	4658      	mov	r0, fp
   13c72:	f001 f92b 	bl	14ecc <__clzsi2>
   13c76:	3020      	adds	r0, #32
   13c78:	e640      	b.n	138fc <__aeabi_ddiv+0xd8>
   13c7a:	0003      	movs	r3, r0
   13c7c:	4652      	mov	r2, sl
   13c7e:	3b28      	subs	r3, #40	; 0x28
   13c80:	409a      	lsls	r2, r3
   13c82:	2100      	movs	r1, #0
   13c84:	4693      	mov	fp, r2
   13c86:	e677      	b.n	13978 <__aeabi_ddiv+0x154>
   13c88:	f001 f920 	bl	14ecc <__clzsi2>
   13c8c:	3020      	adds	r0, #32
   13c8e:	e65f      	b.n	13950 <__aeabi_ddiv+0x12c>
   13c90:	4588      	cmp	r8, r1
   13c92:	d200      	bcs.n	13c96 <__aeabi_ddiv+0x472>
   13c94:	e6c7      	b.n	13a26 <__aeabi_ddiv+0x202>
   13c96:	464b      	mov	r3, r9
   13c98:	07de      	lsls	r6, r3, #31
   13c9a:	085d      	lsrs	r5, r3, #1
   13c9c:	4643      	mov	r3, r8
   13c9e:	085b      	lsrs	r3, r3, #1
   13ca0:	431e      	orrs	r6, r3
   13ca2:	4643      	mov	r3, r8
   13ca4:	07db      	lsls	r3, r3, #31
   13ca6:	469a      	mov	sl, r3
   13ca8:	e6c2      	b.n	13a30 <__aeabi_ddiv+0x20c>
   13caa:	2500      	movs	r5, #0
   13cac:	4592      	cmp	sl, r2
   13cae:	d300      	bcc.n	13cb2 <__aeabi_ddiv+0x48e>
   13cb0:	e733      	b.n	13b1a <__aeabi_ddiv+0x2f6>
   13cb2:	9e03      	ldr	r6, [sp, #12]
   13cb4:	4659      	mov	r1, fp
   13cb6:	46b4      	mov	ip, r6
   13cb8:	44e2      	add	sl, ip
   13cba:	45b2      	cmp	sl, r6
   13cbc:	41ad      	sbcs	r5, r5
   13cbe:	426d      	negs	r5, r5
   13cc0:	4445      	add	r5, r8
   13cc2:	18eb      	adds	r3, r5, r3
   13cc4:	3901      	subs	r1, #1
   13cc6:	4598      	cmp	r8, r3
   13cc8:	d207      	bcs.n	13cda <__aeabi_ddiv+0x4b6>
   13cca:	4298      	cmp	r0, r3
   13ccc:	d900      	bls.n	13cd0 <__aeabi_ddiv+0x4ac>
   13cce:	e07f      	b.n	13dd0 <__aeabi_ddiv+0x5ac>
   13cd0:	d100      	bne.n	13cd4 <__aeabi_ddiv+0x4b0>
   13cd2:	e0bc      	b.n	13e4e <__aeabi_ddiv+0x62a>
   13cd4:	1a1d      	subs	r5, r3, r0
   13cd6:	468b      	mov	fp, r1
   13cd8:	e71f      	b.n	13b1a <__aeabi_ddiv+0x2f6>
   13cda:	4598      	cmp	r8, r3
   13cdc:	d1fa      	bne.n	13cd4 <__aeabi_ddiv+0x4b0>
   13cde:	9d03      	ldr	r5, [sp, #12]
   13ce0:	4555      	cmp	r5, sl
   13ce2:	d9f2      	bls.n	13cca <__aeabi_ddiv+0x4a6>
   13ce4:	4643      	mov	r3, r8
   13ce6:	468b      	mov	fp, r1
   13ce8:	1a1d      	subs	r5, r3, r0
   13cea:	e716      	b.n	13b1a <__aeabi_ddiv+0x2f6>
   13cec:	469b      	mov	fp, r3
   13cee:	e6ca      	b.n	13a86 <__aeabi_ddiv+0x262>
   13cf0:	0015      	movs	r5, r2
   13cf2:	e6e7      	b.n	13ac4 <__aeabi_ddiv+0x2a0>
   13cf4:	465a      	mov	r2, fp
   13cf6:	08c9      	lsrs	r1, r1, #3
   13cf8:	0752      	lsls	r2, r2, #29
   13cfa:	430a      	orrs	r2, r1
   13cfc:	055b      	lsls	r3, r3, #21
   13cfe:	4690      	mov	r8, r2
   13d00:	0d5c      	lsrs	r4, r3, #21
   13d02:	465a      	mov	r2, fp
   13d04:	2301      	movs	r3, #1
   13d06:	9902      	ldr	r1, [sp, #8]
   13d08:	0252      	lsls	r2, r2, #9
   13d0a:	4019      	ands	r1, r3
   13d0c:	0b12      	lsrs	r2, r2, #12
   13d0e:	468c      	mov	ip, r1
   13d10:	e656      	b.n	139c0 <__aeabi_ddiv+0x19c>
   13d12:	2b00      	cmp	r3, #0
   13d14:	d100      	bne.n	13d18 <__aeabi_ddiv+0x4f4>
   13d16:	e76f      	b.n	13bf8 <__aeabi_ddiv+0x3d4>
   13d18:	4446      	add	r6, r8
   13d1a:	1e4a      	subs	r2, r1, #1
   13d1c:	45b0      	cmp	r8, r6
   13d1e:	d929      	bls.n	13d74 <__aeabi_ddiv+0x550>
   13d20:	0011      	movs	r1, r2
   13d22:	4286      	cmp	r6, r0
   13d24:	d000      	beq.n	13d28 <__aeabi_ddiv+0x504>
   13d26:	e765      	b.n	13bf4 <__aeabi_ddiv+0x3d0>
   13d28:	9a03      	ldr	r2, [sp, #12]
   13d2a:	4293      	cmp	r3, r2
   13d2c:	d000      	beq.n	13d30 <__aeabi_ddiv+0x50c>
   13d2e:	e761      	b.n	13bf4 <__aeabi_ddiv+0x3d0>
   13d30:	e762      	b.n	13bf8 <__aeabi_ddiv+0x3d4>
   13d32:	2101      	movs	r1, #1
   13d34:	4249      	negs	r1, r1
   13d36:	2001      	movs	r0, #1
   13d38:	1ac2      	subs	r2, r0, r3
   13d3a:	2a38      	cmp	r2, #56	; 0x38
   13d3c:	dd21      	ble.n	13d82 <__aeabi_ddiv+0x55e>
   13d3e:	9b02      	ldr	r3, [sp, #8]
   13d40:	4003      	ands	r3, r0
   13d42:	469c      	mov	ip, r3
   13d44:	e638      	b.n	139b8 <__aeabi_ddiv+0x194>
   13d46:	220f      	movs	r2, #15
   13d48:	400a      	ands	r2, r1
   13d4a:	2a04      	cmp	r2, #4
   13d4c:	d100      	bne.n	13d50 <__aeabi_ddiv+0x52c>
   13d4e:	e75b      	b.n	13c08 <__aeabi_ddiv+0x3e4>
   13d50:	000a      	movs	r2, r1
   13d52:	1d11      	adds	r1, r2, #4
   13d54:	4291      	cmp	r1, r2
   13d56:	4192      	sbcs	r2, r2
   13d58:	4252      	negs	r2, r2
   13d5a:	4493      	add	fp, r2
   13d5c:	e754      	b.n	13c08 <__aeabi_ddiv+0x3e4>
   13d5e:	4b47      	ldr	r3, [pc, #284]	; (13e7c <__aeabi_ddiv+0x658>)
   13d60:	18e3      	adds	r3, r4, r3
   13d62:	2b00      	cmp	r3, #0
   13d64:	dde5      	ble.n	13d32 <__aeabi_ddiv+0x50e>
   13d66:	2201      	movs	r2, #1
   13d68:	4252      	negs	r2, r2
   13d6a:	e7f2      	b.n	13d52 <__aeabi_ddiv+0x52e>
   13d6c:	001d      	movs	r5, r3
   13d6e:	e6fa      	b.n	13b66 <__aeabi_ddiv+0x342>
   13d70:	469a      	mov	sl, r3
   13d72:	e71c      	b.n	13bae <__aeabi_ddiv+0x38a>
   13d74:	42b0      	cmp	r0, r6
   13d76:	d839      	bhi.n	13dec <__aeabi_ddiv+0x5c8>
   13d78:	d06e      	beq.n	13e58 <__aeabi_ddiv+0x634>
   13d7a:	0011      	movs	r1, r2
   13d7c:	e73a      	b.n	13bf4 <__aeabi_ddiv+0x3d0>
   13d7e:	9302      	str	r3, [sp, #8]
   13d80:	e73a      	b.n	13bf8 <__aeabi_ddiv+0x3d4>
   13d82:	2a1f      	cmp	r2, #31
   13d84:	dc3c      	bgt.n	13e00 <__aeabi_ddiv+0x5dc>
   13d86:	2320      	movs	r3, #32
   13d88:	1a9b      	subs	r3, r3, r2
   13d8a:	000c      	movs	r4, r1
   13d8c:	4658      	mov	r0, fp
   13d8e:	4099      	lsls	r1, r3
   13d90:	4098      	lsls	r0, r3
   13d92:	1e4b      	subs	r3, r1, #1
   13d94:	4199      	sbcs	r1, r3
   13d96:	465b      	mov	r3, fp
   13d98:	40d4      	lsrs	r4, r2
   13d9a:	40d3      	lsrs	r3, r2
   13d9c:	4320      	orrs	r0, r4
   13d9e:	4308      	orrs	r0, r1
   13da0:	001a      	movs	r2, r3
   13da2:	0743      	lsls	r3, r0, #29
   13da4:	d009      	beq.n	13dba <__aeabi_ddiv+0x596>
   13da6:	230f      	movs	r3, #15
   13da8:	4003      	ands	r3, r0
   13daa:	2b04      	cmp	r3, #4
   13dac:	d005      	beq.n	13dba <__aeabi_ddiv+0x596>
   13dae:	0001      	movs	r1, r0
   13db0:	1d08      	adds	r0, r1, #4
   13db2:	4288      	cmp	r0, r1
   13db4:	419b      	sbcs	r3, r3
   13db6:	425b      	negs	r3, r3
   13db8:	18d2      	adds	r2, r2, r3
   13dba:	0213      	lsls	r3, r2, #8
   13dbc:	d53a      	bpl.n	13e34 <__aeabi_ddiv+0x610>
   13dbe:	2301      	movs	r3, #1
   13dc0:	9a02      	ldr	r2, [sp, #8]
   13dc2:	2401      	movs	r4, #1
   13dc4:	401a      	ands	r2, r3
   13dc6:	2300      	movs	r3, #0
   13dc8:	4694      	mov	ip, r2
   13dca:	4698      	mov	r8, r3
   13dcc:	2200      	movs	r2, #0
   13dce:	e5f7      	b.n	139c0 <__aeabi_ddiv+0x19c>
   13dd0:	2102      	movs	r1, #2
   13dd2:	4249      	negs	r1, r1
   13dd4:	468c      	mov	ip, r1
   13dd6:	9d03      	ldr	r5, [sp, #12]
   13dd8:	44e3      	add	fp, ip
   13dda:	46ac      	mov	ip, r5
   13ddc:	44e2      	add	sl, ip
   13dde:	45aa      	cmp	sl, r5
   13de0:	41ad      	sbcs	r5, r5
   13de2:	426d      	negs	r5, r5
   13de4:	4445      	add	r5, r8
   13de6:	18ed      	adds	r5, r5, r3
   13de8:	1a2d      	subs	r5, r5, r0
   13dea:	e696      	b.n	13b1a <__aeabi_ddiv+0x2f6>
   13dec:	1e8a      	subs	r2, r1, #2
   13dee:	9903      	ldr	r1, [sp, #12]
   13df0:	004d      	lsls	r5, r1, #1
   13df2:	428d      	cmp	r5, r1
   13df4:	4189      	sbcs	r1, r1
   13df6:	4249      	negs	r1, r1
   13df8:	4441      	add	r1, r8
   13dfa:	1876      	adds	r6, r6, r1
   13dfc:	9503      	str	r5, [sp, #12]
   13dfe:	e78f      	b.n	13d20 <__aeabi_ddiv+0x4fc>
   13e00:	201f      	movs	r0, #31
   13e02:	4240      	negs	r0, r0
   13e04:	1ac3      	subs	r3, r0, r3
   13e06:	4658      	mov	r0, fp
   13e08:	40d8      	lsrs	r0, r3
   13e0a:	0003      	movs	r3, r0
   13e0c:	2a20      	cmp	r2, #32
   13e0e:	d028      	beq.n	13e62 <__aeabi_ddiv+0x63e>
   13e10:	2040      	movs	r0, #64	; 0x40
   13e12:	465d      	mov	r5, fp
   13e14:	1a82      	subs	r2, r0, r2
   13e16:	4095      	lsls	r5, r2
   13e18:	4329      	orrs	r1, r5
   13e1a:	1e4a      	subs	r2, r1, #1
   13e1c:	4191      	sbcs	r1, r2
   13e1e:	4319      	orrs	r1, r3
   13e20:	2307      	movs	r3, #7
   13e22:	2200      	movs	r2, #0
   13e24:	400b      	ands	r3, r1
   13e26:	d009      	beq.n	13e3c <__aeabi_ddiv+0x618>
   13e28:	230f      	movs	r3, #15
   13e2a:	2200      	movs	r2, #0
   13e2c:	400b      	ands	r3, r1
   13e2e:	0008      	movs	r0, r1
   13e30:	2b04      	cmp	r3, #4
   13e32:	d1bd      	bne.n	13db0 <__aeabi_ddiv+0x58c>
   13e34:	0001      	movs	r1, r0
   13e36:	0753      	lsls	r3, r2, #29
   13e38:	0252      	lsls	r2, r2, #9
   13e3a:	0b12      	lsrs	r2, r2, #12
   13e3c:	08c9      	lsrs	r1, r1, #3
   13e3e:	4319      	orrs	r1, r3
   13e40:	2301      	movs	r3, #1
   13e42:	4688      	mov	r8, r1
   13e44:	9902      	ldr	r1, [sp, #8]
   13e46:	2400      	movs	r4, #0
   13e48:	4019      	ands	r1, r3
   13e4a:	468c      	mov	ip, r1
   13e4c:	e5b8      	b.n	139c0 <__aeabi_ddiv+0x19c>
   13e4e:	4552      	cmp	r2, sl
   13e50:	d8be      	bhi.n	13dd0 <__aeabi_ddiv+0x5ac>
   13e52:	468b      	mov	fp, r1
   13e54:	2500      	movs	r5, #0
   13e56:	e660      	b.n	13b1a <__aeabi_ddiv+0x2f6>
   13e58:	9d03      	ldr	r5, [sp, #12]
   13e5a:	429d      	cmp	r5, r3
   13e5c:	d3c6      	bcc.n	13dec <__aeabi_ddiv+0x5c8>
   13e5e:	0011      	movs	r1, r2
   13e60:	e762      	b.n	13d28 <__aeabi_ddiv+0x504>
   13e62:	2500      	movs	r5, #0
   13e64:	e7d8      	b.n	13e18 <__aeabi_ddiv+0x5f4>
   13e66:	2280      	movs	r2, #128	; 0x80
   13e68:	465b      	mov	r3, fp
   13e6a:	0312      	lsls	r2, r2, #12
   13e6c:	431a      	orrs	r2, r3
   13e6e:	9b01      	ldr	r3, [sp, #4]
   13e70:	0312      	lsls	r2, r2, #12
   13e72:	0b12      	lsrs	r2, r2, #12
   13e74:	469c      	mov	ip, r3
   13e76:	4688      	mov	r8, r1
   13e78:	4c03      	ldr	r4, [pc, #12]	; (13e88 <__aeabi_ddiv+0x664>)
   13e7a:	e5a1      	b.n	139c0 <__aeabi_ddiv+0x19c>
   13e7c:	000003ff 	.word	0x000003ff
   13e80:	feffffff 	.word	0xfeffffff
   13e84:	000007fe 	.word	0x000007fe
   13e88:	000007ff 	.word	0x000007ff

00013e8c <__eqdf2>:
   13e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e8e:	464f      	mov	r7, r9
   13e90:	4646      	mov	r6, r8
   13e92:	46d6      	mov	lr, sl
   13e94:	005c      	lsls	r4, r3, #1
   13e96:	b5c0      	push	{r6, r7, lr}
   13e98:	031f      	lsls	r7, r3, #12
   13e9a:	0fdb      	lsrs	r3, r3, #31
   13e9c:	469a      	mov	sl, r3
   13e9e:	4b17      	ldr	r3, [pc, #92]	; (13efc <__eqdf2+0x70>)
   13ea0:	030e      	lsls	r6, r1, #12
   13ea2:	004d      	lsls	r5, r1, #1
   13ea4:	4684      	mov	ip, r0
   13ea6:	4680      	mov	r8, r0
   13ea8:	0b36      	lsrs	r6, r6, #12
   13eaa:	0d6d      	lsrs	r5, r5, #21
   13eac:	0fc9      	lsrs	r1, r1, #31
   13eae:	4691      	mov	r9, r2
   13eb0:	0b3f      	lsrs	r7, r7, #12
   13eb2:	0d64      	lsrs	r4, r4, #21
   13eb4:	2001      	movs	r0, #1
   13eb6:	429d      	cmp	r5, r3
   13eb8:	d008      	beq.n	13ecc <__eqdf2+0x40>
   13eba:	429c      	cmp	r4, r3
   13ebc:	d001      	beq.n	13ec2 <__eqdf2+0x36>
   13ebe:	42a5      	cmp	r5, r4
   13ec0:	d00b      	beq.n	13eda <__eqdf2+0x4e>
   13ec2:	bc1c      	pop	{r2, r3, r4}
   13ec4:	4690      	mov	r8, r2
   13ec6:	4699      	mov	r9, r3
   13ec8:	46a2      	mov	sl, r4
   13eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13ecc:	4663      	mov	r3, ip
   13ece:	4333      	orrs	r3, r6
   13ed0:	d1f7      	bne.n	13ec2 <__eqdf2+0x36>
   13ed2:	42ac      	cmp	r4, r5
   13ed4:	d1f5      	bne.n	13ec2 <__eqdf2+0x36>
   13ed6:	433a      	orrs	r2, r7
   13ed8:	d1f3      	bne.n	13ec2 <__eqdf2+0x36>
   13eda:	2001      	movs	r0, #1
   13edc:	42be      	cmp	r6, r7
   13ede:	d1f0      	bne.n	13ec2 <__eqdf2+0x36>
   13ee0:	45c8      	cmp	r8, r9
   13ee2:	d1ee      	bne.n	13ec2 <__eqdf2+0x36>
   13ee4:	4551      	cmp	r1, sl
   13ee6:	d007      	beq.n	13ef8 <__eqdf2+0x6c>
   13ee8:	2d00      	cmp	r5, #0
   13eea:	d1ea      	bne.n	13ec2 <__eqdf2+0x36>
   13eec:	4663      	mov	r3, ip
   13eee:	431e      	orrs	r6, r3
   13ef0:	0030      	movs	r0, r6
   13ef2:	1e46      	subs	r6, r0, #1
   13ef4:	41b0      	sbcs	r0, r6
   13ef6:	e7e4      	b.n	13ec2 <__eqdf2+0x36>
   13ef8:	2000      	movs	r0, #0
   13efa:	e7e2      	b.n	13ec2 <__eqdf2+0x36>
   13efc:	000007ff 	.word	0x000007ff

00013f00 <__gedf2>:
   13f00:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f02:	4645      	mov	r5, r8
   13f04:	46de      	mov	lr, fp
   13f06:	4657      	mov	r7, sl
   13f08:	464e      	mov	r6, r9
   13f0a:	b5e0      	push	{r5, r6, r7, lr}
   13f0c:	031f      	lsls	r7, r3, #12
   13f0e:	0b3d      	lsrs	r5, r7, #12
   13f10:	4f2c      	ldr	r7, [pc, #176]	; (13fc4 <__gedf2+0xc4>)
   13f12:	030e      	lsls	r6, r1, #12
   13f14:	004c      	lsls	r4, r1, #1
   13f16:	46ab      	mov	fp, r5
   13f18:	005d      	lsls	r5, r3, #1
   13f1a:	4684      	mov	ip, r0
   13f1c:	0b36      	lsrs	r6, r6, #12
   13f1e:	0d64      	lsrs	r4, r4, #21
   13f20:	0fc9      	lsrs	r1, r1, #31
   13f22:	4690      	mov	r8, r2
   13f24:	0d6d      	lsrs	r5, r5, #21
   13f26:	0fdb      	lsrs	r3, r3, #31
   13f28:	42bc      	cmp	r4, r7
   13f2a:	d02a      	beq.n	13f82 <__gedf2+0x82>
   13f2c:	4f25      	ldr	r7, [pc, #148]	; (13fc4 <__gedf2+0xc4>)
   13f2e:	42bd      	cmp	r5, r7
   13f30:	d02d      	beq.n	13f8e <__gedf2+0x8e>
   13f32:	2c00      	cmp	r4, #0
   13f34:	d10f      	bne.n	13f56 <__gedf2+0x56>
   13f36:	4330      	orrs	r0, r6
   13f38:	0007      	movs	r7, r0
   13f3a:	4681      	mov	r9, r0
   13f3c:	4278      	negs	r0, r7
   13f3e:	4178      	adcs	r0, r7
   13f40:	b2c0      	uxtb	r0, r0
   13f42:	2d00      	cmp	r5, #0
   13f44:	d117      	bne.n	13f76 <__gedf2+0x76>
   13f46:	465f      	mov	r7, fp
   13f48:	433a      	orrs	r2, r7
   13f4a:	d114      	bne.n	13f76 <__gedf2+0x76>
   13f4c:	464b      	mov	r3, r9
   13f4e:	2000      	movs	r0, #0
   13f50:	2b00      	cmp	r3, #0
   13f52:	d00a      	beq.n	13f6a <__gedf2+0x6a>
   13f54:	e006      	b.n	13f64 <__gedf2+0x64>
   13f56:	2d00      	cmp	r5, #0
   13f58:	d102      	bne.n	13f60 <__gedf2+0x60>
   13f5a:	4658      	mov	r0, fp
   13f5c:	4302      	orrs	r2, r0
   13f5e:	d001      	beq.n	13f64 <__gedf2+0x64>
   13f60:	4299      	cmp	r1, r3
   13f62:	d018      	beq.n	13f96 <__gedf2+0x96>
   13f64:	4248      	negs	r0, r1
   13f66:	2101      	movs	r1, #1
   13f68:	4308      	orrs	r0, r1
   13f6a:	bc3c      	pop	{r2, r3, r4, r5}
   13f6c:	4690      	mov	r8, r2
   13f6e:	4699      	mov	r9, r3
   13f70:	46a2      	mov	sl, r4
   13f72:	46ab      	mov	fp, r5
   13f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f76:	2800      	cmp	r0, #0
   13f78:	d0f2      	beq.n	13f60 <__gedf2+0x60>
   13f7a:	2001      	movs	r0, #1
   13f7c:	3b01      	subs	r3, #1
   13f7e:	4318      	orrs	r0, r3
   13f80:	e7f3      	b.n	13f6a <__gedf2+0x6a>
   13f82:	0037      	movs	r7, r6
   13f84:	4307      	orrs	r7, r0
   13f86:	d0d1      	beq.n	13f2c <__gedf2+0x2c>
   13f88:	2002      	movs	r0, #2
   13f8a:	4240      	negs	r0, r0
   13f8c:	e7ed      	b.n	13f6a <__gedf2+0x6a>
   13f8e:	465f      	mov	r7, fp
   13f90:	4317      	orrs	r7, r2
   13f92:	d0ce      	beq.n	13f32 <__gedf2+0x32>
   13f94:	e7f8      	b.n	13f88 <__gedf2+0x88>
   13f96:	42ac      	cmp	r4, r5
   13f98:	dce4      	bgt.n	13f64 <__gedf2+0x64>
   13f9a:	da03      	bge.n	13fa4 <__gedf2+0xa4>
   13f9c:	1e48      	subs	r0, r1, #1
   13f9e:	2101      	movs	r1, #1
   13fa0:	4308      	orrs	r0, r1
   13fa2:	e7e2      	b.n	13f6a <__gedf2+0x6a>
   13fa4:	455e      	cmp	r6, fp
   13fa6:	d8dd      	bhi.n	13f64 <__gedf2+0x64>
   13fa8:	d006      	beq.n	13fb8 <__gedf2+0xb8>
   13faa:	2000      	movs	r0, #0
   13fac:	455e      	cmp	r6, fp
   13fae:	d2dc      	bcs.n	13f6a <__gedf2+0x6a>
   13fb0:	2301      	movs	r3, #1
   13fb2:	1e48      	subs	r0, r1, #1
   13fb4:	4318      	orrs	r0, r3
   13fb6:	e7d8      	b.n	13f6a <__gedf2+0x6a>
   13fb8:	45c4      	cmp	ip, r8
   13fba:	d8d3      	bhi.n	13f64 <__gedf2+0x64>
   13fbc:	2000      	movs	r0, #0
   13fbe:	45c4      	cmp	ip, r8
   13fc0:	d3f6      	bcc.n	13fb0 <__gedf2+0xb0>
   13fc2:	e7d2      	b.n	13f6a <__gedf2+0x6a>
   13fc4:	000007ff 	.word	0x000007ff

00013fc8 <__ledf2>:
   13fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13fca:	464e      	mov	r6, r9
   13fcc:	4645      	mov	r5, r8
   13fce:	46de      	mov	lr, fp
   13fd0:	4657      	mov	r7, sl
   13fd2:	005c      	lsls	r4, r3, #1
   13fd4:	b5e0      	push	{r5, r6, r7, lr}
   13fd6:	031f      	lsls	r7, r3, #12
   13fd8:	0fdb      	lsrs	r3, r3, #31
   13fda:	4699      	mov	r9, r3
   13fdc:	4b2a      	ldr	r3, [pc, #168]	; (14088 <__ledf2+0xc0>)
   13fde:	030e      	lsls	r6, r1, #12
   13fe0:	004d      	lsls	r5, r1, #1
   13fe2:	0fc9      	lsrs	r1, r1, #31
   13fe4:	4684      	mov	ip, r0
   13fe6:	0b36      	lsrs	r6, r6, #12
   13fe8:	0d6d      	lsrs	r5, r5, #21
   13fea:	468b      	mov	fp, r1
   13fec:	4690      	mov	r8, r2
   13fee:	0b3f      	lsrs	r7, r7, #12
   13ff0:	0d64      	lsrs	r4, r4, #21
   13ff2:	429d      	cmp	r5, r3
   13ff4:	d020      	beq.n	14038 <__ledf2+0x70>
   13ff6:	4b24      	ldr	r3, [pc, #144]	; (14088 <__ledf2+0xc0>)
   13ff8:	429c      	cmp	r4, r3
   13ffa:	d022      	beq.n	14042 <__ledf2+0x7a>
   13ffc:	2d00      	cmp	r5, #0
   13ffe:	d112      	bne.n	14026 <__ledf2+0x5e>
   14000:	4330      	orrs	r0, r6
   14002:	4243      	negs	r3, r0
   14004:	4143      	adcs	r3, r0
   14006:	b2db      	uxtb	r3, r3
   14008:	2c00      	cmp	r4, #0
   1400a:	d01f      	beq.n	1404c <__ledf2+0x84>
   1400c:	2b00      	cmp	r3, #0
   1400e:	d00c      	beq.n	1402a <__ledf2+0x62>
   14010:	464b      	mov	r3, r9
   14012:	2001      	movs	r0, #1
   14014:	3b01      	subs	r3, #1
   14016:	4303      	orrs	r3, r0
   14018:	0018      	movs	r0, r3
   1401a:	bc3c      	pop	{r2, r3, r4, r5}
   1401c:	4690      	mov	r8, r2
   1401e:	4699      	mov	r9, r3
   14020:	46a2      	mov	sl, r4
   14022:	46ab      	mov	fp, r5
   14024:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14026:	2c00      	cmp	r4, #0
   14028:	d016      	beq.n	14058 <__ledf2+0x90>
   1402a:	45cb      	cmp	fp, r9
   1402c:	d017      	beq.n	1405e <__ledf2+0x96>
   1402e:	465b      	mov	r3, fp
   14030:	4259      	negs	r1, r3
   14032:	2301      	movs	r3, #1
   14034:	430b      	orrs	r3, r1
   14036:	e7ef      	b.n	14018 <__ledf2+0x50>
   14038:	0031      	movs	r1, r6
   1403a:	2302      	movs	r3, #2
   1403c:	4301      	orrs	r1, r0
   1403e:	d1eb      	bne.n	14018 <__ledf2+0x50>
   14040:	e7d9      	b.n	13ff6 <__ledf2+0x2e>
   14042:	0039      	movs	r1, r7
   14044:	2302      	movs	r3, #2
   14046:	4311      	orrs	r1, r2
   14048:	d1e6      	bne.n	14018 <__ledf2+0x50>
   1404a:	e7d7      	b.n	13ffc <__ledf2+0x34>
   1404c:	433a      	orrs	r2, r7
   1404e:	d1dd      	bne.n	1400c <__ledf2+0x44>
   14050:	2300      	movs	r3, #0
   14052:	2800      	cmp	r0, #0
   14054:	d0e0      	beq.n	14018 <__ledf2+0x50>
   14056:	e7ea      	b.n	1402e <__ledf2+0x66>
   14058:	433a      	orrs	r2, r7
   1405a:	d1e6      	bne.n	1402a <__ledf2+0x62>
   1405c:	e7e7      	b.n	1402e <__ledf2+0x66>
   1405e:	42a5      	cmp	r5, r4
   14060:	dce5      	bgt.n	1402e <__ledf2+0x66>
   14062:	db05      	blt.n	14070 <__ledf2+0xa8>
   14064:	42be      	cmp	r6, r7
   14066:	d8e2      	bhi.n	1402e <__ledf2+0x66>
   14068:	d007      	beq.n	1407a <__ledf2+0xb2>
   1406a:	2300      	movs	r3, #0
   1406c:	42be      	cmp	r6, r7
   1406e:	d2d3      	bcs.n	14018 <__ledf2+0x50>
   14070:	4659      	mov	r1, fp
   14072:	2301      	movs	r3, #1
   14074:	3901      	subs	r1, #1
   14076:	430b      	orrs	r3, r1
   14078:	e7ce      	b.n	14018 <__ledf2+0x50>
   1407a:	45c4      	cmp	ip, r8
   1407c:	d8d7      	bhi.n	1402e <__ledf2+0x66>
   1407e:	2300      	movs	r3, #0
   14080:	45c4      	cmp	ip, r8
   14082:	d3f5      	bcc.n	14070 <__ledf2+0xa8>
   14084:	e7c8      	b.n	14018 <__ledf2+0x50>
   14086:	46c0      	nop			; (mov r8, r8)
   14088:	000007ff 	.word	0x000007ff

0001408c <__aeabi_dmul>:
   1408c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1408e:	4657      	mov	r7, sl
   14090:	4645      	mov	r5, r8
   14092:	46de      	mov	lr, fp
   14094:	464e      	mov	r6, r9
   14096:	b5e0      	push	{r5, r6, r7, lr}
   14098:	030c      	lsls	r4, r1, #12
   1409a:	4698      	mov	r8, r3
   1409c:	004e      	lsls	r6, r1, #1
   1409e:	0b23      	lsrs	r3, r4, #12
   140a0:	b087      	sub	sp, #28
   140a2:	0007      	movs	r7, r0
   140a4:	4692      	mov	sl, r2
   140a6:	469b      	mov	fp, r3
   140a8:	0d76      	lsrs	r6, r6, #21
   140aa:	0fcd      	lsrs	r5, r1, #31
   140ac:	2e00      	cmp	r6, #0
   140ae:	d06b      	beq.n	14188 <__aeabi_dmul+0xfc>
   140b0:	4b6d      	ldr	r3, [pc, #436]	; (14268 <__aeabi_dmul+0x1dc>)
   140b2:	429e      	cmp	r6, r3
   140b4:	d035      	beq.n	14122 <__aeabi_dmul+0x96>
   140b6:	2480      	movs	r4, #128	; 0x80
   140b8:	465b      	mov	r3, fp
   140ba:	0f42      	lsrs	r2, r0, #29
   140bc:	0424      	lsls	r4, r4, #16
   140be:	00db      	lsls	r3, r3, #3
   140c0:	4314      	orrs	r4, r2
   140c2:	431c      	orrs	r4, r3
   140c4:	00c3      	lsls	r3, r0, #3
   140c6:	4699      	mov	r9, r3
   140c8:	4b68      	ldr	r3, [pc, #416]	; (1426c <__aeabi_dmul+0x1e0>)
   140ca:	46a3      	mov	fp, r4
   140cc:	469c      	mov	ip, r3
   140ce:	2300      	movs	r3, #0
   140d0:	2700      	movs	r7, #0
   140d2:	4466      	add	r6, ip
   140d4:	9302      	str	r3, [sp, #8]
   140d6:	4643      	mov	r3, r8
   140d8:	031c      	lsls	r4, r3, #12
   140da:	005a      	lsls	r2, r3, #1
   140dc:	0fdb      	lsrs	r3, r3, #31
   140de:	4650      	mov	r0, sl
   140e0:	0b24      	lsrs	r4, r4, #12
   140e2:	0d52      	lsrs	r2, r2, #21
   140e4:	4698      	mov	r8, r3
   140e6:	d100      	bne.n	140ea <__aeabi_dmul+0x5e>
   140e8:	e076      	b.n	141d8 <__aeabi_dmul+0x14c>
   140ea:	4b5f      	ldr	r3, [pc, #380]	; (14268 <__aeabi_dmul+0x1dc>)
   140ec:	429a      	cmp	r2, r3
   140ee:	d06d      	beq.n	141cc <__aeabi_dmul+0x140>
   140f0:	2380      	movs	r3, #128	; 0x80
   140f2:	0f41      	lsrs	r1, r0, #29
   140f4:	041b      	lsls	r3, r3, #16
   140f6:	430b      	orrs	r3, r1
   140f8:	495c      	ldr	r1, [pc, #368]	; (1426c <__aeabi_dmul+0x1e0>)
   140fa:	00e4      	lsls	r4, r4, #3
   140fc:	468c      	mov	ip, r1
   140fe:	431c      	orrs	r4, r3
   14100:	00c3      	lsls	r3, r0, #3
   14102:	2000      	movs	r0, #0
   14104:	4462      	add	r2, ip
   14106:	4641      	mov	r1, r8
   14108:	18b6      	adds	r6, r6, r2
   1410a:	4069      	eors	r1, r5
   1410c:	1c72      	adds	r2, r6, #1
   1410e:	9101      	str	r1, [sp, #4]
   14110:	4694      	mov	ip, r2
   14112:	4307      	orrs	r7, r0
   14114:	2f0f      	cmp	r7, #15
   14116:	d900      	bls.n	1411a <__aeabi_dmul+0x8e>
   14118:	e0b0      	b.n	1427c <__aeabi_dmul+0x1f0>
   1411a:	4a55      	ldr	r2, [pc, #340]	; (14270 <__aeabi_dmul+0x1e4>)
   1411c:	00bf      	lsls	r7, r7, #2
   1411e:	59d2      	ldr	r2, [r2, r7]
   14120:	4697      	mov	pc, r2
   14122:	465b      	mov	r3, fp
   14124:	4303      	orrs	r3, r0
   14126:	4699      	mov	r9, r3
   14128:	d000      	beq.n	1412c <__aeabi_dmul+0xa0>
   1412a:	e087      	b.n	1423c <__aeabi_dmul+0x1b0>
   1412c:	2300      	movs	r3, #0
   1412e:	469b      	mov	fp, r3
   14130:	3302      	adds	r3, #2
   14132:	2708      	movs	r7, #8
   14134:	9302      	str	r3, [sp, #8]
   14136:	e7ce      	b.n	140d6 <__aeabi_dmul+0x4a>
   14138:	4642      	mov	r2, r8
   1413a:	9201      	str	r2, [sp, #4]
   1413c:	2802      	cmp	r0, #2
   1413e:	d067      	beq.n	14210 <__aeabi_dmul+0x184>
   14140:	2803      	cmp	r0, #3
   14142:	d100      	bne.n	14146 <__aeabi_dmul+0xba>
   14144:	e20e      	b.n	14564 <__aeabi_dmul+0x4d8>
   14146:	2801      	cmp	r0, #1
   14148:	d000      	beq.n	1414c <__aeabi_dmul+0xc0>
   1414a:	e162      	b.n	14412 <__aeabi_dmul+0x386>
   1414c:	2300      	movs	r3, #0
   1414e:	2400      	movs	r4, #0
   14150:	2200      	movs	r2, #0
   14152:	4699      	mov	r9, r3
   14154:	9901      	ldr	r1, [sp, #4]
   14156:	4001      	ands	r1, r0
   14158:	b2cd      	uxtb	r5, r1
   1415a:	2100      	movs	r1, #0
   1415c:	0312      	lsls	r2, r2, #12
   1415e:	0d0b      	lsrs	r3, r1, #20
   14160:	0b12      	lsrs	r2, r2, #12
   14162:	051b      	lsls	r3, r3, #20
   14164:	4313      	orrs	r3, r2
   14166:	4a43      	ldr	r2, [pc, #268]	; (14274 <__aeabi_dmul+0x1e8>)
   14168:	0524      	lsls	r4, r4, #20
   1416a:	4013      	ands	r3, r2
   1416c:	431c      	orrs	r4, r3
   1416e:	0064      	lsls	r4, r4, #1
   14170:	07ed      	lsls	r5, r5, #31
   14172:	0864      	lsrs	r4, r4, #1
   14174:	432c      	orrs	r4, r5
   14176:	4648      	mov	r0, r9
   14178:	0021      	movs	r1, r4
   1417a:	b007      	add	sp, #28
   1417c:	bc3c      	pop	{r2, r3, r4, r5}
   1417e:	4690      	mov	r8, r2
   14180:	4699      	mov	r9, r3
   14182:	46a2      	mov	sl, r4
   14184:	46ab      	mov	fp, r5
   14186:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14188:	4303      	orrs	r3, r0
   1418a:	4699      	mov	r9, r3
   1418c:	d04f      	beq.n	1422e <__aeabi_dmul+0x1a2>
   1418e:	465b      	mov	r3, fp
   14190:	2b00      	cmp	r3, #0
   14192:	d100      	bne.n	14196 <__aeabi_dmul+0x10a>
   14194:	e189      	b.n	144aa <__aeabi_dmul+0x41e>
   14196:	4658      	mov	r0, fp
   14198:	f000 fe98 	bl	14ecc <__clzsi2>
   1419c:	0003      	movs	r3, r0
   1419e:	3b0b      	subs	r3, #11
   141a0:	2b1c      	cmp	r3, #28
   141a2:	dd00      	ble.n	141a6 <__aeabi_dmul+0x11a>
   141a4:	e17a      	b.n	1449c <__aeabi_dmul+0x410>
   141a6:	221d      	movs	r2, #29
   141a8:	1ad3      	subs	r3, r2, r3
   141aa:	003a      	movs	r2, r7
   141ac:	0001      	movs	r1, r0
   141ae:	465c      	mov	r4, fp
   141b0:	40da      	lsrs	r2, r3
   141b2:	3908      	subs	r1, #8
   141b4:	408c      	lsls	r4, r1
   141b6:	0013      	movs	r3, r2
   141b8:	408f      	lsls	r7, r1
   141ba:	4323      	orrs	r3, r4
   141bc:	469b      	mov	fp, r3
   141be:	46b9      	mov	r9, r7
   141c0:	2300      	movs	r3, #0
   141c2:	4e2d      	ldr	r6, [pc, #180]	; (14278 <__aeabi_dmul+0x1ec>)
   141c4:	2700      	movs	r7, #0
   141c6:	1a36      	subs	r6, r6, r0
   141c8:	9302      	str	r3, [sp, #8]
   141ca:	e784      	b.n	140d6 <__aeabi_dmul+0x4a>
   141cc:	4653      	mov	r3, sl
   141ce:	4323      	orrs	r3, r4
   141d0:	d12a      	bne.n	14228 <__aeabi_dmul+0x19c>
   141d2:	2400      	movs	r4, #0
   141d4:	2002      	movs	r0, #2
   141d6:	e796      	b.n	14106 <__aeabi_dmul+0x7a>
   141d8:	4653      	mov	r3, sl
   141da:	4323      	orrs	r3, r4
   141dc:	d020      	beq.n	14220 <__aeabi_dmul+0x194>
   141de:	2c00      	cmp	r4, #0
   141e0:	d100      	bne.n	141e4 <__aeabi_dmul+0x158>
   141e2:	e157      	b.n	14494 <__aeabi_dmul+0x408>
   141e4:	0020      	movs	r0, r4
   141e6:	f000 fe71 	bl	14ecc <__clzsi2>
   141ea:	0003      	movs	r3, r0
   141ec:	3b0b      	subs	r3, #11
   141ee:	2b1c      	cmp	r3, #28
   141f0:	dd00      	ble.n	141f4 <__aeabi_dmul+0x168>
   141f2:	e149      	b.n	14488 <__aeabi_dmul+0x3fc>
   141f4:	211d      	movs	r1, #29
   141f6:	1acb      	subs	r3, r1, r3
   141f8:	4651      	mov	r1, sl
   141fa:	0002      	movs	r2, r0
   141fc:	40d9      	lsrs	r1, r3
   141fe:	4653      	mov	r3, sl
   14200:	3a08      	subs	r2, #8
   14202:	4094      	lsls	r4, r2
   14204:	4093      	lsls	r3, r2
   14206:	430c      	orrs	r4, r1
   14208:	4a1b      	ldr	r2, [pc, #108]	; (14278 <__aeabi_dmul+0x1ec>)
   1420a:	1a12      	subs	r2, r2, r0
   1420c:	2000      	movs	r0, #0
   1420e:	e77a      	b.n	14106 <__aeabi_dmul+0x7a>
   14210:	2501      	movs	r5, #1
   14212:	9b01      	ldr	r3, [sp, #4]
   14214:	4c14      	ldr	r4, [pc, #80]	; (14268 <__aeabi_dmul+0x1dc>)
   14216:	401d      	ands	r5, r3
   14218:	2300      	movs	r3, #0
   1421a:	2200      	movs	r2, #0
   1421c:	4699      	mov	r9, r3
   1421e:	e79c      	b.n	1415a <__aeabi_dmul+0xce>
   14220:	2400      	movs	r4, #0
   14222:	2200      	movs	r2, #0
   14224:	2001      	movs	r0, #1
   14226:	e76e      	b.n	14106 <__aeabi_dmul+0x7a>
   14228:	4653      	mov	r3, sl
   1422a:	2003      	movs	r0, #3
   1422c:	e76b      	b.n	14106 <__aeabi_dmul+0x7a>
   1422e:	2300      	movs	r3, #0
   14230:	469b      	mov	fp, r3
   14232:	3301      	adds	r3, #1
   14234:	2704      	movs	r7, #4
   14236:	2600      	movs	r6, #0
   14238:	9302      	str	r3, [sp, #8]
   1423a:	e74c      	b.n	140d6 <__aeabi_dmul+0x4a>
   1423c:	2303      	movs	r3, #3
   1423e:	4681      	mov	r9, r0
   14240:	270c      	movs	r7, #12
   14242:	9302      	str	r3, [sp, #8]
   14244:	e747      	b.n	140d6 <__aeabi_dmul+0x4a>
   14246:	2280      	movs	r2, #128	; 0x80
   14248:	2300      	movs	r3, #0
   1424a:	2500      	movs	r5, #0
   1424c:	0312      	lsls	r2, r2, #12
   1424e:	4699      	mov	r9, r3
   14250:	4c05      	ldr	r4, [pc, #20]	; (14268 <__aeabi_dmul+0x1dc>)
   14252:	e782      	b.n	1415a <__aeabi_dmul+0xce>
   14254:	465c      	mov	r4, fp
   14256:	464b      	mov	r3, r9
   14258:	9802      	ldr	r0, [sp, #8]
   1425a:	e76f      	b.n	1413c <__aeabi_dmul+0xb0>
   1425c:	465c      	mov	r4, fp
   1425e:	464b      	mov	r3, r9
   14260:	9501      	str	r5, [sp, #4]
   14262:	9802      	ldr	r0, [sp, #8]
   14264:	e76a      	b.n	1413c <__aeabi_dmul+0xb0>
   14266:	46c0      	nop			; (mov r8, r8)
   14268:	000007ff 	.word	0x000007ff
   1426c:	fffffc01 	.word	0xfffffc01
   14270:	00016eac 	.word	0x00016eac
   14274:	800fffff 	.word	0x800fffff
   14278:	fffffc0d 	.word	0xfffffc0d
   1427c:	464a      	mov	r2, r9
   1427e:	4649      	mov	r1, r9
   14280:	0c17      	lsrs	r7, r2, #16
   14282:	0c1a      	lsrs	r2, r3, #16
   14284:	041b      	lsls	r3, r3, #16
   14286:	0c1b      	lsrs	r3, r3, #16
   14288:	0408      	lsls	r0, r1, #16
   1428a:	0019      	movs	r1, r3
   1428c:	0c00      	lsrs	r0, r0, #16
   1428e:	4341      	muls	r1, r0
   14290:	0015      	movs	r5, r2
   14292:	4688      	mov	r8, r1
   14294:	0019      	movs	r1, r3
   14296:	437d      	muls	r5, r7
   14298:	4379      	muls	r1, r7
   1429a:	9503      	str	r5, [sp, #12]
   1429c:	4689      	mov	r9, r1
   1429e:	0029      	movs	r1, r5
   142a0:	0015      	movs	r5, r2
   142a2:	4345      	muls	r5, r0
   142a4:	444d      	add	r5, r9
   142a6:	9502      	str	r5, [sp, #8]
   142a8:	4645      	mov	r5, r8
   142aa:	0c2d      	lsrs	r5, r5, #16
   142ac:	46aa      	mov	sl, r5
   142ae:	9d02      	ldr	r5, [sp, #8]
   142b0:	4455      	add	r5, sl
   142b2:	45a9      	cmp	r9, r5
   142b4:	d906      	bls.n	142c4 <__aeabi_dmul+0x238>
   142b6:	468a      	mov	sl, r1
   142b8:	2180      	movs	r1, #128	; 0x80
   142ba:	0249      	lsls	r1, r1, #9
   142bc:	4689      	mov	r9, r1
   142be:	44ca      	add	sl, r9
   142c0:	4651      	mov	r1, sl
   142c2:	9103      	str	r1, [sp, #12]
   142c4:	0c29      	lsrs	r1, r5, #16
   142c6:	9104      	str	r1, [sp, #16]
   142c8:	4641      	mov	r1, r8
   142ca:	0409      	lsls	r1, r1, #16
   142cc:	042d      	lsls	r5, r5, #16
   142ce:	0c09      	lsrs	r1, r1, #16
   142d0:	4688      	mov	r8, r1
   142d2:	0029      	movs	r1, r5
   142d4:	0c25      	lsrs	r5, r4, #16
   142d6:	0424      	lsls	r4, r4, #16
   142d8:	4441      	add	r1, r8
   142da:	0c24      	lsrs	r4, r4, #16
   142dc:	9105      	str	r1, [sp, #20]
   142de:	0021      	movs	r1, r4
   142e0:	4341      	muls	r1, r0
   142e2:	4688      	mov	r8, r1
   142e4:	0021      	movs	r1, r4
   142e6:	4379      	muls	r1, r7
   142e8:	468a      	mov	sl, r1
   142ea:	4368      	muls	r0, r5
   142ec:	4641      	mov	r1, r8
   142ee:	4450      	add	r0, sl
   142f0:	4681      	mov	r9, r0
   142f2:	0c08      	lsrs	r0, r1, #16
   142f4:	4448      	add	r0, r9
   142f6:	436f      	muls	r7, r5
   142f8:	4582      	cmp	sl, r0
   142fa:	d903      	bls.n	14304 <__aeabi_dmul+0x278>
   142fc:	2180      	movs	r1, #128	; 0x80
   142fe:	0249      	lsls	r1, r1, #9
   14300:	4689      	mov	r9, r1
   14302:	444f      	add	r7, r9
   14304:	0c01      	lsrs	r1, r0, #16
   14306:	4689      	mov	r9, r1
   14308:	0039      	movs	r1, r7
   1430a:	4449      	add	r1, r9
   1430c:	9102      	str	r1, [sp, #8]
   1430e:	4641      	mov	r1, r8
   14310:	040f      	lsls	r7, r1, #16
   14312:	9904      	ldr	r1, [sp, #16]
   14314:	0c3f      	lsrs	r7, r7, #16
   14316:	4688      	mov	r8, r1
   14318:	0400      	lsls	r0, r0, #16
   1431a:	19c0      	adds	r0, r0, r7
   1431c:	4480      	add	r8, r0
   1431e:	4641      	mov	r1, r8
   14320:	9104      	str	r1, [sp, #16]
   14322:	4659      	mov	r1, fp
   14324:	0c0f      	lsrs	r7, r1, #16
   14326:	0409      	lsls	r1, r1, #16
   14328:	0c09      	lsrs	r1, r1, #16
   1432a:	4688      	mov	r8, r1
   1432c:	4359      	muls	r1, r3
   1432e:	468a      	mov	sl, r1
   14330:	0039      	movs	r1, r7
   14332:	4351      	muls	r1, r2
   14334:	4689      	mov	r9, r1
   14336:	4641      	mov	r1, r8
   14338:	434a      	muls	r2, r1
   1433a:	4651      	mov	r1, sl
   1433c:	0c09      	lsrs	r1, r1, #16
   1433e:	468b      	mov	fp, r1
   14340:	437b      	muls	r3, r7
   14342:	18d2      	adds	r2, r2, r3
   14344:	445a      	add	r2, fp
   14346:	4293      	cmp	r3, r2
   14348:	d903      	bls.n	14352 <__aeabi_dmul+0x2c6>
   1434a:	2380      	movs	r3, #128	; 0x80
   1434c:	025b      	lsls	r3, r3, #9
   1434e:	469b      	mov	fp, r3
   14350:	44d9      	add	r9, fp
   14352:	4651      	mov	r1, sl
   14354:	0409      	lsls	r1, r1, #16
   14356:	0c09      	lsrs	r1, r1, #16
   14358:	468a      	mov	sl, r1
   1435a:	4641      	mov	r1, r8
   1435c:	4361      	muls	r1, r4
   1435e:	437c      	muls	r4, r7
   14360:	0c13      	lsrs	r3, r2, #16
   14362:	0412      	lsls	r2, r2, #16
   14364:	444b      	add	r3, r9
   14366:	4452      	add	r2, sl
   14368:	46a1      	mov	r9, r4
   1436a:	468a      	mov	sl, r1
   1436c:	003c      	movs	r4, r7
   1436e:	4641      	mov	r1, r8
   14370:	436c      	muls	r4, r5
   14372:	434d      	muls	r5, r1
   14374:	4651      	mov	r1, sl
   14376:	444d      	add	r5, r9
   14378:	0c0f      	lsrs	r7, r1, #16
   1437a:	197d      	adds	r5, r7, r5
   1437c:	45a9      	cmp	r9, r5
   1437e:	d903      	bls.n	14388 <__aeabi_dmul+0x2fc>
   14380:	2180      	movs	r1, #128	; 0x80
   14382:	0249      	lsls	r1, r1, #9
   14384:	4688      	mov	r8, r1
   14386:	4444      	add	r4, r8
   14388:	9f04      	ldr	r7, [sp, #16]
   1438a:	9903      	ldr	r1, [sp, #12]
   1438c:	46b8      	mov	r8, r7
   1438e:	4441      	add	r1, r8
   14390:	468b      	mov	fp, r1
   14392:	4583      	cmp	fp, r0
   14394:	4180      	sbcs	r0, r0
   14396:	4241      	negs	r1, r0
   14398:	4688      	mov	r8, r1
   1439a:	4651      	mov	r1, sl
   1439c:	0408      	lsls	r0, r1, #16
   1439e:	042f      	lsls	r7, r5, #16
   143a0:	0c00      	lsrs	r0, r0, #16
   143a2:	183f      	adds	r7, r7, r0
   143a4:	4658      	mov	r0, fp
   143a6:	9902      	ldr	r1, [sp, #8]
   143a8:	1810      	adds	r0, r2, r0
   143aa:	4689      	mov	r9, r1
   143ac:	4290      	cmp	r0, r2
   143ae:	4192      	sbcs	r2, r2
   143b0:	444f      	add	r7, r9
   143b2:	46ba      	mov	sl, r7
   143b4:	4252      	negs	r2, r2
   143b6:	4699      	mov	r9, r3
   143b8:	4693      	mov	fp, r2
   143ba:	44c2      	add	sl, r8
   143bc:	44d1      	add	r9, sl
   143be:	44cb      	add	fp, r9
   143c0:	428f      	cmp	r7, r1
   143c2:	41bf      	sbcs	r7, r7
   143c4:	45c2      	cmp	sl, r8
   143c6:	4189      	sbcs	r1, r1
   143c8:	4599      	cmp	r9, r3
   143ca:	419b      	sbcs	r3, r3
   143cc:	4593      	cmp	fp, r2
   143ce:	4192      	sbcs	r2, r2
   143d0:	427f      	negs	r7, r7
   143d2:	4249      	negs	r1, r1
   143d4:	0c2d      	lsrs	r5, r5, #16
   143d6:	4252      	negs	r2, r2
   143d8:	430f      	orrs	r7, r1
   143da:	425b      	negs	r3, r3
   143dc:	4313      	orrs	r3, r2
   143de:	197f      	adds	r7, r7, r5
   143e0:	18ff      	adds	r7, r7, r3
   143e2:	465b      	mov	r3, fp
   143e4:	193c      	adds	r4, r7, r4
   143e6:	0ddb      	lsrs	r3, r3, #23
   143e8:	9a05      	ldr	r2, [sp, #20]
   143ea:	0264      	lsls	r4, r4, #9
   143ec:	431c      	orrs	r4, r3
   143ee:	0243      	lsls	r3, r0, #9
   143f0:	4313      	orrs	r3, r2
   143f2:	1e5d      	subs	r5, r3, #1
   143f4:	41ab      	sbcs	r3, r5
   143f6:	465a      	mov	r2, fp
   143f8:	0dc0      	lsrs	r0, r0, #23
   143fa:	4303      	orrs	r3, r0
   143fc:	0252      	lsls	r2, r2, #9
   143fe:	4313      	orrs	r3, r2
   14400:	01e2      	lsls	r2, r4, #7
   14402:	d556      	bpl.n	144b2 <__aeabi_dmul+0x426>
   14404:	2001      	movs	r0, #1
   14406:	085a      	lsrs	r2, r3, #1
   14408:	4003      	ands	r3, r0
   1440a:	4313      	orrs	r3, r2
   1440c:	07e2      	lsls	r2, r4, #31
   1440e:	4313      	orrs	r3, r2
   14410:	0864      	lsrs	r4, r4, #1
   14412:	485a      	ldr	r0, [pc, #360]	; (1457c <__aeabi_dmul+0x4f0>)
   14414:	4460      	add	r0, ip
   14416:	2800      	cmp	r0, #0
   14418:	dd4d      	ble.n	144b6 <__aeabi_dmul+0x42a>
   1441a:	075a      	lsls	r2, r3, #29
   1441c:	d009      	beq.n	14432 <__aeabi_dmul+0x3a6>
   1441e:	220f      	movs	r2, #15
   14420:	401a      	ands	r2, r3
   14422:	2a04      	cmp	r2, #4
   14424:	d005      	beq.n	14432 <__aeabi_dmul+0x3a6>
   14426:	1d1a      	adds	r2, r3, #4
   14428:	429a      	cmp	r2, r3
   1442a:	419b      	sbcs	r3, r3
   1442c:	425b      	negs	r3, r3
   1442e:	18e4      	adds	r4, r4, r3
   14430:	0013      	movs	r3, r2
   14432:	01e2      	lsls	r2, r4, #7
   14434:	d504      	bpl.n	14440 <__aeabi_dmul+0x3b4>
   14436:	2080      	movs	r0, #128	; 0x80
   14438:	4a51      	ldr	r2, [pc, #324]	; (14580 <__aeabi_dmul+0x4f4>)
   1443a:	00c0      	lsls	r0, r0, #3
   1443c:	4014      	ands	r4, r2
   1443e:	4460      	add	r0, ip
   14440:	4a50      	ldr	r2, [pc, #320]	; (14584 <__aeabi_dmul+0x4f8>)
   14442:	4290      	cmp	r0, r2
   14444:	dd00      	ble.n	14448 <__aeabi_dmul+0x3bc>
   14446:	e6e3      	b.n	14210 <__aeabi_dmul+0x184>
   14448:	2501      	movs	r5, #1
   1444a:	08db      	lsrs	r3, r3, #3
   1444c:	0762      	lsls	r2, r4, #29
   1444e:	431a      	orrs	r2, r3
   14450:	0264      	lsls	r4, r4, #9
   14452:	9b01      	ldr	r3, [sp, #4]
   14454:	4691      	mov	r9, r2
   14456:	0b22      	lsrs	r2, r4, #12
   14458:	0544      	lsls	r4, r0, #21
   1445a:	0d64      	lsrs	r4, r4, #21
   1445c:	401d      	ands	r5, r3
   1445e:	e67c      	b.n	1415a <__aeabi_dmul+0xce>
   14460:	2280      	movs	r2, #128	; 0x80
   14462:	4659      	mov	r1, fp
   14464:	0312      	lsls	r2, r2, #12
   14466:	4211      	tst	r1, r2
   14468:	d008      	beq.n	1447c <__aeabi_dmul+0x3f0>
   1446a:	4214      	tst	r4, r2
   1446c:	d106      	bne.n	1447c <__aeabi_dmul+0x3f0>
   1446e:	4322      	orrs	r2, r4
   14470:	0312      	lsls	r2, r2, #12
   14472:	0b12      	lsrs	r2, r2, #12
   14474:	4645      	mov	r5, r8
   14476:	4699      	mov	r9, r3
   14478:	4c43      	ldr	r4, [pc, #268]	; (14588 <__aeabi_dmul+0x4fc>)
   1447a:	e66e      	b.n	1415a <__aeabi_dmul+0xce>
   1447c:	465b      	mov	r3, fp
   1447e:	431a      	orrs	r2, r3
   14480:	0312      	lsls	r2, r2, #12
   14482:	0b12      	lsrs	r2, r2, #12
   14484:	4c40      	ldr	r4, [pc, #256]	; (14588 <__aeabi_dmul+0x4fc>)
   14486:	e668      	b.n	1415a <__aeabi_dmul+0xce>
   14488:	0003      	movs	r3, r0
   1448a:	4654      	mov	r4, sl
   1448c:	3b28      	subs	r3, #40	; 0x28
   1448e:	409c      	lsls	r4, r3
   14490:	2300      	movs	r3, #0
   14492:	e6b9      	b.n	14208 <__aeabi_dmul+0x17c>
   14494:	f000 fd1a 	bl	14ecc <__clzsi2>
   14498:	3020      	adds	r0, #32
   1449a:	e6a6      	b.n	141ea <__aeabi_dmul+0x15e>
   1449c:	0003      	movs	r3, r0
   1449e:	3b28      	subs	r3, #40	; 0x28
   144a0:	409f      	lsls	r7, r3
   144a2:	2300      	movs	r3, #0
   144a4:	46bb      	mov	fp, r7
   144a6:	4699      	mov	r9, r3
   144a8:	e68a      	b.n	141c0 <__aeabi_dmul+0x134>
   144aa:	f000 fd0f 	bl	14ecc <__clzsi2>
   144ae:	3020      	adds	r0, #32
   144b0:	e674      	b.n	1419c <__aeabi_dmul+0x110>
   144b2:	46b4      	mov	ip, r6
   144b4:	e7ad      	b.n	14412 <__aeabi_dmul+0x386>
   144b6:	2501      	movs	r5, #1
   144b8:	1a2a      	subs	r2, r5, r0
   144ba:	2a38      	cmp	r2, #56	; 0x38
   144bc:	dd06      	ble.n	144cc <__aeabi_dmul+0x440>
   144be:	9b01      	ldr	r3, [sp, #4]
   144c0:	2400      	movs	r4, #0
   144c2:	401d      	ands	r5, r3
   144c4:	2300      	movs	r3, #0
   144c6:	2200      	movs	r2, #0
   144c8:	4699      	mov	r9, r3
   144ca:	e646      	b.n	1415a <__aeabi_dmul+0xce>
   144cc:	2a1f      	cmp	r2, #31
   144ce:	dc21      	bgt.n	14514 <__aeabi_dmul+0x488>
   144d0:	2520      	movs	r5, #32
   144d2:	0020      	movs	r0, r4
   144d4:	1aad      	subs	r5, r5, r2
   144d6:	001e      	movs	r6, r3
   144d8:	40ab      	lsls	r3, r5
   144da:	40a8      	lsls	r0, r5
   144dc:	40d6      	lsrs	r6, r2
   144de:	1e5d      	subs	r5, r3, #1
   144e0:	41ab      	sbcs	r3, r5
   144e2:	4330      	orrs	r0, r6
   144e4:	4318      	orrs	r0, r3
   144e6:	40d4      	lsrs	r4, r2
   144e8:	0743      	lsls	r3, r0, #29
   144ea:	d009      	beq.n	14500 <__aeabi_dmul+0x474>
   144ec:	230f      	movs	r3, #15
   144ee:	4003      	ands	r3, r0
   144f0:	2b04      	cmp	r3, #4
   144f2:	d005      	beq.n	14500 <__aeabi_dmul+0x474>
   144f4:	0003      	movs	r3, r0
   144f6:	1d18      	adds	r0, r3, #4
   144f8:	4298      	cmp	r0, r3
   144fa:	419b      	sbcs	r3, r3
   144fc:	425b      	negs	r3, r3
   144fe:	18e4      	adds	r4, r4, r3
   14500:	0223      	lsls	r3, r4, #8
   14502:	d521      	bpl.n	14548 <__aeabi_dmul+0x4bc>
   14504:	2501      	movs	r5, #1
   14506:	9b01      	ldr	r3, [sp, #4]
   14508:	2401      	movs	r4, #1
   1450a:	401d      	ands	r5, r3
   1450c:	2300      	movs	r3, #0
   1450e:	2200      	movs	r2, #0
   14510:	4699      	mov	r9, r3
   14512:	e622      	b.n	1415a <__aeabi_dmul+0xce>
   14514:	251f      	movs	r5, #31
   14516:	0021      	movs	r1, r4
   14518:	426d      	negs	r5, r5
   1451a:	1a28      	subs	r0, r5, r0
   1451c:	40c1      	lsrs	r1, r0
   1451e:	0008      	movs	r0, r1
   14520:	2a20      	cmp	r2, #32
   14522:	d01d      	beq.n	14560 <__aeabi_dmul+0x4d4>
   14524:	355f      	adds	r5, #95	; 0x5f
   14526:	1aaa      	subs	r2, r5, r2
   14528:	4094      	lsls	r4, r2
   1452a:	4323      	orrs	r3, r4
   1452c:	1e5c      	subs	r4, r3, #1
   1452e:	41a3      	sbcs	r3, r4
   14530:	2507      	movs	r5, #7
   14532:	4303      	orrs	r3, r0
   14534:	401d      	ands	r5, r3
   14536:	2200      	movs	r2, #0
   14538:	2d00      	cmp	r5, #0
   1453a:	d009      	beq.n	14550 <__aeabi_dmul+0x4c4>
   1453c:	220f      	movs	r2, #15
   1453e:	2400      	movs	r4, #0
   14540:	401a      	ands	r2, r3
   14542:	0018      	movs	r0, r3
   14544:	2a04      	cmp	r2, #4
   14546:	d1d6      	bne.n	144f6 <__aeabi_dmul+0x46a>
   14548:	0003      	movs	r3, r0
   1454a:	0765      	lsls	r5, r4, #29
   1454c:	0264      	lsls	r4, r4, #9
   1454e:	0b22      	lsrs	r2, r4, #12
   14550:	08db      	lsrs	r3, r3, #3
   14552:	432b      	orrs	r3, r5
   14554:	2501      	movs	r5, #1
   14556:	4699      	mov	r9, r3
   14558:	9b01      	ldr	r3, [sp, #4]
   1455a:	2400      	movs	r4, #0
   1455c:	401d      	ands	r5, r3
   1455e:	e5fc      	b.n	1415a <__aeabi_dmul+0xce>
   14560:	2400      	movs	r4, #0
   14562:	e7e2      	b.n	1452a <__aeabi_dmul+0x49e>
   14564:	2280      	movs	r2, #128	; 0x80
   14566:	2501      	movs	r5, #1
   14568:	0312      	lsls	r2, r2, #12
   1456a:	4322      	orrs	r2, r4
   1456c:	9901      	ldr	r1, [sp, #4]
   1456e:	0312      	lsls	r2, r2, #12
   14570:	0b12      	lsrs	r2, r2, #12
   14572:	400d      	ands	r5, r1
   14574:	4699      	mov	r9, r3
   14576:	4c04      	ldr	r4, [pc, #16]	; (14588 <__aeabi_dmul+0x4fc>)
   14578:	e5ef      	b.n	1415a <__aeabi_dmul+0xce>
   1457a:	46c0      	nop			; (mov r8, r8)
   1457c:	000003ff 	.word	0x000003ff
   14580:	feffffff 	.word	0xfeffffff
   14584:	000007fe 	.word	0x000007fe
   14588:	000007ff 	.word	0x000007ff

0001458c <__aeabi_dsub>:
   1458c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1458e:	4646      	mov	r6, r8
   14590:	46d6      	mov	lr, sl
   14592:	464f      	mov	r7, r9
   14594:	030c      	lsls	r4, r1, #12
   14596:	b5c0      	push	{r6, r7, lr}
   14598:	0fcd      	lsrs	r5, r1, #31
   1459a:	004e      	lsls	r6, r1, #1
   1459c:	0a61      	lsrs	r1, r4, #9
   1459e:	0f44      	lsrs	r4, r0, #29
   145a0:	430c      	orrs	r4, r1
   145a2:	00c1      	lsls	r1, r0, #3
   145a4:	0058      	lsls	r0, r3, #1
   145a6:	0d40      	lsrs	r0, r0, #21
   145a8:	4684      	mov	ip, r0
   145aa:	468a      	mov	sl, r1
   145ac:	000f      	movs	r7, r1
   145ae:	0319      	lsls	r1, r3, #12
   145b0:	0f50      	lsrs	r0, r2, #29
   145b2:	0a49      	lsrs	r1, r1, #9
   145b4:	4301      	orrs	r1, r0
   145b6:	48c6      	ldr	r0, [pc, #792]	; (148d0 <__aeabi_dsub+0x344>)
   145b8:	0d76      	lsrs	r6, r6, #21
   145ba:	46a8      	mov	r8, r5
   145bc:	0fdb      	lsrs	r3, r3, #31
   145be:	00d2      	lsls	r2, r2, #3
   145c0:	4584      	cmp	ip, r0
   145c2:	d100      	bne.n	145c6 <__aeabi_dsub+0x3a>
   145c4:	e0d8      	b.n	14778 <__aeabi_dsub+0x1ec>
   145c6:	2001      	movs	r0, #1
   145c8:	4043      	eors	r3, r0
   145ca:	42ab      	cmp	r3, r5
   145cc:	d100      	bne.n	145d0 <__aeabi_dsub+0x44>
   145ce:	e0a6      	b.n	1471e <__aeabi_dsub+0x192>
   145d0:	4660      	mov	r0, ip
   145d2:	1a35      	subs	r5, r6, r0
   145d4:	2d00      	cmp	r5, #0
   145d6:	dc00      	bgt.n	145da <__aeabi_dsub+0x4e>
   145d8:	e105      	b.n	147e6 <__aeabi_dsub+0x25a>
   145da:	2800      	cmp	r0, #0
   145dc:	d110      	bne.n	14600 <__aeabi_dsub+0x74>
   145de:	000b      	movs	r3, r1
   145e0:	4313      	orrs	r3, r2
   145e2:	d100      	bne.n	145e6 <__aeabi_dsub+0x5a>
   145e4:	e0d7      	b.n	14796 <__aeabi_dsub+0x20a>
   145e6:	1e6b      	subs	r3, r5, #1
   145e8:	2b00      	cmp	r3, #0
   145ea:	d000      	beq.n	145ee <__aeabi_dsub+0x62>
   145ec:	e14b      	b.n	14886 <__aeabi_dsub+0x2fa>
   145ee:	4653      	mov	r3, sl
   145f0:	1a9f      	subs	r7, r3, r2
   145f2:	45ba      	cmp	sl, r7
   145f4:	4180      	sbcs	r0, r0
   145f6:	1a64      	subs	r4, r4, r1
   145f8:	4240      	negs	r0, r0
   145fa:	1a24      	subs	r4, r4, r0
   145fc:	2601      	movs	r6, #1
   145fe:	e01e      	b.n	1463e <__aeabi_dsub+0xb2>
   14600:	4bb3      	ldr	r3, [pc, #716]	; (148d0 <__aeabi_dsub+0x344>)
   14602:	429e      	cmp	r6, r3
   14604:	d048      	beq.n	14698 <__aeabi_dsub+0x10c>
   14606:	2380      	movs	r3, #128	; 0x80
   14608:	041b      	lsls	r3, r3, #16
   1460a:	4319      	orrs	r1, r3
   1460c:	2d38      	cmp	r5, #56	; 0x38
   1460e:	dd00      	ble.n	14612 <__aeabi_dsub+0x86>
   14610:	e119      	b.n	14846 <__aeabi_dsub+0x2ba>
   14612:	2d1f      	cmp	r5, #31
   14614:	dd00      	ble.n	14618 <__aeabi_dsub+0x8c>
   14616:	e14c      	b.n	148b2 <__aeabi_dsub+0x326>
   14618:	2320      	movs	r3, #32
   1461a:	000f      	movs	r7, r1
   1461c:	1b5b      	subs	r3, r3, r5
   1461e:	0010      	movs	r0, r2
   14620:	409a      	lsls	r2, r3
   14622:	409f      	lsls	r7, r3
   14624:	40e8      	lsrs	r0, r5
   14626:	1e53      	subs	r3, r2, #1
   14628:	419a      	sbcs	r2, r3
   1462a:	40e9      	lsrs	r1, r5
   1462c:	4307      	orrs	r7, r0
   1462e:	4317      	orrs	r7, r2
   14630:	4653      	mov	r3, sl
   14632:	1bdf      	subs	r7, r3, r7
   14634:	1a61      	subs	r1, r4, r1
   14636:	45ba      	cmp	sl, r7
   14638:	41a4      	sbcs	r4, r4
   1463a:	4264      	negs	r4, r4
   1463c:	1b0c      	subs	r4, r1, r4
   1463e:	0223      	lsls	r3, r4, #8
   14640:	d400      	bmi.n	14644 <__aeabi_dsub+0xb8>
   14642:	e0c5      	b.n	147d0 <__aeabi_dsub+0x244>
   14644:	0264      	lsls	r4, r4, #9
   14646:	0a65      	lsrs	r5, r4, #9
   14648:	2d00      	cmp	r5, #0
   1464a:	d100      	bne.n	1464e <__aeabi_dsub+0xc2>
   1464c:	e0f6      	b.n	1483c <__aeabi_dsub+0x2b0>
   1464e:	0028      	movs	r0, r5
   14650:	f000 fc3c 	bl	14ecc <__clzsi2>
   14654:	0003      	movs	r3, r0
   14656:	3b08      	subs	r3, #8
   14658:	2b1f      	cmp	r3, #31
   1465a:	dd00      	ble.n	1465e <__aeabi_dsub+0xd2>
   1465c:	e0e9      	b.n	14832 <__aeabi_dsub+0x2a6>
   1465e:	2220      	movs	r2, #32
   14660:	003c      	movs	r4, r7
   14662:	1ad2      	subs	r2, r2, r3
   14664:	409d      	lsls	r5, r3
   14666:	40d4      	lsrs	r4, r2
   14668:	409f      	lsls	r7, r3
   1466a:	4325      	orrs	r5, r4
   1466c:	429e      	cmp	r6, r3
   1466e:	dd00      	ble.n	14672 <__aeabi_dsub+0xe6>
   14670:	e0db      	b.n	1482a <__aeabi_dsub+0x29e>
   14672:	1b9e      	subs	r6, r3, r6
   14674:	1c73      	adds	r3, r6, #1
   14676:	2b1f      	cmp	r3, #31
   14678:	dd00      	ble.n	1467c <__aeabi_dsub+0xf0>
   1467a:	e10a      	b.n	14892 <__aeabi_dsub+0x306>
   1467c:	2220      	movs	r2, #32
   1467e:	0038      	movs	r0, r7
   14680:	1ad2      	subs	r2, r2, r3
   14682:	0029      	movs	r1, r5
   14684:	4097      	lsls	r7, r2
   14686:	002c      	movs	r4, r5
   14688:	4091      	lsls	r1, r2
   1468a:	40d8      	lsrs	r0, r3
   1468c:	1e7a      	subs	r2, r7, #1
   1468e:	4197      	sbcs	r7, r2
   14690:	40dc      	lsrs	r4, r3
   14692:	2600      	movs	r6, #0
   14694:	4301      	orrs	r1, r0
   14696:	430f      	orrs	r7, r1
   14698:	077b      	lsls	r3, r7, #29
   1469a:	d009      	beq.n	146b0 <__aeabi_dsub+0x124>
   1469c:	230f      	movs	r3, #15
   1469e:	403b      	ands	r3, r7
   146a0:	2b04      	cmp	r3, #4
   146a2:	d005      	beq.n	146b0 <__aeabi_dsub+0x124>
   146a4:	1d3b      	adds	r3, r7, #4
   146a6:	42bb      	cmp	r3, r7
   146a8:	41bf      	sbcs	r7, r7
   146aa:	427f      	negs	r7, r7
   146ac:	19e4      	adds	r4, r4, r7
   146ae:	001f      	movs	r7, r3
   146b0:	0223      	lsls	r3, r4, #8
   146b2:	d525      	bpl.n	14700 <__aeabi_dsub+0x174>
   146b4:	4b86      	ldr	r3, [pc, #536]	; (148d0 <__aeabi_dsub+0x344>)
   146b6:	3601      	adds	r6, #1
   146b8:	429e      	cmp	r6, r3
   146ba:	d100      	bne.n	146be <__aeabi_dsub+0x132>
   146bc:	e0af      	b.n	1481e <__aeabi_dsub+0x292>
   146be:	4b85      	ldr	r3, [pc, #532]	; (148d4 <__aeabi_dsub+0x348>)
   146c0:	2501      	movs	r5, #1
   146c2:	401c      	ands	r4, r3
   146c4:	4643      	mov	r3, r8
   146c6:	0762      	lsls	r2, r4, #29
   146c8:	08ff      	lsrs	r7, r7, #3
   146ca:	0264      	lsls	r4, r4, #9
   146cc:	0576      	lsls	r6, r6, #21
   146ce:	4317      	orrs	r7, r2
   146d0:	0b24      	lsrs	r4, r4, #12
   146d2:	0d76      	lsrs	r6, r6, #21
   146d4:	401d      	ands	r5, r3
   146d6:	2100      	movs	r1, #0
   146d8:	0324      	lsls	r4, r4, #12
   146da:	0b23      	lsrs	r3, r4, #12
   146dc:	0d0c      	lsrs	r4, r1, #20
   146de:	4a7e      	ldr	r2, [pc, #504]	; (148d8 <__aeabi_dsub+0x34c>)
   146e0:	0524      	lsls	r4, r4, #20
   146e2:	431c      	orrs	r4, r3
   146e4:	4014      	ands	r4, r2
   146e6:	0533      	lsls	r3, r6, #20
   146e8:	4323      	orrs	r3, r4
   146ea:	005b      	lsls	r3, r3, #1
   146ec:	07ed      	lsls	r5, r5, #31
   146ee:	085b      	lsrs	r3, r3, #1
   146f0:	432b      	orrs	r3, r5
   146f2:	0038      	movs	r0, r7
   146f4:	0019      	movs	r1, r3
   146f6:	bc1c      	pop	{r2, r3, r4}
   146f8:	4690      	mov	r8, r2
   146fa:	4699      	mov	r9, r3
   146fc:	46a2      	mov	sl, r4
   146fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14700:	2501      	movs	r5, #1
   14702:	4643      	mov	r3, r8
   14704:	0762      	lsls	r2, r4, #29
   14706:	08ff      	lsrs	r7, r7, #3
   14708:	4317      	orrs	r7, r2
   1470a:	08e4      	lsrs	r4, r4, #3
   1470c:	401d      	ands	r5, r3
   1470e:	4b70      	ldr	r3, [pc, #448]	; (148d0 <__aeabi_dsub+0x344>)
   14710:	429e      	cmp	r6, r3
   14712:	d036      	beq.n	14782 <__aeabi_dsub+0x1f6>
   14714:	0324      	lsls	r4, r4, #12
   14716:	0576      	lsls	r6, r6, #21
   14718:	0b24      	lsrs	r4, r4, #12
   1471a:	0d76      	lsrs	r6, r6, #21
   1471c:	e7db      	b.n	146d6 <__aeabi_dsub+0x14a>
   1471e:	4663      	mov	r3, ip
   14720:	1af3      	subs	r3, r6, r3
   14722:	2b00      	cmp	r3, #0
   14724:	dc00      	bgt.n	14728 <__aeabi_dsub+0x19c>
   14726:	e094      	b.n	14852 <__aeabi_dsub+0x2c6>
   14728:	4660      	mov	r0, ip
   1472a:	2800      	cmp	r0, #0
   1472c:	d035      	beq.n	1479a <__aeabi_dsub+0x20e>
   1472e:	4868      	ldr	r0, [pc, #416]	; (148d0 <__aeabi_dsub+0x344>)
   14730:	4286      	cmp	r6, r0
   14732:	d0b1      	beq.n	14698 <__aeabi_dsub+0x10c>
   14734:	2780      	movs	r7, #128	; 0x80
   14736:	043f      	lsls	r7, r7, #16
   14738:	4339      	orrs	r1, r7
   1473a:	2b38      	cmp	r3, #56	; 0x38
   1473c:	dc00      	bgt.n	14740 <__aeabi_dsub+0x1b4>
   1473e:	e0fd      	b.n	1493c <__aeabi_dsub+0x3b0>
   14740:	430a      	orrs	r2, r1
   14742:	0017      	movs	r7, r2
   14744:	2100      	movs	r1, #0
   14746:	1e7a      	subs	r2, r7, #1
   14748:	4197      	sbcs	r7, r2
   1474a:	4457      	add	r7, sl
   1474c:	4557      	cmp	r7, sl
   1474e:	4180      	sbcs	r0, r0
   14750:	1909      	adds	r1, r1, r4
   14752:	4244      	negs	r4, r0
   14754:	190c      	adds	r4, r1, r4
   14756:	0223      	lsls	r3, r4, #8
   14758:	d53a      	bpl.n	147d0 <__aeabi_dsub+0x244>
   1475a:	4b5d      	ldr	r3, [pc, #372]	; (148d0 <__aeabi_dsub+0x344>)
   1475c:	3601      	adds	r6, #1
   1475e:	429e      	cmp	r6, r3
   14760:	d100      	bne.n	14764 <__aeabi_dsub+0x1d8>
   14762:	e14b      	b.n	149fc <__aeabi_dsub+0x470>
   14764:	2201      	movs	r2, #1
   14766:	4b5b      	ldr	r3, [pc, #364]	; (148d4 <__aeabi_dsub+0x348>)
   14768:	401c      	ands	r4, r3
   1476a:	087b      	lsrs	r3, r7, #1
   1476c:	4017      	ands	r7, r2
   1476e:	431f      	orrs	r7, r3
   14770:	07e2      	lsls	r2, r4, #31
   14772:	4317      	orrs	r7, r2
   14774:	0864      	lsrs	r4, r4, #1
   14776:	e78f      	b.n	14698 <__aeabi_dsub+0x10c>
   14778:	0008      	movs	r0, r1
   1477a:	4310      	orrs	r0, r2
   1477c:	d000      	beq.n	14780 <__aeabi_dsub+0x1f4>
   1477e:	e724      	b.n	145ca <__aeabi_dsub+0x3e>
   14780:	e721      	b.n	145c6 <__aeabi_dsub+0x3a>
   14782:	0023      	movs	r3, r4
   14784:	433b      	orrs	r3, r7
   14786:	d100      	bne.n	1478a <__aeabi_dsub+0x1fe>
   14788:	e1b9      	b.n	14afe <__aeabi_dsub+0x572>
   1478a:	2280      	movs	r2, #128	; 0x80
   1478c:	0312      	lsls	r2, r2, #12
   1478e:	4314      	orrs	r4, r2
   14790:	0324      	lsls	r4, r4, #12
   14792:	0b24      	lsrs	r4, r4, #12
   14794:	e79f      	b.n	146d6 <__aeabi_dsub+0x14a>
   14796:	002e      	movs	r6, r5
   14798:	e77e      	b.n	14698 <__aeabi_dsub+0x10c>
   1479a:	0008      	movs	r0, r1
   1479c:	4310      	orrs	r0, r2
   1479e:	d100      	bne.n	147a2 <__aeabi_dsub+0x216>
   147a0:	e0ca      	b.n	14938 <__aeabi_dsub+0x3ac>
   147a2:	1e58      	subs	r0, r3, #1
   147a4:	4684      	mov	ip, r0
   147a6:	2800      	cmp	r0, #0
   147a8:	d000      	beq.n	147ac <__aeabi_dsub+0x220>
   147aa:	e0e7      	b.n	1497c <__aeabi_dsub+0x3f0>
   147ac:	4452      	add	r2, sl
   147ae:	4552      	cmp	r2, sl
   147b0:	4180      	sbcs	r0, r0
   147b2:	1864      	adds	r4, r4, r1
   147b4:	4240      	negs	r0, r0
   147b6:	1824      	adds	r4, r4, r0
   147b8:	0017      	movs	r7, r2
   147ba:	2601      	movs	r6, #1
   147bc:	0223      	lsls	r3, r4, #8
   147be:	d507      	bpl.n	147d0 <__aeabi_dsub+0x244>
   147c0:	2602      	movs	r6, #2
   147c2:	e7cf      	b.n	14764 <__aeabi_dsub+0x1d8>
   147c4:	4664      	mov	r4, ip
   147c6:	432c      	orrs	r4, r5
   147c8:	d100      	bne.n	147cc <__aeabi_dsub+0x240>
   147ca:	e1b3      	b.n	14b34 <__aeabi_dsub+0x5a8>
   147cc:	002c      	movs	r4, r5
   147ce:	4667      	mov	r7, ip
   147d0:	077b      	lsls	r3, r7, #29
   147d2:	d000      	beq.n	147d6 <__aeabi_dsub+0x24a>
   147d4:	e762      	b.n	1469c <__aeabi_dsub+0x110>
   147d6:	0763      	lsls	r3, r4, #29
   147d8:	08ff      	lsrs	r7, r7, #3
   147da:	431f      	orrs	r7, r3
   147dc:	2501      	movs	r5, #1
   147de:	4643      	mov	r3, r8
   147e0:	08e4      	lsrs	r4, r4, #3
   147e2:	401d      	ands	r5, r3
   147e4:	e793      	b.n	1470e <__aeabi_dsub+0x182>
   147e6:	2d00      	cmp	r5, #0
   147e8:	d178      	bne.n	148dc <__aeabi_dsub+0x350>
   147ea:	1c75      	adds	r5, r6, #1
   147ec:	056d      	lsls	r5, r5, #21
   147ee:	0d6d      	lsrs	r5, r5, #21
   147f0:	2d01      	cmp	r5, #1
   147f2:	dc00      	bgt.n	147f6 <__aeabi_dsub+0x26a>
   147f4:	e0f2      	b.n	149dc <__aeabi_dsub+0x450>
   147f6:	4650      	mov	r0, sl
   147f8:	1a80      	subs	r0, r0, r2
   147fa:	4582      	cmp	sl, r0
   147fc:	41bf      	sbcs	r7, r7
   147fe:	1a65      	subs	r5, r4, r1
   14800:	427f      	negs	r7, r7
   14802:	1bed      	subs	r5, r5, r7
   14804:	4684      	mov	ip, r0
   14806:	0228      	lsls	r0, r5, #8
   14808:	d400      	bmi.n	1480c <__aeabi_dsub+0x280>
   1480a:	e08c      	b.n	14926 <__aeabi_dsub+0x39a>
   1480c:	4650      	mov	r0, sl
   1480e:	1a17      	subs	r7, r2, r0
   14810:	42ba      	cmp	r2, r7
   14812:	4192      	sbcs	r2, r2
   14814:	1b0c      	subs	r4, r1, r4
   14816:	4255      	negs	r5, r2
   14818:	1b65      	subs	r5, r4, r5
   1481a:	4698      	mov	r8, r3
   1481c:	e714      	b.n	14648 <__aeabi_dsub+0xbc>
   1481e:	2501      	movs	r5, #1
   14820:	4643      	mov	r3, r8
   14822:	2400      	movs	r4, #0
   14824:	401d      	ands	r5, r3
   14826:	2700      	movs	r7, #0
   14828:	e755      	b.n	146d6 <__aeabi_dsub+0x14a>
   1482a:	4c2a      	ldr	r4, [pc, #168]	; (148d4 <__aeabi_dsub+0x348>)
   1482c:	1af6      	subs	r6, r6, r3
   1482e:	402c      	ands	r4, r5
   14830:	e732      	b.n	14698 <__aeabi_dsub+0x10c>
   14832:	003d      	movs	r5, r7
   14834:	3828      	subs	r0, #40	; 0x28
   14836:	4085      	lsls	r5, r0
   14838:	2700      	movs	r7, #0
   1483a:	e717      	b.n	1466c <__aeabi_dsub+0xe0>
   1483c:	0038      	movs	r0, r7
   1483e:	f000 fb45 	bl	14ecc <__clzsi2>
   14842:	3020      	adds	r0, #32
   14844:	e706      	b.n	14654 <__aeabi_dsub+0xc8>
   14846:	430a      	orrs	r2, r1
   14848:	0017      	movs	r7, r2
   1484a:	2100      	movs	r1, #0
   1484c:	1e7a      	subs	r2, r7, #1
   1484e:	4197      	sbcs	r7, r2
   14850:	e6ee      	b.n	14630 <__aeabi_dsub+0xa4>
   14852:	2b00      	cmp	r3, #0
   14854:	d000      	beq.n	14858 <__aeabi_dsub+0x2cc>
   14856:	e0e5      	b.n	14a24 <__aeabi_dsub+0x498>
   14858:	1c73      	adds	r3, r6, #1
   1485a:	469c      	mov	ip, r3
   1485c:	055b      	lsls	r3, r3, #21
   1485e:	0d5b      	lsrs	r3, r3, #21
   14860:	2b01      	cmp	r3, #1
   14862:	dc00      	bgt.n	14866 <__aeabi_dsub+0x2da>
   14864:	e09f      	b.n	149a6 <__aeabi_dsub+0x41a>
   14866:	4b1a      	ldr	r3, [pc, #104]	; (148d0 <__aeabi_dsub+0x344>)
   14868:	459c      	cmp	ip, r3
   1486a:	d100      	bne.n	1486e <__aeabi_dsub+0x2e2>
   1486c:	e0c5      	b.n	149fa <__aeabi_dsub+0x46e>
   1486e:	4452      	add	r2, sl
   14870:	4552      	cmp	r2, sl
   14872:	4180      	sbcs	r0, r0
   14874:	1864      	adds	r4, r4, r1
   14876:	4240      	negs	r0, r0
   14878:	1824      	adds	r4, r4, r0
   1487a:	07e7      	lsls	r7, r4, #31
   1487c:	0852      	lsrs	r2, r2, #1
   1487e:	4317      	orrs	r7, r2
   14880:	0864      	lsrs	r4, r4, #1
   14882:	4666      	mov	r6, ip
   14884:	e708      	b.n	14698 <__aeabi_dsub+0x10c>
   14886:	4812      	ldr	r0, [pc, #72]	; (148d0 <__aeabi_dsub+0x344>)
   14888:	4285      	cmp	r5, r0
   1488a:	d100      	bne.n	1488e <__aeabi_dsub+0x302>
   1488c:	e085      	b.n	1499a <__aeabi_dsub+0x40e>
   1488e:	001d      	movs	r5, r3
   14890:	e6bc      	b.n	1460c <__aeabi_dsub+0x80>
   14892:	0029      	movs	r1, r5
   14894:	3e1f      	subs	r6, #31
   14896:	40f1      	lsrs	r1, r6
   14898:	2b20      	cmp	r3, #32
   1489a:	d100      	bne.n	1489e <__aeabi_dsub+0x312>
   1489c:	e07f      	b.n	1499e <__aeabi_dsub+0x412>
   1489e:	2240      	movs	r2, #64	; 0x40
   148a0:	1ad3      	subs	r3, r2, r3
   148a2:	409d      	lsls	r5, r3
   148a4:	432f      	orrs	r7, r5
   148a6:	1e7d      	subs	r5, r7, #1
   148a8:	41af      	sbcs	r7, r5
   148aa:	2400      	movs	r4, #0
   148ac:	430f      	orrs	r7, r1
   148ae:	2600      	movs	r6, #0
   148b0:	e78e      	b.n	147d0 <__aeabi_dsub+0x244>
   148b2:	002b      	movs	r3, r5
   148b4:	000f      	movs	r7, r1
   148b6:	3b20      	subs	r3, #32
   148b8:	40df      	lsrs	r7, r3
   148ba:	2d20      	cmp	r5, #32
   148bc:	d071      	beq.n	149a2 <__aeabi_dsub+0x416>
   148be:	2340      	movs	r3, #64	; 0x40
   148c0:	1b5d      	subs	r5, r3, r5
   148c2:	40a9      	lsls	r1, r5
   148c4:	430a      	orrs	r2, r1
   148c6:	1e51      	subs	r1, r2, #1
   148c8:	418a      	sbcs	r2, r1
   148ca:	2100      	movs	r1, #0
   148cc:	4317      	orrs	r7, r2
   148ce:	e6af      	b.n	14630 <__aeabi_dsub+0xa4>
   148d0:	000007ff 	.word	0x000007ff
   148d4:	ff7fffff 	.word	0xff7fffff
   148d8:	800fffff 	.word	0x800fffff
   148dc:	2e00      	cmp	r6, #0
   148de:	d03e      	beq.n	1495e <__aeabi_dsub+0x3d2>
   148e0:	4eb3      	ldr	r6, [pc, #716]	; (14bb0 <__aeabi_dsub+0x624>)
   148e2:	45b4      	cmp	ip, r6
   148e4:	d045      	beq.n	14972 <__aeabi_dsub+0x3e6>
   148e6:	2680      	movs	r6, #128	; 0x80
   148e8:	0436      	lsls	r6, r6, #16
   148ea:	426d      	negs	r5, r5
   148ec:	4334      	orrs	r4, r6
   148ee:	2d38      	cmp	r5, #56	; 0x38
   148f0:	dd00      	ble.n	148f4 <__aeabi_dsub+0x368>
   148f2:	e0a8      	b.n	14a46 <__aeabi_dsub+0x4ba>
   148f4:	2d1f      	cmp	r5, #31
   148f6:	dd00      	ble.n	148fa <__aeabi_dsub+0x36e>
   148f8:	e11f      	b.n	14b3a <__aeabi_dsub+0x5ae>
   148fa:	2620      	movs	r6, #32
   148fc:	0027      	movs	r7, r4
   148fe:	4650      	mov	r0, sl
   14900:	1b76      	subs	r6, r6, r5
   14902:	40b7      	lsls	r7, r6
   14904:	40e8      	lsrs	r0, r5
   14906:	4307      	orrs	r7, r0
   14908:	4650      	mov	r0, sl
   1490a:	40b0      	lsls	r0, r6
   1490c:	1e46      	subs	r6, r0, #1
   1490e:	41b0      	sbcs	r0, r6
   14910:	40ec      	lsrs	r4, r5
   14912:	4338      	orrs	r0, r7
   14914:	1a17      	subs	r7, r2, r0
   14916:	42ba      	cmp	r2, r7
   14918:	4192      	sbcs	r2, r2
   1491a:	1b0c      	subs	r4, r1, r4
   1491c:	4252      	negs	r2, r2
   1491e:	1aa4      	subs	r4, r4, r2
   14920:	4666      	mov	r6, ip
   14922:	4698      	mov	r8, r3
   14924:	e68b      	b.n	1463e <__aeabi_dsub+0xb2>
   14926:	4664      	mov	r4, ip
   14928:	4667      	mov	r7, ip
   1492a:	432c      	orrs	r4, r5
   1492c:	d000      	beq.n	14930 <__aeabi_dsub+0x3a4>
   1492e:	e68b      	b.n	14648 <__aeabi_dsub+0xbc>
   14930:	2500      	movs	r5, #0
   14932:	2600      	movs	r6, #0
   14934:	2700      	movs	r7, #0
   14936:	e6ea      	b.n	1470e <__aeabi_dsub+0x182>
   14938:	001e      	movs	r6, r3
   1493a:	e6ad      	b.n	14698 <__aeabi_dsub+0x10c>
   1493c:	2b1f      	cmp	r3, #31
   1493e:	dc60      	bgt.n	14a02 <__aeabi_dsub+0x476>
   14940:	2720      	movs	r7, #32
   14942:	1af8      	subs	r0, r7, r3
   14944:	000f      	movs	r7, r1
   14946:	4684      	mov	ip, r0
   14948:	4087      	lsls	r7, r0
   1494a:	0010      	movs	r0, r2
   1494c:	40d8      	lsrs	r0, r3
   1494e:	4307      	orrs	r7, r0
   14950:	4660      	mov	r0, ip
   14952:	4082      	lsls	r2, r0
   14954:	1e50      	subs	r0, r2, #1
   14956:	4182      	sbcs	r2, r0
   14958:	40d9      	lsrs	r1, r3
   1495a:	4317      	orrs	r7, r2
   1495c:	e6f5      	b.n	1474a <__aeabi_dsub+0x1be>
   1495e:	0026      	movs	r6, r4
   14960:	4650      	mov	r0, sl
   14962:	4306      	orrs	r6, r0
   14964:	d005      	beq.n	14972 <__aeabi_dsub+0x3e6>
   14966:	43ed      	mvns	r5, r5
   14968:	2d00      	cmp	r5, #0
   1496a:	d0d3      	beq.n	14914 <__aeabi_dsub+0x388>
   1496c:	4e90      	ldr	r6, [pc, #576]	; (14bb0 <__aeabi_dsub+0x624>)
   1496e:	45b4      	cmp	ip, r6
   14970:	d1bd      	bne.n	148ee <__aeabi_dsub+0x362>
   14972:	000c      	movs	r4, r1
   14974:	0017      	movs	r7, r2
   14976:	4666      	mov	r6, ip
   14978:	4698      	mov	r8, r3
   1497a:	e68d      	b.n	14698 <__aeabi_dsub+0x10c>
   1497c:	488c      	ldr	r0, [pc, #560]	; (14bb0 <__aeabi_dsub+0x624>)
   1497e:	4283      	cmp	r3, r0
   14980:	d00b      	beq.n	1499a <__aeabi_dsub+0x40e>
   14982:	4663      	mov	r3, ip
   14984:	e6d9      	b.n	1473a <__aeabi_dsub+0x1ae>
   14986:	2d00      	cmp	r5, #0
   14988:	d000      	beq.n	1498c <__aeabi_dsub+0x400>
   1498a:	e096      	b.n	14aba <__aeabi_dsub+0x52e>
   1498c:	0008      	movs	r0, r1
   1498e:	4310      	orrs	r0, r2
   14990:	d100      	bne.n	14994 <__aeabi_dsub+0x408>
   14992:	e0e2      	b.n	14b5a <__aeabi_dsub+0x5ce>
   14994:	000c      	movs	r4, r1
   14996:	0017      	movs	r7, r2
   14998:	4698      	mov	r8, r3
   1499a:	4e85      	ldr	r6, [pc, #532]	; (14bb0 <__aeabi_dsub+0x624>)
   1499c:	e67c      	b.n	14698 <__aeabi_dsub+0x10c>
   1499e:	2500      	movs	r5, #0
   149a0:	e780      	b.n	148a4 <__aeabi_dsub+0x318>
   149a2:	2100      	movs	r1, #0
   149a4:	e78e      	b.n	148c4 <__aeabi_dsub+0x338>
   149a6:	0023      	movs	r3, r4
   149a8:	4650      	mov	r0, sl
   149aa:	4303      	orrs	r3, r0
   149ac:	2e00      	cmp	r6, #0
   149ae:	d000      	beq.n	149b2 <__aeabi_dsub+0x426>
   149b0:	e0a8      	b.n	14b04 <__aeabi_dsub+0x578>
   149b2:	2b00      	cmp	r3, #0
   149b4:	d100      	bne.n	149b8 <__aeabi_dsub+0x42c>
   149b6:	e0de      	b.n	14b76 <__aeabi_dsub+0x5ea>
   149b8:	000b      	movs	r3, r1
   149ba:	4313      	orrs	r3, r2
   149bc:	d100      	bne.n	149c0 <__aeabi_dsub+0x434>
   149be:	e66b      	b.n	14698 <__aeabi_dsub+0x10c>
   149c0:	4452      	add	r2, sl
   149c2:	4552      	cmp	r2, sl
   149c4:	4180      	sbcs	r0, r0
   149c6:	1864      	adds	r4, r4, r1
   149c8:	4240      	negs	r0, r0
   149ca:	1824      	adds	r4, r4, r0
   149cc:	0017      	movs	r7, r2
   149ce:	0223      	lsls	r3, r4, #8
   149d0:	d400      	bmi.n	149d4 <__aeabi_dsub+0x448>
   149d2:	e6fd      	b.n	147d0 <__aeabi_dsub+0x244>
   149d4:	4b77      	ldr	r3, [pc, #476]	; (14bb4 <__aeabi_dsub+0x628>)
   149d6:	4666      	mov	r6, ip
   149d8:	401c      	ands	r4, r3
   149da:	e65d      	b.n	14698 <__aeabi_dsub+0x10c>
   149dc:	0025      	movs	r5, r4
   149de:	4650      	mov	r0, sl
   149e0:	4305      	orrs	r5, r0
   149e2:	2e00      	cmp	r6, #0
   149e4:	d1cf      	bne.n	14986 <__aeabi_dsub+0x3fa>
   149e6:	2d00      	cmp	r5, #0
   149e8:	d14f      	bne.n	14a8a <__aeabi_dsub+0x4fe>
   149ea:	000c      	movs	r4, r1
   149ec:	4314      	orrs	r4, r2
   149ee:	d100      	bne.n	149f2 <__aeabi_dsub+0x466>
   149f0:	e0a0      	b.n	14b34 <__aeabi_dsub+0x5a8>
   149f2:	000c      	movs	r4, r1
   149f4:	0017      	movs	r7, r2
   149f6:	4698      	mov	r8, r3
   149f8:	e64e      	b.n	14698 <__aeabi_dsub+0x10c>
   149fa:	4666      	mov	r6, ip
   149fc:	2400      	movs	r4, #0
   149fe:	2700      	movs	r7, #0
   14a00:	e685      	b.n	1470e <__aeabi_dsub+0x182>
   14a02:	001f      	movs	r7, r3
   14a04:	0008      	movs	r0, r1
   14a06:	3f20      	subs	r7, #32
   14a08:	40f8      	lsrs	r0, r7
   14a0a:	0007      	movs	r7, r0
   14a0c:	2b20      	cmp	r3, #32
   14a0e:	d100      	bne.n	14a12 <__aeabi_dsub+0x486>
   14a10:	e08e      	b.n	14b30 <__aeabi_dsub+0x5a4>
   14a12:	2040      	movs	r0, #64	; 0x40
   14a14:	1ac3      	subs	r3, r0, r3
   14a16:	4099      	lsls	r1, r3
   14a18:	430a      	orrs	r2, r1
   14a1a:	1e51      	subs	r1, r2, #1
   14a1c:	418a      	sbcs	r2, r1
   14a1e:	2100      	movs	r1, #0
   14a20:	4317      	orrs	r7, r2
   14a22:	e692      	b.n	1474a <__aeabi_dsub+0x1be>
   14a24:	2e00      	cmp	r6, #0
   14a26:	d114      	bne.n	14a52 <__aeabi_dsub+0x4c6>
   14a28:	0026      	movs	r6, r4
   14a2a:	4650      	mov	r0, sl
   14a2c:	4306      	orrs	r6, r0
   14a2e:	d062      	beq.n	14af6 <__aeabi_dsub+0x56a>
   14a30:	43db      	mvns	r3, r3
   14a32:	2b00      	cmp	r3, #0
   14a34:	d15c      	bne.n	14af0 <__aeabi_dsub+0x564>
   14a36:	1887      	adds	r7, r0, r2
   14a38:	4297      	cmp	r7, r2
   14a3a:	4192      	sbcs	r2, r2
   14a3c:	1864      	adds	r4, r4, r1
   14a3e:	4252      	negs	r2, r2
   14a40:	18a4      	adds	r4, r4, r2
   14a42:	4666      	mov	r6, ip
   14a44:	e687      	b.n	14756 <__aeabi_dsub+0x1ca>
   14a46:	4650      	mov	r0, sl
   14a48:	4320      	orrs	r0, r4
   14a4a:	1e44      	subs	r4, r0, #1
   14a4c:	41a0      	sbcs	r0, r4
   14a4e:	2400      	movs	r4, #0
   14a50:	e760      	b.n	14914 <__aeabi_dsub+0x388>
   14a52:	4e57      	ldr	r6, [pc, #348]	; (14bb0 <__aeabi_dsub+0x624>)
   14a54:	45b4      	cmp	ip, r6
   14a56:	d04e      	beq.n	14af6 <__aeabi_dsub+0x56a>
   14a58:	2680      	movs	r6, #128	; 0x80
   14a5a:	0436      	lsls	r6, r6, #16
   14a5c:	425b      	negs	r3, r3
   14a5e:	4334      	orrs	r4, r6
   14a60:	2b38      	cmp	r3, #56	; 0x38
   14a62:	dd00      	ble.n	14a66 <__aeabi_dsub+0x4da>
   14a64:	e07f      	b.n	14b66 <__aeabi_dsub+0x5da>
   14a66:	2b1f      	cmp	r3, #31
   14a68:	dd00      	ble.n	14a6c <__aeabi_dsub+0x4e0>
   14a6a:	e08b      	b.n	14b84 <__aeabi_dsub+0x5f8>
   14a6c:	2620      	movs	r6, #32
   14a6e:	0027      	movs	r7, r4
   14a70:	4650      	mov	r0, sl
   14a72:	1af6      	subs	r6, r6, r3
   14a74:	40b7      	lsls	r7, r6
   14a76:	40d8      	lsrs	r0, r3
   14a78:	4307      	orrs	r7, r0
   14a7a:	4650      	mov	r0, sl
   14a7c:	40b0      	lsls	r0, r6
   14a7e:	1e46      	subs	r6, r0, #1
   14a80:	41b0      	sbcs	r0, r6
   14a82:	4307      	orrs	r7, r0
   14a84:	40dc      	lsrs	r4, r3
   14a86:	18bf      	adds	r7, r7, r2
   14a88:	e7d6      	b.n	14a38 <__aeabi_dsub+0x4ac>
   14a8a:	000d      	movs	r5, r1
   14a8c:	4315      	orrs	r5, r2
   14a8e:	d100      	bne.n	14a92 <__aeabi_dsub+0x506>
   14a90:	e602      	b.n	14698 <__aeabi_dsub+0x10c>
   14a92:	4650      	mov	r0, sl
   14a94:	1a80      	subs	r0, r0, r2
   14a96:	4582      	cmp	sl, r0
   14a98:	41bf      	sbcs	r7, r7
   14a9a:	1a65      	subs	r5, r4, r1
   14a9c:	427f      	negs	r7, r7
   14a9e:	1bed      	subs	r5, r5, r7
   14aa0:	4684      	mov	ip, r0
   14aa2:	0228      	lsls	r0, r5, #8
   14aa4:	d400      	bmi.n	14aa8 <__aeabi_dsub+0x51c>
   14aa6:	e68d      	b.n	147c4 <__aeabi_dsub+0x238>
   14aa8:	4650      	mov	r0, sl
   14aaa:	1a17      	subs	r7, r2, r0
   14aac:	42ba      	cmp	r2, r7
   14aae:	4192      	sbcs	r2, r2
   14ab0:	1b0c      	subs	r4, r1, r4
   14ab2:	4252      	negs	r2, r2
   14ab4:	1aa4      	subs	r4, r4, r2
   14ab6:	4698      	mov	r8, r3
   14ab8:	e5ee      	b.n	14698 <__aeabi_dsub+0x10c>
   14aba:	000d      	movs	r5, r1
   14abc:	4315      	orrs	r5, r2
   14abe:	d100      	bne.n	14ac2 <__aeabi_dsub+0x536>
   14ac0:	e76b      	b.n	1499a <__aeabi_dsub+0x40e>
   14ac2:	4650      	mov	r0, sl
   14ac4:	0767      	lsls	r7, r4, #29
   14ac6:	08c0      	lsrs	r0, r0, #3
   14ac8:	4307      	orrs	r7, r0
   14aca:	2080      	movs	r0, #128	; 0x80
   14acc:	08e4      	lsrs	r4, r4, #3
   14ace:	0300      	lsls	r0, r0, #12
   14ad0:	4204      	tst	r4, r0
   14ad2:	d007      	beq.n	14ae4 <__aeabi_dsub+0x558>
   14ad4:	08cd      	lsrs	r5, r1, #3
   14ad6:	4205      	tst	r5, r0
   14ad8:	d104      	bne.n	14ae4 <__aeabi_dsub+0x558>
   14ada:	002c      	movs	r4, r5
   14adc:	4698      	mov	r8, r3
   14ade:	08d7      	lsrs	r7, r2, #3
   14ae0:	0749      	lsls	r1, r1, #29
   14ae2:	430f      	orrs	r7, r1
   14ae4:	0f7b      	lsrs	r3, r7, #29
   14ae6:	00e4      	lsls	r4, r4, #3
   14ae8:	431c      	orrs	r4, r3
   14aea:	00ff      	lsls	r7, r7, #3
   14aec:	4e30      	ldr	r6, [pc, #192]	; (14bb0 <__aeabi_dsub+0x624>)
   14aee:	e5d3      	b.n	14698 <__aeabi_dsub+0x10c>
   14af0:	4e2f      	ldr	r6, [pc, #188]	; (14bb0 <__aeabi_dsub+0x624>)
   14af2:	45b4      	cmp	ip, r6
   14af4:	d1b4      	bne.n	14a60 <__aeabi_dsub+0x4d4>
   14af6:	000c      	movs	r4, r1
   14af8:	0017      	movs	r7, r2
   14afa:	4666      	mov	r6, ip
   14afc:	e5cc      	b.n	14698 <__aeabi_dsub+0x10c>
   14afe:	2700      	movs	r7, #0
   14b00:	2400      	movs	r4, #0
   14b02:	e5e8      	b.n	146d6 <__aeabi_dsub+0x14a>
   14b04:	2b00      	cmp	r3, #0
   14b06:	d039      	beq.n	14b7c <__aeabi_dsub+0x5f0>
   14b08:	000b      	movs	r3, r1
   14b0a:	4313      	orrs	r3, r2
   14b0c:	d100      	bne.n	14b10 <__aeabi_dsub+0x584>
   14b0e:	e744      	b.n	1499a <__aeabi_dsub+0x40e>
   14b10:	08c0      	lsrs	r0, r0, #3
   14b12:	0767      	lsls	r7, r4, #29
   14b14:	4307      	orrs	r7, r0
   14b16:	2080      	movs	r0, #128	; 0x80
   14b18:	08e4      	lsrs	r4, r4, #3
   14b1a:	0300      	lsls	r0, r0, #12
   14b1c:	4204      	tst	r4, r0
   14b1e:	d0e1      	beq.n	14ae4 <__aeabi_dsub+0x558>
   14b20:	08cb      	lsrs	r3, r1, #3
   14b22:	4203      	tst	r3, r0
   14b24:	d1de      	bne.n	14ae4 <__aeabi_dsub+0x558>
   14b26:	08d7      	lsrs	r7, r2, #3
   14b28:	0749      	lsls	r1, r1, #29
   14b2a:	430f      	orrs	r7, r1
   14b2c:	001c      	movs	r4, r3
   14b2e:	e7d9      	b.n	14ae4 <__aeabi_dsub+0x558>
   14b30:	2100      	movs	r1, #0
   14b32:	e771      	b.n	14a18 <__aeabi_dsub+0x48c>
   14b34:	2500      	movs	r5, #0
   14b36:	2700      	movs	r7, #0
   14b38:	e5e9      	b.n	1470e <__aeabi_dsub+0x182>
   14b3a:	002e      	movs	r6, r5
   14b3c:	0027      	movs	r7, r4
   14b3e:	3e20      	subs	r6, #32
   14b40:	40f7      	lsrs	r7, r6
   14b42:	2d20      	cmp	r5, #32
   14b44:	d02f      	beq.n	14ba6 <__aeabi_dsub+0x61a>
   14b46:	2640      	movs	r6, #64	; 0x40
   14b48:	1b75      	subs	r5, r6, r5
   14b4a:	40ac      	lsls	r4, r5
   14b4c:	4650      	mov	r0, sl
   14b4e:	4320      	orrs	r0, r4
   14b50:	1e44      	subs	r4, r0, #1
   14b52:	41a0      	sbcs	r0, r4
   14b54:	2400      	movs	r4, #0
   14b56:	4338      	orrs	r0, r7
   14b58:	e6dc      	b.n	14914 <__aeabi_dsub+0x388>
   14b5a:	2480      	movs	r4, #128	; 0x80
   14b5c:	2500      	movs	r5, #0
   14b5e:	0324      	lsls	r4, r4, #12
   14b60:	4e13      	ldr	r6, [pc, #76]	; (14bb0 <__aeabi_dsub+0x624>)
   14b62:	2700      	movs	r7, #0
   14b64:	e5d3      	b.n	1470e <__aeabi_dsub+0x182>
   14b66:	4650      	mov	r0, sl
   14b68:	4320      	orrs	r0, r4
   14b6a:	0007      	movs	r7, r0
   14b6c:	1e78      	subs	r0, r7, #1
   14b6e:	4187      	sbcs	r7, r0
   14b70:	2400      	movs	r4, #0
   14b72:	18bf      	adds	r7, r7, r2
   14b74:	e760      	b.n	14a38 <__aeabi_dsub+0x4ac>
   14b76:	000c      	movs	r4, r1
   14b78:	0017      	movs	r7, r2
   14b7a:	e58d      	b.n	14698 <__aeabi_dsub+0x10c>
   14b7c:	000c      	movs	r4, r1
   14b7e:	0017      	movs	r7, r2
   14b80:	4e0b      	ldr	r6, [pc, #44]	; (14bb0 <__aeabi_dsub+0x624>)
   14b82:	e589      	b.n	14698 <__aeabi_dsub+0x10c>
   14b84:	001e      	movs	r6, r3
   14b86:	0027      	movs	r7, r4
   14b88:	3e20      	subs	r6, #32
   14b8a:	40f7      	lsrs	r7, r6
   14b8c:	2b20      	cmp	r3, #32
   14b8e:	d00c      	beq.n	14baa <__aeabi_dsub+0x61e>
   14b90:	2640      	movs	r6, #64	; 0x40
   14b92:	1af3      	subs	r3, r6, r3
   14b94:	409c      	lsls	r4, r3
   14b96:	4650      	mov	r0, sl
   14b98:	4320      	orrs	r0, r4
   14b9a:	1e44      	subs	r4, r0, #1
   14b9c:	41a0      	sbcs	r0, r4
   14b9e:	4307      	orrs	r7, r0
   14ba0:	2400      	movs	r4, #0
   14ba2:	18bf      	adds	r7, r7, r2
   14ba4:	e748      	b.n	14a38 <__aeabi_dsub+0x4ac>
   14ba6:	2400      	movs	r4, #0
   14ba8:	e7d0      	b.n	14b4c <__aeabi_dsub+0x5c0>
   14baa:	2400      	movs	r4, #0
   14bac:	e7f3      	b.n	14b96 <__aeabi_dsub+0x60a>
   14bae:	46c0      	nop			; (mov r8, r8)
   14bb0:	000007ff 	.word	0x000007ff
   14bb4:	ff7fffff 	.word	0xff7fffff

00014bb8 <__aeabi_d2iz>:
   14bb8:	b530      	push	{r4, r5, lr}
   14bba:	4d13      	ldr	r5, [pc, #76]	; (14c08 <__aeabi_d2iz+0x50>)
   14bbc:	030a      	lsls	r2, r1, #12
   14bbe:	004b      	lsls	r3, r1, #1
   14bc0:	0b12      	lsrs	r2, r2, #12
   14bc2:	0d5b      	lsrs	r3, r3, #21
   14bc4:	0fc9      	lsrs	r1, r1, #31
   14bc6:	2400      	movs	r4, #0
   14bc8:	42ab      	cmp	r3, r5
   14bca:	dd10      	ble.n	14bee <__aeabi_d2iz+0x36>
   14bcc:	4c0f      	ldr	r4, [pc, #60]	; (14c0c <__aeabi_d2iz+0x54>)
   14bce:	42a3      	cmp	r3, r4
   14bd0:	dc0f      	bgt.n	14bf2 <__aeabi_d2iz+0x3a>
   14bd2:	2480      	movs	r4, #128	; 0x80
   14bd4:	4d0e      	ldr	r5, [pc, #56]	; (14c10 <__aeabi_d2iz+0x58>)
   14bd6:	0364      	lsls	r4, r4, #13
   14bd8:	4322      	orrs	r2, r4
   14bda:	1aed      	subs	r5, r5, r3
   14bdc:	2d1f      	cmp	r5, #31
   14bde:	dd0b      	ble.n	14bf8 <__aeabi_d2iz+0x40>
   14be0:	480c      	ldr	r0, [pc, #48]	; (14c14 <__aeabi_d2iz+0x5c>)
   14be2:	1ac3      	subs	r3, r0, r3
   14be4:	40da      	lsrs	r2, r3
   14be6:	4254      	negs	r4, r2
   14be8:	2900      	cmp	r1, #0
   14bea:	d100      	bne.n	14bee <__aeabi_d2iz+0x36>
   14bec:	0014      	movs	r4, r2
   14bee:	0020      	movs	r0, r4
   14bf0:	bd30      	pop	{r4, r5, pc}
   14bf2:	4b09      	ldr	r3, [pc, #36]	; (14c18 <__aeabi_d2iz+0x60>)
   14bf4:	18cc      	adds	r4, r1, r3
   14bf6:	e7fa      	b.n	14bee <__aeabi_d2iz+0x36>
   14bf8:	4c08      	ldr	r4, [pc, #32]	; (14c1c <__aeabi_d2iz+0x64>)
   14bfa:	40e8      	lsrs	r0, r5
   14bfc:	46a4      	mov	ip, r4
   14bfe:	4463      	add	r3, ip
   14c00:	409a      	lsls	r2, r3
   14c02:	4302      	orrs	r2, r0
   14c04:	e7ef      	b.n	14be6 <__aeabi_d2iz+0x2e>
   14c06:	46c0      	nop			; (mov r8, r8)
   14c08:	000003fe 	.word	0x000003fe
   14c0c:	0000041d 	.word	0x0000041d
   14c10:	00000433 	.word	0x00000433
   14c14:	00000413 	.word	0x00000413
   14c18:	7fffffff 	.word	0x7fffffff
   14c1c:	fffffbed 	.word	0xfffffbed

00014c20 <__aeabi_i2d>:
   14c20:	b570      	push	{r4, r5, r6, lr}
   14c22:	2800      	cmp	r0, #0
   14c24:	d030      	beq.n	14c88 <__aeabi_i2d+0x68>
   14c26:	17c3      	asrs	r3, r0, #31
   14c28:	18c4      	adds	r4, r0, r3
   14c2a:	405c      	eors	r4, r3
   14c2c:	0fc5      	lsrs	r5, r0, #31
   14c2e:	0020      	movs	r0, r4
   14c30:	f000 f94c 	bl	14ecc <__clzsi2>
   14c34:	4b17      	ldr	r3, [pc, #92]	; (14c94 <__aeabi_i2d+0x74>)
   14c36:	4a18      	ldr	r2, [pc, #96]	; (14c98 <__aeabi_i2d+0x78>)
   14c38:	1a1b      	subs	r3, r3, r0
   14c3a:	1ad2      	subs	r2, r2, r3
   14c3c:	2a1f      	cmp	r2, #31
   14c3e:	dd18      	ble.n	14c72 <__aeabi_i2d+0x52>
   14c40:	4a16      	ldr	r2, [pc, #88]	; (14c9c <__aeabi_i2d+0x7c>)
   14c42:	1ad2      	subs	r2, r2, r3
   14c44:	4094      	lsls	r4, r2
   14c46:	2200      	movs	r2, #0
   14c48:	0324      	lsls	r4, r4, #12
   14c4a:	055b      	lsls	r3, r3, #21
   14c4c:	0b24      	lsrs	r4, r4, #12
   14c4e:	0d5b      	lsrs	r3, r3, #21
   14c50:	2100      	movs	r1, #0
   14c52:	0010      	movs	r0, r2
   14c54:	0324      	lsls	r4, r4, #12
   14c56:	0d0a      	lsrs	r2, r1, #20
   14c58:	0b24      	lsrs	r4, r4, #12
   14c5a:	0512      	lsls	r2, r2, #20
   14c5c:	4322      	orrs	r2, r4
   14c5e:	4c10      	ldr	r4, [pc, #64]	; (14ca0 <__aeabi_i2d+0x80>)
   14c60:	051b      	lsls	r3, r3, #20
   14c62:	4022      	ands	r2, r4
   14c64:	4313      	orrs	r3, r2
   14c66:	005b      	lsls	r3, r3, #1
   14c68:	07ed      	lsls	r5, r5, #31
   14c6a:	085b      	lsrs	r3, r3, #1
   14c6c:	432b      	orrs	r3, r5
   14c6e:	0019      	movs	r1, r3
   14c70:	bd70      	pop	{r4, r5, r6, pc}
   14c72:	0021      	movs	r1, r4
   14c74:	4091      	lsls	r1, r2
   14c76:	000a      	movs	r2, r1
   14c78:	210b      	movs	r1, #11
   14c7a:	1a08      	subs	r0, r1, r0
   14c7c:	40c4      	lsrs	r4, r0
   14c7e:	055b      	lsls	r3, r3, #21
   14c80:	0324      	lsls	r4, r4, #12
   14c82:	0b24      	lsrs	r4, r4, #12
   14c84:	0d5b      	lsrs	r3, r3, #21
   14c86:	e7e3      	b.n	14c50 <__aeabi_i2d+0x30>
   14c88:	2500      	movs	r5, #0
   14c8a:	2300      	movs	r3, #0
   14c8c:	2400      	movs	r4, #0
   14c8e:	2200      	movs	r2, #0
   14c90:	e7de      	b.n	14c50 <__aeabi_i2d+0x30>
   14c92:	46c0      	nop			; (mov r8, r8)
   14c94:	0000041e 	.word	0x0000041e
   14c98:	00000433 	.word	0x00000433
   14c9c:	00000413 	.word	0x00000413
   14ca0:	800fffff 	.word	0x800fffff

00014ca4 <__aeabi_ui2d>:
   14ca4:	b510      	push	{r4, lr}
   14ca6:	1e04      	subs	r4, r0, #0
   14ca8:	d028      	beq.n	14cfc <__aeabi_ui2d+0x58>
   14caa:	f000 f90f 	bl	14ecc <__clzsi2>
   14cae:	4b15      	ldr	r3, [pc, #84]	; (14d04 <__aeabi_ui2d+0x60>)
   14cb0:	4a15      	ldr	r2, [pc, #84]	; (14d08 <__aeabi_ui2d+0x64>)
   14cb2:	1a1b      	subs	r3, r3, r0
   14cb4:	1ad2      	subs	r2, r2, r3
   14cb6:	2a1f      	cmp	r2, #31
   14cb8:	dd15      	ble.n	14ce6 <__aeabi_ui2d+0x42>
   14cba:	4a14      	ldr	r2, [pc, #80]	; (14d0c <__aeabi_ui2d+0x68>)
   14cbc:	1ad2      	subs	r2, r2, r3
   14cbe:	4094      	lsls	r4, r2
   14cc0:	2200      	movs	r2, #0
   14cc2:	0324      	lsls	r4, r4, #12
   14cc4:	055b      	lsls	r3, r3, #21
   14cc6:	0b24      	lsrs	r4, r4, #12
   14cc8:	0d5b      	lsrs	r3, r3, #21
   14cca:	2100      	movs	r1, #0
   14ccc:	0010      	movs	r0, r2
   14cce:	0324      	lsls	r4, r4, #12
   14cd0:	0d0a      	lsrs	r2, r1, #20
   14cd2:	0b24      	lsrs	r4, r4, #12
   14cd4:	0512      	lsls	r2, r2, #20
   14cd6:	4322      	orrs	r2, r4
   14cd8:	4c0d      	ldr	r4, [pc, #52]	; (14d10 <__aeabi_ui2d+0x6c>)
   14cda:	051b      	lsls	r3, r3, #20
   14cdc:	4022      	ands	r2, r4
   14cde:	4313      	orrs	r3, r2
   14ce0:	005b      	lsls	r3, r3, #1
   14ce2:	0859      	lsrs	r1, r3, #1
   14ce4:	bd10      	pop	{r4, pc}
   14ce6:	0021      	movs	r1, r4
   14ce8:	4091      	lsls	r1, r2
   14cea:	000a      	movs	r2, r1
   14cec:	210b      	movs	r1, #11
   14cee:	1a08      	subs	r0, r1, r0
   14cf0:	40c4      	lsrs	r4, r0
   14cf2:	055b      	lsls	r3, r3, #21
   14cf4:	0324      	lsls	r4, r4, #12
   14cf6:	0b24      	lsrs	r4, r4, #12
   14cf8:	0d5b      	lsrs	r3, r3, #21
   14cfa:	e7e6      	b.n	14cca <__aeabi_ui2d+0x26>
   14cfc:	2300      	movs	r3, #0
   14cfe:	2400      	movs	r4, #0
   14d00:	2200      	movs	r2, #0
   14d02:	e7e2      	b.n	14cca <__aeabi_ui2d+0x26>
   14d04:	0000041e 	.word	0x0000041e
   14d08:	00000433 	.word	0x00000433
   14d0c:	00000413 	.word	0x00000413
   14d10:	800fffff 	.word	0x800fffff

00014d14 <__aeabi_f2d>:
   14d14:	0041      	lsls	r1, r0, #1
   14d16:	0e09      	lsrs	r1, r1, #24
   14d18:	1c4b      	adds	r3, r1, #1
   14d1a:	b570      	push	{r4, r5, r6, lr}
   14d1c:	b2db      	uxtb	r3, r3
   14d1e:	0246      	lsls	r6, r0, #9
   14d20:	0a75      	lsrs	r5, r6, #9
   14d22:	0fc4      	lsrs	r4, r0, #31
   14d24:	2b01      	cmp	r3, #1
   14d26:	dd14      	ble.n	14d52 <__aeabi_f2d+0x3e>
   14d28:	23e0      	movs	r3, #224	; 0xe0
   14d2a:	009b      	lsls	r3, r3, #2
   14d2c:	076d      	lsls	r5, r5, #29
   14d2e:	0b36      	lsrs	r6, r6, #12
   14d30:	18cb      	adds	r3, r1, r3
   14d32:	2100      	movs	r1, #0
   14d34:	0d0a      	lsrs	r2, r1, #20
   14d36:	0028      	movs	r0, r5
   14d38:	0512      	lsls	r2, r2, #20
   14d3a:	4d1c      	ldr	r5, [pc, #112]	; (14dac <__aeabi_f2d+0x98>)
   14d3c:	4332      	orrs	r2, r6
   14d3e:	055b      	lsls	r3, r3, #21
   14d40:	402a      	ands	r2, r5
   14d42:	085b      	lsrs	r3, r3, #1
   14d44:	4313      	orrs	r3, r2
   14d46:	005b      	lsls	r3, r3, #1
   14d48:	07e4      	lsls	r4, r4, #31
   14d4a:	085b      	lsrs	r3, r3, #1
   14d4c:	4323      	orrs	r3, r4
   14d4e:	0019      	movs	r1, r3
   14d50:	bd70      	pop	{r4, r5, r6, pc}
   14d52:	2900      	cmp	r1, #0
   14d54:	d114      	bne.n	14d80 <__aeabi_f2d+0x6c>
   14d56:	2d00      	cmp	r5, #0
   14d58:	d01e      	beq.n	14d98 <__aeabi_f2d+0x84>
   14d5a:	0028      	movs	r0, r5
   14d5c:	f000 f8b6 	bl	14ecc <__clzsi2>
   14d60:	280a      	cmp	r0, #10
   14d62:	dc1c      	bgt.n	14d9e <__aeabi_f2d+0x8a>
   14d64:	230b      	movs	r3, #11
   14d66:	002a      	movs	r2, r5
   14d68:	1a1b      	subs	r3, r3, r0
   14d6a:	40da      	lsrs	r2, r3
   14d6c:	0003      	movs	r3, r0
   14d6e:	3315      	adds	r3, #21
   14d70:	409d      	lsls	r5, r3
   14d72:	4b0f      	ldr	r3, [pc, #60]	; (14db0 <__aeabi_f2d+0x9c>)
   14d74:	0312      	lsls	r2, r2, #12
   14d76:	1a1b      	subs	r3, r3, r0
   14d78:	055b      	lsls	r3, r3, #21
   14d7a:	0b16      	lsrs	r6, r2, #12
   14d7c:	0d5b      	lsrs	r3, r3, #21
   14d7e:	e7d8      	b.n	14d32 <__aeabi_f2d+0x1e>
   14d80:	2d00      	cmp	r5, #0
   14d82:	d006      	beq.n	14d92 <__aeabi_f2d+0x7e>
   14d84:	0b32      	lsrs	r2, r6, #12
   14d86:	2680      	movs	r6, #128	; 0x80
   14d88:	0336      	lsls	r6, r6, #12
   14d8a:	076d      	lsls	r5, r5, #29
   14d8c:	4316      	orrs	r6, r2
   14d8e:	4b09      	ldr	r3, [pc, #36]	; (14db4 <__aeabi_f2d+0xa0>)
   14d90:	e7cf      	b.n	14d32 <__aeabi_f2d+0x1e>
   14d92:	4b08      	ldr	r3, [pc, #32]	; (14db4 <__aeabi_f2d+0xa0>)
   14d94:	2600      	movs	r6, #0
   14d96:	e7cc      	b.n	14d32 <__aeabi_f2d+0x1e>
   14d98:	2300      	movs	r3, #0
   14d9a:	2600      	movs	r6, #0
   14d9c:	e7c9      	b.n	14d32 <__aeabi_f2d+0x1e>
   14d9e:	0003      	movs	r3, r0
   14da0:	002a      	movs	r2, r5
   14da2:	3b0b      	subs	r3, #11
   14da4:	409a      	lsls	r2, r3
   14da6:	2500      	movs	r5, #0
   14da8:	e7e3      	b.n	14d72 <__aeabi_f2d+0x5e>
   14daa:	46c0      	nop			; (mov r8, r8)
   14dac:	800fffff 	.word	0x800fffff
   14db0:	00000389 	.word	0x00000389
   14db4:	000007ff 	.word	0x000007ff

00014db8 <__aeabi_d2f>:
   14db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14dba:	004c      	lsls	r4, r1, #1
   14dbc:	0d64      	lsrs	r4, r4, #21
   14dbe:	030b      	lsls	r3, r1, #12
   14dc0:	1c62      	adds	r2, r4, #1
   14dc2:	0f45      	lsrs	r5, r0, #29
   14dc4:	0a5b      	lsrs	r3, r3, #9
   14dc6:	0552      	lsls	r2, r2, #21
   14dc8:	432b      	orrs	r3, r5
   14dca:	0fc9      	lsrs	r1, r1, #31
   14dcc:	00c5      	lsls	r5, r0, #3
   14dce:	0d52      	lsrs	r2, r2, #21
   14dd0:	2a01      	cmp	r2, #1
   14dd2:	dd28      	ble.n	14e26 <__aeabi_d2f+0x6e>
   14dd4:	4a3a      	ldr	r2, [pc, #232]	; (14ec0 <__aeabi_d2f+0x108>)
   14dd6:	18a6      	adds	r6, r4, r2
   14dd8:	2efe      	cmp	r6, #254	; 0xfe
   14dda:	dc1b      	bgt.n	14e14 <__aeabi_d2f+0x5c>
   14ddc:	2e00      	cmp	r6, #0
   14dde:	dd3e      	ble.n	14e5e <__aeabi_d2f+0xa6>
   14de0:	0180      	lsls	r0, r0, #6
   14de2:	0002      	movs	r2, r0
   14de4:	1e50      	subs	r0, r2, #1
   14de6:	4182      	sbcs	r2, r0
   14de8:	0f6d      	lsrs	r5, r5, #29
   14dea:	432a      	orrs	r2, r5
   14dec:	00db      	lsls	r3, r3, #3
   14dee:	4313      	orrs	r3, r2
   14df0:	075a      	lsls	r2, r3, #29
   14df2:	d004      	beq.n	14dfe <__aeabi_d2f+0x46>
   14df4:	220f      	movs	r2, #15
   14df6:	401a      	ands	r2, r3
   14df8:	2a04      	cmp	r2, #4
   14dfa:	d000      	beq.n	14dfe <__aeabi_d2f+0x46>
   14dfc:	3304      	adds	r3, #4
   14dfe:	2280      	movs	r2, #128	; 0x80
   14e00:	04d2      	lsls	r2, r2, #19
   14e02:	401a      	ands	r2, r3
   14e04:	d05a      	beq.n	14ebc <__aeabi_d2f+0x104>
   14e06:	3601      	adds	r6, #1
   14e08:	2eff      	cmp	r6, #255	; 0xff
   14e0a:	d003      	beq.n	14e14 <__aeabi_d2f+0x5c>
   14e0c:	019b      	lsls	r3, r3, #6
   14e0e:	0a5b      	lsrs	r3, r3, #9
   14e10:	b2f4      	uxtb	r4, r6
   14e12:	e001      	b.n	14e18 <__aeabi_d2f+0x60>
   14e14:	24ff      	movs	r4, #255	; 0xff
   14e16:	2300      	movs	r3, #0
   14e18:	0258      	lsls	r0, r3, #9
   14e1a:	05e4      	lsls	r4, r4, #23
   14e1c:	0a40      	lsrs	r0, r0, #9
   14e1e:	07c9      	lsls	r1, r1, #31
   14e20:	4320      	orrs	r0, r4
   14e22:	4308      	orrs	r0, r1
   14e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14e26:	2c00      	cmp	r4, #0
   14e28:	d007      	beq.n	14e3a <__aeabi_d2f+0x82>
   14e2a:	431d      	orrs	r5, r3
   14e2c:	d0f2      	beq.n	14e14 <__aeabi_d2f+0x5c>
   14e2e:	2080      	movs	r0, #128	; 0x80
   14e30:	00db      	lsls	r3, r3, #3
   14e32:	0480      	lsls	r0, r0, #18
   14e34:	4303      	orrs	r3, r0
   14e36:	26ff      	movs	r6, #255	; 0xff
   14e38:	e7da      	b.n	14df0 <__aeabi_d2f+0x38>
   14e3a:	432b      	orrs	r3, r5
   14e3c:	d003      	beq.n	14e46 <__aeabi_d2f+0x8e>
   14e3e:	2305      	movs	r3, #5
   14e40:	08db      	lsrs	r3, r3, #3
   14e42:	2cff      	cmp	r4, #255	; 0xff
   14e44:	d003      	beq.n	14e4e <__aeabi_d2f+0x96>
   14e46:	025b      	lsls	r3, r3, #9
   14e48:	0a5b      	lsrs	r3, r3, #9
   14e4a:	b2e4      	uxtb	r4, r4
   14e4c:	e7e4      	b.n	14e18 <__aeabi_d2f+0x60>
   14e4e:	2b00      	cmp	r3, #0
   14e50:	d032      	beq.n	14eb8 <__aeabi_d2f+0x100>
   14e52:	2080      	movs	r0, #128	; 0x80
   14e54:	03c0      	lsls	r0, r0, #15
   14e56:	4303      	orrs	r3, r0
   14e58:	025b      	lsls	r3, r3, #9
   14e5a:	0a5b      	lsrs	r3, r3, #9
   14e5c:	e7dc      	b.n	14e18 <__aeabi_d2f+0x60>
   14e5e:	0032      	movs	r2, r6
   14e60:	3217      	adds	r2, #23
   14e62:	db14      	blt.n	14e8e <__aeabi_d2f+0xd6>
   14e64:	2280      	movs	r2, #128	; 0x80
   14e66:	271e      	movs	r7, #30
   14e68:	0412      	lsls	r2, r2, #16
   14e6a:	4313      	orrs	r3, r2
   14e6c:	1bbf      	subs	r7, r7, r6
   14e6e:	2f1f      	cmp	r7, #31
   14e70:	dc0f      	bgt.n	14e92 <__aeabi_d2f+0xda>
   14e72:	4a14      	ldr	r2, [pc, #80]	; (14ec4 <__aeabi_d2f+0x10c>)
   14e74:	4694      	mov	ip, r2
   14e76:	4464      	add	r4, ip
   14e78:	002a      	movs	r2, r5
   14e7a:	40a5      	lsls	r5, r4
   14e7c:	002e      	movs	r6, r5
   14e7e:	40a3      	lsls	r3, r4
   14e80:	1e75      	subs	r5, r6, #1
   14e82:	41ae      	sbcs	r6, r5
   14e84:	40fa      	lsrs	r2, r7
   14e86:	4333      	orrs	r3, r6
   14e88:	4313      	orrs	r3, r2
   14e8a:	2600      	movs	r6, #0
   14e8c:	e7b0      	b.n	14df0 <__aeabi_d2f+0x38>
   14e8e:	2400      	movs	r4, #0
   14e90:	e7d5      	b.n	14e3e <__aeabi_d2f+0x86>
   14e92:	2202      	movs	r2, #2
   14e94:	4252      	negs	r2, r2
   14e96:	1b96      	subs	r6, r2, r6
   14e98:	001a      	movs	r2, r3
   14e9a:	40f2      	lsrs	r2, r6
   14e9c:	2f20      	cmp	r7, #32
   14e9e:	d009      	beq.n	14eb4 <__aeabi_d2f+0xfc>
   14ea0:	4809      	ldr	r0, [pc, #36]	; (14ec8 <__aeabi_d2f+0x110>)
   14ea2:	4684      	mov	ip, r0
   14ea4:	4464      	add	r4, ip
   14ea6:	40a3      	lsls	r3, r4
   14ea8:	432b      	orrs	r3, r5
   14eaa:	1e5d      	subs	r5, r3, #1
   14eac:	41ab      	sbcs	r3, r5
   14eae:	2600      	movs	r6, #0
   14eb0:	4313      	orrs	r3, r2
   14eb2:	e79d      	b.n	14df0 <__aeabi_d2f+0x38>
   14eb4:	2300      	movs	r3, #0
   14eb6:	e7f7      	b.n	14ea8 <__aeabi_d2f+0xf0>
   14eb8:	2300      	movs	r3, #0
   14eba:	e7ad      	b.n	14e18 <__aeabi_d2f+0x60>
   14ebc:	0034      	movs	r4, r6
   14ebe:	e7bf      	b.n	14e40 <__aeabi_d2f+0x88>
   14ec0:	fffffc80 	.word	0xfffffc80
   14ec4:	fffffc82 	.word	0xfffffc82
   14ec8:	fffffca2 	.word	0xfffffca2

00014ecc <__clzsi2>:
   14ecc:	211c      	movs	r1, #28
   14ece:	2301      	movs	r3, #1
   14ed0:	041b      	lsls	r3, r3, #16
   14ed2:	4298      	cmp	r0, r3
   14ed4:	d301      	bcc.n	14eda <__clzsi2+0xe>
   14ed6:	0c00      	lsrs	r0, r0, #16
   14ed8:	3910      	subs	r1, #16
   14eda:	0a1b      	lsrs	r3, r3, #8
   14edc:	4298      	cmp	r0, r3
   14ede:	d301      	bcc.n	14ee4 <__clzsi2+0x18>
   14ee0:	0a00      	lsrs	r0, r0, #8
   14ee2:	3908      	subs	r1, #8
   14ee4:	091b      	lsrs	r3, r3, #4
   14ee6:	4298      	cmp	r0, r3
   14ee8:	d301      	bcc.n	14eee <__clzsi2+0x22>
   14eea:	0900      	lsrs	r0, r0, #4
   14eec:	3904      	subs	r1, #4
   14eee:	a202      	add	r2, pc, #8	; (adr r2, 14ef8 <__clzsi2+0x2c>)
   14ef0:	5c10      	ldrb	r0, [r2, r0]
   14ef2:	1840      	adds	r0, r0, r1
   14ef4:	4770      	bx	lr
   14ef6:	46c0      	nop			; (mov r8, r8)
   14ef8:	02020304 	.word	0x02020304
   14efc:	01010101 	.word	0x01010101
	...

00014f08 <__clzdi2>:
   14f08:	b510      	push	{r4, lr}
   14f0a:	2900      	cmp	r1, #0
   14f0c:	d103      	bne.n	14f16 <__clzdi2+0xe>
   14f0e:	f7ff ffdd 	bl	14ecc <__clzsi2>
   14f12:	3020      	adds	r0, #32
   14f14:	e002      	b.n	14f1c <__clzdi2+0x14>
   14f16:	1c08      	adds	r0, r1, #0
   14f18:	f7ff ffd8 	bl	14ecc <__clzsi2>
   14f1c:	bd10      	pop	{r4, pc}
   14f1e:	46c0      	nop			; (mov r8, r8)

00014f20 <__assert_func>:
   14f20:	b530      	push	{r4, r5, lr}
   14f22:	001c      	movs	r4, r3
   14f24:	4b09      	ldr	r3, [pc, #36]	; (14f4c <__assert_func+0x2c>)
   14f26:	0005      	movs	r5, r0
   14f28:	681b      	ldr	r3, [r3, #0]
   14f2a:	b085      	sub	sp, #20
   14f2c:	68d8      	ldr	r0, [r3, #12]
   14f2e:	4b08      	ldr	r3, [pc, #32]	; (14f50 <__assert_func+0x30>)
   14f30:	2a00      	cmp	r2, #0
   14f32:	d101      	bne.n	14f38 <__assert_func+0x18>
   14f34:	4b07      	ldr	r3, [pc, #28]	; (14f54 <__assert_func+0x34>)
   14f36:	001a      	movs	r2, r3
   14f38:	9202      	str	r2, [sp, #8]
   14f3a:	9301      	str	r3, [sp, #4]
   14f3c:	9100      	str	r1, [sp, #0]
   14f3e:	002b      	movs	r3, r5
   14f40:	0022      	movs	r2, r4
   14f42:	4905      	ldr	r1, [pc, #20]	; (14f58 <__assert_func+0x38>)
   14f44:	f000 f80a 	bl	14f5c <fiprintf>
   14f48:	f000 fc9a 	bl	15880 <abort>
   14f4c:	2000001c 	.word	0x2000001c
   14f50:	00016eec 	.word	0x00016eec
   14f54:	00016f27 	.word	0x00016f27
   14f58:	00016ef9 	.word	0x00016ef9

00014f5c <fiprintf>:
   14f5c:	b40e      	push	{r1, r2, r3}
   14f5e:	b503      	push	{r0, r1, lr}
   14f60:	0001      	movs	r1, r0
   14f62:	ab03      	add	r3, sp, #12
   14f64:	4804      	ldr	r0, [pc, #16]	; (14f78 <fiprintf+0x1c>)
   14f66:	cb04      	ldmia	r3!, {r2}
   14f68:	6800      	ldr	r0, [r0, #0]
   14f6a:	9301      	str	r3, [sp, #4]
   14f6c:	f000 f872 	bl	15054 <_vfiprintf_r>
   14f70:	b002      	add	sp, #8
   14f72:	bc08      	pop	{r3}
   14f74:	b003      	add	sp, #12
   14f76:	4718      	bx	r3
   14f78:	2000001c 	.word	0x2000001c

00014f7c <__libc_init_array>:
   14f7c:	b570      	push	{r4, r5, r6, lr}
   14f7e:	2600      	movs	r6, #0
   14f80:	4d0c      	ldr	r5, [pc, #48]	; (14fb4 <__libc_init_array+0x38>)
   14f82:	4c0d      	ldr	r4, [pc, #52]	; (14fb8 <__libc_init_array+0x3c>)
   14f84:	1b64      	subs	r4, r4, r5
   14f86:	10a4      	asrs	r4, r4, #2
   14f88:	42a6      	cmp	r6, r4
   14f8a:	d109      	bne.n	14fa0 <__libc_init_array+0x24>
   14f8c:	2600      	movs	r6, #0
   14f8e:	f002 f817 	bl	16fc0 <_init>
   14f92:	4d0a      	ldr	r5, [pc, #40]	; (14fbc <__libc_init_array+0x40>)
   14f94:	4c0a      	ldr	r4, [pc, #40]	; (14fc0 <__libc_init_array+0x44>)
   14f96:	1b64      	subs	r4, r4, r5
   14f98:	10a4      	asrs	r4, r4, #2
   14f9a:	42a6      	cmp	r6, r4
   14f9c:	d105      	bne.n	14faa <__libc_init_array+0x2e>
   14f9e:	bd70      	pop	{r4, r5, r6, pc}
   14fa0:	00b3      	lsls	r3, r6, #2
   14fa2:	58eb      	ldr	r3, [r5, r3]
   14fa4:	4798      	blx	r3
   14fa6:	3601      	adds	r6, #1
   14fa8:	e7ee      	b.n	14f88 <__libc_init_array+0xc>
   14faa:	00b3      	lsls	r3, r6, #2
   14fac:	58eb      	ldr	r3, [r5, r3]
   14fae:	4798      	blx	r3
   14fb0:	3601      	adds	r6, #1
   14fb2:	e7f2      	b.n	14f9a <__libc_init_array+0x1e>
   14fb4:	00016fcc 	.word	0x00016fcc
   14fb8:	00016fcc 	.word	0x00016fcc
   14fbc:	00016fcc 	.word	0x00016fcc
   14fc0:	00016fd0 	.word	0x00016fd0

00014fc4 <memcmp>:
   14fc4:	b530      	push	{r4, r5, lr}
   14fc6:	2400      	movs	r4, #0
   14fc8:	42a2      	cmp	r2, r4
   14fca:	d101      	bne.n	14fd0 <memcmp+0xc>
   14fcc:	2000      	movs	r0, #0
   14fce:	e005      	b.n	14fdc <memcmp+0x18>
   14fd0:	5d03      	ldrb	r3, [r0, r4]
   14fd2:	1c65      	adds	r5, r4, #1
   14fd4:	5d0c      	ldrb	r4, [r1, r4]
   14fd6:	42a3      	cmp	r3, r4
   14fd8:	d001      	beq.n	14fde <memcmp+0x1a>
   14fda:	1b18      	subs	r0, r3, r4
   14fdc:	bd30      	pop	{r4, r5, pc}
   14fde:	002c      	movs	r4, r5
   14fe0:	e7f2      	b.n	14fc8 <memcmp+0x4>

00014fe2 <memcpy>:
   14fe2:	2300      	movs	r3, #0
   14fe4:	b510      	push	{r4, lr}
   14fe6:	429a      	cmp	r2, r3
   14fe8:	d100      	bne.n	14fec <memcpy+0xa>
   14fea:	bd10      	pop	{r4, pc}
   14fec:	5ccc      	ldrb	r4, [r1, r3]
   14fee:	54c4      	strb	r4, [r0, r3]
   14ff0:	3301      	adds	r3, #1
   14ff2:	e7f8      	b.n	14fe6 <memcpy+0x4>

00014ff4 <memset>:
   14ff4:	0003      	movs	r3, r0
   14ff6:	1882      	adds	r2, r0, r2
   14ff8:	4293      	cmp	r3, r2
   14ffa:	d100      	bne.n	14ffe <memset+0xa>
   14ffc:	4770      	bx	lr
   14ffe:	7019      	strb	r1, [r3, #0]
   15000:	3301      	adds	r3, #1
   15002:	e7f9      	b.n	14ff8 <memset+0x4>

00015004 <__sfputc_r>:
   15004:	6893      	ldr	r3, [r2, #8]
   15006:	b510      	push	{r4, lr}
   15008:	3b01      	subs	r3, #1
   1500a:	6093      	str	r3, [r2, #8]
   1500c:	2b00      	cmp	r3, #0
   1500e:	da05      	bge.n	1501c <__sfputc_r+0x18>
   15010:	6994      	ldr	r4, [r2, #24]
   15012:	42a3      	cmp	r3, r4
   15014:	db08      	blt.n	15028 <__sfputc_r+0x24>
   15016:	b2cb      	uxtb	r3, r1
   15018:	2b0a      	cmp	r3, #10
   1501a:	d005      	beq.n	15028 <__sfputc_r+0x24>
   1501c:	6813      	ldr	r3, [r2, #0]
   1501e:	1c58      	adds	r0, r3, #1
   15020:	6010      	str	r0, [r2, #0]
   15022:	7019      	strb	r1, [r3, #0]
   15024:	b2c8      	uxtb	r0, r1
   15026:	bd10      	pop	{r4, pc}
   15028:	f000 fb5e 	bl	156e8 <__swbuf_r>
   1502c:	e7fb      	b.n	15026 <__sfputc_r+0x22>

0001502e <__sfputs_r>:
   1502e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15030:	0006      	movs	r6, r0
   15032:	000f      	movs	r7, r1
   15034:	0014      	movs	r4, r2
   15036:	18d5      	adds	r5, r2, r3
   15038:	42ac      	cmp	r4, r5
   1503a:	d101      	bne.n	15040 <__sfputs_r+0x12>
   1503c:	2000      	movs	r0, #0
   1503e:	e007      	b.n	15050 <__sfputs_r+0x22>
   15040:	7821      	ldrb	r1, [r4, #0]
   15042:	003a      	movs	r2, r7
   15044:	0030      	movs	r0, r6
   15046:	f7ff ffdd 	bl	15004 <__sfputc_r>
   1504a:	3401      	adds	r4, #1
   1504c:	1c43      	adds	r3, r0, #1
   1504e:	d1f3      	bne.n	15038 <__sfputs_r+0xa>
   15050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15052:	Address 0x00015052 is out of bounds.


00015054 <_vfiprintf_r>:
   15054:	b5f0      	push	{r4, r5, r6, r7, lr}
   15056:	b09f      	sub	sp, #124	; 0x7c
   15058:	0006      	movs	r6, r0
   1505a:	000f      	movs	r7, r1
   1505c:	0014      	movs	r4, r2
   1505e:	9305      	str	r3, [sp, #20]
   15060:	2800      	cmp	r0, #0
   15062:	d004      	beq.n	1506e <_vfiprintf_r+0x1a>
   15064:	6983      	ldr	r3, [r0, #24]
   15066:	2b00      	cmp	r3, #0
   15068:	d101      	bne.n	1506e <_vfiprintf_r+0x1a>
   1506a:	f000 fd09 	bl	15a80 <__sinit>
   1506e:	4b7f      	ldr	r3, [pc, #508]	; (1526c <_vfiprintf_r+0x218>)
   15070:	429f      	cmp	r7, r3
   15072:	d15c      	bne.n	1512e <_vfiprintf_r+0xda>
   15074:	6877      	ldr	r7, [r6, #4]
   15076:	89bb      	ldrh	r3, [r7, #12]
   15078:	071b      	lsls	r3, r3, #28
   1507a:	d562      	bpl.n	15142 <_vfiprintf_r+0xee>
   1507c:	693b      	ldr	r3, [r7, #16]
   1507e:	2b00      	cmp	r3, #0
   15080:	d05f      	beq.n	15142 <_vfiprintf_r+0xee>
   15082:	2300      	movs	r3, #0
   15084:	ad06      	add	r5, sp, #24
   15086:	616b      	str	r3, [r5, #20]
   15088:	3320      	adds	r3, #32
   1508a:	766b      	strb	r3, [r5, #25]
   1508c:	3310      	adds	r3, #16
   1508e:	76ab      	strb	r3, [r5, #26]
   15090:	9402      	str	r4, [sp, #8]
   15092:	9c02      	ldr	r4, [sp, #8]
   15094:	7823      	ldrb	r3, [r4, #0]
   15096:	2b00      	cmp	r3, #0
   15098:	d15d      	bne.n	15156 <_vfiprintf_r+0x102>
   1509a:	9b02      	ldr	r3, [sp, #8]
   1509c:	1ae3      	subs	r3, r4, r3
   1509e:	9304      	str	r3, [sp, #16]
   150a0:	d00d      	beq.n	150be <_vfiprintf_r+0x6a>
   150a2:	9b04      	ldr	r3, [sp, #16]
   150a4:	9a02      	ldr	r2, [sp, #8]
   150a6:	0039      	movs	r1, r7
   150a8:	0030      	movs	r0, r6
   150aa:	f7ff ffc0 	bl	1502e <__sfputs_r>
   150ae:	1c43      	adds	r3, r0, #1
   150b0:	d100      	bne.n	150b4 <_vfiprintf_r+0x60>
   150b2:	e0cc      	b.n	1524e <_vfiprintf_r+0x1fa>
   150b4:	696a      	ldr	r2, [r5, #20]
   150b6:	9b04      	ldr	r3, [sp, #16]
   150b8:	4694      	mov	ip, r2
   150ba:	4463      	add	r3, ip
   150bc:	616b      	str	r3, [r5, #20]
   150be:	7823      	ldrb	r3, [r4, #0]
   150c0:	2b00      	cmp	r3, #0
   150c2:	d100      	bne.n	150c6 <_vfiprintf_r+0x72>
   150c4:	e0c3      	b.n	1524e <_vfiprintf_r+0x1fa>
   150c6:	2201      	movs	r2, #1
   150c8:	2300      	movs	r3, #0
   150ca:	4252      	negs	r2, r2
   150cc:	606a      	str	r2, [r5, #4]
   150ce:	a902      	add	r1, sp, #8
   150d0:	3254      	adds	r2, #84	; 0x54
   150d2:	1852      	adds	r2, r2, r1
   150d4:	3401      	adds	r4, #1
   150d6:	602b      	str	r3, [r5, #0]
   150d8:	60eb      	str	r3, [r5, #12]
   150da:	60ab      	str	r3, [r5, #8]
   150dc:	7013      	strb	r3, [r2, #0]
   150de:	65ab      	str	r3, [r5, #88]	; 0x58
   150e0:	7821      	ldrb	r1, [r4, #0]
   150e2:	2205      	movs	r2, #5
   150e4:	4862      	ldr	r0, [pc, #392]	; (15270 <_vfiprintf_r+0x21c>)
   150e6:	f000 fdd7 	bl	15c98 <memchr>
   150ea:	1c63      	adds	r3, r4, #1
   150ec:	469c      	mov	ip, r3
   150ee:	2800      	cmp	r0, #0
   150f0:	d135      	bne.n	1515e <_vfiprintf_r+0x10a>
   150f2:	6829      	ldr	r1, [r5, #0]
   150f4:	06cb      	lsls	r3, r1, #27
   150f6:	d504      	bpl.n	15102 <_vfiprintf_r+0xae>
   150f8:	2353      	movs	r3, #83	; 0x53
   150fa:	aa02      	add	r2, sp, #8
   150fc:	3020      	adds	r0, #32
   150fe:	189b      	adds	r3, r3, r2
   15100:	7018      	strb	r0, [r3, #0]
   15102:	070b      	lsls	r3, r1, #28
   15104:	d504      	bpl.n	15110 <_vfiprintf_r+0xbc>
   15106:	2353      	movs	r3, #83	; 0x53
   15108:	202b      	movs	r0, #43	; 0x2b
   1510a:	aa02      	add	r2, sp, #8
   1510c:	189b      	adds	r3, r3, r2
   1510e:	7018      	strb	r0, [r3, #0]
   15110:	7823      	ldrb	r3, [r4, #0]
   15112:	2b2a      	cmp	r3, #42	; 0x2a
   15114:	d02c      	beq.n	15170 <_vfiprintf_r+0x11c>
   15116:	2000      	movs	r0, #0
   15118:	210a      	movs	r1, #10
   1511a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1511c:	7822      	ldrb	r2, [r4, #0]
   1511e:	3a30      	subs	r2, #48	; 0x30
   15120:	2a09      	cmp	r2, #9
   15122:	d800      	bhi.n	15126 <_vfiprintf_r+0xd2>
   15124:	e06b      	b.n	151fe <_vfiprintf_r+0x1aa>
   15126:	2800      	cmp	r0, #0
   15128:	d02a      	beq.n	15180 <_vfiprintf_r+0x12c>
   1512a:	9309      	str	r3, [sp, #36]	; 0x24
   1512c:	e028      	b.n	15180 <_vfiprintf_r+0x12c>
   1512e:	4b51      	ldr	r3, [pc, #324]	; (15274 <_vfiprintf_r+0x220>)
   15130:	429f      	cmp	r7, r3
   15132:	d101      	bne.n	15138 <_vfiprintf_r+0xe4>
   15134:	68b7      	ldr	r7, [r6, #8]
   15136:	e79e      	b.n	15076 <_vfiprintf_r+0x22>
   15138:	4b4f      	ldr	r3, [pc, #316]	; (15278 <_vfiprintf_r+0x224>)
   1513a:	429f      	cmp	r7, r3
   1513c:	d19b      	bne.n	15076 <_vfiprintf_r+0x22>
   1513e:	68f7      	ldr	r7, [r6, #12]
   15140:	e799      	b.n	15076 <_vfiprintf_r+0x22>
   15142:	0039      	movs	r1, r7
   15144:	0030      	movs	r0, r6
   15146:	f000 fb25 	bl	15794 <__swsetup_r>
   1514a:	2800      	cmp	r0, #0
   1514c:	d099      	beq.n	15082 <_vfiprintf_r+0x2e>
   1514e:	2001      	movs	r0, #1
   15150:	4240      	negs	r0, r0
   15152:	b01f      	add	sp, #124	; 0x7c
   15154:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15156:	2b25      	cmp	r3, #37	; 0x25
   15158:	d09f      	beq.n	1509a <_vfiprintf_r+0x46>
   1515a:	3401      	adds	r4, #1
   1515c:	e79a      	b.n	15094 <_vfiprintf_r+0x40>
   1515e:	4b44      	ldr	r3, [pc, #272]	; (15270 <_vfiprintf_r+0x21c>)
   15160:	6829      	ldr	r1, [r5, #0]
   15162:	1ac0      	subs	r0, r0, r3
   15164:	2301      	movs	r3, #1
   15166:	4083      	lsls	r3, r0
   15168:	430b      	orrs	r3, r1
   1516a:	602b      	str	r3, [r5, #0]
   1516c:	4664      	mov	r4, ip
   1516e:	e7b7      	b.n	150e0 <_vfiprintf_r+0x8c>
   15170:	9b05      	ldr	r3, [sp, #20]
   15172:	1d18      	adds	r0, r3, #4
   15174:	681b      	ldr	r3, [r3, #0]
   15176:	9005      	str	r0, [sp, #20]
   15178:	2b00      	cmp	r3, #0
   1517a:	db3a      	blt.n	151f2 <_vfiprintf_r+0x19e>
   1517c:	9309      	str	r3, [sp, #36]	; 0x24
   1517e:	4664      	mov	r4, ip
   15180:	7823      	ldrb	r3, [r4, #0]
   15182:	2b2e      	cmp	r3, #46	; 0x2e
   15184:	d10b      	bne.n	1519e <_vfiprintf_r+0x14a>
   15186:	7863      	ldrb	r3, [r4, #1]
   15188:	1c62      	adds	r2, r4, #1
   1518a:	2b2a      	cmp	r3, #42	; 0x2a
   1518c:	d13f      	bne.n	1520e <_vfiprintf_r+0x1ba>
   1518e:	9b05      	ldr	r3, [sp, #20]
   15190:	3402      	adds	r4, #2
   15192:	1d1a      	adds	r2, r3, #4
   15194:	681b      	ldr	r3, [r3, #0]
   15196:	9205      	str	r2, [sp, #20]
   15198:	2b00      	cmp	r3, #0
   1519a:	db35      	blt.n	15208 <_vfiprintf_r+0x1b4>
   1519c:	9307      	str	r3, [sp, #28]
   1519e:	7821      	ldrb	r1, [r4, #0]
   151a0:	2203      	movs	r2, #3
   151a2:	4836      	ldr	r0, [pc, #216]	; (1527c <_vfiprintf_r+0x228>)
   151a4:	f000 fd78 	bl	15c98 <memchr>
   151a8:	2800      	cmp	r0, #0
   151aa:	d007      	beq.n	151bc <_vfiprintf_r+0x168>
   151ac:	4b33      	ldr	r3, [pc, #204]	; (1527c <_vfiprintf_r+0x228>)
   151ae:	682a      	ldr	r2, [r5, #0]
   151b0:	1ac0      	subs	r0, r0, r3
   151b2:	2340      	movs	r3, #64	; 0x40
   151b4:	4083      	lsls	r3, r0
   151b6:	4313      	orrs	r3, r2
   151b8:	602b      	str	r3, [r5, #0]
   151ba:	3401      	adds	r4, #1
   151bc:	7821      	ldrb	r1, [r4, #0]
   151be:	1c63      	adds	r3, r4, #1
   151c0:	2206      	movs	r2, #6
   151c2:	482f      	ldr	r0, [pc, #188]	; (15280 <_vfiprintf_r+0x22c>)
   151c4:	9302      	str	r3, [sp, #8]
   151c6:	7629      	strb	r1, [r5, #24]
   151c8:	f000 fd66 	bl	15c98 <memchr>
   151cc:	2800      	cmp	r0, #0
   151ce:	d044      	beq.n	1525a <_vfiprintf_r+0x206>
   151d0:	4b2c      	ldr	r3, [pc, #176]	; (15284 <_vfiprintf_r+0x230>)
   151d2:	2b00      	cmp	r3, #0
   151d4:	d12f      	bne.n	15236 <_vfiprintf_r+0x1e2>
   151d6:	6829      	ldr	r1, [r5, #0]
   151d8:	9b05      	ldr	r3, [sp, #20]
   151da:	2207      	movs	r2, #7
   151dc:	05c9      	lsls	r1, r1, #23
   151de:	d528      	bpl.n	15232 <_vfiprintf_r+0x1de>
   151e0:	189b      	adds	r3, r3, r2
   151e2:	4393      	bics	r3, r2
   151e4:	3308      	adds	r3, #8
   151e6:	9305      	str	r3, [sp, #20]
   151e8:	696b      	ldr	r3, [r5, #20]
   151ea:	9a03      	ldr	r2, [sp, #12]
   151ec:	189b      	adds	r3, r3, r2
   151ee:	616b      	str	r3, [r5, #20]
   151f0:	e74f      	b.n	15092 <_vfiprintf_r+0x3e>
   151f2:	425b      	negs	r3, r3
   151f4:	60eb      	str	r3, [r5, #12]
   151f6:	2302      	movs	r3, #2
   151f8:	430b      	orrs	r3, r1
   151fa:	602b      	str	r3, [r5, #0]
   151fc:	e7bf      	b.n	1517e <_vfiprintf_r+0x12a>
   151fe:	434b      	muls	r3, r1
   15200:	3401      	adds	r4, #1
   15202:	189b      	adds	r3, r3, r2
   15204:	2001      	movs	r0, #1
   15206:	e789      	b.n	1511c <_vfiprintf_r+0xc8>
   15208:	2301      	movs	r3, #1
   1520a:	425b      	negs	r3, r3
   1520c:	e7c6      	b.n	1519c <_vfiprintf_r+0x148>
   1520e:	2300      	movs	r3, #0
   15210:	0014      	movs	r4, r2
   15212:	200a      	movs	r0, #10
   15214:	001a      	movs	r2, r3
   15216:	606b      	str	r3, [r5, #4]
   15218:	7821      	ldrb	r1, [r4, #0]
   1521a:	3930      	subs	r1, #48	; 0x30
   1521c:	2909      	cmp	r1, #9
   1521e:	d903      	bls.n	15228 <_vfiprintf_r+0x1d4>
   15220:	2b00      	cmp	r3, #0
   15222:	d0bc      	beq.n	1519e <_vfiprintf_r+0x14a>
   15224:	9207      	str	r2, [sp, #28]
   15226:	e7ba      	b.n	1519e <_vfiprintf_r+0x14a>
   15228:	4342      	muls	r2, r0
   1522a:	3401      	adds	r4, #1
   1522c:	1852      	adds	r2, r2, r1
   1522e:	2301      	movs	r3, #1
   15230:	e7f2      	b.n	15218 <_vfiprintf_r+0x1c4>
   15232:	3307      	adds	r3, #7
   15234:	e7d5      	b.n	151e2 <_vfiprintf_r+0x18e>
   15236:	ab05      	add	r3, sp, #20
   15238:	9300      	str	r3, [sp, #0]
   1523a:	003a      	movs	r2, r7
   1523c:	4b12      	ldr	r3, [pc, #72]	; (15288 <_vfiprintf_r+0x234>)
   1523e:	0029      	movs	r1, r5
   15240:	0030      	movs	r0, r6
   15242:	e000      	b.n	15246 <_vfiprintf_r+0x1f2>
   15244:	bf00      	nop
   15246:	9003      	str	r0, [sp, #12]
   15248:	9b03      	ldr	r3, [sp, #12]
   1524a:	3301      	adds	r3, #1
   1524c:	d1cc      	bne.n	151e8 <_vfiprintf_r+0x194>
   1524e:	89bb      	ldrh	r3, [r7, #12]
   15250:	065b      	lsls	r3, r3, #25
   15252:	d500      	bpl.n	15256 <_vfiprintf_r+0x202>
   15254:	e77b      	b.n	1514e <_vfiprintf_r+0xfa>
   15256:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15258:	e77b      	b.n	15152 <_vfiprintf_r+0xfe>
   1525a:	ab05      	add	r3, sp, #20
   1525c:	9300      	str	r3, [sp, #0]
   1525e:	003a      	movs	r2, r7
   15260:	4b09      	ldr	r3, [pc, #36]	; (15288 <_vfiprintf_r+0x234>)
   15262:	0029      	movs	r1, r5
   15264:	0030      	movs	r0, r6
   15266:	f000 f87f 	bl	15368 <_printf_i>
   1526a:	e7ec      	b.n	15246 <_vfiprintf_r+0x1f2>
   1526c:	00016f80 	.word	0x00016f80
   15270:	00016f2c 	.word	0x00016f2c
   15274:	00016fa0 	.word	0x00016fa0
   15278:	00016f60 	.word	0x00016f60
   1527c:	00016f32 	.word	0x00016f32
   15280:	00016f36 	.word	0x00016f36
   15284:	00000000 	.word	0x00000000
   15288:	0001502f 	.word	0x0001502f

0001528c <_printf_common>:
   1528c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1528e:	0015      	movs	r5, r2
   15290:	9301      	str	r3, [sp, #4]
   15292:	688a      	ldr	r2, [r1, #8]
   15294:	690b      	ldr	r3, [r1, #16]
   15296:	9000      	str	r0, [sp, #0]
   15298:	000c      	movs	r4, r1
   1529a:	4293      	cmp	r3, r2
   1529c:	da00      	bge.n	152a0 <_printf_common+0x14>
   1529e:	0013      	movs	r3, r2
   152a0:	0022      	movs	r2, r4
   152a2:	602b      	str	r3, [r5, #0]
   152a4:	3243      	adds	r2, #67	; 0x43
   152a6:	7812      	ldrb	r2, [r2, #0]
   152a8:	2a00      	cmp	r2, #0
   152aa:	d001      	beq.n	152b0 <_printf_common+0x24>
   152ac:	3301      	adds	r3, #1
   152ae:	602b      	str	r3, [r5, #0]
   152b0:	6823      	ldr	r3, [r4, #0]
   152b2:	069b      	lsls	r3, r3, #26
   152b4:	d502      	bpl.n	152bc <_printf_common+0x30>
   152b6:	682b      	ldr	r3, [r5, #0]
   152b8:	3302      	adds	r3, #2
   152ba:	602b      	str	r3, [r5, #0]
   152bc:	2706      	movs	r7, #6
   152be:	6823      	ldr	r3, [r4, #0]
   152c0:	401f      	ands	r7, r3
   152c2:	d027      	beq.n	15314 <_printf_common+0x88>
   152c4:	0023      	movs	r3, r4
   152c6:	3343      	adds	r3, #67	; 0x43
   152c8:	781b      	ldrb	r3, [r3, #0]
   152ca:	1e5a      	subs	r2, r3, #1
   152cc:	4193      	sbcs	r3, r2
   152ce:	6822      	ldr	r2, [r4, #0]
   152d0:	0692      	lsls	r2, r2, #26
   152d2:	d430      	bmi.n	15336 <_printf_common+0xaa>
   152d4:	0022      	movs	r2, r4
   152d6:	9901      	ldr	r1, [sp, #4]
   152d8:	3243      	adds	r2, #67	; 0x43
   152da:	9800      	ldr	r0, [sp, #0]
   152dc:	9e08      	ldr	r6, [sp, #32]
   152de:	47b0      	blx	r6
   152e0:	1c43      	adds	r3, r0, #1
   152e2:	d025      	beq.n	15330 <_printf_common+0xa4>
   152e4:	2306      	movs	r3, #6
   152e6:	6820      	ldr	r0, [r4, #0]
   152e8:	682a      	ldr	r2, [r5, #0]
   152ea:	68e1      	ldr	r1, [r4, #12]
   152ec:	4003      	ands	r3, r0
   152ee:	2500      	movs	r5, #0
   152f0:	2b04      	cmp	r3, #4
   152f2:	d103      	bne.n	152fc <_printf_common+0x70>
   152f4:	1a8d      	subs	r5, r1, r2
   152f6:	43eb      	mvns	r3, r5
   152f8:	17db      	asrs	r3, r3, #31
   152fa:	401d      	ands	r5, r3
   152fc:	68a3      	ldr	r3, [r4, #8]
   152fe:	6922      	ldr	r2, [r4, #16]
   15300:	4293      	cmp	r3, r2
   15302:	dd01      	ble.n	15308 <_printf_common+0x7c>
   15304:	1a9b      	subs	r3, r3, r2
   15306:	18ed      	adds	r5, r5, r3
   15308:	2700      	movs	r7, #0
   1530a:	42bd      	cmp	r5, r7
   1530c:	d120      	bne.n	15350 <_printf_common+0xc4>
   1530e:	2000      	movs	r0, #0
   15310:	e010      	b.n	15334 <_printf_common+0xa8>
   15312:	3701      	adds	r7, #1
   15314:	68e3      	ldr	r3, [r4, #12]
   15316:	682a      	ldr	r2, [r5, #0]
   15318:	1a9b      	subs	r3, r3, r2
   1531a:	429f      	cmp	r7, r3
   1531c:	dad2      	bge.n	152c4 <_printf_common+0x38>
   1531e:	0022      	movs	r2, r4
   15320:	2301      	movs	r3, #1
   15322:	3219      	adds	r2, #25
   15324:	9901      	ldr	r1, [sp, #4]
   15326:	9800      	ldr	r0, [sp, #0]
   15328:	9e08      	ldr	r6, [sp, #32]
   1532a:	47b0      	blx	r6
   1532c:	1c43      	adds	r3, r0, #1
   1532e:	d1f0      	bne.n	15312 <_printf_common+0x86>
   15330:	2001      	movs	r0, #1
   15332:	4240      	negs	r0, r0
   15334:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   15336:	2030      	movs	r0, #48	; 0x30
   15338:	18e1      	adds	r1, r4, r3
   1533a:	3143      	adds	r1, #67	; 0x43
   1533c:	7008      	strb	r0, [r1, #0]
   1533e:	0021      	movs	r1, r4
   15340:	1c5a      	adds	r2, r3, #1
   15342:	3145      	adds	r1, #69	; 0x45
   15344:	7809      	ldrb	r1, [r1, #0]
   15346:	18a2      	adds	r2, r4, r2
   15348:	3243      	adds	r2, #67	; 0x43
   1534a:	3302      	adds	r3, #2
   1534c:	7011      	strb	r1, [r2, #0]
   1534e:	e7c1      	b.n	152d4 <_printf_common+0x48>
   15350:	0022      	movs	r2, r4
   15352:	2301      	movs	r3, #1
   15354:	321a      	adds	r2, #26
   15356:	9901      	ldr	r1, [sp, #4]
   15358:	9800      	ldr	r0, [sp, #0]
   1535a:	9e08      	ldr	r6, [sp, #32]
   1535c:	47b0      	blx	r6
   1535e:	1c43      	adds	r3, r0, #1
   15360:	d0e6      	beq.n	15330 <_printf_common+0xa4>
   15362:	3701      	adds	r7, #1
   15364:	e7d1      	b.n	1530a <_printf_common+0x7e>
   15366:	Address 0x00015366 is out of bounds.


00015368 <_printf_i>:
   15368:	b5f0      	push	{r4, r5, r6, r7, lr}
   1536a:	b08b      	sub	sp, #44	; 0x2c
   1536c:	9206      	str	r2, [sp, #24]
   1536e:	000a      	movs	r2, r1
   15370:	3243      	adds	r2, #67	; 0x43
   15372:	9307      	str	r3, [sp, #28]
   15374:	9005      	str	r0, [sp, #20]
   15376:	9204      	str	r2, [sp, #16]
   15378:	7e0a      	ldrb	r2, [r1, #24]
   1537a:	000c      	movs	r4, r1
   1537c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1537e:	2a6e      	cmp	r2, #110	; 0x6e
   15380:	d100      	bne.n	15384 <_printf_i+0x1c>
   15382:	e08f      	b.n	154a4 <_printf_i+0x13c>
   15384:	d817      	bhi.n	153b6 <_printf_i+0x4e>
   15386:	2a63      	cmp	r2, #99	; 0x63
   15388:	d02c      	beq.n	153e4 <_printf_i+0x7c>
   1538a:	d808      	bhi.n	1539e <_printf_i+0x36>
   1538c:	2a00      	cmp	r2, #0
   1538e:	d100      	bne.n	15392 <_printf_i+0x2a>
   15390:	e099      	b.n	154c6 <_printf_i+0x15e>
   15392:	2a58      	cmp	r2, #88	; 0x58
   15394:	d054      	beq.n	15440 <_printf_i+0xd8>
   15396:	0026      	movs	r6, r4
   15398:	3642      	adds	r6, #66	; 0x42
   1539a:	7032      	strb	r2, [r6, #0]
   1539c:	e029      	b.n	153f2 <_printf_i+0x8a>
   1539e:	2a64      	cmp	r2, #100	; 0x64
   153a0:	d001      	beq.n	153a6 <_printf_i+0x3e>
   153a2:	2a69      	cmp	r2, #105	; 0x69
   153a4:	d1f7      	bne.n	15396 <_printf_i+0x2e>
   153a6:	6821      	ldr	r1, [r4, #0]
   153a8:	681a      	ldr	r2, [r3, #0]
   153aa:	0608      	lsls	r0, r1, #24
   153ac:	d523      	bpl.n	153f6 <_printf_i+0x8e>
   153ae:	1d11      	adds	r1, r2, #4
   153b0:	6019      	str	r1, [r3, #0]
   153b2:	6815      	ldr	r5, [r2, #0]
   153b4:	e025      	b.n	15402 <_printf_i+0x9a>
   153b6:	2a73      	cmp	r2, #115	; 0x73
   153b8:	d100      	bne.n	153bc <_printf_i+0x54>
   153ba:	e088      	b.n	154ce <_printf_i+0x166>
   153bc:	d808      	bhi.n	153d0 <_printf_i+0x68>
   153be:	2a6f      	cmp	r2, #111	; 0x6f
   153c0:	d029      	beq.n	15416 <_printf_i+0xae>
   153c2:	2a70      	cmp	r2, #112	; 0x70
   153c4:	d1e7      	bne.n	15396 <_printf_i+0x2e>
   153c6:	2220      	movs	r2, #32
   153c8:	6809      	ldr	r1, [r1, #0]
   153ca:	430a      	orrs	r2, r1
   153cc:	6022      	str	r2, [r4, #0]
   153ce:	e003      	b.n	153d8 <_printf_i+0x70>
   153d0:	2a75      	cmp	r2, #117	; 0x75
   153d2:	d020      	beq.n	15416 <_printf_i+0xae>
   153d4:	2a78      	cmp	r2, #120	; 0x78
   153d6:	d1de      	bne.n	15396 <_printf_i+0x2e>
   153d8:	0022      	movs	r2, r4
   153da:	2178      	movs	r1, #120	; 0x78
   153dc:	3245      	adds	r2, #69	; 0x45
   153de:	7011      	strb	r1, [r2, #0]
   153e0:	4a6c      	ldr	r2, [pc, #432]	; (15594 <_printf_i+0x22c>)
   153e2:	e030      	b.n	15446 <_printf_i+0xde>
   153e4:	000e      	movs	r6, r1
   153e6:	681a      	ldr	r2, [r3, #0]
   153e8:	3642      	adds	r6, #66	; 0x42
   153ea:	1d11      	adds	r1, r2, #4
   153ec:	6019      	str	r1, [r3, #0]
   153ee:	6813      	ldr	r3, [r2, #0]
   153f0:	7033      	strb	r3, [r6, #0]
   153f2:	2301      	movs	r3, #1
   153f4:	e079      	b.n	154ea <_printf_i+0x182>
   153f6:	0649      	lsls	r1, r1, #25
   153f8:	d5d9      	bpl.n	153ae <_printf_i+0x46>
   153fa:	1d11      	adds	r1, r2, #4
   153fc:	6019      	str	r1, [r3, #0]
   153fe:	2300      	movs	r3, #0
   15400:	5ed5      	ldrsh	r5, [r2, r3]
   15402:	2d00      	cmp	r5, #0
   15404:	da03      	bge.n	1540e <_printf_i+0xa6>
   15406:	232d      	movs	r3, #45	; 0x2d
   15408:	9a04      	ldr	r2, [sp, #16]
   1540a:	426d      	negs	r5, r5
   1540c:	7013      	strb	r3, [r2, #0]
   1540e:	4b62      	ldr	r3, [pc, #392]	; (15598 <_printf_i+0x230>)
   15410:	270a      	movs	r7, #10
   15412:	9303      	str	r3, [sp, #12]
   15414:	e02f      	b.n	15476 <_printf_i+0x10e>
   15416:	6820      	ldr	r0, [r4, #0]
   15418:	6819      	ldr	r1, [r3, #0]
   1541a:	0605      	lsls	r5, r0, #24
   1541c:	d503      	bpl.n	15426 <_printf_i+0xbe>
   1541e:	1d08      	adds	r0, r1, #4
   15420:	6018      	str	r0, [r3, #0]
   15422:	680d      	ldr	r5, [r1, #0]
   15424:	e005      	b.n	15432 <_printf_i+0xca>
   15426:	0640      	lsls	r0, r0, #25
   15428:	d5f9      	bpl.n	1541e <_printf_i+0xb6>
   1542a:	680d      	ldr	r5, [r1, #0]
   1542c:	1d08      	adds	r0, r1, #4
   1542e:	6018      	str	r0, [r3, #0]
   15430:	b2ad      	uxth	r5, r5
   15432:	4b59      	ldr	r3, [pc, #356]	; (15598 <_printf_i+0x230>)
   15434:	2708      	movs	r7, #8
   15436:	9303      	str	r3, [sp, #12]
   15438:	2a6f      	cmp	r2, #111	; 0x6f
   1543a:	d018      	beq.n	1546e <_printf_i+0x106>
   1543c:	270a      	movs	r7, #10
   1543e:	e016      	b.n	1546e <_printf_i+0x106>
   15440:	3145      	adds	r1, #69	; 0x45
   15442:	700a      	strb	r2, [r1, #0]
   15444:	4a54      	ldr	r2, [pc, #336]	; (15598 <_printf_i+0x230>)
   15446:	9203      	str	r2, [sp, #12]
   15448:	681a      	ldr	r2, [r3, #0]
   1544a:	6821      	ldr	r1, [r4, #0]
   1544c:	1d10      	adds	r0, r2, #4
   1544e:	6018      	str	r0, [r3, #0]
   15450:	6815      	ldr	r5, [r2, #0]
   15452:	0608      	lsls	r0, r1, #24
   15454:	d522      	bpl.n	1549c <_printf_i+0x134>
   15456:	07cb      	lsls	r3, r1, #31
   15458:	d502      	bpl.n	15460 <_printf_i+0xf8>
   1545a:	2320      	movs	r3, #32
   1545c:	4319      	orrs	r1, r3
   1545e:	6021      	str	r1, [r4, #0]
   15460:	2710      	movs	r7, #16
   15462:	2d00      	cmp	r5, #0
   15464:	d103      	bne.n	1546e <_printf_i+0x106>
   15466:	2320      	movs	r3, #32
   15468:	6822      	ldr	r2, [r4, #0]
   1546a:	439a      	bics	r2, r3
   1546c:	6022      	str	r2, [r4, #0]
   1546e:	0023      	movs	r3, r4
   15470:	2200      	movs	r2, #0
   15472:	3343      	adds	r3, #67	; 0x43
   15474:	701a      	strb	r2, [r3, #0]
   15476:	6863      	ldr	r3, [r4, #4]
   15478:	60a3      	str	r3, [r4, #8]
   1547a:	2b00      	cmp	r3, #0
   1547c:	db5c      	blt.n	15538 <_printf_i+0x1d0>
   1547e:	2204      	movs	r2, #4
   15480:	6821      	ldr	r1, [r4, #0]
   15482:	4391      	bics	r1, r2
   15484:	6021      	str	r1, [r4, #0]
   15486:	2d00      	cmp	r5, #0
   15488:	d158      	bne.n	1553c <_printf_i+0x1d4>
   1548a:	9e04      	ldr	r6, [sp, #16]
   1548c:	2b00      	cmp	r3, #0
   1548e:	d064      	beq.n	1555a <_printf_i+0x1f2>
   15490:	0026      	movs	r6, r4
   15492:	9b03      	ldr	r3, [sp, #12]
   15494:	3642      	adds	r6, #66	; 0x42
   15496:	781b      	ldrb	r3, [r3, #0]
   15498:	7033      	strb	r3, [r6, #0]
   1549a:	e05e      	b.n	1555a <_printf_i+0x1f2>
   1549c:	0648      	lsls	r0, r1, #25
   1549e:	d5da      	bpl.n	15456 <_printf_i+0xee>
   154a0:	b2ad      	uxth	r5, r5
   154a2:	e7d8      	b.n	15456 <_printf_i+0xee>
   154a4:	6809      	ldr	r1, [r1, #0]
   154a6:	681a      	ldr	r2, [r3, #0]
   154a8:	0608      	lsls	r0, r1, #24
   154aa:	d505      	bpl.n	154b8 <_printf_i+0x150>
   154ac:	1d11      	adds	r1, r2, #4
   154ae:	6019      	str	r1, [r3, #0]
   154b0:	6813      	ldr	r3, [r2, #0]
   154b2:	6962      	ldr	r2, [r4, #20]
   154b4:	601a      	str	r2, [r3, #0]
   154b6:	e006      	b.n	154c6 <_printf_i+0x15e>
   154b8:	0649      	lsls	r1, r1, #25
   154ba:	d5f7      	bpl.n	154ac <_printf_i+0x144>
   154bc:	1d11      	adds	r1, r2, #4
   154be:	6019      	str	r1, [r3, #0]
   154c0:	6813      	ldr	r3, [r2, #0]
   154c2:	8aa2      	ldrh	r2, [r4, #20]
   154c4:	801a      	strh	r2, [r3, #0]
   154c6:	2300      	movs	r3, #0
   154c8:	9e04      	ldr	r6, [sp, #16]
   154ca:	6123      	str	r3, [r4, #16]
   154cc:	e054      	b.n	15578 <_printf_i+0x210>
   154ce:	681a      	ldr	r2, [r3, #0]
   154d0:	1d11      	adds	r1, r2, #4
   154d2:	6019      	str	r1, [r3, #0]
   154d4:	6816      	ldr	r6, [r2, #0]
   154d6:	2100      	movs	r1, #0
   154d8:	6862      	ldr	r2, [r4, #4]
   154da:	0030      	movs	r0, r6
   154dc:	f000 fbdc 	bl	15c98 <memchr>
   154e0:	2800      	cmp	r0, #0
   154e2:	d001      	beq.n	154e8 <_printf_i+0x180>
   154e4:	1b80      	subs	r0, r0, r6
   154e6:	6060      	str	r0, [r4, #4]
   154e8:	6863      	ldr	r3, [r4, #4]
   154ea:	6123      	str	r3, [r4, #16]
   154ec:	2300      	movs	r3, #0
   154ee:	9a04      	ldr	r2, [sp, #16]
   154f0:	7013      	strb	r3, [r2, #0]
   154f2:	e041      	b.n	15578 <_printf_i+0x210>
   154f4:	6923      	ldr	r3, [r4, #16]
   154f6:	0032      	movs	r2, r6
   154f8:	9906      	ldr	r1, [sp, #24]
   154fa:	9805      	ldr	r0, [sp, #20]
   154fc:	9d07      	ldr	r5, [sp, #28]
   154fe:	47a8      	blx	r5
   15500:	1c43      	adds	r3, r0, #1
   15502:	d043      	beq.n	1558c <_printf_i+0x224>
   15504:	6823      	ldr	r3, [r4, #0]
   15506:	2500      	movs	r5, #0
   15508:	079b      	lsls	r3, r3, #30
   1550a:	d40f      	bmi.n	1552c <_printf_i+0x1c4>
   1550c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1550e:	68e0      	ldr	r0, [r4, #12]
   15510:	4298      	cmp	r0, r3
   15512:	da3d      	bge.n	15590 <_printf_i+0x228>
   15514:	0018      	movs	r0, r3
   15516:	e03b      	b.n	15590 <_printf_i+0x228>
   15518:	0022      	movs	r2, r4
   1551a:	2301      	movs	r3, #1
   1551c:	3219      	adds	r2, #25
   1551e:	9906      	ldr	r1, [sp, #24]
   15520:	9805      	ldr	r0, [sp, #20]
   15522:	9e07      	ldr	r6, [sp, #28]
   15524:	47b0      	blx	r6
   15526:	1c43      	adds	r3, r0, #1
   15528:	d030      	beq.n	1558c <_printf_i+0x224>
   1552a:	3501      	adds	r5, #1
   1552c:	68e3      	ldr	r3, [r4, #12]
   1552e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15530:	1a9b      	subs	r3, r3, r2
   15532:	429d      	cmp	r5, r3
   15534:	dbf0      	blt.n	15518 <_printf_i+0x1b0>
   15536:	e7e9      	b.n	1550c <_printf_i+0x1a4>
   15538:	2d00      	cmp	r5, #0
   1553a:	d0a9      	beq.n	15490 <_printf_i+0x128>
   1553c:	9e04      	ldr	r6, [sp, #16]
   1553e:	0028      	movs	r0, r5
   15540:	0039      	movs	r1, r7
   15542:	f7fc fca3 	bl	11e8c <__aeabi_uidivmod>
   15546:	9b03      	ldr	r3, [sp, #12]
   15548:	3e01      	subs	r6, #1
   1554a:	5c5b      	ldrb	r3, [r3, r1]
   1554c:	0028      	movs	r0, r5
   1554e:	7033      	strb	r3, [r6, #0]
   15550:	0039      	movs	r1, r7
   15552:	f7fc fc15 	bl	11d80 <__udivsi3>
   15556:	1e05      	subs	r5, r0, #0
   15558:	d1f1      	bne.n	1553e <_printf_i+0x1d6>
   1555a:	2f08      	cmp	r7, #8
   1555c:	d109      	bne.n	15572 <_printf_i+0x20a>
   1555e:	6823      	ldr	r3, [r4, #0]
   15560:	07db      	lsls	r3, r3, #31
   15562:	d506      	bpl.n	15572 <_printf_i+0x20a>
   15564:	6863      	ldr	r3, [r4, #4]
   15566:	6922      	ldr	r2, [r4, #16]
   15568:	4293      	cmp	r3, r2
   1556a:	dc02      	bgt.n	15572 <_printf_i+0x20a>
   1556c:	2330      	movs	r3, #48	; 0x30
   1556e:	3e01      	subs	r6, #1
   15570:	7033      	strb	r3, [r6, #0]
   15572:	9b04      	ldr	r3, [sp, #16]
   15574:	1b9b      	subs	r3, r3, r6
   15576:	6123      	str	r3, [r4, #16]
   15578:	9b07      	ldr	r3, [sp, #28]
   1557a:	aa09      	add	r2, sp, #36	; 0x24
   1557c:	9300      	str	r3, [sp, #0]
   1557e:	0021      	movs	r1, r4
   15580:	9b06      	ldr	r3, [sp, #24]
   15582:	9805      	ldr	r0, [sp, #20]
   15584:	f7ff fe82 	bl	1528c <_printf_common>
   15588:	1c43      	adds	r3, r0, #1
   1558a:	d1b3      	bne.n	154f4 <_printf_i+0x18c>
   1558c:	2001      	movs	r0, #1
   1558e:	4240      	negs	r0, r0
   15590:	b00b      	add	sp, #44	; 0x2c
   15592:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15594:	00016f4e 	.word	0x00016f4e
   15598:	00016f3d 	.word	0x00016f3d

0001559c <iprintf>:
   1559c:	b40f      	push	{r0, r1, r2, r3}
   1559e:	4b0b      	ldr	r3, [pc, #44]	; (155cc <iprintf+0x30>)
   155a0:	b513      	push	{r0, r1, r4, lr}
   155a2:	681c      	ldr	r4, [r3, #0]
   155a4:	2c00      	cmp	r4, #0
   155a6:	d005      	beq.n	155b4 <iprintf+0x18>
   155a8:	69a3      	ldr	r3, [r4, #24]
   155aa:	2b00      	cmp	r3, #0
   155ac:	d102      	bne.n	155b4 <iprintf+0x18>
   155ae:	0020      	movs	r0, r4
   155b0:	f000 fa66 	bl	15a80 <__sinit>
   155b4:	ab05      	add	r3, sp, #20
   155b6:	9a04      	ldr	r2, [sp, #16]
   155b8:	68a1      	ldr	r1, [r4, #8]
   155ba:	0020      	movs	r0, r4
   155bc:	9301      	str	r3, [sp, #4]
   155be:	f7ff fd49 	bl	15054 <_vfiprintf_r>
   155c2:	bc16      	pop	{r1, r2, r4}
   155c4:	bc08      	pop	{r3}
   155c6:	b004      	add	sp, #16
   155c8:	4718      	bx	r3
   155ca:	46c0      	nop			; (mov r8, r8)
   155cc:	2000001c 	.word	0x2000001c

000155d0 <srand>:
   155d0:	4b10      	ldr	r3, [pc, #64]	; (15614 <srand+0x44>)
   155d2:	b570      	push	{r4, r5, r6, lr}
   155d4:	681c      	ldr	r4, [r3, #0]
   155d6:	0005      	movs	r5, r0
   155d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   155da:	2b00      	cmp	r3, #0
   155dc:	d115      	bne.n	1560a <srand+0x3a>
   155de:	2018      	movs	r0, #24
   155e0:	f000 fb50 	bl	15c84 <malloc>
   155e4:	4b0c      	ldr	r3, [pc, #48]	; (15618 <srand+0x48>)
   155e6:	63a0      	str	r0, [r4, #56]	; 0x38
   155e8:	8003      	strh	r3, [r0, #0]
   155ea:	4b0c      	ldr	r3, [pc, #48]	; (1561c <srand+0x4c>)
   155ec:	2201      	movs	r2, #1
   155ee:	8043      	strh	r3, [r0, #2]
   155f0:	4b0b      	ldr	r3, [pc, #44]	; (15620 <srand+0x50>)
   155f2:	8083      	strh	r3, [r0, #4]
   155f4:	4b0b      	ldr	r3, [pc, #44]	; (15624 <srand+0x54>)
   155f6:	80c3      	strh	r3, [r0, #6]
   155f8:	4b0b      	ldr	r3, [pc, #44]	; (15628 <srand+0x58>)
   155fa:	8103      	strh	r3, [r0, #8]
   155fc:	2305      	movs	r3, #5
   155fe:	8143      	strh	r3, [r0, #10]
   15600:	3306      	adds	r3, #6
   15602:	8183      	strh	r3, [r0, #12]
   15604:	2300      	movs	r3, #0
   15606:	6102      	str	r2, [r0, #16]
   15608:	6143      	str	r3, [r0, #20]
   1560a:	2200      	movs	r2, #0
   1560c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1560e:	611d      	str	r5, [r3, #16]
   15610:	615a      	str	r2, [r3, #20]
   15612:	bd70      	pop	{r4, r5, r6, pc}
   15614:	2000001c 	.word	0x2000001c
   15618:	0000330e 	.word	0x0000330e
   1561c:	ffffabcd 	.word	0xffffabcd
   15620:	00001234 	.word	0x00001234
   15624:	ffffe66d 	.word	0xffffe66d
   15628:	ffffdeec 	.word	0xffffdeec

0001562c <rand>:
   1562c:	4b15      	ldr	r3, [pc, #84]	; (15684 <rand+0x58>)
   1562e:	b510      	push	{r4, lr}
   15630:	681c      	ldr	r4, [r3, #0]
   15632:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15634:	2b00      	cmp	r3, #0
   15636:	d115      	bne.n	15664 <rand+0x38>
   15638:	2018      	movs	r0, #24
   1563a:	f000 fb23 	bl	15c84 <malloc>
   1563e:	4b12      	ldr	r3, [pc, #72]	; (15688 <rand+0x5c>)
   15640:	63a0      	str	r0, [r4, #56]	; 0x38
   15642:	8003      	strh	r3, [r0, #0]
   15644:	4b11      	ldr	r3, [pc, #68]	; (1568c <rand+0x60>)
   15646:	2201      	movs	r2, #1
   15648:	8043      	strh	r3, [r0, #2]
   1564a:	4b11      	ldr	r3, [pc, #68]	; (15690 <rand+0x64>)
   1564c:	8083      	strh	r3, [r0, #4]
   1564e:	4b11      	ldr	r3, [pc, #68]	; (15694 <rand+0x68>)
   15650:	80c3      	strh	r3, [r0, #6]
   15652:	4b11      	ldr	r3, [pc, #68]	; (15698 <rand+0x6c>)
   15654:	8103      	strh	r3, [r0, #8]
   15656:	2305      	movs	r3, #5
   15658:	8143      	strh	r3, [r0, #10]
   1565a:	3306      	adds	r3, #6
   1565c:	8183      	strh	r3, [r0, #12]
   1565e:	2300      	movs	r3, #0
   15660:	6102      	str	r2, [r0, #16]
   15662:	6143      	str	r3, [r0, #20]
   15664:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   15666:	4a0d      	ldr	r2, [pc, #52]	; (1569c <rand+0x70>)
   15668:	6920      	ldr	r0, [r4, #16]
   1566a:	6961      	ldr	r1, [r4, #20]
   1566c:	4b0c      	ldr	r3, [pc, #48]	; (156a0 <rand+0x74>)
   1566e:	f7fc fd95 	bl	1219c <__aeabi_lmul>
   15672:	2201      	movs	r2, #1
   15674:	2300      	movs	r3, #0
   15676:	1880      	adds	r0, r0, r2
   15678:	4159      	adcs	r1, r3
   1567a:	6120      	str	r0, [r4, #16]
   1567c:	6161      	str	r1, [r4, #20]
   1567e:	0048      	lsls	r0, r1, #1
   15680:	0840      	lsrs	r0, r0, #1
   15682:	bd10      	pop	{r4, pc}
   15684:	2000001c 	.word	0x2000001c
   15688:	0000330e 	.word	0x0000330e
   1568c:	ffffabcd 	.word	0xffffabcd
   15690:	00001234 	.word	0x00001234
   15694:	ffffe66d 	.word	0xffffe66d
   15698:	ffffdeec 	.word	0xffffdeec
   1569c:	4c957f2d 	.word	0x4c957f2d
   156a0:	5851f42d 	.word	0x5851f42d

000156a4 <siprintf>:
   156a4:	b40e      	push	{r1, r2, r3}
   156a6:	b510      	push	{r4, lr}
   156a8:	b09d      	sub	sp, #116	; 0x74
   156aa:	a902      	add	r1, sp, #8
   156ac:	9002      	str	r0, [sp, #8]
   156ae:	6108      	str	r0, [r1, #16]
   156b0:	480b      	ldr	r0, [pc, #44]	; (156e0 <siprintf+0x3c>)
   156b2:	2482      	movs	r4, #130	; 0x82
   156b4:	6088      	str	r0, [r1, #8]
   156b6:	6148      	str	r0, [r1, #20]
   156b8:	2001      	movs	r0, #1
   156ba:	4240      	negs	r0, r0
   156bc:	ab1f      	add	r3, sp, #124	; 0x7c
   156be:	81c8      	strh	r0, [r1, #14]
   156c0:	4808      	ldr	r0, [pc, #32]	; (156e4 <siprintf+0x40>)
   156c2:	cb04      	ldmia	r3!, {r2}
   156c4:	00a4      	lsls	r4, r4, #2
   156c6:	6800      	ldr	r0, [r0, #0]
   156c8:	9301      	str	r3, [sp, #4]
   156ca:	818c      	strh	r4, [r1, #12]
   156cc:	f000 fc32 	bl	15f34 <_svfiprintf_r>
   156d0:	2300      	movs	r3, #0
   156d2:	9a02      	ldr	r2, [sp, #8]
   156d4:	7013      	strb	r3, [r2, #0]
   156d6:	b01d      	add	sp, #116	; 0x74
   156d8:	bc10      	pop	{r4}
   156da:	bc08      	pop	{r3}
   156dc:	b003      	add	sp, #12
   156de:	4718      	bx	r3
   156e0:	7fffffff 	.word	0x7fffffff
   156e4:	2000001c 	.word	0x2000001c

000156e8 <__swbuf_r>:
   156e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   156ea:	0005      	movs	r5, r0
   156ec:	000e      	movs	r6, r1
   156ee:	0014      	movs	r4, r2
   156f0:	2800      	cmp	r0, #0
   156f2:	d004      	beq.n	156fe <__swbuf_r+0x16>
   156f4:	6983      	ldr	r3, [r0, #24]
   156f6:	2b00      	cmp	r3, #0
   156f8:	d101      	bne.n	156fe <__swbuf_r+0x16>
   156fa:	f000 f9c1 	bl	15a80 <__sinit>
   156fe:	4b22      	ldr	r3, [pc, #136]	; (15788 <__swbuf_r+0xa0>)
   15700:	429c      	cmp	r4, r3
   15702:	d12d      	bne.n	15760 <__swbuf_r+0x78>
   15704:	686c      	ldr	r4, [r5, #4]
   15706:	69a3      	ldr	r3, [r4, #24]
   15708:	60a3      	str	r3, [r4, #8]
   1570a:	89a3      	ldrh	r3, [r4, #12]
   1570c:	071b      	lsls	r3, r3, #28
   1570e:	d531      	bpl.n	15774 <__swbuf_r+0x8c>
   15710:	6923      	ldr	r3, [r4, #16]
   15712:	2b00      	cmp	r3, #0
   15714:	d02e      	beq.n	15774 <__swbuf_r+0x8c>
   15716:	6823      	ldr	r3, [r4, #0]
   15718:	6922      	ldr	r2, [r4, #16]
   1571a:	b2f7      	uxtb	r7, r6
   1571c:	1a98      	subs	r0, r3, r2
   1571e:	6963      	ldr	r3, [r4, #20]
   15720:	b2f6      	uxtb	r6, r6
   15722:	4298      	cmp	r0, r3
   15724:	db05      	blt.n	15732 <__swbuf_r+0x4a>
   15726:	0021      	movs	r1, r4
   15728:	0028      	movs	r0, r5
   1572a:	f000 f93b 	bl	159a4 <_fflush_r>
   1572e:	2800      	cmp	r0, #0
   15730:	d126      	bne.n	15780 <__swbuf_r+0x98>
   15732:	68a3      	ldr	r3, [r4, #8]
   15734:	3001      	adds	r0, #1
   15736:	3b01      	subs	r3, #1
   15738:	60a3      	str	r3, [r4, #8]
   1573a:	6823      	ldr	r3, [r4, #0]
   1573c:	1c5a      	adds	r2, r3, #1
   1573e:	6022      	str	r2, [r4, #0]
   15740:	701f      	strb	r7, [r3, #0]
   15742:	6963      	ldr	r3, [r4, #20]
   15744:	4298      	cmp	r0, r3
   15746:	d004      	beq.n	15752 <__swbuf_r+0x6a>
   15748:	89a3      	ldrh	r3, [r4, #12]
   1574a:	07db      	lsls	r3, r3, #31
   1574c:	d51a      	bpl.n	15784 <__swbuf_r+0x9c>
   1574e:	2e0a      	cmp	r6, #10
   15750:	d118      	bne.n	15784 <__swbuf_r+0x9c>
   15752:	0021      	movs	r1, r4
   15754:	0028      	movs	r0, r5
   15756:	f000 f925 	bl	159a4 <_fflush_r>
   1575a:	2800      	cmp	r0, #0
   1575c:	d012      	beq.n	15784 <__swbuf_r+0x9c>
   1575e:	e00f      	b.n	15780 <__swbuf_r+0x98>
   15760:	4b0a      	ldr	r3, [pc, #40]	; (1578c <__swbuf_r+0xa4>)
   15762:	429c      	cmp	r4, r3
   15764:	d101      	bne.n	1576a <__swbuf_r+0x82>
   15766:	68ac      	ldr	r4, [r5, #8]
   15768:	e7cd      	b.n	15706 <__swbuf_r+0x1e>
   1576a:	4b09      	ldr	r3, [pc, #36]	; (15790 <__swbuf_r+0xa8>)
   1576c:	429c      	cmp	r4, r3
   1576e:	d1ca      	bne.n	15706 <__swbuf_r+0x1e>
   15770:	68ec      	ldr	r4, [r5, #12]
   15772:	e7c8      	b.n	15706 <__swbuf_r+0x1e>
   15774:	0021      	movs	r1, r4
   15776:	0028      	movs	r0, r5
   15778:	f000 f80c 	bl	15794 <__swsetup_r>
   1577c:	2800      	cmp	r0, #0
   1577e:	d0ca      	beq.n	15716 <__swbuf_r+0x2e>
   15780:	2601      	movs	r6, #1
   15782:	4276      	negs	r6, r6
   15784:	0030      	movs	r0, r6
   15786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15788:	00016f80 	.word	0x00016f80
   1578c:	00016fa0 	.word	0x00016fa0
   15790:	00016f60 	.word	0x00016f60

00015794 <__swsetup_r>:
   15794:	4b36      	ldr	r3, [pc, #216]	; (15870 <__swsetup_r+0xdc>)
   15796:	b570      	push	{r4, r5, r6, lr}
   15798:	681d      	ldr	r5, [r3, #0]
   1579a:	0006      	movs	r6, r0
   1579c:	000c      	movs	r4, r1
   1579e:	2d00      	cmp	r5, #0
   157a0:	d005      	beq.n	157ae <__swsetup_r+0x1a>
   157a2:	69ab      	ldr	r3, [r5, #24]
   157a4:	2b00      	cmp	r3, #0
   157a6:	d102      	bne.n	157ae <__swsetup_r+0x1a>
   157a8:	0028      	movs	r0, r5
   157aa:	f000 f969 	bl	15a80 <__sinit>
   157ae:	4b31      	ldr	r3, [pc, #196]	; (15874 <__swsetup_r+0xe0>)
   157b0:	429c      	cmp	r4, r3
   157b2:	d10f      	bne.n	157d4 <__swsetup_r+0x40>
   157b4:	686c      	ldr	r4, [r5, #4]
   157b6:	230c      	movs	r3, #12
   157b8:	5ee2      	ldrsh	r2, [r4, r3]
   157ba:	b293      	uxth	r3, r2
   157bc:	0719      	lsls	r1, r3, #28
   157be:	d42d      	bmi.n	1581c <__swsetup_r+0x88>
   157c0:	06d9      	lsls	r1, r3, #27
   157c2:	d411      	bmi.n	157e8 <__swsetup_r+0x54>
   157c4:	2309      	movs	r3, #9
   157c6:	2001      	movs	r0, #1
   157c8:	6033      	str	r3, [r6, #0]
   157ca:	3337      	adds	r3, #55	; 0x37
   157cc:	4313      	orrs	r3, r2
   157ce:	81a3      	strh	r3, [r4, #12]
   157d0:	4240      	negs	r0, r0
   157d2:	bd70      	pop	{r4, r5, r6, pc}
   157d4:	4b28      	ldr	r3, [pc, #160]	; (15878 <__swsetup_r+0xe4>)
   157d6:	429c      	cmp	r4, r3
   157d8:	d101      	bne.n	157de <__swsetup_r+0x4a>
   157da:	68ac      	ldr	r4, [r5, #8]
   157dc:	e7eb      	b.n	157b6 <__swsetup_r+0x22>
   157de:	4b27      	ldr	r3, [pc, #156]	; (1587c <__swsetup_r+0xe8>)
   157e0:	429c      	cmp	r4, r3
   157e2:	d1e8      	bne.n	157b6 <__swsetup_r+0x22>
   157e4:	68ec      	ldr	r4, [r5, #12]
   157e6:	e7e6      	b.n	157b6 <__swsetup_r+0x22>
   157e8:	075b      	lsls	r3, r3, #29
   157ea:	d513      	bpl.n	15814 <__swsetup_r+0x80>
   157ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
   157ee:	2900      	cmp	r1, #0
   157f0:	d008      	beq.n	15804 <__swsetup_r+0x70>
   157f2:	0023      	movs	r3, r4
   157f4:	3344      	adds	r3, #68	; 0x44
   157f6:	4299      	cmp	r1, r3
   157f8:	d002      	beq.n	15800 <__swsetup_r+0x6c>
   157fa:	0030      	movs	r0, r6
   157fc:	f000 fa6a 	bl	15cd4 <_free_r>
   15800:	2300      	movs	r3, #0
   15802:	6363      	str	r3, [r4, #52]	; 0x34
   15804:	2224      	movs	r2, #36	; 0x24
   15806:	89a3      	ldrh	r3, [r4, #12]
   15808:	4393      	bics	r3, r2
   1580a:	81a3      	strh	r3, [r4, #12]
   1580c:	2300      	movs	r3, #0
   1580e:	6063      	str	r3, [r4, #4]
   15810:	6923      	ldr	r3, [r4, #16]
   15812:	6023      	str	r3, [r4, #0]
   15814:	2308      	movs	r3, #8
   15816:	89a2      	ldrh	r2, [r4, #12]
   15818:	4313      	orrs	r3, r2
   1581a:	81a3      	strh	r3, [r4, #12]
   1581c:	6923      	ldr	r3, [r4, #16]
   1581e:	2b00      	cmp	r3, #0
   15820:	d10b      	bne.n	1583a <__swsetup_r+0xa6>
   15822:	21a0      	movs	r1, #160	; 0xa0
   15824:	2280      	movs	r2, #128	; 0x80
   15826:	89a3      	ldrh	r3, [r4, #12]
   15828:	0089      	lsls	r1, r1, #2
   1582a:	0092      	lsls	r2, r2, #2
   1582c:	400b      	ands	r3, r1
   1582e:	4293      	cmp	r3, r2
   15830:	d003      	beq.n	1583a <__swsetup_r+0xa6>
   15832:	0021      	movs	r1, r4
   15834:	0030      	movs	r0, r6
   15836:	f000 f9e1 	bl	15bfc <__smakebuf_r>
   1583a:	2301      	movs	r3, #1
   1583c:	89a2      	ldrh	r2, [r4, #12]
   1583e:	4013      	ands	r3, r2
   15840:	d011      	beq.n	15866 <__swsetup_r+0xd2>
   15842:	2300      	movs	r3, #0
   15844:	60a3      	str	r3, [r4, #8]
   15846:	6963      	ldr	r3, [r4, #20]
   15848:	425b      	negs	r3, r3
   1584a:	61a3      	str	r3, [r4, #24]
   1584c:	2000      	movs	r0, #0
   1584e:	6923      	ldr	r3, [r4, #16]
   15850:	4283      	cmp	r3, r0
   15852:	d1be      	bne.n	157d2 <__swsetup_r+0x3e>
   15854:	230c      	movs	r3, #12
   15856:	5ee2      	ldrsh	r2, [r4, r3]
   15858:	0613      	lsls	r3, r2, #24
   1585a:	d5ba      	bpl.n	157d2 <__swsetup_r+0x3e>
   1585c:	2340      	movs	r3, #64	; 0x40
   1585e:	4313      	orrs	r3, r2
   15860:	81a3      	strh	r3, [r4, #12]
   15862:	3801      	subs	r0, #1
   15864:	e7b5      	b.n	157d2 <__swsetup_r+0x3e>
   15866:	0792      	lsls	r2, r2, #30
   15868:	d400      	bmi.n	1586c <__swsetup_r+0xd8>
   1586a:	6963      	ldr	r3, [r4, #20]
   1586c:	60a3      	str	r3, [r4, #8]
   1586e:	e7ed      	b.n	1584c <__swsetup_r+0xb8>
   15870:	2000001c 	.word	0x2000001c
   15874:	00016f80 	.word	0x00016f80
   15878:	00016fa0 	.word	0x00016fa0
   1587c:	00016f60 	.word	0x00016f60

00015880 <abort>:
   15880:	b510      	push	{r4, lr}
   15882:	2006      	movs	r0, #6
   15884:	f000 fc96 	bl	161b4 <raise>
   15888:	2001      	movs	r0, #1
   1588a:	f7f1 f849 	bl	6920 <_exit>
   1588e:	Address 0x0001588e is out of bounds.


00015890 <__sflush_r>:
   15890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15892:	898a      	ldrh	r2, [r1, #12]
   15894:	0005      	movs	r5, r0
   15896:	000c      	movs	r4, r1
   15898:	0713      	lsls	r3, r2, #28
   1589a:	d460      	bmi.n	1595e <__sflush_r+0xce>
   1589c:	684b      	ldr	r3, [r1, #4]
   1589e:	2b00      	cmp	r3, #0
   158a0:	dc04      	bgt.n	158ac <__sflush_r+0x1c>
   158a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   158a4:	2b00      	cmp	r3, #0
   158a6:	dc01      	bgt.n	158ac <__sflush_r+0x1c>
   158a8:	2000      	movs	r0, #0
   158aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   158ac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   158ae:	2f00      	cmp	r7, #0
   158b0:	d0fa      	beq.n	158a8 <__sflush_r+0x18>
   158b2:	2300      	movs	r3, #0
   158b4:	682e      	ldr	r6, [r5, #0]
   158b6:	602b      	str	r3, [r5, #0]
   158b8:	2380      	movs	r3, #128	; 0x80
   158ba:	015b      	lsls	r3, r3, #5
   158bc:	401a      	ands	r2, r3
   158be:	d034      	beq.n	1592a <__sflush_r+0x9a>
   158c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   158c2:	89a3      	ldrh	r3, [r4, #12]
   158c4:	075b      	lsls	r3, r3, #29
   158c6:	d506      	bpl.n	158d6 <__sflush_r+0x46>
   158c8:	6863      	ldr	r3, [r4, #4]
   158ca:	1ac0      	subs	r0, r0, r3
   158cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   158ce:	2b00      	cmp	r3, #0
   158d0:	d001      	beq.n	158d6 <__sflush_r+0x46>
   158d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   158d4:	1ac0      	subs	r0, r0, r3
   158d6:	0002      	movs	r2, r0
   158d8:	6a21      	ldr	r1, [r4, #32]
   158da:	2300      	movs	r3, #0
   158dc:	0028      	movs	r0, r5
   158de:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   158e0:	47b8      	blx	r7
   158e2:	89a1      	ldrh	r1, [r4, #12]
   158e4:	1c43      	adds	r3, r0, #1
   158e6:	d106      	bne.n	158f6 <__sflush_r+0x66>
   158e8:	682b      	ldr	r3, [r5, #0]
   158ea:	2b1d      	cmp	r3, #29
   158ec:	d831      	bhi.n	15952 <__sflush_r+0xc2>
   158ee:	4a2c      	ldr	r2, [pc, #176]	; (159a0 <__sflush_r+0x110>)
   158f0:	40da      	lsrs	r2, r3
   158f2:	07d3      	lsls	r3, r2, #31
   158f4:	d52d      	bpl.n	15952 <__sflush_r+0xc2>
   158f6:	2300      	movs	r3, #0
   158f8:	6063      	str	r3, [r4, #4]
   158fa:	6923      	ldr	r3, [r4, #16]
   158fc:	6023      	str	r3, [r4, #0]
   158fe:	04cb      	lsls	r3, r1, #19
   15900:	d505      	bpl.n	1590e <__sflush_r+0x7e>
   15902:	1c43      	adds	r3, r0, #1
   15904:	d102      	bne.n	1590c <__sflush_r+0x7c>
   15906:	682b      	ldr	r3, [r5, #0]
   15908:	2b00      	cmp	r3, #0
   1590a:	d100      	bne.n	1590e <__sflush_r+0x7e>
   1590c:	6560      	str	r0, [r4, #84]	; 0x54
   1590e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   15910:	602e      	str	r6, [r5, #0]
   15912:	2900      	cmp	r1, #0
   15914:	d0c8      	beq.n	158a8 <__sflush_r+0x18>
   15916:	0023      	movs	r3, r4
   15918:	3344      	adds	r3, #68	; 0x44
   1591a:	4299      	cmp	r1, r3
   1591c:	d002      	beq.n	15924 <__sflush_r+0x94>
   1591e:	0028      	movs	r0, r5
   15920:	f000 f9d8 	bl	15cd4 <_free_r>
   15924:	2000      	movs	r0, #0
   15926:	6360      	str	r0, [r4, #52]	; 0x34
   15928:	e7bf      	b.n	158aa <__sflush_r+0x1a>
   1592a:	2301      	movs	r3, #1
   1592c:	6a21      	ldr	r1, [r4, #32]
   1592e:	0028      	movs	r0, r5
   15930:	47b8      	blx	r7
   15932:	1c43      	adds	r3, r0, #1
   15934:	d1c5      	bne.n	158c2 <__sflush_r+0x32>
   15936:	682b      	ldr	r3, [r5, #0]
   15938:	2b00      	cmp	r3, #0
   1593a:	d0c2      	beq.n	158c2 <__sflush_r+0x32>
   1593c:	2b1d      	cmp	r3, #29
   1593e:	d001      	beq.n	15944 <__sflush_r+0xb4>
   15940:	2b16      	cmp	r3, #22
   15942:	d101      	bne.n	15948 <__sflush_r+0xb8>
   15944:	602e      	str	r6, [r5, #0]
   15946:	e7af      	b.n	158a8 <__sflush_r+0x18>
   15948:	2340      	movs	r3, #64	; 0x40
   1594a:	89a2      	ldrh	r2, [r4, #12]
   1594c:	4313      	orrs	r3, r2
   1594e:	81a3      	strh	r3, [r4, #12]
   15950:	e7ab      	b.n	158aa <__sflush_r+0x1a>
   15952:	2340      	movs	r3, #64	; 0x40
   15954:	430b      	orrs	r3, r1
   15956:	2001      	movs	r0, #1
   15958:	81a3      	strh	r3, [r4, #12]
   1595a:	4240      	negs	r0, r0
   1595c:	e7a5      	b.n	158aa <__sflush_r+0x1a>
   1595e:	690f      	ldr	r7, [r1, #16]
   15960:	2f00      	cmp	r7, #0
   15962:	d0a1      	beq.n	158a8 <__sflush_r+0x18>
   15964:	680b      	ldr	r3, [r1, #0]
   15966:	600f      	str	r7, [r1, #0]
   15968:	1bdb      	subs	r3, r3, r7
   1596a:	9301      	str	r3, [sp, #4]
   1596c:	2300      	movs	r3, #0
   1596e:	0792      	lsls	r2, r2, #30
   15970:	d100      	bne.n	15974 <__sflush_r+0xe4>
   15972:	694b      	ldr	r3, [r1, #20]
   15974:	60a3      	str	r3, [r4, #8]
   15976:	9b01      	ldr	r3, [sp, #4]
   15978:	2b00      	cmp	r3, #0
   1597a:	dc00      	bgt.n	1597e <__sflush_r+0xee>
   1597c:	e794      	b.n	158a8 <__sflush_r+0x18>
   1597e:	9b01      	ldr	r3, [sp, #4]
   15980:	003a      	movs	r2, r7
   15982:	6a21      	ldr	r1, [r4, #32]
   15984:	0028      	movs	r0, r5
   15986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   15988:	47b0      	blx	r6
   1598a:	2800      	cmp	r0, #0
   1598c:	dc03      	bgt.n	15996 <__sflush_r+0x106>
   1598e:	2340      	movs	r3, #64	; 0x40
   15990:	89a2      	ldrh	r2, [r4, #12]
   15992:	4313      	orrs	r3, r2
   15994:	e7df      	b.n	15956 <__sflush_r+0xc6>
   15996:	9b01      	ldr	r3, [sp, #4]
   15998:	183f      	adds	r7, r7, r0
   1599a:	1a1b      	subs	r3, r3, r0
   1599c:	9301      	str	r3, [sp, #4]
   1599e:	e7ea      	b.n	15976 <__sflush_r+0xe6>
   159a0:	20400001 	.word	0x20400001

000159a4 <_fflush_r>:
   159a4:	690b      	ldr	r3, [r1, #16]
   159a6:	b570      	push	{r4, r5, r6, lr}
   159a8:	0005      	movs	r5, r0
   159aa:	000c      	movs	r4, r1
   159ac:	2b00      	cmp	r3, #0
   159ae:	d101      	bne.n	159b4 <_fflush_r+0x10>
   159b0:	2000      	movs	r0, #0
   159b2:	bd70      	pop	{r4, r5, r6, pc}
   159b4:	2800      	cmp	r0, #0
   159b6:	d004      	beq.n	159c2 <_fflush_r+0x1e>
   159b8:	6983      	ldr	r3, [r0, #24]
   159ba:	2b00      	cmp	r3, #0
   159bc:	d101      	bne.n	159c2 <_fflush_r+0x1e>
   159be:	f000 f85f 	bl	15a80 <__sinit>
   159c2:	4b0b      	ldr	r3, [pc, #44]	; (159f0 <_fflush_r+0x4c>)
   159c4:	429c      	cmp	r4, r3
   159c6:	d109      	bne.n	159dc <_fflush_r+0x38>
   159c8:	686c      	ldr	r4, [r5, #4]
   159ca:	220c      	movs	r2, #12
   159cc:	5ea3      	ldrsh	r3, [r4, r2]
   159ce:	2b00      	cmp	r3, #0
   159d0:	d0ee      	beq.n	159b0 <_fflush_r+0xc>
   159d2:	0021      	movs	r1, r4
   159d4:	0028      	movs	r0, r5
   159d6:	f7ff ff5b 	bl	15890 <__sflush_r>
   159da:	e7ea      	b.n	159b2 <_fflush_r+0xe>
   159dc:	4b05      	ldr	r3, [pc, #20]	; (159f4 <_fflush_r+0x50>)
   159de:	429c      	cmp	r4, r3
   159e0:	d101      	bne.n	159e6 <_fflush_r+0x42>
   159e2:	68ac      	ldr	r4, [r5, #8]
   159e4:	e7f1      	b.n	159ca <_fflush_r+0x26>
   159e6:	4b04      	ldr	r3, [pc, #16]	; (159f8 <_fflush_r+0x54>)
   159e8:	429c      	cmp	r4, r3
   159ea:	d1ee      	bne.n	159ca <_fflush_r+0x26>
   159ec:	68ec      	ldr	r4, [r5, #12]
   159ee:	e7ec      	b.n	159ca <_fflush_r+0x26>
   159f0:	00016f80 	.word	0x00016f80
   159f4:	00016fa0 	.word	0x00016fa0
   159f8:	00016f60 	.word	0x00016f60

000159fc <_cleanup_r>:
   159fc:	b510      	push	{r4, lr}
   159fe:	4902      	ldr	r1, [pc, #8]	; (15a08 <_cleanup_r+0xc>)
   15a00:	f000 f8b2 	bl	15b68 <_fwalk_reent>
   15a04:	bd10      	pop	{r4, pc}
   15a06:	46c0      	nop			; (mov r8, r8)
   15a08:	000159a5 	.word	0x000159a5

00015a0c <std.isra.0>:
   15a0c:	2300      	movs	r3, #0
   15a0e:	b510      	push	{r4, lr}
   15a10:	0004      	movs	r4, r0
   15a12:	6003      	str	r3, [r0, #0]
   15a14:	6043      	str	r3, [r0, #4]
   15a16:	6083      	str	r3, [r0, #8]
   15a18:	8181      	strh	r1, [r0, #12]
   15a1a:	6643      	str	r3, [r0, #100]	; 0x64
   15a1c:	81c2      	strh	r2, [r0, #14]
   15a1e:	6103      	str	r3, [r0, #16]
   15a20:	6143      	str	r3, [r0, #20]
   15a22:	6183      	str	r3, [r0, #24]
   15a24:	0019      	movs	r1, r3
   15a26:	2208      	movs	r2, #8
   15a28:	305c      	adds	r0, #92	; 0x5c
   15a2a:	f7ff fae3 	bl	14ff4 <memset>
   15a2e:	4b05      	ldr	r3, [pc, #20]	; (15a44 <std.isra.0+0x38>)
   15a30:	6224      	str	r4, [r4, #32]
   15a32:	6263      	str	r3, [r4, #36]	; 0x24
   15a34:	4b04      	ldr	r3, [pc, #16]	; (15a48 <std.isra.0+0x3c>)
   15a36:	62a3      	str	r3, [r4, #40]	; 0x28
   15a38:	4b04      	ldr	r3, [pc, #16]	; (15a4c <std.isra.0+0x40>)
   15a3a:	62e3      	str	r3, [r4, #44]	; 0x2c
   15a3c:	4b04      	ldr	r3, [pc, #16]	; (15a50 <std.isra.0+0x44>)
   15a3e:	6323      	str	r3, [r4, #48]	; 0x30
   15a40:	bd10      	pop	{r4, pc}
   15a42:	46c0      	nop			; (mov r8, r8)
   15a44:	000161f5 	.word	0x000161f5
   15a48:	0001621d 	.word	0x0001621d
   15a4c:	00016255 	.word	0x00016255
   15a50:	00016281 	.word	0x00016281

00015a54 <__sfmoreglue>:
   15a54:	b570      	push	{r4, r5, r6, lr}
   15a56:	2568      	movs	r5, #104	; 0x68
   15a58:	1e4a      	subs	r2, r1, #1
   15a5a:	4355      	muls	r5, r2
   15a5c:	000e      	movs	r6, r1
   15a5e:	0029      	movs	r1, r5
   15a60:	3174      	adds	r1, #116	; 0x74
   15a62:	f000 f981 	bl	15d68 <_malloc_r>
   15a66:	1e04      	subs	r4, r0, #0
   15a68:	d008      	beq.n	15a7c <__sfmoreglue+0x28>
   15a6a:	2100      	movs	r1, #0
   15a6c:	002a      	movs	r2, r5
   15a6e:	6001      	str	r1, [r0, #0]
   15a70:	6046      	str	r6, [r0, #4]
   15a72:	300c      	adds	r0, #12
   15a74:	60a0      	str	r0, [r4, #8]
   15a76:	3268      	adds	r2, #104	; 0x68
   15a78:	f7ff fabc 	bl	14ff4 <memset>
   15a7c:	0020      	movs	r0, r4
   15a7e:	bd70      	pop	{r4, r5, r6, pc}

00015a80 <__sinit>:
   15a80:	6983      	ldr	r3, [r0, #24]
   15a82:	b513      	push	{r0, r1, r4, lr}
   15a84:	0004      	movs	r4, r0
   15a86:	2b00      	cmp	r3, #0
   15a88:	d128      	bne.n	15adc <__sinit+0x5c>
   15a8a:	6483      	str	r3, [r0, #72]	; 0x48
   15a8c:	64c3      	str	r3, [r0, #76]	; 0x4c
   15a8e:	6503      	str	r3, [r0, #80]	; 0x50
   15a90:	4b13      	ldr	r3, [pc, #76]	; (15ae0 <__sinit+0x60>)
   15a92:	4a14      	ldr	r2, [pc, #80]	; (15ae4 <__sinit+0x64>)
   15a94:	681b      	ldr	r3, [r3, #0]
   15a96:	6282      	str	r2, [r0, #40]	; 0x28
   15a98:	9301      	str	r3, [sp, #4]
   15a9a:	4298      	cmp	r0, r3
   15a9c:	d101      	bne.n	15aa2 <__sinit+0x22>
   15a9e:	2301      	movs	r3, #1
   15aa0:	6183      	str	r3, [r0, #24]
   15aa2:	0020      	movs	r0, r4
   15aa4:	f000 f820 	bl	15ae8 <__sfp>
   15aa8:	6060      	str	r0, [r4, #4]
   15aaa:	0020      	movs	r0, r4
   15aac:	f000 f81c 	bl	15ae8 <__sfp>
   15ab0:	60a0      	str	r0, [r4, #8]
   15ab2:	0020      	movs	r0, r4
   15ab4:	f000 f818 	bl	15ae8 <__sfp>
   15ab8:	2200      	movs	r2, #0
   15aba:	60e0      	str	r0, [r4, #12]
   15abc:	2104      	movs	r1, #4
   15abe:	6860      	ldr	r0, [r4, #4]
   15ac0:	f7ff ffa4 	bl	15a0c <std.isra.0>
   15ac4:	2201      	movs	r2, #1
   15ac6:	2109      	movs	r1, #9
   15ac8:	68a0      	ldr	r0, [r4, #8]
   15aca:	f7ff ff9f 	bl	15a0c <std.isra.0>
   15ace:	2202      	movs	r2, #2
   15ad0:	2112      	movs	r1, #18
   15ad2:	68e0      	ldr	r0, [r4, #12]
   15ad4:	f7ff ff9a 	bl	15a0c <std.isra.0>
   15ad8:	2301      	movs	r3, #1
   15ada:	61a3      	str	r3, [r4, #24]
   15adc:	bd13      	pop	{r0, r1, r4, pc}
   15ade:	46c0      	nop			; (mov r8, r8)
   15ae0:	00016f28 	.word	0x00016f28
   15ae4:	000159fd 	.word	0x000159fd

00015ae8 <__sfp>:
   15ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15aea:	4b1e      	ldr	r3, [pc, #120]	; (15b64 <__sfp+0x7c>)
   15aec:	0007      	movs	r7, r0
   15aee:	681e      	ldr	r6, [r3, #0]
   15af0:	69b3      	ldr	r3, [r6, #24]
   15af2:	2b00      	cmp	r3, #0
   15af4:	d102      	bne.n	15afc <__sfp+0x14>
   15af6:	0030      	movs	r0, r6
   15af8:	f7ff ffc2 	bl	15a80 <__sinit>
   15afc:	3648      	adds	r6, #72	; 0x48
   15afe:	68b4      	ldr	r4, [r6, #8]
   15b00:	6873      	ldr	r3, [r6, #4]
   15b02:	3b01      	subs	r3, #1
   15b04:	d504      	bpl.n	15b10 <__sfp+0x28>
   15b06:	6833      	ldr	r3, [r6, #0]
   15b08:	2b00      	cmp	r3, #0
   15b0a:	d007      	beq.n	15b1c <__sfp+0x34>
   15b0c:	6836      	ldr	r6, [r6, #0]
   15b0e:	e7f6      	b.n	15afe <__sfp+0x16>
   15b10:	220c      	movs	r2, #12
   15b12:	5ea5      	ldrsh	r5, [r4, r2]
   15b14:	2d00      	cmp	r5, #0
   15b16:	d00d      	beq.n	15b34 <__sfp+0x4c>
   15b18:	3468      	adds	r4, #104	; 0x68
   15b1a:	e7f2      	b.n	15b02 <__sfp+0x1a>
   15b1c:	2104      	movs	r1, #4
   15b1e:	0038      	movs	r0, r7
   15b20:	f7ff ff98 	bl	15a54 <__sfmoreglue>
   15b24:	6030      	str	r0, [r6, #0]
   15b26:	2800      	cmp	r0, #0
   15b28:	d1f0      	bne.n	15b0c <__sfp+0x24>
   15b2a:	230c      	movs	r3, #12
   15b2c:	0004      	movs	r4, r0
   15b2e:	603b      	str	r3, [r7, #0]
   15b30:	0020      	movs	r0, r4
   15b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15b34:	2301      	movs	r3, #1
   15b36:	0020      	movs	r0, r4
   15b38:	425b      	negs	r3, r3
   15b3a:	81e3      	strh	r3, [r4, #14]
   15b3c:	3302      	adds	r3, #2
   15b3e:	81a3      	strh	r3, [r4, #12]
   15b40:	6665      	str	r5, [r4, #100]	; 0x64
   15b42:	6025      	str	r5, [r4, #0]
   15b44:	60a5      	str	r5, [r4, #8]
   15b46:	6065      	str	r5, [r4, #4]
   15b48:	6125      	str	r5, [r4, #16]
   15b4a:	6165      	str	r5, [r4, #20]
   15b4c:	61a5      	str	r5, [r4, #24]
   15b4e:	2208      	movs	r2, #8
   15b50:	0029      	movs	r1, r5
   15b52:	305c      	adds	r0, #92	; 0x5c
   15b54:	f7ff fa4e 	bl	14ff4 <memset>
   15b58:	6365      	str	r5, [r4, #52]	; 0x34
   15b5a:	63a5      	str	r5, [r4, #56]	; 0x38
   15b5c:	64a5      	str	r5, [r4, #72]	; 0x48
   15b5e:	64e5      	str	r5, [r4, #76]	; 0x4c
   15b60:	e7e6      	b.n	15b30 <__sfp+0x48>
   15b62:	46c0      	nop			; (mov r8, r8)
   15b64:	00016f28 	.word	0x00016f28

00015b68 <_fwalk_reent>:
   15b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15b6a:	0004      	movs	r4, r0
   15b6c:	0007      	movs	r7, r0
   15b6e:	2600      	movs	r6, #0
   15b70:	9101      	str	r1, [sp, #4]
   15b72:	3448      	adds	r4, #72	; 0x48
   15b74:	2c00      	cmp	r4, #0
   15b76:	d101      	bne.n	15b7c <_fwalk_reent+0x14>
   15b78:	0030      	movs	r0, r6
   15b7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   15b7c:	6863      	ldr	r3, [r4, #4]
   15b7e:	68a5      	ldr	r5, [r4, #8]
   15b80:	9300      	str	r3, [sp, #0]
   15b82:	9b00      	ldr	r3, [sp, #0]
   15b84:	3b01      	subs	r3, #1
   15b86:	9300      	str	r3, [sp, #0]
   15b88:	d501      	bpl.n	15b8e <_fwalk_reent+0x26>
   15b8a:	6824      	ldr	r4, [r4, #0]
   15b8c:	e7f2      	b.n	15b74 <_fwalk_reent+0xc>
   15b8e:	89ab      	ldrh	r3, [r5, #12]
   15b90:	2b01      	cmp	r3, #1
   15b92:	d908      	bls.n	15ba6 <_fwalk_reent+0x3e>
   15b94:	220e      	movs	r2, #14
   15b96:	5eab      	ldrsh	r3, [r5, r2]
   15b98:	3301      	adds	r3, #1
   15b9a:	d004      	beq.n	15ba6 <_fwalk_reent+0x3e>
   15b9c:	0029      	movs	r1, r5
   15b9e:	0038      	movs	r0, r7
   15ba0:	9b01      	ldr	r3, [sp, #4]
   15ba2:	4798      	blx	r3
   15ba4:	4306      	orrs	r6, r0
   15ba6:	3568      	adds	r5, #104	; 0x68
   15ba8:	e7eb      	b.n	15b82 <_fwalk_reent+0x1a>
   15baa:	Address 0x00015baa is out of bounds.


00015bac <__swhatbuf_r>:
   15bac:	b570      	push	{r4, r5, r6, lr}
   15bae:	000e      	movs	r6, r1
   15bb0:	001d      	movs	r5, r3
   15bb2:	230e      	movs	r3, #14
   15bb4:	5ec9      	ldrsh	r1, [r1, r3]
   15bb6:	b090      	sub	sp, #64	; 0x40
   15bb8:	0014      	movs	r4, r2
   15bba:	2900      	cmp	r1, #0
   15bbc:	da07      	bge.n	15bce <__swhatbuf_r+0x22>
   15bbe:	2300      	movs	r3, #0
   15bc0:	602b      	str	r3, [r5, #0]
   15bc2:	89b3      	ldrh	r3, [r6, #12]
   15bc4:	061b      	lsls	r3, r3, #24
   15bc6:	d411      	bmi.n	15bec <__swhatbuf_r+0x40>
   15bc8:	2380      	movs	r3, #128	; 0x80
   15bca:	00db      	lsls	r3, r3, #3
   15bcc:	e00f      	b.n	15bee <__swhatbuf_r+0x42>
   15bce:	aa01      	add	r2, sp, #4
   15bd0:	f000 fb82 	bl	162d8 <_fstat_r>
   15bd4:	2800      	cmp	r0, #0
   15bd6:	dbf2      	blt.n	15bbe <__swhatbuf_r+0x12>
   15bd8:	22f0      	movs	r2, #240	; 0xf0
   15bda:	9b02      	ldr	r3, [sp, #8]
   15bdc:	0212      	lsls	r2, r2, #8
   15bde:	4013      	ands	r3, r2
   15be0:	4a05      	ldr	r2, [pc, #20]	; (15bf8 <__swhatbuf_r+0x4c>)
   15be2:	189b      	adds	r3, r3, r2
   15be4:	425a      	negs	r2, r3
   15be6:	4153      	adcs	r3, r2
   15be8:	602b      	str	r3, [r5, #0]
   15bea:	e7ed      	b.n	15bc8 <__swhatbuf_r+0x1c>
   15bec:	2340      	movs	r3, #64	; 0x40
   15bee:	2000      	movs	r0, #0
   15bf0:	6023      	str	r3, [r4, #0]
   15bf2:	b010      	add	sp, #64	; 0x40
   15bf4:	bd70      	pop	{r4, r5, r6, pc}
   15bf6:	46c0      	nop			; (mov r8, r8)
   15bf8:	ffffe000 	.word	0xffffe000

00015bfc <__smakebuf_r>:
   15bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15bfe:	2602      	movs	r6, #2
   15c00:	898b      	ldrh	r3, [r1, #12]
   15c02:	0005      	movs	r5, r0
   15c04:	000c      	movs	r4, r1
   15c06:	4233      	tst	r3, r6
   15c08:	d006      	beq.n	15c18 <__smakebuf_r+0x1c>
   15c0a:	0023      	movs	r3, r4
   15c0c:	3347      	adds	r3, #71	; 0x47
   15c0e:	6023      	str	r3, [r4, #0]
   15c10:	6123      	str	r3, [r4, #16]
   15c12:	2301      	movs	r3, #1
   15c14:	6163      	str	r3, [r4, #20]
   15c16:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   15c18:	ab01      	add	r3, sp, #4
   15c1a:	466a      	mov	r2, sp
   15c1c:	f7ff ffc6 	bl	15bac <__swhatbuf_r>
   15c20:	9900      	ldr	r1, [sp, #0]
   15c22:	0007      	movs	r7, r0
   15c24:	0028      	movs	r0, r5
   15c26:	f000 f89f 	bl	15d68 <_malloc_r>
   15c2a:	2800      	cmp	r0, #0
   15c2c:	d108      	bne.n	15c40 <__smakebuf_r+0x44>
   15c2e:	220c      	movs	r2, #12
   15c30:	5ea3      	ldrsh	r3, [r4, r2]
   15c32:	059a      	lsls	r2, r3, #22
   15c34:	d4ef      	bmi.n	15c16 <__smakebuf_r+0x1a>
   15c36:	2203      	movs	r2, #3
   15c38:	4393      	bics	r3, r2
   15c3a:	431e      	orrs	r6, r3
   15c3c:	81a6      	strh	r6, [r4, #12]
   15c3e:	e7e4      	b.n	15c0a <__smakebuf_r+0xe>
   15c40:	4b0f      	ldr	r3, [pc, #60]	; (15c80 <__smakebuf_r+0x84>)
   15c42:	62ab      	str	r3, [r5, #40]	; 0x28
   15c44:	2380      	movs	r3, #128	; 0x80
   15c46:	89a2      	ldrh	r2, [r4, #12]
   15c48:	6020      	str	r0, [r4, #0]
   15c4a:	4313      	orrs	r3, r2
   15c4c:	81a3      	strh	r3, [r4, #12]
   15c4e:	9b00      	ldr	r3, [sp, #0]
   15c50:	6120      	str	r0, [r4, #16]
   15c52:	6163      	str	r3, [r4, #20]
   15c54:	9b01      	ldr	r3, [sp, #4]
   15c56:	2b00      	cmp	r3, #0
   15c58:	d00d      	beq.n	15c76 <__smakebuf_r+0x7a>
   15c5a:	230e      	movs	r3, #14
   15c5c:	5ee1      	ldrsh	r1, [r4, r3]
   15c5e:	0028      	movs	r0, r5
   15c60:	f000 fb4c 	bl	162fc <_isatty_r>
   15c64:	2800      	cmp	r0, #0
   15c66:	d006      	beq.n	15c76 <__smakebuf_r+0x7a>
   15c68:	2203      	movs	r2, #3
   15c6a:	89a3      	ldrh	r3, [r4, #12]
   15c6c:	4393      	bics	r3, r2
   15c6e:	001a      	movs	r2, r3
   15c70:	2301      	movs	r3, #1
   15c72:	4313      	orrs	r3, r2
   15c74:	81a3      	strh	r3, [r4, #12]
   15c76:	89a0      	ldrh	r0, [r4, #12]
   15c78:	4338      	orrs	r0, r7
   15c7a:	81a0      	strh	r0, [r4, #12]
   15c7c:	e7cb      	b.n	15c16 <__smakebuf_r+0x1a>
   15c7e:	46c0      	nop			; (mov r8, r8)
   15c80:	000159fd 	.word	0x000159fd

00015c84 <malloc>:
   15c84:	b510      	push	{r4, lr}
   15c86:	4b03      	ldr	r3, [pc, #12]	; (15c94 <malloc+0x10>)
   15c88:	0001      	movs	r1, r0
   15c8a:	6818      	ldr	r0, [r3, #0]
   15c8c:	f000 f86c 	bl	15d68 <_malloc_r>
   15c90:	bd10      	pop	{r4, pc}
   15c92:	46c0      	nop			; (mov r8, r8)
   15c94:	2000001c 	.word	0x2000001c

00015c98 <memchr>:
   15c98:	b2c9      	uxtb	r1, r1
   15c9a:	1882      	adds	r2, r0, r2
   15c9c:	4290      	cmp	r0, r2
   15c9e:	d101      	bne.n	15ca4 <memchr+0xc>
   15ca0:	2000      	movs	r0, #0
   15ca2:	4770      	bx	lr
   15ca4:	7803      	ldrb	r3, [r0, #0]
   15ca6:	428b      	cmp	r3, r1
   15ca8:	d0fb      	beq.n	15ca2 <memchr+0xa>
   15caa:	3001      	adds	r0, #1
   15cac:	e7f6      	b.n	15c9c <memchr+0x4>

00015cae <memmove>:
   15cae:	b510      	push	{r4, lr}
   15cb0:	4288      	cmp	r0, r1
   15cb2:	d902      	bls.n	15cba <memmove+0xc>
   15cb4:	188b      	adds	r3, r1, r2
   15cb6:	4298      	cmp	r0, r3
   15cb8:	d308      	bcc.n	15ccc <memmove+0x1e>
   15cba:	2300      	movs	r3, #0
   15cbc:	429a      	cmp	r2, r3
   15cbe:	d007      	beq.n	15cd0 <memmove+0x22>
   15cc0:	5ccc      	ldrb	r4, [r1, r3]
   15cc2:	54c4      	strb	r4, [r0, r3]
   15cc4:	3301      	adds	r3, #1
   15cc6:	e7f9      	b.n	15cbc <memmove+0xe>
   15cc8:	5c8b      	ldrb	r3, [r1, r2]
   15cca:	5483      	strb	r3, [r0, r2]
   15ccc:	3a01      	subs	r2, #1
   15cce:	d2fb      	bcs.n	15cc8 <memmove+0x1a>
   15cd0:	bd10      	pop	{r4, pc}
   15cd2:	Address 0x00015cd2 is out of bounds.


00015cd4 <_free_r>:
   15cd4:	b570      	push	{r4, r5, r6, lr}
   15cd6:	0005      	movs	r5, r0
   15cd8:	2900      	cmp	r1, #0
   15cda:	d010      	beq.n	15cfe <_free_r+0x2a>
   15cdc:	1f0c      	subs	r4, r1, #4
   15cde:	6823      	ldr	r3, [r4, #0]
   15ce0:	2b00      	cmp	r3, #0
   15ce2:	da00      	bge.n	15ce6 <_free_r+0x12>
   15ce4:	18e4      	adds	r4, r4, r3
   15ce6:	0028      	movs	r0, r5
   15ce8:	f000 fb2e 	bl	16348 <__malloc_lock>
   15cec:	4a1d      	ldr	r2, [pc, #116]	; (15d64 <_free_r+0x90>)
   15cee:	6813      	ldr	r3, [r2, #0]
   15cf0:	2b00      	cmp	r3, #0
   15cf2:	d105      	bne.n	15d00 <_free_r+0x2c>
   15cf4:	6063      	str	r3, [r4, #4]
   15cf6:	6014      	str	r4, [r2, #0]
   15cf8:	0028      	movs	r0, r5
   15cfa:	f000 fb26 	bl	1634a <__malloc_unlock>
   15cfe:	bd70      	pop	{r4, r5, r6, pc}
   15d00:	42a3      	cmp	r3, r4
   15d02:	d909      	bls.n	15d18 <_free_r+0x44>
   15d04:	6821      	ldr	r1, [r4, #0]
   15d06:	1860      	adds	r0, r4, r1
   15d08:	4283      	cmp	r3, r0
   15d0a:	d1f3      	bne.n	15cf4 <_free_r+0x20>
   15d0c:	6818      	ldr	r0, [r3, #0]
   15d0e:	685b      	ldr	r3, [r3, #4]
   15d10:	1841      	adds	r1, r0, r1
   15d12:	6021      	str	r1, [r4, #0]
   15d14:	e7ee      	b.n	15cf4 <_free_r+0x20>
   15d16:	0013      	movs	r3, r2
   15d18:	685a      	ldr	r2, [r3, #4]
   15d1a:	2a00      	cmp	r2, #0
   15d1c:	d001      	beq.n	15d22 <_free_r+0x4e>
   15d1e:	42a2      	cmp	r2, r4
   15d20:	d9f9      	bls.n	15d16 <_free_r+0x42>
   15d22:	6819      	ldr	r1, [r3, #0]
   15d24:	1858      	adds	r0, r3, r1
   15d26:	42a0      	cmp	r0, r4
   15d28:	d10b      	bne.n	15d42 <_free_r+0x6e>
   15d2a:	6820      	ldr	r0, [r4, #0]
   15d2c:	1809      	adds	r1, r1, r0
   15d2e:	1858      	adds	r0, r3, r1
   15d30:	6019      	str	r1, [r3, #0]
   15d32:	4282      	cmp	r2, r0
   15d34:	d1e0      	bne.n	15cf8 <_free_r+0x24>
   15d36:	6810      	ldr	r0, [r2, #0]
   15d38:	6852      	ldr	r2, [r2, #4]
   15d3a:	1841      	adds	r1, r0, r1
   15d3c:	6019      	str	r1, [r3, #0]
   15d3e:	605a      	str	r2, [r3, #4]
   15d40:	e7da      	b.n	15cf8 <_free_r+0x24>
   15d42:	42a0      	cmp	r0, r4
   15d44:	d902      	bls.n	15d4c <_free_r+0x78>
   15d46:	230c      	movs	r3, #12
   15d48:	602b      	str	r3, [r5, #0]
   15d4a:	e7d5      	b.n	15cf8 <_free_r+0x24>
   15d4c:	6821      	ldr	r1, [r4, #0]
   15d4e:	1860      	adds	r0, r4, r1
   15d50:	4282      	cmp	r2, r0
   15d52:	d103      	bne.n	15d5c <_free_r+0x88>
   15d54:	6810      	ldr	r0, [r2, #0]
   15d56:	6852      	ldr	r2, [r2, #4]
   15d58:	1841      	adds	r1, r0, r1
   15d5a:	6021      	str	r1, [r4, #0]
   15d5c:	6062      	str	r2, [r4, #4]
   15d5e:	605c      	str	r4, [r3, #4]
   15d60:	e7ca      	b.n	15cf8 <_free_r+0x24>
   15d62:	46c0      	nop			; (mov r8, r8)
   15d64:	20001e1c 	.word	0x20001e1c

00015d68 <_malloc_r>:
   15d68:	2303      	movs	r3, #3
   15d6a:	b570      	push	{r4, r5, r6, lr}
   15d6c:	1ccd      	adds	r5, r1, #3
   15d6e:	439d      	bics	r5, r3
   15d70:	3508      	adds	r5, #8
   15d72:	0006      	movs	r6, r0
   15d74:	2d0c      	cmp	r5, #12
   15d76:	d21e      	bcs.n	15db6 <_malloc_r+0x4e>
   15d78:	250c      	movs	r5, #12
   15d7a:	42a9      	cmp	r1, r5
   15d7c:	d81d      	bhi.n	15dba <_malloc_r+0x52>
   15d7e:	0030      	movs	r0, r6
   15d80:	f000 fae2 	bl	16348 <__malloc_lock>
   15d84:	4a25      	ldr	r2, [pc, #148]	; (15e1c <_malloc_r+0xb4>)
   15d86:	6814      	ldr	r4, [r2, #0]
   15d88:	0021      	movs	r1, r4
   15d8a:	2900      	cmp	r1, #0
   15d8c:	d119      	bne.n	15dc2 <_malloc_r+0x5a>
   15d8e:	4c24      	ldr	r4, [pc, #144]	; (15e20 <_malloc_r+0xb8>)
   15d90:	6823      	ldr	r3, [r4, #0]
   15d92:	2b00      	cmp	r3, #0
   15d94:	d103      	bne.n	15d9e <_malloc_r+0x36>
   15d96:	0030      	movs	r0, r6
   15d98:	f000 f9d0 	bl	1613c <_sbrk_r>
   15d9c:	6020      	str	r0, [r4, #0]
   15d9e:	0029      	movs	r1, r5
   15da0:	0030      	movs	r0, r6
   15da2:	f000 f9cb 	bl	1613c <_sbrk_r>
   15da6:	1c43      	adds	r3, r0, #1
   15da8:	d12c      	bne.n	15e04 <_malloc_r+0x9c>
   15daa:	230c      	movs	r3, #12
   15dac:	0030      	movs	r0, r6
   15dae:	6033      	str	r3, [r6, #0]
   15db0:	f000 facb 	bl	1634a <__malloc_unlock>
   15db4:	e003      	b.n	15dbe <_malloc_r+0x56>
   15db6:	2d00      	cmp	r5, #0
   15db8:	dadf      	bge.n	15d7a <_malloc_r+0x12>
   15dba:	230c      	movs	r3, #12
   15dbc:	6033      	str	r3, [r6, #0]
   15dbe:	2000      	movs	r0, #0
   15dc0:	bd70      	pop	{r4, r5, r6, pc}
   15dc2:	680b      	ldr	r3, [r1, #0]
   15dc4:	1b5b      	subs	r3, r3, r5
   15dc6:	d41a      	bmi.n	15dfe <_malloc_r+0x96>
   15dc8:	2b0b      	cmp	r3, #11
   15dca:	d903      	bls.n	15dd4 <_malloc_r+0x6c>
   15dcc:	600b      	str	r3, [r1, #0]
   15dce:	18cc      	adds	r4, r1, r3
   15dd0:	6025      	str	r5, [r4, #0]
   15dd2:	e003      	b.n	15ddc <_malloc_r+0x74>
   15dd4:	428c      	cmp	r4, r1
   15dd6:	d10e      	bne.n	15df6 <_malloc_r+0x8e>
   15dd8:	6863      	ldr	r3, [r4, #4]
   15dda:	6013      	str	r3, [r2, #0]
   15ddc:	0030      	movs	r0, r6
   15dde:	f000 fab4 	bl	1634a <__malloc_unlock>
   15de2:	0020      	movs	r0, r4
   15de4:	2207      	movs	r2, #7
   15de6:	300b      	adds	r0, #11
   15de8:	1d23      	adds	r3, r4, #4
   15dea:	4390      	bics	r0, r2
   15dec:	1ac3      	subs	r3, r0, r3
   15dee:	d0e7      	beq.n	15dc0 <_malloc_r+0x58>
   15df0:	425a      	negs	r2, r3
   15df2:	50e2      	str	r2, [r4, r3]
   15df4:	e7e4      	b.n	15dc0 <_malloc_r+0x58>
   15df6:	684b      	ldr	r3, [r1, #4]
   15df8:	6063      	str	r3, [r4, #4]
   15dfa:	000c      	movs	r4, r1
   15dfc:	e7ee      	b.n	15ddc <_malloc_r+0x74>
   15dfe:	000c      	movs	r4, r1
   15e00:	6849      	ldr	r1, [r1, #4]
   15e02:	e7c2      	b.n	15d8a <_malloc_r+0x22>
   15e04:	2303      	movs	r3, #3
   15e06:	1cc4      	adds	r4, r0, #3
   15e08:	439c      	bics	r4, r3
   15e0a:	42a0      	cmp	r0, r4
   15e0c:	d0e0      	beq.n	15dd0 <_malloc_r+0x68>
   15e0e:	1a21      	subs	r1, r4, r0
   15e10:	0030      	movs	r0, r6
   15e12:	f000 f993 	bl	1613c <_sbrk_r>
   15e16:	1c43      	adds	r3, r0, #1
   15e18:	d1da      	bne.n	15dd0 <_malloc_r+0x68>
   15e1a:	e7c6      	b.n	15daa <_malloc_r+0x42>
   15e1c:	20001e1c 	.word	0x20001e1c
   15e20:	20001e20 	.word	0x20001e20

00015e24 <_realloc_r>:
   15e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15e26:	0007      	movs	r7, r0
   15e28:	000d      	movs	r5, r1
   15e2a:	0016      	movs	r6, r2
   15e2c:	2900      	cmp	r1, #0
   15e2e:	d105      	bne.n	15e3c <_realloc_r+0x18>
   15e30:	0011      	movs	r1, r2
   15e32:	f7ff ff99 	bl	15d68 <_malloc_r>
   15e36:	0004      	movs	r4, r0
   15e38:	0020      	movs	r0, r4
   15e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15e3c:	2a00      	cmp	r2, #0
   15e3e:	d103      	bne.n	15e48 <_realloc_r+0x24>
   15e40:	f7ff ff48 	bl	15cd4 <_free_r>
   15e44:	0034      	movs	r4, r6
   15e46:	e7f7      	b.n	15e38 <_realloc_r+0x14>
   15e48:	f000 fa80 	bl	1634c <_malloc_usable_size_r>
   15e4c:	002c      	movs	r4, r5
   15e4e:	4286      	cmp	r6, r0
   15e50:	d9f2      	bls.n	15e38 <_realloc_r+0x14>
   15e52:	0031      	movs	r1, r6
   15e54:	0038      	movs	r0, r7
   15e56:	f7ff ff87 	bl	15d68 <_malloc_r>
   15e5a:	1e04      	subs	r4, r0, #0
   15e5c:	d0ec      	beq.n	15e38 <_realloc_r+0x14>
   15e5e:	0029      	movs	r1, r5
   15e60:	0032      	movs	r2, r6
   15e62:	f7ff f8be 	bl	14fe2 <memcpy>
   15e66:	0029      	movs	r1, r5
   15e68:	0038      	movs	r0, r7
   15e6a:	f7ff ff33 	bl	15cd4 <_free_r>
   15e6e:	e7e3      	b.n	15e38 <_realloc_r+0x14>

00015e70 <__ssputs_r>:
   15e70:	b5f0      	push	{r4, r5, r6, r7, lr}
   15e72:	688e      	ldr	r6, [r1, #8]
   15e74:	b085      	sub	sp, #20
   15e76:	0007      	movs	r7, r0
   15e78:	000c      	movs	r4, r1
   15e7a:	9203      	str	r2, [sp, #12]
   15e7c:	9301      	str	r3, [sp, #4]
   15e7e:	429e      	cmp	r6, r3
   15e80:	d839      	bhi.n	15ef6 <__ssputs_r+0x86>
   15e82:	2390      	movs	r3, #144	; 0x90
   15e84:	898a      	ldrh	r2, [r1, #12]
   15e86:	00db      	lsls	r3, r3, #3
   15e88:	421a      	tst	r2, r3
   15e8a:	d034      	beq.n	15ef6 <__ssputs_r+0x86>
   15e8c:	2503      	movs	r5, #3
   15e8e:	6909      	ldr	r1, [r1, #16]
   15e90:	6823      	ldr	r3, [r4, #0]
   15e92:	1a5b      	subs	r3, r3, r1
   15e94:	9302      	str	r3, [sp, #8]
   15e96:	6963      	ldr	r3, [r4, #20]
   15e98:	9802      	ldr	r0, [sp, #8]
   15e9a:	435d      	muls	r5, r3
   15e9c:	0feb      	lsrs	r3, r5, #31
   15e9e:	195d      	adds	r5, r3, r5
   15ea0:	9b01      	ldr	r3, [sp, #4]
   15ea2:	106d      	asrs	r5, r5, #1
   15ea4:	3301      	adds	r3, #1
   15ea6:	181b      	adds	r3, r3, r0
   15ea8:	42ab      	cmp	r3, r5
   15eaa:	d900      	bls.n	15eae <__ssputs_r+0x3e>
   15eac:	001d      	movs	r5, r3
   15eae:	0553      	lsls	r3, r2, #21
   15eb0:	d532      	bpl.n	15f18 <__ssputs_r+0xa8>
   15eb2:	0029      	movs	r1, r5
   15eb4:	0038      	movs	r0, r7
   15eb6:	f7ff ff57 	bl	15d68 <_malloc_r>
   15eba:	1e06      	subs	r6, r0, #0
   15ebc:	d109      	bne.n	15ed2 <__ssputs_r+0x62>
   15ebe:	230c      	movs	r3, #12
   15ec0:	603b      	str	r3, [r7, #0]
   15ec2:	2340      	movs	r3, #64	; 0x40
   15ec4:	2001      	movs	r0, #1
   15ec6:	89a2      	ldrh	r2, [r4, #12]
   15ec8:	4240      	negs	r0, r0
   15eca:	4313      	orrs	r3, r2
   15ecc:	81a3      	strh	r3, [r4, #12]
   15ece:	b005      	add	sp, #20
   15ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15ed2:	9a02      	ldr	r2, [sp, #8]
   15ed4:	6921      	ldr	r1, [r4, #16]
   15ed6:	f7ff f884 	bl	14fe2 <memcpy>
   15eda:	89a3      	ldrh	r3, [r4, #12]
   15edc:	4a14      	ldr	r2, [pc, #80]	; (15f30 <__ssputs_r+0xc0>)
   15ede:	401a      	ands	r2, r3
   15ee0:	2380      	movs	r3, #128	; 0x80
   15ee2:	4313      	orrs	r3, r2
   15ee4:	81a3      	strh	r3, [r4, #12]
   15ee6:	9b02      	ldr	r3, [sp, #8]
   15ee8:	6126      	str	r6, [r4, #16]
   15eea:	18f6      	adds	r6, r6, r3
   15eec:	6026      	str	r6, [r4, #0]
   15eee:	6165      	str	r5, [r4, #20]
   15ef0:	9e01      	ldr	r6, [sp, #4]
   15ef2:	1aed      	subs	r5, r5, r3
   15ef4:	60a5      	str	r5, [r4, #8]
   15ef6:	9b01      	ldr	r3, [sp, #4]
   15ef8:	42b3      	cmp	r3, r6
   15efa:	d200      	bcs.n	15efe <__ssputs_r+0x8e>
   15efc:	001e      	movs	r6, r3
   15efe:	0032      	movs	r2, r6
   15f00:	9903      	ldr	r1, [sp, #12]
   15f02:	6820      	ldr	r0, [r4, #0]
   15f04:	f7ff fed3 	bl	15cae <memmove>
   15f08:	68a3      	ldr	r3, [r4, #8]
   15f0a:	2000      	movs	r0, #0
   15f0c:	1b9b      	subs	r3, r3, r6
   15f0e:	60a3      	str	r3, [r4, #8]
   15f10:	6823      	ldr	r3, [r4, #0]
   15f12:	199e      	adds	r6, r3, r6
   15f14:	6026      	str	r6, [r4, #0]
   15f16:	e7da      	b.n	15ece <__ssputs_r+0x5e>
   15f18:	002a      	movs	r2, r5
   15f1a:	0038      	movs	r0, r7
   15f1c:	f7ff ff82 	bl	15e24 <_realloc_r>
   15f20:	1e06      	subs	r6, r0, #0
   15f22:	d1e0      	bne.n	15ee6 <__ssputs_r+0x76>
   15f24:	6921      	ldr	r1, [r4, #16]
   15f26:	0038      	movs	r0, r7
   15f28:	f7ff fed4 	bl	15cd4 <_free_r>
   15f2c:	e7c7      	b.n	15ebe <__ssputs_r+0x4e>
   15f2e:	46c0      	nop			; (mov r8, r8)
   15f30:	fffffb7f 	.word	0xfffffb7f

00015f34 <_svfiprintf_r>:
   15f34:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f36:	b09f      	sub	sp, #124	; 0x7c
   15f38:	9002      	str	r0, [sp, #8]
   15f3a:	9305      	str	r3, [sp, #20]
   15f3c:	898b      	ldrh	r3, [r1, #12]
   15f3e:	000f      	movs	r7, r1
   15f40:	0016      	movs	r6, r2
   15f42:	061b      	lsls	r3, r3, #24
   15f44:	d511      	bpl.n	15f6a <_svfiprintf_r+0x36>
   15f46:	690b      	ldr	r3, [r1, #16]
   15f48:	2b00      	cmp	r3, #0
   15f4a:	d10e      	bne.n	15f6a <_svfiprintf_r+0x36>
   15f4c:	2140      	movs	r1, #64	; 0x40
   15f4e:	f7ff ff0b 	bl	15d68 <_malloc_r>
   15f52:	6038      	str	r0, [r7, #0]
   15f54:	6138      	str	r0, [r7, #16]
   15f56:	2800      	cmp	r0, #0
   15f58:	d105      	bne.n	15f66 <_svfiprintf_r+0x32>
   15f5a:	230c      	movs	r3, #12
   15f5c:	9a02      	ldr	r2, [sp, #8]
   15f5e:	3801      	subs	r0, #1
   15f60:	6013      	str	r3, [r2, #0]
   15f62:	b01f      	add	sp, #124	; 0x7c
   15f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15f66:	2340      	movs	r3, #64	; 0x40
   15f68:	617b      	str	r3, [r7, #20]
   15f6a:	2300      	movs	r3, #0
   15f6c:	ad06      	add	r5, sp, #24
   15f6e:	616b      	str	r3, [r5, #20]
   15f70:	3320      	adds	r3, #32
   15f72:	766b      	strb	r3, [r5, #25]
   15f74:	3310      	adds	r3, #16
   15f76:	76ab      	strb	r3, [r5, #26]
   15f78:	0034      	movs	r4, r6
   15f7a:	7823      	ldrb	r3, [r4, #0]
   15f7c:	2b00      	cmp	r3, #0
   15f7e:	d147      	bne.n	16010 <_svfiprintf_r+0xdc>
   15f80:	1ba3      	subs	r3, r4, r6
   15f82:	9304      	str	r3, [sp, #16]
   15f84:	d00d      	beq.n	15fa2 <_svfiprintf_r+0x6e>
   15f86:	1ba3      	subs	r3, r4, r6
   15f88:	0032      	movs	r2, r6
   15f8a:	0039      	movs	r1, r7
   15f8c:	9802      	ldr	r0, [sp, #8]
   15f8e:	f7ff ff6f 	bl	15e70 <__ssputs_r>
   15f92:	1c43      	adds	r3, r0, #1
   15f94:	d100      	bne.n	15f98 <_svfiprintf_r+0x64>
   15f96:	e0b5      	b.n	16104 <_svfiprintf_r+0x1d0>
   15f98:	696a      	ldr	r2, [r5, #20]
   15f9a:	9b04      	ldr	r3, [sp, #16]
   15f9c:	4694      	mov	ip, r2
   15f9e:	4463      	add	r3, ip
   15fa0:	616b      	str	r3, [r5, #20]
   15fa2:	7823      	ldrb	r3, [r4, #0]
   15fa4:	2b00      	cmp	r3, #0
   15fa6:	d100      	bne.n	15faa <_svfiprintf_r+0x76>
   15fa8:	e0ac      	b.n	16104 <_svfiprintf_r+0x1d0>
   15faa:	2201      	movs	r2, #1
   15fac:	2300      	movs	r3, #0
   15fae:	4252      	negs	r2, r2
   15fb0:	606a      	str	r2, [r5, #4]
   15fb2:	a902      	add	r1, sp, #8
   15fb4:	3254      	adds	r2, #84	; 0x54
   15fb6:	1852      	adds	r2, r2, r1
   15fb8:	3401      	adds	r4, #1
   15fba:	602b      	str	r3, [r5, #0]
   15fbc:	60eb      	str	r3, [r5, #12]
   15fbe:	60ab      	str	r3, [r5, #8]
   15fc0:	7013      	strb	r3, [r2, #0]
   15fc2:	65ab      	str	r3, [r5, #88]	; 0x58
   15fc4:	4e58      	ldr	r6, [pc, #352]	; (16128 <_svfiprintf_r+0x1f4>)
   15fc6:	2205      	movs	r2, #5
   15fc8:	7821      	ldrb	r1, [r4, #0]
   15fca:	0030      	movs	r0, r6
   15fcc:	f7ff fe64 	bl	15c98 <memchr>
   15fd0:	1c62      	adds	r2, r4, #1
   15fd2:	2800      	cmp	r0, #0
   15fd4:	d120      	bne.n	16018 <_svfiprintf_r+0xe4>
   15fd6:	6829      	ldr	r1, [r5, #0]
   15fd8:	06cb      	lsls	r3, r1, #27
   15fda:	d504      	bpl.n	15fe6 <_svfiprintf_r+0xb2>
   15fdc:	2353      	movs	r3, #83	; 0x53
   15fde:	ae02      	add	r6, sp, #8
   15fe0:	3020      	adds	r0, #32
   15fe2:	199b      	adds	r3, r3, r6
   15fe4:	7018      	strb	r0, [r3, #0]
   15fe6:	070b      	lsls	r3, r1, #28
   15fe8:	d504      	bpl.n	15ff4 <_svfiprintf_r+0xc0>
   15fea:	2353      	movs	r3, #83	; 0x53
   15fec:	202b      	movs	r0, #43	; 0x2b
   15fee:	ae02      	add	r6, sp, #8
   15ff0:	199b      	adds	r3, r3, r6
   15ff2:	7018      	strb	r0, [r3, #0]
   15ff4:	7823      	ldrb	r3, [r4, #0]
   15ff6:	2b2a      	cmp	r3, #42	; 0x2a
   15ff8:	d016      	beq.n	16028 <_svfiprintf_r+0xf4>
   15ffa:	2000      	movs	r0, #0
   15ffc:	210a      	movs	r1, #10
   15ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16000:	7822      	ldrb	r2, [r4, #0]
   16002:	3a30      	subs	r2, #48	; 0x30
   16004:	2a09      	cmp	r2, #9
   16006:	d955      	bls.n	160b4 <_svfiprintf_r+0x180>
   16008:	2800      	cmp	r0, #0
   1600a:	d015      	beq.n	16038 <_svfiprintf_r+0x104>
   1600c:	9309      	str	r3, [sp, #36]	; 0x24
   1600e:	e013      	b.n	16038 <_svfiprintf_r+0x104>
   16010:	2b25      	cmp	r3, #37	; 0x25
   16012:	d0b5      	beq.n	15f80 <_svfiprintf_r+0x4c>
   16014:	3401      	adds	r4, #1
   16016:	e7b0      	b.n	15f7a <_svfiprintf_r+0x46>
   16018:	2301      	movs	r3, #1
   1601a:	1b80      	subs	r0, r0, r6
   1601c:	4083      	lsls	r3, r0
   1601e:	6829      	ldr	r1, [r5, #0]
   16020:	0014      	movs	r4, r2
   16022:	430b      	orrs	r3, r1
   16024:	602b      	str	r3, [r5, #0]
   16026:	e7cd      	b.n	15fc4 <_svfiprintf_r+0x90>
   16028:	9b05      	ldr	r3, [sp, #20]
   1602a:	1d18      	adds	r0, r3, #4
   1602c:	681b      	ldr	r3, [r3, #0]
   1602e:	9005      	str	r0, [sp, #20]
   16030:	2b00      	cmp	r3, #0
   16032:	db39      	blt.n	160a8 <_svfiprintf_r+0x174>
   16034:	9309      	str	r3, [sp, #36]	; 0x24
   16036:	0014      	movs	r4, r2
   16038:	7823      	ldrb	r3, [r4, #0]
   1603a:	2b2e      	cmp	r3, #46	; 0x2e
   1603c:	d10b      	bne.n	16056 <_svfiprintf_r+0x122>
   1603e:	7863      	ldrb	r3, [r4, #1]
   16040:	1c62      	adds	r2, r4, #1
   16042:	2b2a      	cmp	r3, #42	; 0x2a
   16044:	d13e      	bne.n	160c4 <_svfiprintf_r+0x190>
   16046:	9b05      	ldr	r3, [sp, #20]
   16048:	3402      	adds	r4, #2
   1604a:	1d1a      	adds	r2, r3, #4
   1604c:	681b      	ldr	r3, [r3, #0]
   1604e:	9205      	str	r2, [sp, #20]
   16050:	2b00      	cmp	r3, #0
   16052:	db34      	blt.n	160be <_svfiprintf_r+0x18a>
   16054:	9307      	str	r3, [sp, #28]
   16056:	4e35      	ldr	r6, [pc, #212]	; (1612c <_svfiprintf_r+0x1f8>)
   16058:	7821      	ldrb	r1, [r4, #0]
   1605a:	2203      	movs	r2, #3
   1605c:	0030      	movs	r0, r6
   1605e:	f7ff fe1b 	bl	15c98 <memchr>
   16062:	2800      	cmp	r0, #0
   16064:	d006      	beq.n	16074 <_svfiprintf_r+0x140>
   16066:	2340      	movs	r3, #64	; 0x40
   16068:	1b80      	subs	r0, r0, r6
   1606a:	4083      	lsls	r3, r0
   1606c:	682a      	ldr	r2, [r5, #0]
   1606e:	3401      	adds	r4, #1
   16070:	4313      	orrs	r3, r2
   16072:	602b      	str	r3, [r5, #0]
   16074:	7821      	ldrb	r1, [r4, #0]
   16076:	2206      	movs	r2, #6
   16078:	482d      	ldr	r0, [pc, #180]	; (16130 <_svfiprintf_r+0x1fc>)
   1607a:	1c66      	adds	r6, r4, #1
   1607c:	7629      	strb	r1, [r5, #24]
   1607e:	f7ff fe0b 	bl	15c98 <memchr>
   16082:	2800      	cmp	r0, #0
   16084:	d046      	beq.n	16114 <_svfiprintf_r+0x1e0>
   16086:	4b2b      	ldr	r3, [pc, #172]	; (16134 <_svfiprintf_r+0x200>)
   16088:	2b00      	cmp	r3, #0
   1608a:	d12f      	bne.n	160ec <_svfiprintf_r+0x1b8>
   1608c:	6829      	ldr	r1, [r5, #0]
   1608e:	9b05      	ldr	r3, [sp, #20]
   16090:	2207      	movs	r2, #7
   16092:	05c9      	lsls	r1, r1, #23
   16094:	d528      	bpl.n	160e8 <_svfiprintf_r+0x1b4>
   16096:	189b      	adds	r3, r3, r2
   16098:	4393      	bics	r3, r2
   1609a:	3308      	adds	r3, #8
   1609c:	9305      	str	r3, [sp, #20]
   1609e:	696b      	ldr	r3, [r5, #20]
   160a0:	9a03      	ldr	r2, [sp, #12]
   160a2:	189b      	adds	r3, r3, r2
   160a4:	616b      	str	r3, [r5, #20]
   160a6:	e767      	b.n	15f78 <_svfiprintf_r+0x44>
   160a8:	425b      	negs	r3, r3
   160aa:	60eb      	str	r3, [r5, #12]
   160ac:	2302      	movs	r3, #2
   160ae:	430b      	orrs	r3, r1
   160b0:	602b      	str	r3, [r5, #0]
   160b2:	e7c0      	b.n	16036 <_svfiprintf_r+0x102>
   160b4:	434b      	muls	r3, r1
   160b6:	3401      	adds	r4, #1
   160b8:	189b      	adds	r3, r3, r2
   160ba:	2001      	movs	r0, #1
   160bc:	e7a0      	b.n	16000 <_svfiprintf_r+0xcc>
   160be:	2301      	movs	r3, #1
   160c0:	425b      	negs	r3, r3
   160c2:	e7c7      	b.n	16054 <_svfiprintf_r+0x120>
   160c4:	2300      	movs	r3, #0
   160c6:	0014      	movs	r4, r2
   160c8:	200a      	movs	r0, #10
   160ca:	001a      	movs	r2, r3
   160cc:	606b      	str	r3, [r5, #4]
   160ce:	7821      	ldrb	r1, [r4, #0]
   160d0:	3930      	subs	r1, #48	; 0x30
   160d2:	2909      	cmp	r1, #9
   160d4:	d903      	bls.n	160de <_svfiprintf_r+0x1aa>
   160d6:	2b00      	cmp	r3, #0
   160d8:	d0bd      	beq.n	16056 <_svfiprintf_r+0x122>
   160da:	9207      	str	r2, [sp, #28]
   160dc:	e7bb      	b.n	16056 <_svfiprintf_r+0x122>
   160de:	4342      	muls	r2, r0
   160e0:	3401      	adds	r4, #1
   160e2:	1852      	adds	r2, r2, r1
   160e4:	2301      	movs	r3, #1
   160e6:	e7f2      	b.n	160ce <_svfiprintf_r+0x19a>
   160e8:	3307      	adds	r3, #7
   160ea:	e7d5      	b.n	16098 <_svfiprintf_r+0x164>
   160ec:	ab05      	add	r3, sp, #20
   160ee:	9300      	str	r3, [sp, #0]
   160f0:	003a      	movs	r2, r7
   160f2:	4b11      	ldr	r3, [pc, #68]	; (16138 <_svfiprintf_r+0x204>)
   160f4:	0029      	movs	r1, r5
   160f6:	9802      	ldr	r0, [sp, #8]
   160f8:	e000      	b.n	160fc <_svfiprintf_r+0x1c8>
   160fa:	bf00      	nop
   160fc:	9003      	str	r0, [sp, #12]
   160fe:	9b03      	ldr	r3, [sp, #12]
   16100:	3301      	adds	r3, #1
   16102:	d1cc      	bne.n	1609e <_svfiprintf_r+0x16a>
   16104:	89bb      	ldrh	r3, [r7, #12]
   16106:	980b      	ldr	r0, [sp, #44]	; 0x2c
   16108:	065b      	lsls	r3, r3, #25
   1610a:	d400      	bmi.n	1610e <_svfiprintf_r+0x1da>
   1610c:	e729      	b.n	15f62 <_svfiprintf_r+0x2e>
   1610e:	2001      	movs	r0, #1
   16110:	4240      	negs	r0, r0
   16112:	e726      	b.n	15f62 <_svfiprintf_r+0x2e>
   16114:	ab05      	add	r3, sp, #20
   16116:	9300      	str	r3, [sp, #0]
   16118:	003a      	movs	r2, r7
   1611a:	4b07      	ldr	r3, [pc, #28]	; (16138 <_svfiprintf_r+0x204>)
   1611c:	0029      	movs	r1, r5
   1611e:	9802      	ldr	r0, [sp, #8]
   16120:	f7ff f922 	bl	15368 <_printf_i>
   16124:	e7ea      	b.n	160fc <_svfiprintf_r+0x1c8>
   16126:	46c0      	nop			; (mov r8, r8)
   16128:	00016f2c 	.word	0x00016f2c
   1612c:	00016f32 	.word	0x00016f32
   16130:	00016f36 	.word	0x00016f36
   16134:	00000000 	.word	0x00000000
   16138:	00015e71 	.word	0x00015e71

0001613c <_sbrk_r>:
   1613c:	2300      	movs	r3, #0
   1613e:	b570      	push	{r4, r5, r6, lr}
   16140:	4c06      	ldr	r4, [pc, #24]	; (1615c <_sbrk_r+0x20>)
   16142:	0005      	movs	r5, r0
   16144:	0008      	movs	r0, r1
   16146:	6023      	str	r3, [r4, #0]
   16148:	f7f0 fbcc 	bl	68e4 <_sbrk>
   1614c:	1c43      	adds	r3, r0, #1
   1614e:	d103      	bne.n	16158 <_sbrk_r+0x1c>
   16150:	6823      	ldr	r3, [r4, #0]
   16152:	2b00      	cmp	r3, #0
   16154:	d000      	beq.n	16158 <_sbrk_r+0x1c>
   16156:	602b      	str	r3, [r5, #0]
   16158:	bd70      	pop	{r4, r5, r6, pc}
   1615a:	46c0      	nop			; (mov r8, r8)
   1615c:	20003e3c 	.word	0x20003e3c

00016160 <_raise_r>:
   16160:	b570      	push	{r4, r5, r6, lr}
   16162:	0004      	movs	r4, r0
   16164:	000d      	movs	r5, r1
   16166:	291f      	cmp	r1, #31
   16168:	d904      	bls.n	16174 <_raise_r+0x14>
   1616a:	2316      	movs	r3, #22
   1616c:	6003      	str	r3, [r0, #0]
   1616e:	2001      	movs	r0, #1
   16170:	4240      	negs	r0, r0
   16172:	bd70      	pop	{r4, r5, r6, pc}
   16174:	6c43      	ldr	r3, [r0, #68]	; 0x44
   16176:	2b00      	cmp	r3, #0
   16178:	d004      	beq.n	16184 <_raise_r+0x24>
   1617a:	008a      	lsls	r2, r1, #2
   1617c:	189b      	adds	r3, r3, r2
   1617e:	681a      	ldr	r2, [r3, #0]
   16180:	2a00      	cmp	r2, #0
   16182:	d108      	bne.n	16196 <_raise_r+0x36>
   16184:	0020      	movs	r0, r4
   16186:	f000 f831 	bl	161ec <_getpid_r>
   1618a:	002a      	movs	r2, r5
   1618c:	0001      	movs	r1, r0
   1618e:	0020      	movs	r0, r4
   16190:	f000 f81a 	bl	161c8 <_kill_r>
   16194:	e7ed      	b.n	16172 <_raise_r+0x12>
   16196:	2000      	movs	r0, #0
   16198:	2a01      	cmp	r2, #1
   1619a:	d0ea      	beq.n	16172 <_raise_r+0x12>
   1619c:	1c51      	adds	r1, r2, #1
   1619e:	d103      	bne.n	161a8 <_raise_r+0x48>
   161a0:	2316      	movs	r3, #22
   161a2:	3001      	adds	r0, #1
   161a4:	6023      	str	r3, [r4, #0]
   161a6:	e7e4      	b.n	16172 <_raise_r+0x12>
   161a8:	2400      	movs	r4, #0
   161aa:	0028      	movs	r0, r5
   161ac:	601c      	str	r4, [r3, #0]
   161ae:	4790      	blx	r2
   161b0:	0020      	movs	r0, r4
   161b2:	e7de      	b.n	16172 <_raise_r+0x12>

000161b4 <raise>:
   161b4:	b510      	push	{r4, lr}
   161b6:	4b03      	ldr	r3, [pc, #12]	; (161c4 <raise+0x10>)
   161b8:	0001      	movs	r1, r0
   161ba:	6818      	ldr	r0, [r3, #0]
   161bc:	f7ff ffd0 	bl	16160 <_raise_r>
   161c0:	bd10      	pop	{r4, pc}
   161c2:	46c0      	nop			; (mov r8, r8)
   161c4:	2000001c 	.word	0x2000001c

000161c8 <_kill_r>:
   161c8:	2300      	movs	r3, #0
   161ca:	b570      	push	{r4, r5, r6, lr}
   161cc:	4c06      	ldr	r4, [pc, #24]	; (161e8 <_kill_r+0x20>)
   161ce:	0005      	movs	r5, r0
   161d0:	0008      	movs	r0, r1
   161d2:	0011      	movs	r1, r2
   161d4:	6023      	str	r3, [r4, #0]
   161d6:	f7f0 fba5 	bl	6924 <_kill>
   161da:	1c43      	adds	r3, r0, #1
   161dc:	d103      	bne.n	161e6 <_kill_r+0x1e>
   161de:	6823      	ldr	r3, [r4, #0]
   161e0:	2b00      	cmp	r3, #0
   161e2:	d000      	beq.n	161e6 <_kill_r+0x1e>
   161e4:	602b      	str	r3, [r5, #0]
   161e6:	bd70      	pop	{r4, r5, r6, pc}
   161e8:	20003e3c 	.word	0x20003e3c

000161ec <_getpid_r>:
   161ec:	b510      	push	{r4, lr}
   161ee:	f7f0 fb9a 	bl	6926 <_getpid>
   161f2:	bd10      	pop	{r4, pc}

000161f4 <__sread>:
   161f4:	b570      	push	{r4, r5, r6, lr}
   161f6:	000c      	movs	r4, r1
   161f8:	250e      	movs	r5, #14
   161fa:	5f49      	ldrsh	r1, [r1, r5]
   161fc:	f000 f8ae 	bl	1635c <_read_r>
   16200:	2800      	cmp	r0, #0
   16202:	db03      	blt.n	1620c <__sread+0x18>
   16204:	6d63      	ldr	r3, [r4, #84]	; 0x54
   16206:	181b      	adds	r3, r3, r0
   16208:	6563      	str	r3, [r4, #84]	; 0x54
   1620a:	bd70      	pop	{r4, r5, r6, pc}
   1620c:	89a3      	ldrh	r3, [r4, #12]
   1620e:	4a02      	ldr	r2, [pc, #8]	; (16218 <__sread+0x24>)
   16210:	4013      	ands	r3, r2
   16212:	81a3      	strh	r3, [r4, #12]
   16214:	e7f9      	b.n	1620a <__sread+0x16>
   16216:	46c0      	nop			; (mov r8, r8)
   16218:	ffffefff 	.word	0xffffefff

0001621c <__swrite>:
   1621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1621e:	001f      	movs	r7, r3
   16220:	898b      	ldrh	r3, [r1, #12]
   16222:	0005      	movs	r5, r0
   16224:	000c      	movs	r4, r1
   16226:	0016      	movs	r6, r2
   16228:	05db      	lsls	r3, r3, #23
   1622a:	d505      	bpl.n	16238 <__swrite+0x1c>
   1622c:	230e      	movs	r3, #14
   1622e:	5ec9      	ldrsh	r1, [r1, r3]
   16230:	2200      	movs	r2, #0
   16232:	2302      	movs	r3, #2
   16234:	f000 f874 	bl	16320 <_lseek_r>
   16238:	89a3      	ldrh	r3, [r4, #12]
   1623a:	4a05      	ldr	r2, [pc, #20]	; (16250 <__swrite+0x34>)
   1623c:	0028      	movs	r0, r5
   1623e:	4013      	ands	r3, r2
   16240:	81a3      	strh	r3, [r4, #12]
   16242:	0032      	movs	r2, r6
   16244:	230e      	movs	r3, #14
   16246:	5ee1      	ldrsh	r1, [r4, r3]
   16248:	003b      	movs	r3, r7
   1624a:	f000 f81f 	bl	1628c <_write_r>
   1624e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16250:	ffffefff 	.word	0xffffefff

00016254 <__sseek>:
   16254:	b570      	push	{r4, r5, r6, lr}
   16256:	000c      	movs	r4, r1
   16258:	250e      	movs	r5, #14
   1625a:	5f49      	ldrsh	r1, [r1, r5]
   1625c:	f000 f860 	bl	16320 <_lseek_r>
   16260:	89a3      	ldrh	r3, [r4, #12]
   16262:	1c42      	adds	r2, r0, #1
   16264:	d103      	bne.n	1626e <__sseek+0x1a>
   16266:	4a05      	ldr	r2, [pc, #20]	; (1627c <__sseek+0x28>)
   16268:	4013      	ands	r3, r2
   1626a:	81a3      	strh	r3, [r4, #12]
   1626c:	bd70      	pop	{r4, r5, r6, pc}
   1626e:	2280      	movs	r2, #128	; 0x80
   16270:	0152      	lsls	r2, r2, #5
   16272:	4313      	orrs	r3, r2
   16274:	81a3      	strh	r3, [r4, #12]
   16276:	6560      	str	r0, [r4, #84]	; 0x54
   16278:	e7f8      	b.n	1626c <__sseek+0x18>
   1627a:	46c0      	nop			; (mov r8, r8)
   1627c:	ffffefff 	.word	0xffffefff

00016280 <__sclose>:
   16280:	b510      	push	{r4, lr}
   16282:	230e      	movs	r3, #14
   16284:	5ec9      	ldrsh	r1, [r1, r3]
   16286:	f000 f815 	bl	162b4 <_close_r>
   1628a:	bd10      	pop	{r4, pc}

0001628c <_write_r>:
   1628c:	b570      	push	{r4, r5, r6, lr}
   1628e:	0005      	movs	r5, r0
   16290:	0008      	movs	r0, r1
   16292:	0011      	movs	r1, r2
   16294:	2200      	movs	r2, #0
   16296:	4c06      	ldr	r4, [pc, #24]	; (162b0 <_write_r+0x24>)
   16298:	6022      	str	r2, [r4, #0]
   1629a:	001a      	movs	r2, r3
   1629c:	f7f0 fafa 	bl	6894 <_write>
   162a0:	1c43      	adds	r3, r0, #1
   162a2:	d103      	bne.n	162ac <_write_r+0x20>
   162a4:	6823      	ldr	r3, [r4, #0]
   162a6:	2b00      	cmp	r3, #0
   162a8:	d000      	beq.n	162ac <_write_r+0x20>
   162aa:	602b      	str	r3, [r5, #0]
   162ac:	bd70      	pop	{r4, r5, r6, pc}
   162ae:	46c0      	nop			; (mov r8, r8)
   162b0:	20003e3c 	.word	0x20003e3c

000162b4 <_close_r>:
   162b4:	2300      	movs	r3, #0
   162b6:	b570      	push	{r4, r5, r6, lr}
   162b8:	4c06      	ldr	r4, [pc, #24]	; (162d4 <_close_r+0x20>)
   162ba:	0005      	movs	r5, r0
   162bc:	0008      	movs	r0, r1
   162be:	6023      	str	r3, [r4, #0]
   162c0:	f7f0 fb22 	bl	6908 <_close>
   162c4:	1c43      	adds	r3, r0, #1
   162c6:	d103      	bne.n	162d0 <_close_r+0x1c>
   162c8:	6823      	ldr	r3, [r4, #0]
   162ca:	2b00      	cmp	r3, #0
   162cc:	d000      	beq.n	162d0 <_close_r+0x1c>
   162ce:	602b      	str	r3, [r5, #0]
   162d0:	bd70      	pop	{r4, r5, r6, pc}
   162d2:	46c0      	nop			; (mov r8, r8)
   162d4:	20003e3c 	.word	0x20003e3c

000162d8 <_fstat_r>:
   162d8:	2300      	movs	r3, #0
   162da:	b570      	push	{r4, r5, r6, lr}
   162dc:	4c06      	ldr	r4, [pc, #24]	; (162f8 <_fstat_r+0x20>)
   162de:	0005      	movs	r5, r0
   162e0:	0008      	movs	r0, r1
   162e2:	0011      	movs	r1, r2
   162e4:	6023      	str	r3, [r4, #0]
   162e6:	f7f0 fb12 	bl	690e <_fstat>
   162ea:	1c43      	adds	r3, r0, #1
   162ec:	d103      	bne.n	162f6 <_fstat_r+0x1e>
   162ee:	6823      	ldr	r3, [r4, #0]
   162f0:	2b00      	cmp	r3, #0
   162f2:	d000      	beq.n	162f6 <_fstat_r+0x1e>
   162f4:	602b      	str	r3, [r5, #0]
   162f6:	bd70      	pop	{r4, r5, r6, pc}
   162f8:	20003e3c 	.word	0x20003e3c

000162fc <_isatty_r>:
   162fc:	2300      	movs	r3, #0
   162fe:	b570      	push	{r4, r5, r6, lr}
   16300:	4c06      	ldr	r4, [pc, #24]	; (1631c <_isatty_r+0x20>)
   16302:	0005      	movs	r5, r0
   16304:	0008      	movs	r0, r1
   16306:	6023      	str	r3, [r4, #0]
   16308:	f7f0 fb06 	bl	6918 <_isatty>
   1630c:	1c43      	adds	r3, r0, #1
   1630e:	d103      	bne.n	16318 <_isatty_r+0x1c>
   16310:	6823      	ldr	r3, [r4, #0]
   16312:	2b00      	cmp	r3, #0
   16314:	d000      	beq.n	16318 <_isatty_r+0x1c>
   16316:	602b      	str	r3, [r5, #0]
   16318:	bd70      	pop	{r4, r5, r6, pc}
   1631a:	46c0      	nop			; (mov r8, r8)
   1631c:	20003e3c 	.word	0x20003e3c

00016320 <_lseek_r>:
   16320:	b570      	push	{r4, r5, r6, lr}
   16322:	0005      	movs	r5, r0
   16324:	0008      	movs	r0, r1
   16326:	0011      	movs	r1, r2
   16328:	2200      	movs	r2, #0
   1632a:	4c06      	ldr	r4, [pc, #24]	; (16344 <_lseek_r+0x24>)
   1632c:	6022      	str	r2, [r4, #0]
   1632e:	001a      	movs	r2, r3
   16330:	f7f0 faf4 	bl	691c <_lseek>
   16334:	1c43      	adds	r3, r0, #1
   16336:	d103      	bne.n	16340 <_lseek_r+0x20>
   16338:	6823      	ldr	r3, [r4, #0]
   1633a:	2b00      	cmp	r3, #0
   1633c:	d000      	beq.n	16340 <_lseek_r+0x20>
   1633e:	602b      	str	r3, [r5, #0]
   16340:	bd70      	pop	{r4, r5, r6, pc}
   16342:	46c0      	nop			; (mov r8, r8)
   16344:	20003e3c 	.word	0x20003e3c

00016348 <__malloc_lock>:
   16348:	4770      	bx	lr

0001634a <__malloc_unlock>:
   1634a:	4770      	bx	lr

0001634c <_malloc_usable_size_r>:
   1634c:	1f0b      	subs	r3, r1, #4
   1634e:	681b      	ldr	r3, [r3, #0]
   16350:	1f18      	subs	r0, r3, #4
   16352:	2b00      	cmp	r3, #0
   16354:	da01      	bge.n	1635a <_malloc_usable_size_r+0xe>
   16356:	580b      	ldr	r3, [r1, r0]
   16358:	18c0      	adds	r0, r0, r3
   1635a:	4770      	bx	lr

0001635c <_read_r>:
   1635c:	b570      	push	{r4, r5, r6, lr}
   1635e:	0005      	movs	r5, r0
   16360:	0008      	movs	r0, r1
   16362:	0011      	movs	r1, r2
   16364:	2200      	movs	r2, #0
   16366:	4c06      	ldr	r4, [pc, #24]	; (16380 <_read_r+0x24>)
   16368:	6022      	str	r2, [r4, #0]
   1636a:	001a      	movs	r2, r3
   1636c:	f7f0 fa70 	bl	6850 <_read>
   16370:	1c43      	adds	r3, r0, #1
   16372:	d103      	bne.n	1637c <_read_r+0x20>
   16374:	6823      	ldr	r3, [r4, #0]
   16376:	2b00      	cmp	r3, #0
   16378:	d000      	beq.n	1637c <_read_r+0x20>
   1637a:	602b      	str	r3, [r5, #0]
   1637c:	bd70      	pop	{r4, r5, r6, pc}
   1637e:	46c0      	nop			; (mov r8, r8)
   16380:	20003e3c 	.word	0x20003e3c
   16384:	000047a8 	.word	0x000047a8
   16388:	000049f2 	.word	0x000049f2
   1638c:	000049f2 	.word	0x000049f2
   16390:	000049f2 	.word	0x000049f2
   16394:	000049f2 	.word	0x000049f2
   16398:	000049f2 	.word	0x000049f2
   1639c:	000049f2 	.word	0x000049f2
   163a0:	000049f2 	.word	0x000049f2
   163a4:	000049f2 	.word	0x000049f2
   163a8:	000049f2 	.word	0x000049f2
   163ac:	000049f2 	.word	0x000049f2
   163b0:	000049f2 	.word	0x000049f2
   163b4:	000049f2 	.word	0x000049f2
   163b8:	000049f2 	.word	0x000049f2
   163bc:	000049f2 	.word	0x000049f2
   163c0:	000049f2 	.word	0x000049f2
   163c4:	00004790 	.word	0x00004790
   163c8:	000049f2 	.word	0x000049f2
   163cc:	000049f2 	.word	0x000049f2
   163d0:	000049f2 	.word	0x000049f2
   163d4:	000049f2 	.word	0x000049f2
   163d8:	000049f2 	.word	0x000049f2
   163dc:	000049f2 	.word	0x000049f2
   163e0:	000049f2 	.word	0x000049f2
   163e4:	000049f2 	.word	0x000049f2
   163e8:	000049f2 	.word	0x000049f2
   163ec:	000049f2 	.word	0x000049f2
   163f0:	000049f2 	.word	0x000049f2
   163f4:	000049f2 	.word	0x000049f2
   163f8:	000049f2 	.word	0x000049f2
   163fc:	000049f2 	.word	0x000049f2
   16400:	000049f2 	.word	0x000049f2
   16404:	000047a0 	.word	0x000047a0
   16408:	000049f2 	.word	0x000049f2
   1640c:	000049f2 	.word	0x000049f2
   16410:	000049f2 	.word	0x000049f2
   16414:	000049f2 	.word	0x000049f2
   16418:	000049f2 	.word	0x000049f2
   1641c:	000049f2 	.word	0x000049f2
   16420:	000049f2 	.word	0x000049f2
   16424:	000049f2 	.word	0x000049f2
   16428:	000049f2 	.word	0x000049f2
   1642c:	000049f2 	.word	0x000049f2
   16430:	000049f2 	.word	0x000049f2
   16434:	000049f2 	.word	0x000049f2
   16438:	000049f2 	.word	0x000049f2
   1643c:	000049f2 	.word	0x000049f2
   16440:	000049f2 	.word	0x000049f2
   16444:	00004798 	.word	0x00004798
   16448:	000047b0 	.word	0x000047b0
   1644c:	00004778 	.word	0x00004778
   16450:	00004788 	.word	0x00004788
   16454:	00004780 	.word	0x00004780
   16458:	0000ffff 	.word	0x0000ffff
   1645c:	0000ffff 	.word	0x0000ffff
   16460:	00000004 	.word	0x00000004
   16464:	00000005 	.word	0x00000005
   16468:	00000006 	.word	0x00000006
   1646c:	00000007 	.word	0x00000007
   16470:	00000020 	.word	0x00000020
   16474:	0000ffff 	.word	0x0000ffff
   16478:	00000022 	.word	0x00000022
   1647c:	00000023 	.word	0x00000023
   16480:	0000ffff 	.word	0x0000ffff
   16484:	0000ffff 	.word	0x0000ffff
   16488:	0000ffff 	.word	0x0000ffff
   1648c:	0000ffff 	.word	0x0000ffff
   16490:	00000008 	.word	0x00000008
   16494:	00000009 	.word	0x00000009
   16498:	0000000a 	.word	0x0000000a
   1649c:	0000000b 	.word	0x0000000b
   164a0:	0000ffff 	.word	0x0000ffff
   164a4:	0000ffff 	.word	0x0000ffff
   164a8:	0000ffff 	.word	0x0000ffff
   164ac:	0000ffff 	.word	0x0000ffff
   164b0:	00004f7a 	.word	0x00004f7a
   164b4:	00004f7a 	.word	0x00004f7a
   164b8:	00004f56 	.word	0x00004f56
   164bc:	00004f7a 	.word	0x00004f7a
   164c0:	00004f56 	.word	0x00004f56
   164c4:	00004f3c 	.word	0x00004f3c
   164c8:	00004f3c 	.word	0x00004f3c
   164cc:	00004f7a 	.word	0x00004f7a
   164d0:	00004f7a 	.word	0x00004f7a
   164d4:	00004f7a 	.word	0x00004f7a
   164d8:	00004f7a 	.word	0x00004f7a
   164dc:	00004f7a 	.word	0x00004f7a
   164e0:	00004f7a 	.word	0x00004f7a
   164e4:	00004f7a 	.word	0x00004f7a
   164e8:	00004f7a 	.word	0x00004f7a
   164ec:	00004f7a 	.word	0x00004f7a
   164f0:	00004f7a 	.word	0x00004f7a
   164f4:	00004f7a 	.word	0x00004f7a
   164f8:	00004f7a 	.word	0x00004f7a
   164fc:	00004f7a 	.word	0x00004f7a
   16500:	00004f7a 	.word	0x00004f7a
   16504:	00004f7a 	.word	0x00004f7a
   16508:	00004f7a 	.word	0x00004f7a
   1650c:	00004f7a 	.word	0x00004f7a
   16510:	00004f7a 	.word	0x00004f7a
   16514:	00004f7a 	.word	0x00004f7a
   16518:	00004f56 	.word	0x00004f56
   1651c:	00004f7a 	.word	0x00004f7a
   16520:	00004f56 	.word	0x00004f56
   16524:	00004f7a 	.word	0x00004f7a
   16528:	00004f7a 	.word	0x00004f7a
   1652c:	00004f7a 	.word	0x00004f7a
   16530:	00004f7a 	.word	0x00004f7a
   16534:	00004f7a 	.word	0x00004f7a
   16538:	00004f7a 	.word	0x00004f7a
   1653c:	00004f7a 	.word	0x00004f7a
   16540:	00004f7a 	.word	0x00004f7a
   16544:	00004f7a 	.word	0x00004f7a
   16548:	00004f7a 	.word	0x00004f7a
   1654c:	00004f7a 	.word	0x00004f7a
   16550:	00004f7a 	.word	0x00004f7a
   16554:	00004f7a 	.word	0x00004f7a
   16558:	00004f7a 	.word	0x00004f7a
   1655c:	00004f7a 	.word	0x00004f7a
   16560:	00004f7a 	.word	0x00004f7a
   16564:	00004f7a 	.word	0x00004f7a
   16568:	00004f7a 	.word	0x00004f7a
   1656c:	00004f7a 	.word	0x00004f7a
   16570:	00004f7a 	.word	0x00004f7a
   16574:	00004f7a 	.word	0x00004f7a
   16578:	00004f7a 	.word	0x00004f7a
   1657c:	00004f7a 	.word	0x00004f7a
   16580:	00004f7a 	.word	0x00004f7a
   16584:	00004f7a 	.word	0x00004f7a
   16588:	00004f7a 	.word	0x00004f7a
   1658c:	00004f7a 	.word	0x00004f7a
   16590:	00004f7a 	.word	0x00004f7a
   16594:	00004f7a 	.word	0x00004f7a
   16598:	00004f7a 	.word	0x00004f7a
   1659c:	00004f7a 	.word	0x00004f7a
   165a0:	00004f7a 	.word	0x00004f7a
   165a4:	00004f7a 	.word	0x00004f7a
   165a8:	00004f7a 	.word	0x00004f7a
   165ac:	00004f7a 	.word	0x00004f7a
   165b0:	00004f56 	.word	0x00004f56
   165b4:	00004f56 	.word	0x00004f56
   165b8:	00004f5e 	.word	0x00004f5e
   165bc:	00004f5e 	.word	0x00004f5e
   165c0:	00004f5e 	.word	0x00004f5e
   165c4:	00004f5e 	.word	0x00004f5e
   165c8:	42000000 	.word	0x42000000
   165cc:	42000400 	.word	0x42000400
   165d0:	42000800 	.word	0x42000800
   165d4:	42000c00 	.word	0x42000c00
   165d8:	42001000 	.word	0x42001000
   165dc:	43000400 	.word	0x43000400
   165e0:	00005b72 	.word	0x00005b72
   165e4:	00005b6e 	.word	0x00005b6e
   165e8:	00005b6e 	.word	0x00005b6e
   165ec:	00005bd4 	.word	0x00005bd4
   165f0:	00005bd4 	.word	0x00005bd4
   165f4:	00005b88 	.word	0x00005b88
   165f8:	00005b78 	.word	0x00005b78
   165fc:	00005b8e 	.word	0x00005b8e
   16600:	00005bc2 	.word	0x00005bc2
   16604:	00005cf0 	.word	0x00005cf0
   16608:	00005cd0 	.word	0x00005cd0
   1660c:	00005cd0 	.word	0x00005cd0
   16610:	00005d6a 	.word	0x00005d6a
   16614:	00005ce2 	.word	0x00005ce2
   16618:	00005cfe 	.word	0x00005cfe
   1661c:	00005cd4 	.word	0x00005cd4
   16620:	00005d0c 	.word	0x00005d0c
   16624:	00005d4e 	.word	0x00005d4e
   16628:	00005da8 	.word	0x00005da8
   1662c:	00005dea 	.word	0x00005dea
   16630:	00005dea 	.word	0x00005dea
   16634:	00005dea 	.word	0x00005dea
   16638:	00005d9a 	.word	0x00005d9a
   1663c:	00005db6 	.word	0x00005db6
   16640:	00005d8c 	.word	0x00005d8c
   16644:	00005dc4 	.word	0x00005dc4
   16648:	00005dda 	.word	0x00005dda
   1664c:	000064e6 	.word	0x000064e6
   16650:	000065dc 	.word	0x000065dc
   16654:	000065e6 	.word	0x000065e6
   16658:	000065f0 	.word	0x000065f0
   1665c:	000065fa 	.word	0x000065fa
   16660:	0000662c 	.word	0x0000662c
   16664:	00006636 	.word	0x00006636
   16668:	00006640 	.word	0x00006640
   1666c:	0000664a 	.word	0x0000664a
   16670:	00006654 	.word	0x00006654
   16674:	42002000 	.word	0x42002000
   16678:	42002400 	.word	0x42002400
   1667c:	42002800 	.word	0x42002800
   16680:	42002c00 	.word	0x42002c00
   16684:	43000800 	.word	0x43000800
   16688:	00000002 	.word	0x00000002
   1668c:	00000100 	.word	0x00000100
   16690:	00000002 	.word	0x00000002
   16694:	00000200 	.word	0x00000200
   16698:	00000002 	.word	0x00000002
   1669c:	00000400 	.word	0x00000400
   166a0:	00000002 	.word	0x00000002
   166a4:	00000800 	.word	0x00000800
   166a8:	00000003 	.word	0x00000003
   166ac:	00000004 	.word	0x00000004
   166b0:	78323025 	.word	0x78323025
   166b4:	ff00202c 	.word	0xff00202c
   166b8:	78323025 	.word	0x78323025
   166bc:	ffffff00 	.word	0xffffff00
   166c0:	6b636150 	.word	0x6b636150
   166c4:	72207465 	.word	0x72207465
   166c8:	69656365 	.word	0x69656365
   166cc:	20646576 	.word	0x20646576
   166d0:	6d6f7266 	.word	0x6d6f7266
   166d4:	68746f20 	.word	0x68746f20
   166d8:	53207265 	.word	0x53207265
   166dc:	6372756f 	.word	0x6372756f
   166e0:	41502065 	.word	0x41502065
   166e4:	4449204e 	.word	0x4449204e
   166e8:	30203a20 	.word	0x30203a20
   166ec:	25782578 	.word	0x25782578
   166f0:	000a0d78 	.word	0x000a0d78
   166f4:	626d756e 	.word	0x626d756e
   166f8:	664f7265 	.word	0x664f7265
   166fc:	65747942 	.word	0x65747942
   16700:	00000073 	.word	0x00000073
   16704:	732f2e2e 	.word	0x732f2e2e
   16708:	412f6372 	.word	0x412f6372
   1670c:	742f4653 	.word	0x742f4653
   16710:	64726968 	.word	0x64726968
   16714:	74726170 	.word	0x74726170
   16718:	69772f79 	.word	0x69772f79
   1671c:	656c6572 	.word	0x656c6572
   16720:	4c2f7373 	.word	0x4c2f7373
   16724:	5f61526f 	.word	0x5f61526f
   16728:	2f503250 	.word	0x2f503250
   1672c:	76726573 	.word	0x76726573
   16730:	73656369 	.word	0x73656369
   16734:	7364702f 	.word	0x7364702f
   16738:	6372732f 	.word	0x6372732f
   1673c:	2f766e2f 	.word	0x2f766e2f
   16740:	764e5f44 	.word	0x764e5f44
   16744:	0000632e 	.word	0x0000632e
   16748:	72646461 	.word	0x72646461
   1674c:	20737365 	.word	0x20737365
   16750:	44203d3c 	.word	0x44203d3c
   16754:	5f564e5f 	.word	0x5f564e5f
   16758:	4f4d454d 	.word	0x4f4d454d
   1675c:	455f5952 	.word	0x455f5952
   16760:	0000444e 	.word	0x0000444e
   16764:	64646128 	.word	0x64646128
   16768:	73736572 	.word	0x73736572
   1676c:	6e202b20 	.word	0x6e202b20
   16770:	65626d75 	.word	0x65626d75
   16774:	42664f72 	.word	0x42664f72
   16778:	73657479 	.word	0x73657479
   1677c:	3d3c2029 	.word	0x3d3c2029
   16780:	5f442820 	.word	0x5f442820
   16784:	4d5f564e 	.word	0x4d5f564e
   16788:	524f4d45 	.word	0x524f4d45
   1678c:	4e455f59 	.word	0x4e455f59
   16790:	202b2044 	.word	0x202b2044
   16794:	00295531 	.word	0x00295531
   16798:	66666f28 	.word	0x66666f28
   1679c:	20746573 	.word	0x20746573
   167a0:	756e202b 	.word	0x756e202b
   167a4:	7265626d 	.word	0x7265626d
   167a8:	7942664f 	.word	0x7942664f
   167ac:	29736574 	.word	0x29736574
   167b0:	203d3c20 	.word	0x203d3c20
   167b4:	564e5f44 	.word	0x564e5f44
   167b8:	4345535f 	.word	0x4345535f
   167bc:	5f524f54 	.word	0x5f524f54
   167c0:	455a4953 	.word	0x455a4953
   167c4:	ffffff00 	.word	0xffffff00

000167c8 <__func__.13275>:
   167c8:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

000167d8 <__func__.13288>:
   167d8:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

000167e8 <__func__.13300>:
   167e8:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   167f8:	706d495f ffff006c                       _Impl...

00016800 <__func__.13313>:
   16800:	706d6f43 44657261 00617461 68636163     CompareData.cach
   16810:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   16820:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   16830:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   16840:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   16850:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   16860:	68636163 6c3e2d65 42747361 6b636f6c     cache->lastBlock
   16870:	203d2120 30307830 00003030 732f2e2e      != 0x0000..../s
   16880:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   16890:	69772f79 656c6572 4c2f7373 5f61526f     y/wireless/LoRa_
   168a0:	2f503250 76726573 73656369 7364702f     P2P/services/pds
   168b0:	6372732f 2f766e2f 764e5f53 6d61532d     /src/nv/S_Nv-Sam
   168c0:	2e313252 ffff0063 20646928 30203d21     R21.c...(id != 0
   168d0:	26202975 69282026 203c2064 30467830     u) && (id < 0xF0
   168e0:	29753030 20262620 65746928 6e654c6d     00u) && (itemLen
   168f0:	20687467 4d203d3c 495f5841 5f4d4554     gth <= MAX_ITEM_
   16900:	474e454c 00294854 21206469 7530203d     LENGTH).id != 0u
   16910:	ffffff00 20646928 30203d21 26202975     ....(id != 0u) &
   16920:	70282026 61746144 203d2120 4c4c554e     & (pData != NULL
   16930:	ffff0029                                )...

00016934 <__func__.13289>:
   16934:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   16944:	69467265 00646572                       erFired.

0001694c <__func__.13325>:
   1694c:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

0001695c <__func__.13332>:
   1695c:	61657243 74496574 61436d65 00656863     CreateItemCache.

0001696c <__func__.13452>:
   1696c:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

0001697c <__func__.13472>:
   1697c:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   1698c:	65646565 ffff0064                       eeded...

00016994 <__func__.13479>:
   16994:	706d6f43 49746361 006d6574              CompactItem.

000169a0 <__func__.13513>:
   169a0:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   169b0:	ff006c70                                pl..

000169b4 <__func__.13526>:
   169b4:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

000169c4 <__func__.13537>:
   169c4:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

000169d4 <__func__.13542>:
   169d4:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   169e4:	6c706d49 ffffff00 20553028 69203d21     Impl....(0U != i
   169f4:	446d6574 72637365 6574692e 7a69536d     temDescr.itemSiz
   16a04:	26202965 4e282026 204c4c55 69203d21     e) && (NULL != i
   16a14:	446d6574 72637365 6574692e 7461446d     temDescr.itemDat
   16a24:	00002961 732f2e2e 412f6372 742f4653     a)..../src/ASF/t
   16a34:	64726968 74726170 69772f79 656c6572     hirdparty/wirele
   16a44:	4c2f7373 5f61526f 2f503250 76726573     ss/LoRa_P2P/serv
   16a54:	73656369 7364702f 6372732f 2f6c772f     ices/pds/src/wl/
   16a64:	64506c77 74614473 72655361 2e726576     wlPdsDataServer.
   16a74:	00000063 4e5f5328 65525f76 6e727574     c...(S_Nv_Return
   16a84:	756c6156 69445f65 746f4e64 73697845     Value_DidNotExis
   16a94:	3d3d2074 74657220 7c7c2029 5f532820     t == ret) || (S_
   16aa4:	525f764e 72757465 6c61566e 4f5f6575     Nv_ReturnValue_O
   16ab4:	3d3d206b 74657220 ffff0029              k == ret)...

00016ac0 <__func__.13202>:
   16ac0:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   16ad0:	646e6148 0072656c                       Handler.

00016ad8 <__func__.13222>:
   16ad8:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....
   16ae8:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   16af8:	61566e72 5f65756c 00006b4f              rnValue_Ok..

00016b04 <mySecurityKey>:
   16b04:	03020100 07060504 0b0a0908 0f0e0d0c     ................
   16b14:	000099cc 000099dc 000099e2 000099e8     ................
   16b24:	000099ee 000099f4 000099fa 00009a00     ................
   16b34:	00009a06 00009a0c 00009a12 00009a18     ................
   16b44:	00009a1e 00009a24 00009a2a 00009a30     ....$...*...0...
   16b54:	00009a36 00009a3c 00009a42 00009a48     6...<...B...H...
   16b64:	00009a4e 00009a54 00009a5a 00009a60     N...T...Z...`...
   16b74:	00009a66 00009a6c 00009bb0 00009b10     f...l...........
   16b84:	00009b90 00009bb0 00009b90 00009bb0     ................
   16b94:	00009bb0 00009bb0 00009b10 00009bb0     ................
   16ba4:	00009bb0 00009bb0 00009bb0 00009bb0     ................
   16bb4:	00009bb0 00009bb0 00009bd8 0000a4c6     ................
   16bc4:	0000a54e 0000a6ae 0000a6ae 0000a6ae     N...............
   16bd4:	0000a6ae 0000a4cc 0000a6ae 0000a6ae     ................
   16be4:	0000a6ae 0000a6ae 0000a6ae 0000a6ae     ................
   16bf4:	0000a6ae 0000a6ae 0000a6ae 0000a5e8     ................
   16c04:	0000a660 0000a6ae 0000a6ae 0000a6ae     `...............
   16c14:	0000a6ae 0000a648                       ....H...

00016c1c <AdvChannels433>:
   16c1c:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   16c2c:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   16c3c:	ff0c0101                                ....

00016c40 <AdvChannels868>:
   16c40:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   16c50:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   16c60:	ff100101                                ....

00016c64 <DefaultChannels433>:
   16c64:	50015001 ffff5001                       .P.P.P..

00016c6c <DefaultChannels868>:
   16c6c:	50015001 ffff5001                       .P.P.P..

00016c74 <SubBandDutyCycle868>:
   16c74:	006403e8 03e80064 0064000a              ..d.d.....d.

00016c80 <SubBandParams433>:
   16c80:	19cf0e40 19ea8580 00000000              @...........

00016c8c <SubBandParams868>:
   16c8c:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   16c9c:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   16cac:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   16cbc:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   16ccc:	33db2580 00000000                       .%.3....

00016cd4 <AdvChannels923JP>:
   16cd4:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   16ce4:	3709f740 ff100101                       @..7....

00016cec <DefaultChannels923JP>:
   16cec:	50015001                                .P.P

00016cf0 <SubBandDutyCycleJP923>:
   16cf0:	000a0064                                d...

00016cf4 <SubBandParamsJP923>:
   16cf4:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   16d04:	37502800 00000000                       .(P7....

00016d0c <AdvChannels920KR>:
   16d0c:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   16d1c:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   16d2c:	ff0e0100                                ....

00016d30 <DefaultChannels920KR>:
   16d30:	50015001 ffff5001                       .P.P.P..

00016d38 <taskHandlers>:
   16d38:	0000bee1 0000d3c9 0000c9dd 000088c9     ................
   16d48:	00006ff5                                .o..

00016d4c <tc_interrupt_vectors.13447>:
   16d4c:	00151211 ffffff00                       ........

00016d54 <lorawanHandlers>:
   16d54:	0000c8a1 0000c7b5 0000c965 fffffffd     ........e.......

00016d64 <radioTaskHandlers>:
   16d64:	0000dfa9 0000e0a9 0000dde5 0000da1d     ................
   16d74:	00011a9d                                ....

00016d78 <FskSyncWordBuff>:
   16d78:	02c194c1                                         ...

00016d7b <macEndDevCmdInputLen>:
   16d7b:	04010402 01010500 05000004              ............

00016d87 <macEndDevCmdReplyLen>:
   16d87:	02010201 01010203 01000002 02020000     ................
   16d97:	0a080200                                         ..

00016d99 <maxEIRPTable>:
   16d99:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   16da9:	ccffffff 9c000128 ae000128 f0000128     ....(...(...(...
   16db9:	ae000127 92000128 ae000128 f0000128     '...(...(...(...
   16dc9:	9c000127 9c000128 92000128 f0000128     '...(...(...(...
   16dd9:	f8000127 f8000127 f8000127 b4000127     '...'...'...'...
   16de9:	9c000128 9c000128 70000128 54000128     (...(...(..p(..T
   16df9:	70000129 92000128 70000128 54000128     )..p(...(..p(..T
   16e09:	9c000129 9c000128 92000128 54000128     )...(...(...(..T
   16e19:	f8000129 f8000127 f8000127 5e000127     )...'...'...'..^
   16e29:	4c000129 9c00012c 9c00012b 9a00012b     )..L,...+...+...
   16e39:	3e00012b 3e00012c 3400012c 9a00012c     +..>,..>,..4,...
   16e49:	3e00012b 3400012c 3e00012c 9a00012c     +..>,..4,..>,...
   16e59:	4400012b 4400012c 4400012c d400012c     +..D,..D,..D,...
   16e69:	1c00012c fe00013a b8000139 d6000139     ,...:...9...9...
   16e79:	b8000138 f0000139 b8000139 d6000139     8...9...9...9...
   16e89:	fe000138 fe000139 f0000139 d6000139     8...9...9...9...
   16e99:	ce000138 ce000138 ce000138 34000138     8...8...8...8..4
   16ea9:	7c00013c 3c000142 3c000141 38000141     <..|B..<A..<A..8
   16eb9:	54000141 54000142 46000142 38000142     A..TB..TB..FB..8
   16ec9:	54000141 46000142 54000142 38000142     A..TB..FB..TB..8
   16ed9:	5c000141 5c000142 5c000142 60000142     A..\B..\B..\B..`
   16ee9:	2c000144 6e756620 6f697463 00203a6e     D.., function: .
   16ef9:	65737361 6f697472 2522206e 66202273     assertion "%s" f
   16f09:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
   16f19:	696c202c 2520656e 25732564 20000a73              , line %d%s%s..

00016f28 <_global_impure_ptr>:
   16f28:	20000020 2b302d23 6c680020 6665004c      .. #-0+ .hlL.ef
   16f38:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   16f48:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   16f58:	64636261 ff006665                       abcdef..

00016f60 <__sf_fake_stderr>:
	...

00016f80 <__sf_fake_stdin>:
	...

00016fa0 <__sf_fake_stdout>:
	...

00016fc0 <_init>:
   16fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16fc2:	46c0      	nop			; (mov r8, r8)
   16fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   16fc6:	bc08      	pop	{r3}
   16fc8:	469e      	mov	lr, r3
   16fca:	4770      	bx	lr

00016fcc <__init_array_start>:
   16fcc:	00004429 	.word	0x00004429

00016fd0 <_fini>:
   16fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16fd2:	46c0      	nop			; (mov r8, r8)
   16fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   16fd6:	bc08      	pop	{r3}
   16fd8:	469e      	mov	lr, r3
   16fda:	4770      	bx	lr

00016fdc <__fini_array_start>:
   16fdc:	00004401 	.word	0x00004401
